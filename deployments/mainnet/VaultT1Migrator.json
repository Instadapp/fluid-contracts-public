{
  "address": "0x692f94365c23FDB0d3e8b52d67f2E052AB59fE28",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "fla_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "weth_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "oldFactory_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "newFactory_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FluidVaultT1Migrator__InvalidOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FluidVaultT1Migrator__NotAllowed",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "vaultId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nft",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        }
      ],
      "name": "Migrated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "route",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "SetFlashloanConfig",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FLA",
      "outputs": [
        {
          "internalType": "contract InstaFlashInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VAULT_T1_FACTORY_NEW",
      "outputs": [
        {
          "internalType": "contract IFluidVaultFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VAULT_T1_FACTORY_OLD",
      "outputs": [
        {
          "internalType": "contract IFluidVaultFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "contract IWETH9",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "slot_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "key_",
          "type": "uint256"
        }
      ],
      "name": "calculateStorageSlotUintMapping",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "premiums",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "executeOperation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "flashloanConfig",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "route",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vaultFactory_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "vaultId_",
          "type": "uint256"
        }
      ],
      "name": "getVaultAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "vault_",
          "type": "address"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "route_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "setFlashloanConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets_",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas_",
          "type": "bytes[]"
        }
      ],
      "name": "spell",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "nftId_",
          "type": "uint256"
        }
      ],
      "name": "vaultByNftId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "vaultId_",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "vault_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vault_",
          "type": "address"
        }
      ],
      "name": "vaultConfig",
      "outputs": [
        {
          "internalType": "address",
          "name": "supply_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "borrow_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tokens_",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts_",
          "type": "uint256[]"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "args": [
    "0x9800020b610194dBa52CF606E8Aa142F9F256166",
    "0xAB50Dd1C57938218627Df2311ef65b4e2e84aF48",
    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2",
    "0x3B38099b79a143038a3935C619B2A3eA70438C60",
    "0x324c5Dc1fC42c7a4D43d92df1eBA58a54d13Bf2d"
  ],
  "numDeployments": 1,
  "solcInputHash": "b4b9c122a81dcb4a1780c3761f07caa2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fla_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"oldFactory_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"newFactory_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FluidVaultT1Migrator__InvalidOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FluidVaultT1Migrator__NotAllowed\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"vaultId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nft\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"name\":\"Migrated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"route\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"SetFlashloanConfig\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FLA\",\"outputs\":[{\"internalType\":\"contract InstaFlashInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT_T1_FACTORY_NEW\",\"outputs\":[{\"internalType\":\"contract IFluidVaultFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT_T1_FACTORY_OLD\",\"outputs\":[{\"internalType\":\"contract IFluidVaultFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH9\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"slot_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"key_\",\"type\":\"uint256\"}],\"name\":\"calculateStorageSlotUintMapping\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"premiums\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"flashloanConfig\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"route\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultFactory_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vaultId_\",\"type\":\"uint256\"}],\"name\":\"getVaultAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"route_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"setFlashloanConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets_\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas_\",\"type\":\"bytes[]\"}],\"name\":\"spell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"nftId_\",\"type\":\"uint256\"}],\"name\":\"vaultByNftId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"vaultId_\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vault_\",\"type\":\"address\"}],\"name\":\"vaultConfig\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"supply_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrow_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/migration/main.sol\":\"VaultT1Migrator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"contracts/periphery/migration/main.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { Owned } from \\\"solmate/src/auth/Owned.sol\\\";\\n\\nimport { IFluidVaultT1 } from \\\"../../protocols/vault/interfaces/iVaultT1.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport { IERC721 } from \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IWETH9 } from \\\"../../protocols/lending/interfaces/external/iWETH9.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { IFluidVaultFactory } from \\\"../../protocols/vault/interfaces/iVaultFactory.sol\\\";\\n\\ninterface InstaFlashInterface {\\n    function flashLoan(address[] memory tokens, uint256[] memory amts, uint route, bytes memory data, bytes memory extraData) external;\\n}\\n\\ninterface InstaFlashReceiverInterface {\\n    function executeOperation(\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata premiums,\\n        address initiator,\\n        bytes calldata _data\\n    ) external returns (bool);\\n}\\n\\ncontract VaultT1Migrator is Owned {\\n    using SafeERC20 for IERC20;\\n\\n    uint internal constant X32 = 0xffffffff;\\n    address internal constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    IFluidVaultFactory immutable public VAULT_T1_FACTORY_OLD;\\n    IFluidVaultFactory immutable public VAULT_T1_FACTORY_NEW;\\n\\n    InstaFlashInterface immutable public FLA;\\n    IWETH9 immutable public WETH;\\n\\n    struct FlashloanConfig {\\n        uint256 amount;\\n        uint256 route;\\n    }\\n\\n    mapping (address => FlashloanConfig) public flashloanConfig;\\n\\n    error FluidVaultT1Migrator__InvalidOperation();\\n    error FluidVaultT1Migrator__NotAllowed();\\n\\n    event Migrated(\\n        uint256 indexed vaultId,\\n        address indexed owner,\\n        uint256 indexed nft,\\n        uint256 collateral,\\n        uint256 debt\\n    );\\n\\n    event Withdraw(\\n        address indexed to,\\n        address indexed token,\\n        uint256 amount\\n    );\\n\\n    event SetFlashloanConfig (\\n        address indexed token, \\n        uint256 indexed route,\\n        uint256 amount\\n    );\\n\\n    constructor(\\n        address owner_,\\n        address fla_,\\n        address weth_,\\n        address oldFactory_,\\n        address newFactory_\\n    ) Owned(owner_) {\\n        FLA = InstaFlashInterface(fla_);\\n        WETH = IWETH9(weth_);\\n\\n        VAULT_T1_FACTORY_OLD = IFluidVaultFactory(oldFactory_);\\n        VAULT_T1_FACTORY_NEW = IFluidVaultFactory(newFactory_);\\n    }\\n\\n    function setFlashloanConfig(address token_, uint256 route_, uint256 amount_) public onlyOwner {\\n        flashloanConfig[token_] = FlashloanConfig({\\n            amount: amount_,\\n            route: route_\\n        });\\n        emit SetFlashloanConfig(token_, route_, amount_);\\n    }\\n\\n    function spell(address[] memory targets_, bytes[] memory calldatas_) public onlyOwner {\\n        for (uint256 i = 0; i < targets_.length; i++) {\\n            Address.functionDelegateCall(targets_[i], calldatas_[i]);\\n        }\\n    }\\n\\n    function withdraw(address to_, address[] memory tokens_, uint256[] memory amounts_) public onlyOwner {\\n        for (uint i = 0; i < tokens_.length; i++) {\\n            if (tokens_[i] == ETH_ADDRESS) {\\n                Address.sendValue(payable(to_), amounts_[i]);\\n            } else {\\n                IERC20(tokens_[i]).safeTransfer(to_, amounts_[i]);\\n            }\\n            emit Withdraw(to_, tokens_[i], amounts_[i]);\\n        }\\n    }\\n\\n    struct MigratorParams {\\n        uint256 nftId;\\n        address owner;\\n        address supply;\\n        address borrow;\\n        uint256 vaultId;\\n        address vaultFrom;\\n        address vaultTo;\\n        uint256 supplyAmount;\\n        uint256 borrowAmount;\\n        int256 withdrawAmount;\\n        int256 paybackAmount;\\n        uint256 route;\\n    }\\n\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4) {\\n        if (msg.sender != address(VAULT_T1_FACTORY_OLD)) revert FluidVaultT1Migrator__NotAllowed();\\n        if (operator != from) revert FluidVaultT1Migrator__NotAllowed();\\n\\n        MigratorParams memory params_;\\n        params_.nftId = tokenId;\\n        params_.owner = from;\\n\\n        (params_.vaultId, params_.vaultFrom) = vaultByNftId(tokenId);\\n        (params_.supply, params_.borrow) = vaultConfig(params_.vaultFrom);\\n        params_.vaultTo = getVaultAddress(address(VAULT_T1_FACTORY_NEW), params_.vaultId);\\n\\n        if (data.length > 0) {\\n            (params_.route, params_.borrowAmount) = abi.decode(data, (uint256, uint256));\\n        } else {\\n            FlashloanConfig memory c_ = flashloanConfig[params_.borrow];\\n            (params_.route, params_.borrowAmount) = (c_.route, c_.amount);\\n        }\\n\\n        if (params_.route == 0) revert FluidVaultT1Migrator__NotAllowed();\\n\\n        address[] memory tokens = new address[](1);\\n        uint256[] memory amts = new uint256[](1);\\n\\n        // Take flashloan in borrow token of the vault\\n        tokens[0] = params_.borrow == ETH_ADDRESS ? address(WETH) : params_.borrow;\\n        amts[0] = params_.borrowAmount * 150 / 100; // increase by 50%\\n\\n        bytes memory data_ = abi.encode(params_);\\n\\n        FLA.flashLoan(tokens, amts, params_.route, data_, abi.encode());\\n\\n        if (VAULT_T1_FACTORY_NEW.balanceOf(address(this)) > 0) revert FluidVaultT1Migrator__NotAllowed();\\n        \\n        return this.onERC721Received.selector;\\n    }\\n\\n    function executeOperation(\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata premiums,\\n        address initiator,\\n        bytes calldata _data\\n    ) external returns (bool) {\\n        if (msg.sender != address(FLA)) revert FluidVaultT1Migrator__NotAllowed();\\n        if (initiator != address(this)) revert FluidVaultT1Migrator__NotAllowed();\\n        MigratorParams memory params_ = abi.decode(_data, (MigratorParams));\\n\\n        uint256 value_;\\n        {\\n            if (params_.borrow != ETH_ADDRESS) {\\n                IERC20(params_.borrow).safeApprove(params_.vaultFrom, 0);\\n                IERC20(params_.borrow).safeApprove(params_.vaultFrom, params_.borrowAmount);\\n                value_ = 0;\\n            } else {\\n                WETH.withdraw(params_.borrowAmount);\\n                value_ = params_.borrowAmount;\\n            }\\n\\n            (\\n                ,\\n                params_.withdrawAmount,\\n                params_.paybackAmount\\n            ) = IFluidVaultT1(params_.vaultFrom).operate{value: value_}(\\n                params_.nftId,\\n                type(int256).min,\\n                type(int256).min,\\n                address(this)\\n            );\\n\\n            params_.withdrawAmount = -params_.withdrawAmount;\\n            params_.paybackAmount = -params_.paybackAmount;\\n            params_.supplyAmount = uint256(params_.withdrawAmount);\\n            params_.borrowAmount = uint256(params_.paybackAmount);\\n        }\\n\\n        {\\n            if (params_.supply != ETH_ADDRESS) {\\n                IERC20(params_.supply).safeApprove(params_.vaultTo, 0);\\n                IERC20(params_.supply).safeApprove(params_.vaultTo, params_.supplyAmount);\\n                value_ = 0;\\n            } else {\\n                value_ = params_.supplyAmount;\\n            }\\n\\n            (\\n                uint256 nftId_,\\n                ,\\n\\n            ) = IFluidVaultT1(params_.vaultTo).operate{value: value_}(\\n                0,\\n                params_.withdrawAmount,\\n                params_.paybackAmount,\\n                address(this)\\n\\n            );\\n\\n            IERC721(VAULT_T1_FACTORY_NEW).transferFrom(address(this), params_.owner, nftId_);\\n        }\\n\\n        uint256 flashloanAmount_ = amounts[0] + premiums[0] + 10;\\n        if (params_.borrow == ETH_ADDRESS) {\\n            uint256 wethBalance_ = WETH.balanceOf(address(this));\\n            if (wethBalance_ < flashloanAmount_) {\\n                WETH.deposit{value: flashloanAmount_ - wethBalance_}();\\n            }\\n        }\\n        IERC20(assets[0]).safeTransfer(msg.sender, flashloanAmount_);\\n\\n        emit Migrated(\\n            params_.vaultId,\\n            params_.owner,\\n            params_.nftId,\\n            uint256(-params_.withdrawAmount),\\n            uint256(-params_.paybackAmount)\\n        );\\n\\n        return true;\\n    }\\n\\n    function vaultByNftId(uint nftId_) public view returns (uint256 vaultId_, address vault_) {\\n        uint tokenConfig_ = VAULT_T1_FACTORY_OLD.readFromStorage(calculateStorageSlotUintMapping(3, nftId_));\\n        vaultId_ = (tokenConfig_ >> 192) & X32;\\n        vault_ = getVaultAddress(address(VAULT_T1_FACTORY_OLD), vaultId_);\\n    }\\n\\n    function vaultConfig(address vault_) public view returns(address supply_, address borrow_) {\\n        IFluidVaultT1.ConstantViews memory constants_ = IFluidVaultT1(vault_).constantsView();\\n\\n        supply_ = constants_.supplyToken;\\n        borrow_ = constants_.borrowToken;\\n    }\\n\\n    function calculateStorageSlotUintMapping(uint256 slot_, uint key_) public pure returns (bytes32) {\\n        return keccak256(abi.encode(key_, slot_));\\n    }\\n\\n    function getVaultAddress(address vaultFactory_, uint256 vaultId_) public pure returns (address vault_) {\\n        // @dev based on https://ethereum.stackexchange.com/a/61413\\n        bytes memory data;\\n        if (vaultId_ == 0x00) {\\n            // nonce of smart contract always starts with 1. so, with nonce 0 there won't be any deployment\\n            return address(0);\\n        } else if (vaultId_ <= 0x7f) {\\n            data = abi.encodePacked(bytes1(0xd6), bytes1(0x94), address(vaultFactory_), uint8(vaultId_));\\n        } else if (vaultId_ <= 0xff) {\\n            data = abi.encodePacked(bytes1(0xd7), bytes1(0x94), address(vaultFactory_), bytes1(0x81), uint8(vaultId_));\\n        } else if (vaultId_ <= 0xffff) {\\n            data = abi.encodePacked(bytes1(0xd8), bytes1(0x94), address(vaultFactory_), bytes1(0x82), uint16(vaultId_));\\n        } else if (vaultId_ <= 0xffffff) {\\n            data = abi.encodePacked(bytes1(0xd9), bytes1(0x94), address(vaultFactory_), bytes1(0x83), uint24(vaultId_));\\n        } else {\\n            data = abi.encodePacked(bytes1(0xda), bytes1(0x94), address(vaultFactory_), bytes1(0x84), uint32(vaultId_));\\n        }\\n\\n        return address(uint160(uint256(keccak256(data))));\\n    }\\n\\n    receive() payable external {}\\n}\",\"keccak256\":\"0xeddda2bbce16e84c730f1690a9c8ff736cdc450efd35f9b4cd2e2b38c73e4c7f\",\"license\":\"BUSL-1.1\"},\"contracts/protocols/lending/interfaces/external/iWETH9.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH9 is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0x3e7e28357eb8914d51f7672a10d9ebe363e1aa36ccee6d928c17ac1ad7e4f7db\",\"license\":\"MIT\"},\"contracts/protocols/vault/interfaces/iVaultFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nimport { IERC721Enumerable } from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface IFluidVaultFactory is IERC721Enumerable {\\n    /// @notice Minting an NFT Vault for the user\\n    function mint(uint256 vaultId_, address user_) external returns (uint256 tokenId_);\\n\\n    /// @notice returns owner of Vault which is also an NFT\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /// @notice Global auth is auth for all vaults\\n    function isGlobalAuth(address auth_) external view returns (bool);\\n\\n    /// @notice Vault auth is auth for a specific vault\\n    function isVaultAuth(address auth_, address vault_) external view returns (bool);\\n\\n    /// @notice Total vaults deployed.\\n    function totalVaults() external view returns (uint256);\\n\\n    /// @notice Compute vaultAddress\\n    function getVaultAddress(uint256 vaultId) external view returns (address);\\n\\n    /// @notice read uint256 `result_` for a storage `slot_` key\\n    function readFromStorage(bytes32 slot_) external view returns (uint256 result_);\\n}\\n\",\"keccak256\":\"0xd5c71c9e23b9d4a303f204eb3f2f4e5f1673846423f99e9e5aaa1d7020df632b\",\"license\":\"MIT\"},\"contracts/protocols/vault/interfaces/iVaultT1.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\ninterface IFluidVaultT1 {\\n    /// @notice returns the vault id\\n    function VAULT_ID() external view returns (uint256);\\n\\n    /// @notice reads uint256 data `result_` from storage at a bytes32 storage `slot_` key.\\n    function readFromStorage(bytes32 slot_) external view returns (uint256 result_);\\n\\n    struct ConstantViews {\\n        address liquidity;\\n        address factory;\\n        address adminImplementation;\\n        address secondaryImplementation;\\n        address supplyToken;\\n        address borrowToken;\\n        uint8 supplyDecimals;\\n        uint8 borrowDecimals;\\n        uint vaultId;\\n        bytes32 liquiditySupplyExchangePriceSlot;\\n        bytes32 liquidityBorrowExchangePriceSlot;\\n        bytes32 liquidityUserSupplySlot;\\n        bytes32 liquidityUserBorrowSlot;\\n    }\\n\\n    /// @notice returns all Vault constants\\n    function constantsView() external view returns (ConstantViews memory constantsView_);\\n\\n    /// @notice fetches the latest user position after a liquidation\\n    function fetchLatestPosition(\\n        int256 positionTick_,\\n        uint256 positionTickId_,\\n        uint256 positionRawDebt_,\\n        uint256 tickData_\\n    )\\n        external\\n        view\\n        returns (\\n            int256, // tick\\n            uint256, // raw debt\\n            uint256, // raw collateral\\n            uint256, // branchID_\\n            uint256 // branchData_\\n        );\\n\\n    /// @notice calculates the updated vault exchange prices\\n    function updateExchangePrices(\\n        uint256 vaultVariables2_\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 liqSupplyExPrice_,\\n            uint256 liqBorrowExPrice_,\\n            uint256 vaultSupplyExPrice_,\\n            uint256 vaultBorrowExPrice_\\n        );\\n\\n    /// @notice calculates the updated vault exchange prices and writes them to storage\\n    function updateExchangePricesOnStorage()\\n        external\\n        returns (\\n            uint256 liqSupplyExPrice_,\\n            uint256 liqBorrowExPrice_,\\n            uint256 vaultSupplyExPrice_,\\n            uint256 vaultBorrowExPrice_\\n        );\\n\\n    /// @notice returns the liquidity contract address\\n    function LIQUIDITY() external view returns (address);\\n\\n    function operate(\\n        uint256 nftId_, // if 0 then new position\\n        int256 newCol_, // if negative then withdraw\\n        int256 newDebt_, // if negative then payback\\n        address to_ // address at which the borrow & withdraw amount should go to. If address(0) then it'll go to msg.sender\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256, // nftId_\\n            int256, // final supply amount. if - then withdraw\\n            int256 // final borrow amount. if - then payback\\n        );\\n    \\n    function liquidate(\\n        uint256 debtAmt_,\\n        uint256 colPerUnitDebt_, // min collateral needed per unit of debt in 1e18\\n        address to_,\\n        bool absorb_\\n    ) external payable returns (uint actualDebtAmt_, uint actualColAmt_);\\n\\n    function absorb() external;\\n\\n    function rebalance() external payable returns (int supplyAmt_, int borrowAmt_);\\n\\n    error FluidLiquidateResult(uint256 colLiquidated, uint256 debtLiquidated);\\n}\\n\",\"keccak256\":\"0xe0ec40a4531ecbcd7b8db25b4cd8529e0c284bb20eb40b7cf909fb8af0e3ca8b\",\"license\":\"MIT\"},\"solmate/src/auth/Owned.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\\nabstract contract Owned {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            OWNERSHIP STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address public owner;\\n\\n    modifier onlyOwner() virtual {\\n        require(msg.sender == owner, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             OWNERSHIP LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        owner = newOwner;\\n\\n        emit OwnershipTransferred(msg.sender, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xfedb27d14c508342c33eb067c9a02eabcdb0f9dcf93b04ded1001f580d12d0ea\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x6101006040523480156200001257600080fd5b50604051620033d3380380620033d38339810160408190526200003591620000bf565b600080546001600160a01b0319166001600160a01b03871690811782556040518792907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160a01b0393841660c05291831660e05282166080521660a052506200012f565b80516001600160a01b0381168114620000ba57600080fd5b919050565b600080600080600060a08688031215620000d857600080fd5b620000e386620000a2565b9450620000f360208701620000a2565b93506200010360408701620000a2565b92506200011360608701620000a2565b91506200012360808701620000a2565b90509295509295909350565b60805160a05160c05160e051613216620001bd6000396000818161039f015281816108260152818161140f0152818161188c015261192d0152600081816102790152818161096001526112620152600081816103d3015281816106ae015281816109fc01526117660152600081816102200152818161049c01528181610aeb0152610bca01526132166000f3fe6080604052600436106100f75760003560e01c806382bc4aaf1161008a578063c30cfc9311610059578063c30cfc93146103c1578063edbd7668146103f5578063f2fde38b14610415578063f857ef671461043557600080fd5b806382bc4aaf146103105780638da5cb5b14610330578063920f5c841461035d578063ad5c46481461038d57600080fd5b806365d72688116100c657806365d726881461020e57806376ca658a146102675780637b5654b41461029b5780637bbede43146102bb57600080fd5b8063150b7a02146101035780631949138e146101595780631bbafd46146101a3578063264fffb0146101c557600080fd5b366100fe57005b600080fd5b34801561010f57600080fd5b5061012361011e36600461261a565b610482565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020015b60405180910390f35b34801561016557600080fd5b5061017961017436600461268d565b610ae4565b6040805192835273ffffffffffffffffffffffffffffffffffffffff909116602083015201610150565b3480156101af57600080fd5b506101c36101be3660046126a6565b610bf7565b005b3480156101d157600080fd5b506101f96101e03660046126db565b6001602081905260009182526040909120805491015482565b60408051928352602083019190915201610150565b34801561021a57600080fd5b506102427f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610150565b34801561027357600080fd5b506102427f000000000000000000000000000000000000000000000000000000000000000081565b3480156102a757600080fd5b506102426102b63660046126f8565b610cfb565b3480156102c757600080fd5b506103026102d6366004612724565b604080516020808201939093528082019390935280518084038201815260609093019052815191012090565b604051908152602001610150565b34801561031c57600080fd5b506101c361032b3660046128aa565b611167565b34801561033c57600080fd5b506000546102429073ffffffffffffffffffffffffffffffffffffffff1681565b34801561036957600080fd5b5061037d610378366004612a37565b611248565b6040519015158152602001610150565b34801561039957600080fd5b506102427f000000000000000000000000000000000000000000000000000000000000000081565b3480156103cd57600080fd5b506102427f000000000000000000000000000000000000000000000000000000000000000081565b34801561040157600080fd5b506101c3610410366004612b12565b611a7c565b34801561042157600080fd5b506101c36104303660046126db565b611c9f565b34801561044157600080fd5b506104556104503660046126db565b611d90565b6040805173ffffffffffffffffffffffffffffffffffffffff938416815292909116602083015201610150565b60003373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146104f3576040517fbb66a10b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614610558576040517fbb66a10b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61062a60405180610180016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081525090565b84815273ffffffffffffffffffffffffffffffffffffffff8616602082015261065285610ae4565b73ffffffffffffffffffffffffffffffffffffffff1660a08301819052608083019190915261068090611d90565b73ffffffffffffffffffffffffffffffffffffffff908116606084015216604082015260808101516106d3907f000000000000000000000000000000000000000000000000000000000000000090610cfb565b73ffffffffffffffffffffffffffffffffffffffff1660c082015282156107115761070083850185612724565b610100830152610160820152610760565b606081015173ffffffffffffffffffffffffffffffffffffffff166000908152600160208181526040928390208351808501909452805480855292015492018290526101008301526101608201525b80610160015160000361079f576040517fbb66a10b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408051600180825281830190925260009160208083019080368337505060408051600180825281830190925292935060009291506020808301908036833701905050606084015190915073ffffffffffffffffffffffffffffffffffffffff1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14610824578260600151610846565b7f00000000000000000000000000000000000000000000000000000000000000005b8260008151811061085957610859612bde565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050606483610100015160966108a79190612c3c565b6108b19190612c53565b816000815181106108c4576108c4612bde565b6020026020010181815250506000836040516020016108e39190612c8e565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282526101608701516000845260208401928390527f095627e900000000000000000000000000000000000000000000000000000000909252925073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163095627e99161099a9187918791879060248101612e15565b600060405180830381600087803b1580156109b457600080fd5b505af11580156109c8573d6000803e3d6000fd5b50506040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152600092507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1691506370a0823190602401602060405180830381865afa158015610a59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7d9190612ed5565b1115610ab5576040517fbb66a10b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507f150b7a02000000000000000000000000000000000000000000000000000000009998505050505050505050565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b5c736e4610b57600387604080516020808201939093528082019390935280518084038201815260609093019052815191012090565b6040518263ffffffff1660e01b8152600401610b7591815260200190565b602060405180830381865afa158015610b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb69190612ed5565b905063ffffffff60c082901c169250610bef7f000000000000000000000000000000000000000000000000000000000000000084610cfb565b915050915091565b60005473ffffffffffffffffffffffffffffffffffffffff163314610c7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a4544000000000000000000000000000000000000000060448201526064015b60405180910390fd5b604080518082018252828152602080820185815273ffffffffffffffffffffffffffffffffffffffff871660008181526001808552908690209451855591519390910192909255915183815284927f262dfa48f617d8ad9ab91a33cff90761c6353664d88ca792a7af3c358650968d910160405180910390a3505050565b6000606082600003610d11576000915050611161565b607f8311610dda576040517fd60000000000000000000000000000000000000000000000000000000000000060208201527f940000000000000000000000000000000000000000000000000000000000000060218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b16602282015260f884901b7fff000000000000000000000000000000000000000000000000000000000000001660368201526037015b6040516020818303038152906040529050611156565b60ff8311610eb7576040517fd70000000000000000000000000000000000000000000000000000000000000060208201527f940000000000000000000000000000000000000000000000000000000000000060218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b1660228201527f8100000000000000000000000000000000000000000000000000000000000000603682015260f884901b7fff00000000000000000000000000000000000000000000000000000000000000166037820152603801610dc4565b61ffff8311610f95576040517fd80000000000000000000000000000000000000000000000000000000000000060208201527f940000000000000000000000000000000000000000000000000000000000000060218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b1660228201527f820000000000000000000000000000000000000000000000000000000000000060368201527fffff00000000000000000000000000000000000000000000000000000000000060f085901b166037820152603901610dc4565b62ffffff8311611074576040517fd90000000000000000000000000000000000000000000000000000000000000060208201527f940000000000000000000000000000000000000000000000000000000000000060218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b1660228201527f830000000000000000000000000000000000000000000000000000000000000060368201527fffffff000000000000000000000000000000000000000000000000000000000060e885901b166037820152603a01610dc4565b6040517fda0000000000000000000000000000000000000000000000000000000000000060208201527f940000000000000000000000000000000000000000000000000000000000000060218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b1660228201527f840000000000000000000000000000000000000000000000000000000000000060368201527fffffffff0000000000000000000000000000000000000000000000000000000060e085901b166037820152603b0160405160208183030381529060405290505b805160209091012090505b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146111e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610c74565b60005b82518110156112435761123083828151811061120957611209612bde565b602002602001015183838151811061122357611223612bde565b6020026020010151611e1b565b508061123b81612eee565b9150506111eb565b505050565b60003373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146112b9576040517fbb66a10b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff84163014611308576040517fbb66a10b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061131683850185612f26565b9050600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff16826060015173ffffffffffffffffffffffffffffffffffffffff16146113d9576113998260a001516000846060015173ffffffffffffffffffffffffffffffffffffffff16611e479092919063ffffffff16565b6113d18260a00151836101000151846060015173ffffffffffffffffffffffffffffffffffffffff16611e479092919063ffffffff16565b506000611489565b6101008201516040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815260048101919091527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690632e1a7d4d90602401600060405180830381600087803b15801561146857600080fd5b505af115801561147c573d6000803e3d6000fd5b5050505081610100015190505b60a082015182516040517f032d227600000000000000000000000000000000000000000000000000000000815260048101919091527f800000000000000000000000000000000000000000000000000000000000000060248201819052604482015230606482015273ffffffffffffffffffffffffffffffffffffffff9091169063032d227690839060840160606040518083038185885af1158015611533573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906115589190612fe3565b61014085015261012084018190526115709150613011565b61012083015261014082015161158590613011565b610140830181905261012083015160e0840152610100830152604082015173ffffffffffffffffffffffffffffffffffffffff1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14611646576116078260c001516000846040015173ffffffffffffffffffffffffffffffffffffffff16611e479092919063ffffffff16565b61163e8260c001518360e00151846040015173ffffffffffffffffffffffffffffffffffffffff16611e479092919063ffffffff16565b50600061164d565b5060e08101515b60c08201516101208301516101408401516040517f032d227600000000000000000000000000000000000000000000000000000000815260006004820181905260248201939093526044810191909152306064820152909173ffffffffffffffffffffffffffffffffffffffff169063032d227690849060840160606040518083038185885af11580156116e5573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061170a9190612fe3565b505060208401516040517f23b872dd00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff9182166024820152604481018390529192507f000000000000000000000000000000000000000000000000000000000000000016906323b872dd90606401600060405180830381600087803b1580156117aa57600080fd5b505af11580156117be573d6000803e3d6000fd5b50505050506000888860008181106117d8576117d8612bde565b905060200201358b8b60008181106117f2576117f2612bde565b905060200201356118039190613049565b61180e90600a613049565b905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff16836060015173ffffffffffffffffffffffffffffffffffffffff16036119a3576040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa1580156118e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190c9190612ed5565b9050818110156119a15773ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663d0e30db061195c838561305c565b6040518263ffffffff1660e01b81526004016000604051808303818588803b15801561198757600080fd5b505af115801561199b573d6000803e3d6000fd5b50505050505b505b6119ed33828f8f60008181106119bb576119bb612bde565b90506020020160208101906119d091906126db565b73ffffffffffffffffffffffffffffffffffffffff169190612047565b8260000151836020015173ffffffffffffffffffffffffffffffffffffffff1684608001517f5c232cb9bdb05926b1eb20aa464bff4425fabf118e48b8803fdac4ff959ff1c6866101200151611a4290613011565b876101400151611a5190613011565b6040805192835260208301919091520160405180910390a45060019c9b505050505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611afd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610c74565b60005b8251811015611c995773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff16838281518110611b4657611b46612bde565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1603611b9157611b8c84838381518110611b7f57611b7f612bde565b602002602001015161209d565b611bee565b611bee84838381518110611ba757611ba7612bde565b6020026020010151858481518110611bc157611bc1612bde565b602002602001015173ffffffffffffffffffffffffffffffffffffffff166120479092919063ffffffff16565b828181518110611c0057611c00612bde565b602002602001015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb848481518110611c6857611c68612bde565b6020026020010151604051611c7f91815260200190565b60405180910390a380611c9181612eee565b915050611b00565b50505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611d20576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610c74565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081178255604051909133917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b60008060008373ffffffffffffffffffffffffffffffffffffffff1663b7791bf26040518163ffffffff1660e01b81526004016101a060405180830381865afa158015611de1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e05919061308b565b9050806080015192508060a00151915050915091565b6060611e4083836040518060600160405280602781526020016131ba602791396121f7565b9392505050565b801580611ee757506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e90604401602060405180830381865afa158015611ec1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee59190612ed5565b155b611f73576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610c74565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526112439084907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261227c565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526112439084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401611fc5565b80471015612107576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610c74565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114612161576040519150601f19603f3d011682016040523d82523d6000602084013e612166565b606091505b5050905080611243576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610c74565b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516122219190613168565b600060405180830381855af49150503d806000811461225c576040519150601f19603f3d011682016040523d82523d6000602084013e612261565b606091505b509150915061227286838387612388565b9695505050505050565b60006122de826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166124309092919063ffffffff16565b80519091501561124357808060200190518101906122fc9190613184565b611243576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610c74565b6060831561241e5782516000036124175773ffffffffffffffffffffffffffffffffffffffff85163b612417576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c74565b5081612428565b612428838361243f565b949350505050565b60606124288484600085612483565b81511561244f5781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7491906131a6565b606082471015612515576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610c74565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161253e9190613168565b60006040518083038185875af1925050503d806000811461257b576040519150601f19603f3d011682016040523d82523d6000602084013e612580565b606091505b509150915061259187838387612388565b979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff811681146125be57600080fd5b50565b80356125cc8161259c565b919050565b60008083601f8401126125e357600080fd5b50813567ffffffffffffffff8111156125fb57600080fd5b60208301915083602082850101111561261357600080fd5b9250929050565b60008060008060006080868803121561263257600080fd5b853561263d8161259c565b9450602086013561264d8161259c565b935060408601359250606086013567ffffffffffffffff81111561267057600080fd5b61267c888289016125d1565b969995985093965092949392505050565b60006020828403121561269f57600080fd5b5035919050565b6000806000606084860312156126bb57600080fd5b83356126c68161259c565b95602085013595506040909401359392505050565b6000602082840312156126ed57600080fd5b8135611e408161259c565b6000806040838503121561270b57600080fd5b82356127168161259c565b946020939093013593505050565b6000806040838503121561273757600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610180810167ffffffffffffffff8111828210171561279957612799612746565b60405290565b6040516101a0810167ffffffffffffffff8111828210171561279957612799612746565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561280a5761280a612746565b604052919050565b600067ffffffffffffffff82111561282c5761282c612746565b5060051b60200190565b600082601f83011261284757600080fd5b8135602061285c61285783612812565b6127c3565b82815260059290921b8401810191818101908684111561287b57600080fd5b8286015b8481101561289f5780356128928161259c565b835291830191830161287f565b509695505050505050565b60008060408084860312156128be57600080fd5b833567ffffffffffffffff808211156128d657600080fd5b6128e287838801612836565b94506020915081860135818111156128f957600080fd5b8601601f808201891361290b57600080fd5b813561291961285782612812565b81815260059190911b8301850190858101908b83111561293857600080fd5b8685015b838110156129df578035878111156129545760008081fd5b8601603f81018e136129665760008081fd5b888101358881111561297a5761297a612746565b6129a98a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe089840116016127c3565b8181528f8c8385010111156129be5760008081fd5b818c84018c83013760009181018b019190915284525091870191870161293c565b5080985050505050505050509250929050565b60008083601f840112612a0457600080fd5b50813567ffffffffffffffff811115612a1c57600080fd5b6020830191508360208260051b850101111561261357600080fd5b600080600080600080600080600060a08a8c031215612a5557600080fd5b893567ffffffffffffffff80821115612a6d57600080fd5b612a798d838e016129f2565b909b50995060208c0135915080821115612a9257600080fd5b612a9e8d838e016129f2565b909950975060408c0135915080821115612ab757600080fd5b612ac38d838e016129f2565b909750955060608c01359150612ad88261259c565b90935060808b01359080821115612aee57600080fd5b50612afb8c828d016125d1565b915080935050809150509295985092959850929598565b600080600060608486031215612b2757600080fd5b8335612b328161259c565b925060208481013567ffffffffffffffff80821115612b5057600080fd5b612b5c88838901612836565b94506040870135915080821115612b7257600080fd5b508501601f81018713612b8457600080fd5b8035612b9261285782612812565b81815260059190911b82018301908381019089831115612bb157600080fd5b928401925b82841015612bcf57833582529284019290840190612bb6565b80955050505050509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808202811582820484141761116157611161612c0d565b600082612c89577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b81518152602080830151610180830191612cbf9084018273ffffffffffffffffffffffffffffffffffffffff169052565b506040830151612ce7604084018273ffffffffffffffffffffffffffffffffffffffff169052565b506060830151612d0f606084018273ffffffffffffffffffffffffffffffffffffffff169052565b506080830151608083015260a0830151612d4160a084018273ffffffffffffffffffffffffffffffffffffffff169052565b5060c0830151612d6960c084018273ffffffffffffffffffffffffffffffffffffffff169052565b5060e0838101519083015261010080840151908301526101208084015190830152610140808401519083015261016092830151929091019190915290565b60005b83811015612dc2578181015183820152602001612daa565b50506000910152565b60008151808452612de3816020860160208601612da7565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60a0808252865190820181905260009060209060c0840190828a01845b82811015612e6457815173ffffffffffffffffffffffffffffffffffffffff1684529284019290840190600101612e32565b5050508381038285015287518082528883019183019060005b81811015612e9957835183529284019291840191600101612e7d565b50508760408601528481036060860152612eb38188612dcb565b925050508281036080840152612ec98185612dcb565b98975050505050505050565b600060208284031215612ee757600080fd5b5051919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612f1f57612f1f612c0d565b5060010190565b60006101808284031215612f3957600080fd5b612f41612775565b82358152612f51602084016125c1565b6020820152612f62604084016125c1565b6040820152612f73606084016125c1565b606082015260808301356080820152612f8e60a084016125c1565b60a0820152612f9f60c084016125c1565b60c082015260e08381013590820152610100808401359082015261012080840135908201526101408084013590820152610160928301359281019290925250919050565b600080600060608486031215612ff857600080fd5b8351925060208401519150604084015190509250925092565b60007f8000000000000000000000000000000000000000000000000000000000000000820361304257613042612c0d565b5060000390565b8082018082111561116157611161612c0d565b8181038181111561116157611161612c0d565b80516125cc8161259c565b805160ff811681146125cc57600080fd5b60006101a0828403121561309e57600080fd5b6130a661279f565b6130af8361306f565b81526130bd6020840161306f565b60208201526130ce6040840161306f565b60408201526130df6060840161306f565b60608201526130f06080840161306f565b608082015261310160a0840161306f565b60a082015261311260c0840161307a565b60c082015261312360e0840161307a565b60e08201526101008381015190820152610120808401519082015261014080840151908201526101608084015190820152610180928301519281019290925250919050565b6000825161317a818460208701612da7565b9190910192915050565b60006020828403121561319657600080fd5b81518015158114611e4057600080fd5b602081526000611e406020830184612dcb56fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212209b12c7c3fa9069357fd3d0d352d74f507afb4396026fe15c4daecb70a20b1b5e64736f6c63430008150033",
  "deployedBytecode": "0x6080604052600436106100f75760003560e01c806382bc4aaf1161008a578063c30cfc9311610059578063c30cfc93146103c1578063edbd7668146103f5578063f2fde38b14610415578063f857ef671461043557600080fd5b806382bc4aaf146103105780638da5cb5b14610330578063920f5c841461035d578063ad5c46481461038d57600080fd5b806365d72688116100c657806365d726881461020e57806376ca658a146102675780637b5654b41461029b5780637bbede43146102bb57600080fd5b8063150b7a02146101035780631949138e146101595780631bbafd46146101a3578063264fffb0146101c557600080fd5b366100fe57005b600080fd5b34801561010f57600080fd5b5061012361011e36600461261a565b610482565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020015b60405180910390f35b34801561016557600080fd5b5061017961017436600461268d565b610ae4565b6040805192835273ffffffffffffffffffffffffffffffffffffffff909116602083015201610150565b3480156101af57600080fd5b506101c36101be3660046126a6565b610bf7565b005b3480156101d157600080fd5b506101f96101e03660046126db565b6001602081905260009182526040909120805491015482565b60408051928352602083019190915201610150565b34801561021a57600080fd5b506102427f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610150565b34801561027357600080fd5b506102427f000000000000000000000000000000000000000000000000000000000000000081565b3480156102a757600080fd5b506102426102b63660046126f8565b610cfb565b3480156102c757600080fd5b506103026102d6366004612724565b604080516020808201939093528082019390935280518084038201815260609093019052815191012090565b604051908152602001610150565b34801561031c57600080fd5b506101c361032b3660046128aa565b611167565b34801561033c57600080fd5b506000546102429073ffffffffffffffffffffffffffffffffffffffff1681565b34801561036957600080fd5b5061037d610378366004612a37565b611248565b6040519015158152602001610150565b34801561039957600080fd5b506102427f000000000000000000000000000000000000000000000000000000000000000081565b3480156103cd57600080fd5b506102427f000000000000000000000000000000000000000000000000000000000000000081565b34801561040157600080fd5b506101c3610410366004612b12565b611a7c565b34801561042157600080fd5b506101c36104303660046126db565b611c9f565b34801561044157600080fd5b506104556104503660046126db565b611d90565b6040805173ffffffffffffffffffffffffffffffffffffffff938416815292909116602083015201610150565b60003373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146104f3576040517fbb66a10b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614610558576040517fbb66a10b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61062a60405180610180016040528060008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160008152602001600081526020016000815260200160008152602001600081525090565b84815273ffffffffffffffffffffffffffffffffffffffff8616602082015261065285610ae4565b73ffffffffffffffffffffffffffffffffffffffff1660a08301819052608083019190915261068090611d90565b73ffffffffffffffffffffffffffffffffffffffff908116606084015216604082015260808101516106d3907f000000000000000000000000000000000000000000000000000000000000000090610cfb565b73ffffffffffffffffffffffffffffffffffffffff1660c082015282156107115761070083850185612724565b610100830152610160820152610760565b606081015173ffffffffffffffffffffffffffffffffffffffff166000908152600160208181526040928390208351808501909452805480855292015492018290526101008301526101608201525b80610160015160000361079f576040517fbb66a10b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408051600180825281830190925260009160208083019080368337505060408051600180825281830190925292935060009291506020808301908036833701905050606084015190915073ffffffffffffffffffffffffffffffffffffffff1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14610824578260600151610846565b7f00000000000000000000000000000000000000000000000000000000000000005b8260008151811061085957610859612bde565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050606483610100015160966108a79190612c3c565b6108b19190612c53565b816000815181106108c4576108c4612bde565b6020026020010181815250506000836040516020016108e39190612c8e565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282526101608701516000845260208401928390527f095627e900000000000000000000000000000000000000000000000000000000909252925073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163095627e99161099a9187918791879060248101612e15565b600060405180830381600087803b1580156109b457600080fd5b505af11580156109c8573d6000803e3d6000fd5b50506040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820152600092507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1691506370a0823190602401602060405180830381865afa158015610a59573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7d9190612ed5565b1115610ab5576040517fbb66a10b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b507f150b7a02000000000000000000000000000000000000000000000000000000009998505050505050505050565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b5c736e4610b57600387604080516020808201939093528082019390935280518084038201815260609093019052815191012090565b6040518263ffffffff1660e01b8152600401610b7591815260200190565b602060405180830381865afa158015610b92573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb69190612ed5565b905063ffffffff60c082901c169250610bef7f000000000000000000000000000000000000000000000000000000000000000084610cfb565b915050915091565b60005473ffffffffffffffffffffffffffffffffffffffff163314610c7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a4544000000000000000000000000000000000000000060448201526064015b60405180910390fd5b604080518082018252828152602080820185815273ffffffffffffffffffffffffffffffffffffffff871660008181526001808552908690209451855591519390910192909255915183815284927f262dfa48f617d8ad9ab91a33cff90761c6353664d88ca792a7af3c358650968d910160405180910390a3505050565b6000606082600003610d11576000915050611161565b607f8311610dda576040517fd60000000000000000000000000000000000000000000000000000000000000060208201527f940000000000000000000000000000000000000000000000000000000000000060218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b16602282015260f884901b7fff000000000000000000000000000000000000000000000000000000000000001660368201526037015b6040516020818303038152906040529050611156565b60ff8311610eb7576040517fd70000000000000000000000000000000000000000000000000000000000000060208201527f940000000000000000000000000000000000000000000000000000000000000060218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b1660228201527f8100000000000000000000000000000000000000000000000000000000000000603682015260f884901b7fff00000000000000000000000000000000000000000000000000000000000000166037820152603801610dc4565b61ffff8311610f95576040517fd80000000000000000000000000000000000000000000000000000000000000060208201527f940000000000000000000000000000000000000000000000000000000000000060218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b1660228201527f820000000000000000000000000000000000000000000000000000000000000060368201527fffff00000000000000000000000000000000000000000000000000000000000060f085901b166037820152603901610dc4565b62ffffff8311611074576040517fd90000000000000000000000000000000000000000000000000000000000000060208201527f940000000000000000000000000000000000000000000000000000000000000060218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b1660228201527f830000000000000000000000000000000000000000000000000000000000000060368201527fffffff000000000000000000000000000000000000000000000000000000000060e885901b166037820152603a01610dc4565b6040517fda0000000000000000000000000000000000000000000000000000000000000060208201527f940000000000000000000000000000000000000000000000000000000000000060218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b1660228201527f840000000000000000000000000000000000000000000000000000000000000060368201527fffffffff0000000000000000000000000000000000000000000000000000000060e085901b166037820152603b0160405160208183030381529060405290505b805160209091012090505b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146111e8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610c74565b60005b82518110156112435761123083828151811061120957611209612bde565b602002602001015183838151811061122357611223612bde565b6020026020010151611e1b565b508061123b81612eee565b9150506111eb565b505050565b60003373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146112b9576040517fbb66a10b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff84163014611308576040517fbb66a10b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061131683850185612f26565b9050600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff16826060015173ffffffffffffffffffffffffffffffffffffffff16146113d9576113998260a001516000846060015173ffffffffffffffffffffffffffffffffffffffff16611e479092919063ffffffff16565b6113d18260a00151836101000151846060015173ffffffffffffffffffffffffffffffffffffffff16611e479092919063ffffffff16565b506000611489565b6101008201516040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815260048101919091527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690632e1a7d4d90602401600060405180830381600087803b15801561146857600080fd5b505af115801561147c573d6000803e3d6000fd5b5050505081610100015190505b60a082015182516040517f032d227600000000000000000000000000000000000000000000000000000000815260048101919091527f800000000000000000000000000000000000000000000000000000000000000060248201819052604482015230606482015273ffffffffffffffffffffffffffffffffffffffff9091169063032d227690839060840160606040518083038185885af1158015611533573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906115589190612fe3565b61014085015261012084018190526115709150613011565b61012083015261014082015161158590613011565b610140830181905261012083015160e0840152610100830152604082015173ffffffffffffffffffffffffffffffffffffffff1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14611646576116078260c001516000846040015173ffffffffffffffffffffffffffffffffffffffff16611e479092919063ffffffff16565b61163e8260c001518360e00151846040015173ffffffffffffffffffffffffffffffffffffffff16611e479092919063ffffffff16565b50600061164d565b5060e08101515b60c08201516101208301516101408401516040517f032d227600000000000000000000000000000000000000000000000000000000815260006004820181905260248201939093526044810191909152306064820152909173ffffffffffffffffffffffffffffffffffffffff169063032d227690849060840160606040518083038185885af11580156116e5573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061170a9190612fe3565b505060208401516040517f23b872dd00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff9182166024820152604481018390529192507f000000000000000000000000000000000000000000000000000000000000000016906323b872dd90606401600060405180830381600087803b1580156117aa57600080fd5b505af11580156117be573d6000803e3d6000fd5b50505050506000888860008181106117d8576117d8612bde565b905060200201358b8b60008181106117f2576117f2612bde565b905060200201356118039190613049565b61180e90600a613049565b905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff16836060015173ffffffffffffffffffffffffffffffffffffffff16036119a3576040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa1580156118e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061190c9190612ed5565b9050818110156119a15773ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663d0e30db061195c838561305c565b6040518263ffffffff1660e01b81526004016000604051808303818588803b15801561198757600080fd5b505af115801561199b573d6000803e3d6000fd5b50505050505b505b6119ed33828f8f60008181106119bb576119bb612bde565b90506020020160208101906119d091906126db565b73ffffffffffffffffffffffffffffffffffffffff169190612047565b8260000151836020015173ffffffffffffffffffffffffffffffffffffffff1684608001517f5c232cb9bdb05926b1eb20aa464bff4425fabf118e48b8803fdac4ff959ff1c6866101200151611a4290613011565b876101400151611a5190613011565b6040805192835260208301919091520160405180910390a45060019c9b505050505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611afd576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610c74565b60005b8251811015611c995773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff16838281518110611b4657611b46612bde565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1603611b9157611b8c84838381518110611b7f57611b7f612bde565b602002602001015161209d565b611bee565b611bee84838381518110611ba757611ba7612bde565b6020026020010151858481518110611bc157611bc1612bde565b602002602001015173ffffffffffffffffffffffffffffffffffffffff166120479092919063ffffffff16565b828181518110611c0057611c00612bde565b602002602001015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb848481518110611c6857611c68612bde565b6020026020010151604051611c7f91815260200190565b60405180910390a380611c9181612eee565b915050611b00565b50505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611d20576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610c74565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081178255604051909133917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b60008060008373ffffffffffffffffffffffffffffffffffffffff1663b7791bf26040518163ffffffff1660e01b81526004016101a060405180830381865afa158015611de1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611e05919061308b565b9050806080015192508060a00151915050915091565b6060611e4083836040518060600160405280602781526020016131ba602791396121f7565b9392505050565b801580611ee757506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e90604401602060405180830381865afa158015611ec1573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ee59190612ed5565b155b611f73576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610c74565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526112439084907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff000000000000000000000000000000000000000000000000000000009093169290921790915261227c565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526112439084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401611fc5565b80471015612107576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610c74565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d8060008114612161576040519150601f19603f3d011682016040523d82523d6000602084013e612166565b606091505b5050905080611243576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610c74565b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516122219190613168565b600060405180830381855af49150503d806000811461225c576040519150601f19603f3d011682016040523d82523d6000602084013e612261565b606091505b509150915061227286838387612388565b9695505050505050565b60006122de826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166124309092919063ffffffff16565b80519091501561124357808060200190518101906122fc9190613184565b611243576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610c74565b6060831561241e5782516000036124175773ffffffffffffffffffffffffffffffffffffffff85163b612417576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610c74565b5081612428565b612428838361243f565b949350505050565b60606124288484600085612483565b81511561244f5781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610c7491906131a6565b606082471015612515576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610c74565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161253e9190613168565b60006040518083038185875af1925050503d806000811461257b576040519150601f19603f3d011682016040523d82523d6000602084013e612580565b606091505b509150915061259187838387612388565b979650505050505050565b73ffffffffffffffffffffffffffffffffffffffff811681146125be57600080fd5b50565b80356125cc8161259c565b919050565b60008083601f8401126125e357600080fd5b50813567ffffffffffffffff8111156125fb57600080fd5b60208301915083602082850101111561261357600080fd5b9250929050565b60008060008060006080868803121561263257600080fd5b853561263d8161259c565b9450602086013561264d8161259c565b935060408601359250606086013567ffffffffffffffff81111561267057600080fd5b61267c888289016125d1565b969995985093965092949392505050565b60006020828403121561269f57600080fd5b5035919050565b6000806000606084860312156126bb57600080fd5b83356126c68161259c565b95602085013595506040909401359392505050565b6000602082840312156126ed57600080fd5b8135611e408161259c565b6000806040838503121561270b57600080fd5b82356127168161259c565b946020939093013593505050565b6000806040838503121561273757600080fd5b50508035926020909101359150565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610180810167ffffffffffffffff8111828210171561279957612799612746565b60405290565b6040516101a0810167ffffffffffffffff8111828210171561279957612799612746565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561280a5761280a612746565b604052919050565b600067ffffffffffffffff82111561282c5761282c612746565b5060051b60200190565b600082601f83011261284757600080fd5b8135602061285c61285783612812565b6127c3565b82815260059290921b8401810191818101908684111561287b57600080fd5b8286015b8481101561289f5780356128928161259c565b835291830191830161287f565b509695505050505050565b60008060408084860312156128be57600080fd5b833567ffffffffffffffff808211156128d657600080fd5b6128e287838801612836565b94506020915081860135818111156128f957600080fd5b8601601f808201891361290b57600080fd5b813561291961285782612812565b81815260059190911b8301850190858101908b83111561293857600080fd5b8685015b838110156129df578035878111156129545760008081fd5b8601603f81018e136129665760008081fd5b888101358881111561297a5761297a612746565b6129a98a7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe089840116016127c3565b8181528f8c8385010111156129be5760008081fd5b818c84018c83013760009181018b019190915284525091870191870161293c565b5080985050505050505050509250929050565b60008083601f840112612a0457600080fd5b50813567ffffffffffffffff811115612a1c57600080fd5b6020830191508360208260051b850101111561261357600080fd5b600080600080600080600080600060a08a8c031215612a5557600080fd5b893567ffffffffffffffff80821115612a6d57600080fd5b612a798d838e016129f2565b909b50995060208c0135915080821115612a9257600080fd5b612a9e8d838e016129f2565b909950975060408c0135915080821115612ab757600080fd5b612ac38d838e016129f2565b909750955060608c01359150612ad88261259c565b90935060808b01359080821115612aee57600080fd5b50612afb8c828d016125d1565b915080935050809150509295985092959850929598565b600080600060608486031215612b2757600080fd5b8335612b328161259c565b925060208481013567ffffffffffffffff80821115612b5057600080fd5b612b5c88838901612836565b94506040870135915080821115612b7257600080fd5b508501601f81018713612b8457600080fd5b8035612b9261285782612812565b81815260059190911b82018301908381019089831115612bb157600080fd5b928401925b82841015612bcf57833582529284019290840190612bb6565b80955050505050509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808202811582820484141761116157611161612c0d565b600082612c89577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b81518152602080830151610180830191612cbf9084018273ffffffffffffffffffffffffffffffffffffffff169052565b506040830151612ce7604084018273ffffffffffffffffffffffffffffffffffffffff169052565b506060830151612d0f606084018273ffffffffffffffffffffffffffffffffffffffff169052565b506080830151608083015260a0830151612d4160a084018273ffffffffffffffffffffffffffffffffffffffff169052565b5060c0830151612d6960c084018273ffffffffffffffffffffffffffffffffffffffff169052565b5060e0838101519083015261010080840151908301526101208084015190830152610140808401519083015261016092830151929091019190915290565b60005b83811015612dc2578181015183820152602001612daa565b50506000910152565b60008151808452612de3816020860160208601612da7565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60a0808252865190820181905260009060209060c0840190828a01845b82811015612e6457815173ffffffffffffffffffffffffffffffffffffffff1684529284019290840190600101612e32565b5050508381038285015287518082528883019183019060005b81811015612e9957835183529284019291840191600101612e7d565b50508760408601528481036060860152612eb38188612dcb565b925050508281036080840152612ec98185612dcb565b98975050505050505050565b600060208284031215612ee757600080fd5b5051919050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203612f1f57612f1f612c0d565b5060010190565b60006101808284031215612f3957600080fd5b612f41612775565b82358152612f51602084016125c1565b6020820152612f62604084016125c1565b6040820152612f73606084016125c1565b606082015260808301356080820152612f8e60a084016125c1565b60a0820152612f9f60c084016125c1565b60c082015260e08381013590820152610100808401359082015261012080840135908201526101408084013590820152610160928301359281019290925250919050565b600080600060608486031215612ff857600080fd5b8351925060208401519150604084015190509250925092565b60007f8000000000000000000000000000000000000000000000000000000000000000820361304257613042612c0d565b5060000390565b8082018082111561116157611161612c0d565b8181038181111561116157611161612c0d565b80516125cc8161259c565b805160ff811681146125cc57600080fd5b60006101a0828403121561309e57600080fd5b6130a661279f565b6130af8361306f565b81526130bd6020840161306f565b60208201526130ce6040840161306f565b60408201526130df6060840161306f565b60608201526130f06080840161306f565b608082015261310160a0840161306f565b60a082015261311260c0840161307a565b60c082015261312360e0840161307a565b60e08201526101008381015190820152610120808401519082015261014080840151908201526101608084015190820152610180928301519281019290925250919050565b6000825161317a818460208701612da7565b9190910192915050565b60006020828403121561319657600080fd5b81518015158114611e4057600080fd5b602081526000611e406020830184612dcb56fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212209b12c7c3fa9069357fd3d0d352d74f507afb4396026fe15c4daecb70a20b1b5e64736f6c63430008150033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2262,
        "contract": "contracts/periphery/migration/main.sol:VaultT1Migrator",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 976,
        "contract": "contracts/periphery/migration/main.sol:VaultT1Migrator",
        "label": "flashloanConfig",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_struct(FlashloanConfig)971_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_struct(FlashloanConfig)971_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct VaultT1Migrator.FlashloanConfig)",
        "numberOfBytes": "32",
        "value": "t_struct(FlashloanConfig)971_storage"
      },
      "t_struct(FlashloanConfig)971_storage": {
        "encoding": "inplace",
        "label": "struct VaultT1Migrator.FlashloanConfig",
        "members": [
          {
            "astId": 968,
            "contract": "contracts/periphery/migration/main.sol:VaultT1Migrator",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 970,
            "contract": "contracts/periphery/migration/main.sol:VaultT1Migrator",
            "label": "route",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}