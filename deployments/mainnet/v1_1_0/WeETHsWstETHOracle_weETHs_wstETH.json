{
  "address": "0x1D1130e8C310484ff2C0708b4E7CF1B07B038873",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "infoName_",
          "type": "string"
        },
        {
          "internalType": "contract IWstETH",
          "name": "wstETH_",
          "type": "address"
        },
        {
          "internalType": "contract IWeETHsAccountant",
          "name": "weETHsAccountant_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "weETHs_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorId_",
          "type": "uint256"
        }
      ],
      "name": "FluidOracleError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "getExchangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "exchangeRate_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExchangeRateLiquidate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "exchangeRate_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExchangeRateOperate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "exchangeRate_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "infoName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "weETHsOracleData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "weETHsExchangeRateOperate_",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "operateRateReverts_",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "weETHsExchangeRateLiquidate_",
          "type": "uint256"
        },
        {
          "internalType": "contract IWeETHsAccountant",
          "name": "weETHsAccountant_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wstETHOracleData",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "wstETHExchangeRate_",
          "type": "uint256"
        },
        {
          "internalType": "contract IWstETH",
          "name": "wstETH_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc5664fb74848cb70b169e58f97e6cfa9e935095ceed626a89b103249a86c9bc0",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x0Ed35B1609Ec45c7079E80d11149a52717e4859A",
    "contractAddress": null,
    "transactionIndex": 40,
    "gasUsed": "677654",
    "logsBloom": "0x
    "blockHash": "0x927ac7cb9702d10a92a172cbf9dbdcb38d10ec12c4f5a59529658b6261838ab6",
    "transactionHash": "0xc5664fb74848cb70b169e58f97e6cfa9e935095ceed626a89b103249a86c9bc0",
    "logs": [],
    "blockNumber": 20417853,
    "cumulativeGasUsed": "7432199",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "wstETH for 1 weETHs",
    "0x7f39C581F595B53c5cb19bD0b3f8dA6c935E2Ca0",
    "0xbe16605B22a7faCEf247363312121670DFe5afBE",
    "0x917ceE801a67f933F2e6b33fC0cD1ED2d5909D88"
  ],
  "numDeployments": 1,
  "solcInputHash": "90f22bd58fae884fe3a462e92e88f529",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"infoName_\",\"type\":\"string\"},{\"internalType\":\"contract IWstETH\",\"name\":\"wstETH_\",\"type\":\"address\"},{\"internalType\":\"contract IWeETHsAccountant\",\"name\":\"weETHsAccountant_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weETHs_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorId_\",\"type\":\"uint256\"}],\"name\":\"FluidOracleError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"getExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangeRate_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExchangeRateLiquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangeRate_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExchangeRateOperate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangeRate_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"infoName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"weETHsOracleData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"weETHsExchangeRateOperate_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"operateRateReverts_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"weETHsExchangeRateLiquidate_\",\"type\":\"uint256\"},{\"internalType\":\"contract IWeETHsAccountant\",\"name\":\"weETHsAccountant_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wstETHOracleData\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"wstETHExchangeRate_\",\"type\":\"uint256\"},{\"internalType\":\"contract IWstETH\",\"name\":\"wstETH_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"constructor\":{\"params\":{\"infoName_\":\"Oracle identify helper name.\",\"weETHsAccountant_\":\"address of the weETHs accountant contract\",\"weETHs_\":\"address of the weETHs token vault contract\",\"wstETH_\":\"address of the wstETH contract\"}},\"getExchangeRate()\":{\"details\":\"Deprecated. Use `getExchangeRateOperate()` and `getExchangeRateLiquidate()` instead. Only implemented for      backwards compatibility.\"}},\"title\":\"Oracle for weETHs (Symbiotic Etherfi's wrapped eETH) to wstETH.          wstETH is the debt token here (get amount of wstETH for 1 weETHs)\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getExchangeRateLiquidate()\":{\"notice\":\"Get the `exchangeRate_` between the underlying asset and the peg asset in 1e27 for liquidations\"},\"getExchangeRateOperate()\":{\"notice\":\"Get the `exchangeRate_` between the underlying asset and the peg asset in 1e27 for operates\"},\"infoName()\":{\"notice\":\"helper string to easily identify the oracle. E.g. token symbols\"},\"weETHsOracleData()\":{\"notice\":\"returns all weETHs oracle related data as utility for easy off-chain use / block explorer in a single view method\"},\"wstETHOracleData()\":{\"notice\":\"returns all wWtETH oracle related data as utility for easy off-chain use / block explorer in a single view method\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/oracles/weETHsWstETHOracle.sol\":\"WeETHsWstETHOracle\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000000},\"remappings\":[]},\"sources\":{\"contracts/oracle/error.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\ncontract Error {\\n    error FluidOracleError(uint256 errorId_);\\n}\\n\",\"keccak256\":\"0xc7b7e945238168d216c480e9dd4fbaaf8780645d58c47f9abdaa4f29910568fe\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/errorTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nlibrary ErrorTypes {\\n    /***********************************|\\n    |           FluidOracleL2           | \\n    |__________________________________*/\\n\\n    /// @notice thrown when sequencer on a L2 has an outage and grace period has not yet passed.\\n    uint256 internal constant FluidOracleL2__SequencerOutage = 60000;\\n\\n    /***********************************|\\n    |     UniV3CheckCLRSOracle          | \\n    |__________________________________*/\\n\\n    /// @notice thrown when the delta between main price source and check rate source is exceeding the allowed delta\\n    uint256 internal constant UniV3CheckCLRSOracle__InvalidPrice = 60001;\\n\\n    /// @notice thrown when an invalid parameter is passed to a method\\n    uint256 internal constant UniV3CheckCLRSOracle__InvalidParams = 60002;\\n\\n    /// @notice thrown when the exchange rate is zero, even after all possible fallbacks depending on config\\n    uint256 internal constant UniV3CheckCLRSOracle__ExchangeRateZero = 60003;\\n\\n    /***********************************|\\n    |           FluidOracle             | \\n    |__________________________________*/\\n\\n    /// @notice thrown when an invalid info name is passed into a fluid oracle (e.g. not set or too long)\\n    uint256 internal constant FluidOracle__InvalidInfoName = 60010;\\n\\n    /***********************************|\\n    |            sUSDe Oracle           | \\n    |__________________________________*/\\n\\n    /// @notice thrown when an invalid parameter is passed to a method\\n    uint256 internal constant SUSDeOracle__InvalidParams = 60102;\\n\\n    /***********************************|\\n    |           Pendle Oracle           | \\n    |__________________________________*/\\n\\n    /// @notice thrown when an invalid parameter is passed to a method\\n    uint256 internal constant PendleOracle__InvalidParams = 60201;\\n\\n    /// @notice thrown when the Pendle market Oracle has not been initialized yet\\n    uint256 internal constant PendleOracle__MarketNotInitialized = 60202;\\n\\n    /// @notice thrown when the Pendle market does not have 18 decimals\\n    uint256 internal constant PendleOracle__MarketInvalidDecimals = 60203;\\n\\n    /// @notice thrown when the Pendle market returns an unexpected price\\n    uint256 internal constant PendleOracle__InvalidPrice = 60204;\\n\\n    /***********************************|\\n    |    CLRS2UniV3CheckCLRSOracleL2    | \\n    |__________________________________*/\\n\\n    /// @notice thrown when the exchange rate is zero, even after all possible fallbacks depending on config\\n    uint256 internal constant CLRS2UniV3CheckCLRSOracleL2__ExchangeRateZero = 60301;\\n\\n    /***********************************|\\n    |    Ratio2xFallbackCLRSOracleL2    | \\n    |__________________________________*/\\n\\n    /// @notice thrown when the exchange rate is zero, even after all possible fallbacks depending on config\\n    uint256 internal constant Ratio2xFallbackCLRSOracleL2__ExchangeRateZero = 60311;\\n\\n    /***********************************|\\n    |            WeETHsOracle           | \\n    |__________________________________*/\\n\\n    /// @notice thrown when an invalid parameter is passed to a method\\n    uint256 internal constant WeETHsOracle__InvalidParams = 60321;\\n\\n    /***********************************|\\n    |          Chainlink Oracle         | \\n    |__________________________________*/\\n\\n    /// @notice thrown when an invalid parameter is passed to a method\\n    uint256 internal constant ChainlinkOracle__InvalidParams = 61001;\\n\\n    /***********************************|\\n    |          UniswapV3 Oracle         | \\n    |__________________________________*/\\n\\n    /// @notice thrown when an invalid parameter is passed to a method\\n    uint256 internal constant UniV3Oracle__InvalidParams = 62001;\\n\\n    /// @notice thrown when constructor is called with invalid ordered seconds agos values\\n    uint256 internal constant UniV3Oracle__InvalidSecondsAgos = 62002;\\n\\n    /// @notice thrown when constructor is called with invalid delta values > 100%\\n    uint256 internal constant UniV3Oracle__InvalidDeltas = 62003;\\n\\n    /***********************************|\\n    |            WstETh Oracle          | \\n    |__________________________________*/\\n\\n    /// @notice thrown when an invalid parameter is passed to a method\\n    uint256 internal constant WstETHOracle__InvalidParams = 63001;\\n\\n    /***********************************|\\n    |           Redstone Oracle         | \\n    |__________________________________*/\\n\\n    /// @notice thrown when an invalid parameter is passed to a method\\n    uint256 internal constant RedstoneOracle__InvalidParams = 64001;\\n\\n    /***********************************|\\n    |          Fallback Oracle          | \\n    |__________________________________*/\\n\\n    /// @notice thrown when an invalid parameter is passed to a method\\n    uint256 internal constant FallbackOracle__InvalidParams = 65001;\\n\\n    /***********************************|\\n    |       FallbackCLRSOracle          | \\n    |__________________________________*/\\n\\n    /// @notice thrown when the exchange rate is zero, even for the fallback oracle source (if enabled)\\n    uint256 internal constant FallbackCLRSOracle__ExchangeRateZero = 66001;\\n\\n    /***********************************|\\n    |         WstETHCLRSOracle          | \\n    |__________________________________*/\\n\\n    /// @notice thrown when the exchange rate is zero, even for the fallback oracle source (if enabled)\\n    uint256 internal constant WstETHCLRSOracle__ExchangeRateZero = 67001;\\n\\n    /***********************************|\\n    |        CLFallbackUniV3Oracle      | \\n    |__________________________________*/\\n\\n    /// @notice thrown when the exchange rate is zero, even for the uniV3 rate\\n    uint256 internal constant CLFallbackUniV3Oracle__ExchangeRateZero = 68001;\\n\\n    /***********************************|\\n    |  WstETHCLRS2UniV3CheckCLRSOracle  | \\n    |__________________________________*/\\n\\n    /// @notice thrown when the exchange rate is zero, even for the uniV3 rate\\n    uint256 internal constant WstETHCLRS2UniV3CheckCLRSOracle__ExchangeRateZero = 69001;\\n\\n    /***********************************|\\n    |             WeETh Oracle          | \\n    |__________________________________*/\\n\\n    /// @notice thrown when an invalid parameter is passed to a method\\n    uint256 internal constant WeETHOracle__InvalidParams = 70001;\\n}\\n\",\"keccak256\":\"0x06ace30df91ca3848a99ee29faf9ea93197074f41b9bf25564e8d80c84339f77\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/fluidOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { IFluidOracle } from \\\"./interfaces/iFluidOracle.sol\\\";\\nimport { ErrorTypes } from \\\"./errorTypes.sol\\\";\\nimport { Error as OracleError } from \\\"./error.sol\\\";\\n\\n/// @title   FluidOracle\\n/// @notice  Base contract that any Fluid Oracle must implement\\nabstract contract FluidOracle is IFluidOracle, OracleError {\\n    /// @dev short helper string to easily identify the oracle. E.g. token symbols\\n    //\\n    // using a bytes32 because string can not be immutable.\\n    bytes32 private immutable _infoName;\\n\\n    constructor(string memory infoName_) {\\n        if (bytes(infoName_).length > 32 || bytes(infoName_).length == 0) {\\n            revert FluidOracleError(ErrorTypes.FluidOracle__InvalidInfoName);\\n        }\\n\\n        // convert string to bytes32\\n        bytes32 infoNameBytes32_;\\n        assembly {\\n            infoNameBytes32_ := mload(add(infoName_, 32))\\n        }\\n        _infoName = infoNameBytes32_;\\n    }\\n\\n    /// @inheritdoc IFluidOracle\\n    function infoName() external view returns (string memory) {\\n        // convert bytes32 to string\\n        uint256 length_;\\n        while (length_ < 32 && _infoName[length_] != 0) {\\n            length_++;\\n        }\\n        bytes memory infoNameBytes_ = new bytes(length_);\\n        for (uint256 i; i < length_; i++) {\\n            infoNameBytes_[i] = _infoName[i];\\n        }\\n        return string(infoNameBytes_);\\n    }\\n\\n    /// @inheritdoc IFluidOracle\\n    function getExchangeRate() external view virtual returns (uint256 exchangeRate_);\\n\\n    /// @inheritdoc IFluidOracle\\n    function getExchangeRateOperate() external view virtual returns (uint256 exchangeRate_);\\n\\n    /// @inheritdoc IFluidOracle\\n    function getExchangeRateLiquidate() external view virtual returns (uint256 exchangeRate_);\\n}\\n\",\"keccak256\":\"0x2b56537a18379b4d7f69b9d95ebdb39e302951dbcaca882c27b4405bf1ea784b\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/implementations/weETHsOracleImpl.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { IWeETHsAccountant } from \\\"../interfaces/external/IWeETHsAccountant.sol\\\";\\nimport { ErrorTypes } from \\\"../errorTypes.sol\\\";\\nimport { Error as OracleError } from \\\"../error.sol\\\";\\nimport { OracleUtils } from \\\"../libraries/oracleUtils.sol\\\";\\n\\n/// @title   weETHs Oracle Implementation\\n/// @notice  This contract is used to get the exchange rate between weETHs and ETH\\nabstract contract WeETHsOracleImpl is OracleError {\\n    /// @notice constant value for price scaling to reduce gas usage\\n    uint256 internal immutable _WEETHS_PRICE_SCALER_MULTIPLIER;\\n\\n    /// @notice WEETHS contract accountant, e.g. on mainnet 0xbe16605B22a7faCEf247363312121670DFe5afBE\\n    IWeETHsAccountant internal immutable _WEETHS_ACCOUNTANT;\\n\\n    /// @notice constructor sets the weETHs (Symbiotic Etherfi's wrapped eETH) `weETHs_` token address.\\n    constructor(IWeETHsAccountant weETHsAccountant_, address pricedAsset_) {\\n        if (address(weETHsAccountant_) == address(0)) {\\n            revert FluidOracleError(ErrorTypes.WeETHsOracle__InvalidParams);\\n        }\\n        if (weETHsAccountant_.vault() != pricedAsset_) {\\n            // sanity check to make sure no human error in passing in the correct accountant address\\n            revert FluidOracleError(ErrorTypes.WeETHsOracle__InvalidParams);\\n        }\\n\\n        _WEETHS_ACCOUNTANT = weETHsAccountant_;\\n\\n        _WEETHS_PRICE_SCALER_MULTIPLIER = 10 ** (OracleUtils.RATE_OUTPUT_DECIMALS - 18); // e.g. 1e9\\n    }\\n\\n    /// @dev            Get the exchange rate for operate() for the weETHs contract.\\n    ///                 reverts if the accountant contract is paused.\\n    /// @return rate_   The exchange rate in `OracleUtils.RATE_OUTPUT_DECIMALS`\\n    function _getWeETHsExchangeRateOperate() internal view returns (uint256 rate_) {\\n        return _WEETHS_ACCOUNTANT.getRateSafe() * _WEETHS_PRICE_SCALER_MULTIPLIER;\\n    }\\n\\n    /// @dev            Get the exchange rate for liquidate() for the weETHs contract\\n    /// @return rate_   The exchange rate in `OracleUtils.RATE_OUTPUT_DECIMALS`\\n    function _getWeETHsExchangeRateLiquidate() internal view returns (uint256 rate_) {\\n        return _WEETHS_ACCOUNTANT.getRate() * _WEETHS_PRICE_SCALER_MULTIPLIER;\\n    }\\n\\n    /// @notice returns all weETHs oracle related data as utility for easy off-chain use / block explorer in a single view method\\n    function weETHsOracleData()\\n        public\\n        view\\n        returns (\\n            uint256 weETHsExchangeRateOperate_,\\n            bool operateRateReverts_,\\n            uint256 weETHsExchangeRateLiquidate_,\\n            IWeETHsAccountant weETHsAccountant_\\n        )\\n    {\\n        try _WEETHS_ACCOUNTANT.getRateSafe() returns (uint256) {\\n            weETHsExchangeRateOperate_ = _getWeETHsExchangeRateOperate();\\n        } catch {\\n            operateRateReverts_ = true;\\n        }\\n        weETHsAccountant_ = _WEETHS_ACCOUNTANT;\\n        weETHsExchangeRateLiquidate_ = _getWeETHsExchangeRateLiquidate();\\n    }\\n}\\n\",\"keccak256\":\"0x2615719344f2d573b739439f7d2c66604dec1bcd80b125d5bd35f8e799e60338\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/implementations/wstETHOracleImpl.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { IWstETH } from \\\"../interfaces/external/IWstETH.sol\\\";\\nimport { ErrorTypes } from \\\"../errorTypes.sol\\\";\\nimport { Error as OracleError } from \\\"../error.sol\\\";\\nimport { OracleUtils } from \\\"../libraries/oracleUtils.sol\\\";\\n\\n/// @title   wstETH Oracle Implementation\\n/// @notice  This contract is used to get the exchange rate between wstETH and stETH\\nabstract contract WstETHOracleImpl is OracleError {\\n    /// @notice constant value for price scaling to reduce gas usage\\n    uint256 internal immutable _WSTETH_PRICE_SCALER_MULTIPLIER;\\n\\n    /// @notice WSTETH contract, e.g. on mainnet 0x7f39c581f595b53c5cb19bd0b3f8da6c935e2ca0\\n    IWstETH internal immutable _WSTETH;\\n\\n    /// @notice constructor sets the wstETH `wstETH_` token address.\\n    constructor(IWstETH wstETH_) {\\n        if (address(wstETH_) == address(0)) {\\n            revert FluidOracleError(ErrorTypes.WstETHOracle__InvalidParams);\\n        }\\n\\n        _WSTETH = wstETH_;\\n\\n        _WSTETH_PRICE_SCALER_MULTIPLIER = 10 ** (OracleUtils.RATE_OUTPUT_DECIMALS - 18); // e.g. 1e9\\n    }\\n\\n    /// @notice         Get the exchange rate from wstETH contract\\n    /// @return rate_   The exchange rate in `OracleUtils.RATE_OUTPUT_DECIMALS`\\n    function _getWstETHExchangeRate() internal view returns (uint256 rate_) {\\n        return _WSTETH.stEthPerToken() * _WSTETH_PRICE_SCALER_MULTIPLIER;\\n    }\\n\\n    /// @notice returns all wWtETH oracle related data as utility for easy off-chain use / block explorer in a single view method\\n    function wstETHOracleData() public view returns (uint256 wstETHExchangeRate_, IWstETH wstETH_) {\\n        return (_getWstETHExchangeRate(), _WSTETH);\\n    }\\n}\\n\",\"keccak256\":\"0x2c923e9fc9107a469e55dfa9a6a1d02f44be696cfafdb078d76fc6d3ef5695bc\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/interfaces/external/IWeETHsAccountant.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\ninterface IWeETHsAccountant {\\n    /**\\n     * @notice Get this BoringVault's current rate in the base.\\n     */\\n    function getRate() external view returns (uint256 rate);\\n\\n    /**\\n     * @notice Get this BoringVault's current rate in the base.\\n     * @dev Revert if paused.\\n     */\\n    function getRateSafe() external view returns (uint256 rate);\\n\\n    /**\\n     * @notice The BoringVault this accountant is working with.\\n     *         Used to determine share supply for fee calculation.\\n     */\\n    function vault() external view returns (address vault);\\n}\\n\",\"keccak256\":\"0x47bec96759024b278b12fb33ca93d4903f2326a5f67d5236754f2b132a7e14f0\",\"license\":\"MIT\"},\"contracts/oracle/interfaces/external/IWstETH.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\ninterface IWstETH {\\n    /**\\n     * @notice Get amount of stETH for 1 wstETH\\n     * @return Amount of stETH for 1 wstETH\\n     */\\n    function stEthPerToken() external view returns (uint256);\\n\\n    /**\\n     * @notice Get amount of wstETH for 1 stETH\\n     * @return Amount of wstETH for 1 stETH\\n     */\\n    function tokensPerStEth() external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xfe6c8477bea4b01e693d5a8ca635e795e203fe53ddee0fb30f3dcf9a0e5f4f61\",\"license\":\"MIT\"},\"contracts/oracle/interfaces/iFluidOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\ninterface IFluidOracle {\\n    /// @dev Deprecated. Use `getExchangeRateOperate()` and `getExchangeRateLiquidate()` instead. Only implemented for\\n    ///      backwards compatibility.\\n    function getExchangeRate() external view returns (uint256 exchangeRate_);\\n\\n    /// @notice Get the `exchangeRate_` between the underlying asset and the peg asset in 1e27 for operates\\n    function getExchangeRateOperate() external view returns (uint256 exchangeRate_);\\n\\n    /// @notice Get the `exchangeRate_` between the underlying asset and the peg asset in 1e27 for liquidations\\n    function getExchangeRateLiquidate() external view returns (uint256 exchangeRate_);\\n\\n    /// @notice helper string to easily identify the oracle. E.g. token symbols\\n    function infoName() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xeba2e991e41f8b68e2d639935931aadf39e15ea94ea7aa65b2fb3039d27dca63\",\"license\":\"MIT\"},\"contracts/oracle/libraries/oracleUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\n/// @title Oracle utils library\\n/// @notice implements common utility methods for Fluid Oracles\\nlibrary OracleUtils {\\n    /// @dev The scaler for max delta point math (100%)\\n    uint256 internal constant HUNDRED_PERCENT_DELTA_SCALER = 10_000;\\n    /// @dev output precision of rates\\n    uint256 internal constant RATE_OUTPUT_DECIMALS = 27;\\n\\n    /// @dev checks if `mainSourceRate_` is within a `maxDeltaPercent_` of `checkSourceRate_`. Returns true if so.\\n    function isRateOutsideDelta(\\n        uint256 mainSourceRate_,\\n        uint256 checkSourceRate_,\\n        uint256 maxDeltaPercent_\\n    ) internal pure returns (bool) {\\n        uint256 offset_ = (checkSourceRate_ * maxDeltaPercent_) / HUNDRED_PERCENT_DELTA_SCALER;\\n        return (mainSourceRate_ > (checkSourceRate_ + offset_) || mainSourceRate_ < (checkSourceRate_ - offset_));\\n    }\\n}\\n\",\"keccak256\":\"0x968b1a0606875abd523895c5075cf6c34c296919e77b0da7dd952374398e2a4c\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/oracles/weETHsWstETHOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { FluidOracle } from \\\"../fluidOracle.sol\\\";\\nimport { WstETHOracleImpl } from \\\"../implementations/wstETHOracleImpl.sol\\\";\\nimport { WeETHsOracleImpl } from \\\"../implementations/weETHsOracleImpl.sol\\\";\\nimport { IWstETH } from \\\"../interfaces/external/IWstETH.sol\\\";\\nimport { IWeETHsAccountant } from \\\"../interfaces/external/IWeETHsAccountant.sol\\\";\\nimport { OracleUtils } from \\\"../libraries/oracleUtils.sol\\\";\\n\\n/// @title   Oracle for weETHs (Symbiotic Etherfi's wrapped eETH) to wstETH.\\n///          wstETH is the debt token here (get amount of wstETH for 1 weETHs)\\ncontract WeETHsWstETHOracle is FluidOracle, WstETHOracleImpl, WeETHsOracleImpl {\\n    /// @param infoName_         Oracle identify helper name.\\n    /// @param wstETH_           address of the wstETH contract\\n    /// @param weETHsAccountant_ address of the weETHs accountant contract\\n    /// @param weETHs_           address of the weETHs token vault contract\\n    constructor(\\n        string memory infoName_,\\n        IWstETH wstETH_,\\n        IWeETHsAccountant weETHsAccountant_,\\n        address weETHs_\\n    ) WstETHOracleImpl(wstETH_) WeETHsOracleImpl(weETHsAccountant_, weETHs_) FluidOracle(infoName_) {}\\n\\n    /// @inheritdoc FluidOracle\\n    function getExchangeRateOperate() public view override returns (uint256 exchangeRate_) {\\n        // weEths -> wstETH\\n        exchangeRate_ =\\n            (_WEETHS_ACCOUNTANT.getRateSafe() * (10 ** OracleUtils.RATE_OUTPUT_DECIMALS)) /\\n            _WSTETH.stEthPerToken();\\n    }\\n\\n    /// @inheritdoc FluidOracle\\n    function getExchangeRateLiquidate() external view override returns (uint256 exchangeRate_) {\\n        // weEths -> wstETH\\n        exchangeRate_ =\\n            (_WEETHS_ACCOUNTANT.getRate() * (10 ** OracleUtils.RATE_OUTPUT_DECIMALS)) /\\n            _WSTETH.stEthPerToken();\\n    }\\n\\n    /// @inheritdoc FluidOracle\\n    function getExchangeRate() external view override returns (uint256 exchangeRate_) {\\n        return getExchangeRateOperate();\\n    }\\n}\\n\",\"keccak256\":\"0xc76c6e0c0fc63a428d294cd8dfe0ada1f300032ca68b39e3de9d2098f5fb4fb7\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c8063dfaba9b511610050578063dfaba9b5146100e5578063e6aa216c14610117578063f3190c891461011f57600080fd5b806359ffabbc146100775780638e7bfbc0146100ba578063abd5f95d146100d0575b600080fd5b61007f610127565b6040805194855292151560208501529183015273ffffffffffffffffffffffffffffffffffffffff1660608201526080015b60405180910390f35b6100c261021d565b6040519081526020016100b1565b6100d8610362565b6040516100b191906107e4565b6100ed6104c7565b6040805192835273ffffffffffffffffffffffffffffffffffffffff9091166020830152016100b1565b6100c26104fa565b6100c2610504565b6000806000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663282a87006040518163ffffffff1660e01b8152600401602060405180830381865afa9250505080156101d2575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526101cf91810190610850565b60015b6101df57600192506101eb565b6101e761060c565b9450505b507f00000000000000000000000000000000000000000000000000000000000000006102156106c8565b915090919293565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663035faf826040518163ffffffff1660e01b8152600401602060405180830381865afa15801561028a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ae9190610850565b6102ba601b600a6109ba565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663282a87006040518163ffffffff1660e01b8152600401602060405180830381865afa158015610325573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103499190610850565b61035391906109cd565b61035d91906109e4565b905090565b606060005b6020811080156103cd57507f000000000000000000000000000000000000000000000000000000000000000081602081106103a4576103a4610a1f565b1a60f81b7fff000000000000000000000000000000000000000000000000000000000000001615155b156103e457806103dc81610a4e565b915050610367565b60008167ffffffffffffffff8111156103ff576103ff610a86565b6040519080825280601f01601f191660200182016040528015610429576020820181803683370190505b50905060005b828110156104c0577f0000000000000000000000000000000000000000000000000000000000000000816020811061046957610469610a1f565b1a60f81b82828151811061047f5761047f610a1f565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350806104b881610a4e565b91505061042f565b5092915050565b6000806104d2610756565b927f000000000000000000000000000000000000000000000000000000000000000092509050565b600061035d61021d565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663035faf826040518163ffffffff1660e01b8152600401602060405180830381865afa158015610571573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105959190610850565b6105a1601b600a6109ba565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663679aefce6040518163ffffffff1660e01b8152600401602060405180830381865afa158015610325573d6000803e3d6000fd5b60007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663282a87006040518163ffffffff1660e01b8152600401602060405180830381865afa15801561069a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106be9190610850565b61035d91906109cd565b60007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663679aefce6040518163ffffffff1660e01b8152600401602060405180830381865afa15801561069a573d6000803e3d6000fd5b60007f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663035faf826040518163ffffffff1660e01b8152600401602060405180830381865afa15801561069a573d6000803e3d6000fd5b600060208083528351808285015260005b81811015610811578581018301518582016040015282016107f5565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b60006020828403121561086257600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600181815b808511156108f157817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156108d7576108d7610869565b808516156108e457918102915b93841c939080029061089d565b509250929050565b600082610908575060016109b4565b81610915575060006109b4565b816001811461092b576002811461093557610951565b60019150506109b4565b60ff84111561094657610946610869565b50506001821b6109b4565b5060208310610133831016604e8410600b8410161715610974575081810a6109b4565b61097e8383610898565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156109b0576109b0610869565b0290505b92915050565b60006109c683836108f9565b9392505050565b80820281158282048414176109b4576109b4610869565b600082610a1a577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610a7f57610a7f610869565b5060010190565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fdfea26469706673582212204fbb267aa6e667334ea45c719e660a973254c9b439ada060ba7661af5f8ec5d864736f6c63430008150033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "constructor": {
        "params": {
          "infoName_": "Oracle identify helper name.",
          "weETHsAccountant_": "address of the weETHs accountant contract",
          "weETHs_": "address of the weETHs token vault contract",
          "wstETH_": "address of the wstETH contract"
        }
      },
      "getExchangeRate()": {
        "details": "Deprecated. Use `getExchangeRateOperate()` and `getExchangeRateLiquidate()` instead. Only implemented for      backwards compatibility."
      }
    },
    "title": "Oracle for weETHs (Symbiotic Etherfi's wrapped eETH) to wstETH.          wstETH is the debt token here (get amount of wstETH for 1 weETHs)",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getExchangeRateLiquidate()": {
        "notice": "Get the `exchangeRate_` between the underlying asset and the peg asset in 1e27 for liquidations"
      },
      "getExchangeRateOperate()": {
        "notice": "Get the `exchangeRate_` between the underlying asset and the peg asset in 1e27 for operates"
      },
      "infoName()": {
        "notice": "helper string to easily identify the oracle. E.g. token symbols"
      },
      "weETHsOracleData()": {
        "notice": "returns all weETHs oracle related data as utility for easy off-chain use / block explorer in a single view method"
      },
      "wstETHOracleData()": {
        "notice": "returns all wWtETH oracle related data as utility for easy off-chain use / block explorer in a single view method"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}