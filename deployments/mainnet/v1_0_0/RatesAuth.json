{
  "address": "0x1e6B029284dc2779F8FfBD83a3a5aA00EdCE6ba4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "liquidity_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "percentRateChangeAllowed_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cooldown_",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorId_",
          "type": "uint256"
        }
      ],
      "name": "FluidConfigError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "borrowToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRateKink1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRateKink1",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "oldRateKink2",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "newRateKink2",
          "type": "uint256"
        }
      ],
      "name": "LogUpdateRateAtKink",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "COOLDOWN",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDITY",
      "outputs": [
        {
          "internalType": "contract IFluidLiquidity",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "PERCENT_RATE_CHANGE_ALLOWED",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TEAM_MULTISIG",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "TEAM_MULTISIG2",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "tokenLastUpdateTimestamp",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "rateAtUtilizationKink",
              "type": "uint256"
            }
          ],
          "internalType": "struct Structs.RateAtKinkV1",
          "name": "rateStruct_",
          "type": "tuple"
        }
      ],
      "name": "updateRateDataV1",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "token",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "rateAtUtilizationKink1",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "rateAtUtilizationKink2",
              "type": "uint256"
            }
          ],
          "internalType": "struct Structs.RateAtKinkV2",
          "name": "rateStruct_",
          "type": "tuple"
        }
      ],
      "name": "updateRateDataV2",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x03f4083958906c877635e7efbb62f293fd7db2a7376b2ab66abad4ff56f6835b",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x0Ed35B1609Ec45c7079E80d11149a52717e4859A",
    "contractAddress": null,
    "transactionIndex": 28,
    "gasUsed": "916582",
    "logsBloom": "0x
    "blockHash": "0x216cb26f7f1a9e03d252b8068299522fbd98ddad63c51d945822509841282141",
    "transactionHash": "0x03f4083958906c877635e7efbb62f293fd7db2a7376b2ab66abad4ff56f6835b",
    "logs": [],
    "blockNumber": 22840242,
    "cumulativeGasUsed": "7756211",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x52Aa899454998Be5b000Ad077a46Bbe360F4e497",
    2000,
    1
  ],
  "numDeployments": 2,
  "solcInputHash": "5796c064be2dd77208410ca82d6c5702",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"liquidity_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"percentRateChangeAllowed_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cooldown_\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorId_\",\"type\":\"uint256\"}],\"name\":\"FluidConfigError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"borrowToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRateKink1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRateKink1\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"oldRateKink2\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newRateKink2\",\"type\":\"uint256\"}],\"name\":\"LogUpdateRateAtKink\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"COOLDOWN\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDITY\",\"outputs\":[{\"internalType\":\"contract IFluidLiquidity\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"PERCENT_RATE_CHANGE_ALLOWED\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TEAM_MULTISIG\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"TEAM_MULTISIG2\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"tokenLastUpdateTimestamp\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rateAtUtilizationKink\",\"type\":\"uint256\"}],\"internalType\":\"struct Structs.RateAtKinkV1\",\"name\":\"rateStruct_\",\"type\":\"tuple\"}],\"name\":\"updateRateDataV1\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"rateAtUtilizationKink1\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateAtUtilizationKink2\",\"type\":\"uint256\"}],\"internalType\":\"struct Structs.RateAtKinkV2\",\"name\":\"rateStruct_\",\"type\":\"tuple\"}],\"name\":\"updateRateDataV2\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"events\":{\"LogUpdateRateAtKink(address,uint256,uint256,uint256,uint256)\":{\"notice\":\"emitted when borrow rate for specified borrow token is updated based on         team multisig input of rate at kinks\"}},\"kind\":\"user\",\"methods\":{\"TEAM_MULTISIG()\":{\"notice\":\"Team multisigs allowed to trigger methods\"},\"tokenLastUpdateTimestamp(address)\":{\"notice\":\"last timestamp when a token's rate was updated\"}},\"notice\":\"Sets borrow rate for specified borrow token at Liquidity based on team multisig input.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/config/ratesAuth/main.sol\":\"FluidRatesAuth\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000000},\"remappings\":[]},\"sources\":{\"contracts/config/error.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\ncontract Error {\\n    error FluidConfigError(uint256 errorId_);\\n}\\n\",\"keccak256\":\"0x7fac063d4cfeb626e3a2720595a2db1d7352353ed6c7df61e95a6c164450c9e6\",\"license\":\"BUSL-1.1\"},\"contracts/config/errorTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nlibrary ErrorTypes {\\n    /***********************************|\\n    |    ExpandPercentConfigHandler     | \\n    |__________________________________*/\\n\\n    /// @notice thrown when an input address is zero\\n    uint256 internal constant ExpandPercentConfigHandler__AddressZero = 100001;\\n\\n    /// @notice thrown when an unauthorized `msg.sender` calls a protected method\\n    uint256 internal constant ExpandPercentConfigHandler__Unauthorized = 100002;\\n\\n    /// @notice thrown when invalid params are passed into a method\\n    uint256 internal constant ExpandPercentConfigHandler__InvalidParams = 100003;\\n\\n    /// @notice thrown when no update is currently needed\\n    uint256 internal constant ExpandPercentConfigHandler__NoUpdate = 100004;\\n\\n    /// @notice thrown when slot is not used, e.g. when borrow token is 0 there is no borrow data\\n    uint256 internal constant ExpandPercentConfigHandler__SlotDoesNotExist = 100005;\\n\\n    /***********************************|\\n    |      EthenaRateConfigHandler      | \\n    |__________________________________*/\\n\\n    /// @notice thrown when an input address is zero\\n    uint256 internal constant EthenaRateConfigHandler__AddressZero = 100011;\\n\\n    /// @notice thrown when an unauthorized `msg.sender` calls a protected method\\n    uint256 internal constant EthenaRateConfigHandler__Unauthorized = 100012;\\n\\n    /// @notice thrown when invalid params are passed into a method\\n    uint256 internal constant EthenaRateConfigHandler__InvalidParams = 100013;\\n\\n    /// @notice thrown when no update is currently needed\\n    uint256 internal constant EthenaRateConfigHandler__NoUpdate = 100014;\\n\\n    /***********************************|\\n    |       MaxBorrowConfigHandler      | \\n    |__________________________________*/\\n\\n    /// @notice thrown when an input address is zero\\n    uint256 internal constant MaxBorrowConfigHandler__AddressZero = 100021;\\n\\n    /// @notice thrown when an unauthorized `msg.sender` calls a protected method\\n    uint256 internal constant MaxBorrowConfigHandler__Unauthorized = 100022;\\n\\n    /// @notice thrown when invalid params are passed into a method\\n    uint256 internal constant MaxBorrowConfigHandler__InvalidParams = 100023;\\n\\n    /// @notice thrown when no update is currently needed\\n    uint256 internal constant MaxBorrowConfigHandler__NoUpdate = 100024;\\n\\n    /***********************************|\\n    |       BufferRateConfigHandler     | \\n    |__________________________________*/\\n\\n    /// @notice thrown when an input address is zero\\n    uint256 internal constant BufferRateConfigHandler__AddressZero = 100031;\\n\\n    /// @notice thrown when an unauthorized `msg.sender` calls a protected method\\n    uint256 internal constant BufferRateConfigHandler__Unauthorized = 100032;\\n\\n    /// @notice thrown when invalid params are passed into a method\\n    uint256 internal constant BufferRateConfigHandler__InvalidParams = 100033;\\n\\n    /// @notice thrown when no update is currently needed\\n    uint256 internal constant BufferRateConfigHandler__NoUpdate = 100034;\\n\\n    /// @notice thrown when rate data version is not supported\\n    uint256 internal constant BufferRateConfigHandler__RateVersionUnsupported = 100035;\\n\\n    /***********************************|\\n    |          FluidRatesAuth           | \\n    |__________________________________*/\\n\\n    /// @notice thrown when no update is currently needed\\n    uint256 internal constant RatesAuth__NoUpdate = 100041;\\n\\n    /// @notice thrown when an unauthorized `msg.sender` calls a protected method\\n    uint256 internal constant RatesAuth__Unauthorized = 100042;\\n\\n    /// @notice thrown when invalid params are passed into a method\\n    uint256 internal constant RatesAuth__InvalidParams = 100043;\\n\\n    /// @notice thrown when cooldown is not yet expired\\n    uint256 internal constant RatesAuth__CooldownLeft = 100044;\\n\\n    /// @notice thrown when version is invalid\\n    uint256 internal constant RatesAuth__InvalidVersion = 100045;\\n\\n    /***********************************|\\n    |          ListTokenAuth            | \\n    |__________________________________*/\\n\\n    /// @notice thrown when an unauthorized `msg.sender` calls a protected method\\n    uint256 internal constant ListTokenAuth__Unauthorized = 100051;\\n\\n    /// @notice thrown when invalid params are passed into a method\\n    uint256 internal constant ListTokenAuth_AlreadyInitialized = 100052;\\n\\n    /// @notice thrown when invalid params are passed into a method\\n    uint256 internal constant ListTokenAuth__InvalidParams = 100053;\\n\\n    /***********************************|\\n    |       CollectRevenueAuth          | \\n    |__________________________________*/\\n\\n    /// @notice thrown when an unauthorized `msg.sender` calls a protected method\\n    uint256 internal constant CollectRevenueAuth__Unauthorized = 100061;\\n\\n    /// @notice thrown when invalid params are passed into a method\\n    uint256 internal constant CollectRevenueAuth__InvalidParams = 100062;\\n\\n    /***********************************|\\n    |       FluidWithdrawLimitAuth      | \\n    |__________________________________*/\\n\\n    /// @notice thrown when an unauthorized `msg.sender` calls a protected method\\n    uint256 internal constant WithdrawLimitAuth__NoUserSupply = 100071;\\n\\n    /// @notice thrown when an unauthorized `msg.sender` calls a protected method\\n    uint256 internal constant WithdrawLimitAuth__Unauthorized = 100072;\\n\\n    /// @notice thrown when invalid params are passed into a method\\n    uint256 internal constant WithdrawLimitAuth__InvalidParams = 100073;\\n\\n    /// @notice thrown when no more withdrawal limit can be set for the day\\n    uint256 internal constant WithdrawLimitAuth__DailyLimitReached = 100074;\\n\\n    /// @notice thrown when no more withdrawal limit can be set for the hour\\n    uint256 internal constant WithdrawLimitAuth__HourlyLimitReached = 100075;\\n\\n    /// @notice thrown when the withdrawal limit and userSupply difference exceeds 5%\\n    uint256 internal constant WithdrawLimitAuth__ExcessPercentageDifference = 100076;\\n\\n    /***********************************|\\n    |       DexFeeHandler               | \\n    |__________________________________*/\\n\\n    /// @notice thrown when fee update is not required\\n    uint256 internal constant DexFeeHandler__FeeUpdateNotRequired = 100081;\\n\\n    /// @notice thrown when invalid params are passed into a method\\n    uint256 internal constant DexFeeHandler__InvalidParams = 100082;\\n\\n    /// @notice thrown when an unauthorized `msg.sender` calls\\n    uint256 internal constant DexFeeHandler__Unauthorized = 100083;\\n\\n    /***********************************|\\n    |           RangeAuthDex            | \\n    |__________________________________*/\\n\\n    uint256 internal constant RangeAuthDex__InvalidParams = 100091;\\n    uint256 internal constant RangeAuthDex__CooldownLeft = 100092;\\n    uint256 internal constant RangeAuthDex__Unauthorized = 100093;\\n    uint256 internal constant RangeAuthDex__ExceedAllowedPercentageChange = 100094;\\n    uint256 internal constant RangeAuthDex__InvalidShiftTime = 100095;\\n\\n    /***********************************|\\n    |           FluidLimitsAuth         | \\n    |__________________________________*/\\n\\n    uint256 internal constant LimitsAuth__InvalidParams = 100101;\\n    uint256 internal constant LimitsAuth__Unauthorized = 100102;\\n    uint256 internal constant LimitsAuth__UserNotDefinedYet = 100103;\\n    uint256 internal constant LimitsAuth__ExceedAllowedPercentageChange = 100104;\\n    uint256 internal constant LimitsAuth__CoolDownPending = 100105;\\n\\n    /***********************************|\\n    |          DexFeeAuth               | \\n    |__________________________________*/\\n\\n    /// @notice thrown when an unauthorized `msg.sender` calls\\n    uint256 internal constant DexFeeAuth__Unauthorized = 100111;\\n}\\n\",\"keccak256\":\"0x39a56913f2cc95a39994cf3f665839abcc5841ad67b642941e7e6f6205f2d96c\",\"license\":\"BUSL-1.1\"},\"contracts/config/ratesAuth/main.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { IFluidLiquidity } from \\\"../../liquidity/interfaces/iLiquidity.sol\\\";\\nimport { LiquiditySlotsLink } from \\\"../../libraries/liquiditySlotsLink.sol\\\";\\nimport { Error } from \\\"../error.sol\\\";\\nimport { ErrorTypes } from \\\"../errorTypes.sol\\\";\\nimport { Structs as AdminModuleStructs } from \\\"../../liquidity/adminModule/structs.sol\\\";\\n\\nabstract contract Constants {\\n    IFluidLiquidity public immutable LIQUIDITY;\\n    /// @notice Team multisigs allowed to trigger methods\\n    address public constant TEAM_MULTISIG = 0x4F6F977aCDD1177DCD81aB83074855EcB9C2D49e;\\n    address public constant TEAM_MULTISIG2 = 0x1e2e1aeD876f67Fe4Fd54090FD7B8F57Ce234219;\\n\\n    uint256 internal constant X16 = 0xffff;\\n\\n    uint256 public immutable PERCENT_RATE_CHANGE_ALLOWED;\\n    uint256 public immutable COOLDOWN;\\n}\\n\\nabstract contract Events {\\n    /// @notice emitted when borrow rate for specified borrow token is updated based on\\n    ///         team multisig input of rate at kinks\\n    event LogUpdateRateAtKink(\\n        address borrowToken,\\n        uint256 oldRateKink1,\\n        uint256 newRateKink1,\\n        uint256 oldRateKink2,\\n        uint256 newRateKink2\\n    );\\n}\\n\\nabstract contract Structs {\\n    struct RateAtKinkV1 {\\n        address token;\\n        uint256 rateAtUtilizationKink;\\n    }\\n\\n    struct RateAtKinkV2 {\\n        address token;\\n        uint256 rateAtUtilizationKink1;\\n        uint256 rateAtUtilizationKink2;\\n    }\\n}\\n\\nabstract contract Variables {\\n    /// @notice  last timestamp when a token's rate was updated\\n    mapping(address => uint256) public tokenLastUpdateTimestamp;\\n}\\n\\n/// @notice Sets borrow rate for specified borrow token at Liquidity based on team multisig input.\\ncontract FluidRatesAuth is Constants, Error, Events, Structs, Variables {\\n    /// @dev Validates that an address is a multisig (taken from reserve auth)\\n    modifier onlyMultisig() {\\n        if (TEAM_MULTISIG != msg.sender && TEAM_MULTISIG2 != msg.sender) {\\n            revert FluidConfigError(ErrorTypes.RatesAuth__Unauthorized);\\n        }\\n        _;\\n    }\\n\\n    constructor(address liquidity_, uint256 percentRateChangeAllowed_, uint256 cooldown_) {\\n        if (liquidity_ == address(0)) {\\n            revert FluidConfigError(ErrorTypes.RatesAuth__InvalidParams);\\n        }\\n        if (percentRateChangeAllowed_ == 0 || cooldown_ == 0) {\\n            revert FluidConfigError(ErrorTypes.RatesAuth__InvalidParams);\\n        }\\n        if (percentRateChangeAllowed_ > 1e4) {\\n            revert FluidConfigError(ErrorTypes.RatesAuth__InvalidParams);\\n        }\\n        LIQUIDITY = IFluidLiquidity(liquidity_);\\n        PERCENT_RATE_CHANGE_ALLOWED = percentRateChangeAllowed_;\\n        COOLDOWN = cooldown_;\\n    }\\n\\n    function updateRateDataV1(RateAtKinkV1 calldata rateStruct_) external onlyMultisig {\\n        bytes32 borrowRateDataSlot_ = LiquiditySlotsLink.calculateMappingStorageSlot(\\n            LiquiditySlotsLink.LIQUIDITY_RATE_DATA_MAPPING_SLOT,\\n            rateStruct_.token\\n        );\\n        uint256 rateConfig_ = LIQUIDITY.readFromStorage(borrowRateDataSlot_);\\n        if (rateConfig_ & 0xF != 1) {\\n            revert FluidConfigError(ErrorTypes.RatesAuth__InvalidVersion);\\n        }\\n\\n        if (block.timestamp - tokenLastUpdateTimestamp[rateStruct_.token] < COOLDOWN) {\\n            revert FluidConfigError(ErrorTypes.RatesAuth__CooldownLeft);\\n        }\\n\\n        AdminModuleStructs.RateDataV1Params memory rateData_;\\n        rateData_.token = rateStruct_.token;\\n\\n        uint256 oldRateKink1_ = (rateConfig_ >> LiquiditySlotsLink.BITS_RATE_DATA_V1_RATE_AT_UTILIZATION_KINK) & X16;\\n\\n        // checks the diff to be lesser than allowed\\n        if (_percentDiffForValue(oldRateKink1_, rateStruct_.rateAtUtilizationKink) > PERCENT_RATE_CHANGE_ALLOWED) {\\n            revert FluidConfigError(ErrorTypes.RatesAuth__NoUpdate);\\n        }\\n\\n        // setting up the rateData_ struct\\n        rateData_.token = rateStruct_.token;\\n        rateData_.kink = (rateConfig_ >> LiquiditySlotsLink.BITS_RATE_DATA_V1_UTILIZATION_AT_KINK) & X16;\\n        rateData_.rateAtUtilizationZero =\\n            (rateConfig_ >> LiquiditySlotsLink.BITS_RATE_DATA_V1_RATE_AT_UTILIZATION_ZERO) &\\n            X16;\\n        rateData_.rateAtUtilizationKink = rateStruct_.rateAtUtilizationKink;\\n        rateData_.rateAtUtilizationMax =\\n            (rateConfig_ >> LiquiditySlotsLink.BITS_RATE_DATA_V1_RATE_AT_UTILIZATION_MAX) &\\n            X16;\\n\\n        AdminModuleStructs.RateDataV1Params[] memory liquidityParams_ = new AdminModuleStructs.RateDataV1Params[](1);\\n        liquidityParams_[0] = rateData_;\\n        LIQUIDITY.updateRateDataV1s(liquidityParams_);\\n\\n        tokenLastUpdateTimestamp[rateData_.token] = block.timestamp;\\n\\n        emit LogUpdateRateAtKink(rateData_.token, oldRateKink1_, rateStruct_.rateAtUtilizationKink, 0, 0);\\n    }\\n\\n    function updateRateDataV2(RateAtKinkV2 calldata rateStruct_) external onlyMultisig {\\n        bytes32 borrowRateDataSlot_ = LiquiditySlotsLink.calculateMappingStorageSlot(\\n            LiquiditySlotsLink.LIQUIDITY_RATE_DATA_MAPPING_SLOT,\\n            rateStruct_.token\\n        );\\n        uint256 rateConfig_ = LIQUIDITY.readFromStorage(borrowRateDataSlot_);\\n        if (rateConfig_ & 0xF != 2) {\\n            revert FluidConfigError(ErrorTypes.RatesAuth__InvalidVersion);\\n        }\\n\\n        if (block.timestamp - tokenLastUpdateTimestamp[rateStruct_.token] < COOLDOWN) {\\n            revert FluidConfigError(ErrorTypes.RatesAuth__CooldownLeft);\\n        }\\n\\n        AdminModuleStructs.RateDataV2Params memory rateData_;\\n\\n        uint256 oldRateKink1_ = (rateConfig_ >> LiquiditySlotsLink.BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_KINK1) & X16;\\n        uint256 oldRateKink2_ = (rateConfig_ >> LiquiditySlotsLink.BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_KINK2) & X16;\\n\\n        if (\\n            _percentDiffForValue(oldRateKink1_, rateStruct_.rateAtUtilizationKink1) > PERCENT_RATE_CHANGE_ALLOWED ||\\n            _percentDiffForValue(oldRateKink2_, rateStruct_.rateAtUtilizationKink2) > PERCENT_RATE_CHANGE_ALLOWED\\n        ) {\\n            revert FluidConfigError(ErrorTypes.RatesAuth__NoUpdate);\\n        }\\n\\n        // setting up the rateData_ struct\\n        rateData_.token = rateStruct_.token;\\n        rateData_.kink1 = (rateConfig_ >> LiquiditySlotsLink.BITS_RATE_DATA_V2_UTILIZATION_AT_KINK1) & X16;\\n        rateData_.kink2 = (rateConfig_ >> LiquiditySlotsLink.BITS_RATE_DATA_V2_UTILIZATION_AT_KINK2) & X16;\\n        rateData_.rateAtUtilizationZero =\\n            (rateConfig_ >> LiquiditySlotsLink.BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_ZERO) &\\n            X16;\\n        rateData_.rateAtUtilizationKink1 = rateStruct_.rateAtUtilizationKink1;\\n        rateData_.rateAtUtilizationKink2 = rateStruct_.rateAtUtilizationKink2;\\n        rateData_.rateAtUtilizationMax =\\n            (rateConfig_ >> LiquiditySlotsLink.BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_MAX) &\\n            X16;\\n\\n        AdminModuleStructs.RateDataV2Params[] memory params_ = new AdminModuleStructs.RateDataV2Params[](1);\\n        params_[0] = rateData_;\\n        LIQUIDITY.updateRateDataV2s(params_);\\n        tokenLastUpdateTimestamp[rateStruct_.token] = block.timestamp;\\n\\n        emit LogUpdateRateAtKink(\\n            rateStruct_.token,\\n            oldRateKink1_,\\n            rateStruct_.rateAtUtilizationKink1,\\n            oldRateKink2_,\\n            rateStruct_.rateAtUtilizationKink2\\n        );\\n    }\\n\\n    /// @dev gets the percentage difference between `oldValue_` and `newValue_` in relation to `oldValue_`\\n    function _percentDiffForValue(\\n        uint256 oldValue_,\\n        uint256 newValue_\\n    ) internal pure returns (uint256 configPercentDiff_) {\\n        if (oldValue_ == newValue_) {\\n            return 0;\\n        }\\n\\n        if (oldValue_ > newValue_) {\\n            // % of how much new value would be smaller\\n            configPercentDiff_ = oldValue_ - newValue_;\\n            // e.g. 10 - 8 = 2. 2 * 10000 / 10 -> 2000 (20%)\\n        } else {\\n            // % of how much new value would be bigger\\n            configPercentDiff_ = newValue_ - oldValue_;\\n            // e.g. 10 - 8 = 2. 2 * 10000 / 8 -> 2500 (25%)\\n        }\\n\\n        configPercentDiff_ = (configPercentDiff_ * 1e4) / oldValue_;\\n    }\\n}\\n\",\"keccak256\":\"0x0da54448bac9aa6b7f4c5f5a4b5a4976ed7671440cedd53f67e89c8d99ddf866\",\"license\":\"BUSL-1.1\"},\"contracts/infiniteProxy/interfaces/iProxy.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\ninterface IProxy {\\n    function setAdmin(address newAdmin_) external;\\n\\n    function setDummyImplementation(address newDummyImplementation_) external;\\n\\n    function addImplementation(address implementation_, bytes4[] calldata sigs_) external;\\n\\n    function removeImplementation(address implementation_) external;\\n\\n    function getAdmin() external view returns (address);\\n\\n    function getDummyImplementation() external view returns (address);\\n\\n    function getImplementationSigs(address impl_) external view returns (bytes4[] memory);\\n\\n    function getSigsImplementation(bytes4 sig_) external view returns (address);\\n\\n    function readFromStorage(bytes32 slot_) external view returns (uint256 result_);\\n}\\n\",\"keccak256\":\"0xbb605491d4bac08e816248feecae7dd17cfc1877c88b2e555abece2970f5ea00\",\"license\":\"MIT\"},\"contracts/libraries/liquiditySlotsLink.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\n/// @notice library that helps in reading / working with storage slot data of Fluid Liquidity.\\n/// @dev as all data for Fluid Liquidity is internal, any data must be fetched directly through manual\\n/// slot reading through this library or, if gas usage is less important, through the FluidLiquidityResolver.\\nlibrary LiquiditySlotsLink {\\n    /// @dev storage slot for status at Liquidity\\n    uint256 internal constant LIQUIDITY_STATUS_SLOT = 1;\\n    /// @dev storage slot for auths mapping at Liquidity\\n    uint256 internal constant LIQUIDITY_AUTHS_MAPPING_SLOT = 2;\\n    /// @dev storage slot for guardians mapping at Liquidity\\n    uint256 internal constant LIQUIDITY_GUARDIANS_MAPPING_SLOT = 3;\\n    /// @dev storage slot for user class mapping at Liquidity\\n    uint256 internal constant LIQUIDITY_USER_CLASS_MAPPING_SLOT = 4;\\n    /// @dev storage slot for exchangePricesAndConfig mapping at Liquidity\\n    uint256 internal constant LIQUIDITY_EXCHANGE_PRICES_MAPPING_SLOT = 5;\\n    /// @dev storage slot for rateData mapping at Liquidity\\n    uint256 internal constant LIQUIDITY_RATE_DATA_MAPPING_SLOT = 6;\\n    /// @dev storage slot for totalAmounts mapping at Liquidity\\n    uint256 internal constant LIQUIDITY_TOTAL_AMOUNTS_MAPPING_SLOT = 7;\\n    /// @dev storage slot for user supply double mapping at Liquidity\\n    uint256 internal constant LIQUIDITY_USER_SUPPLY_DOUBLE_MAPPING_SLOT = 8;\\n    /// @dev storage slot for user borrow double mapping at Liquidity\\n    uint256 internal constant LIQUIDITY_USER_BORROW_DOUBLE_MAPPING_SLOT = 9;\\n    /// @dev storage slot for listed tokens array at Liquidity\\n    uint256 internal constant LIQUIDITY_LISTED_TOKENS_ARRAY_SLOT = 10;\\n    /// @dev storage slot for listed tokens array at Liquidity\\n    uint256 internal constant LIQUIDITY_CONFIGS2_MAPPING_SLOT = 11;\\n\\n    // --------------------------------\\n    // @dev stacked uint256 storage slots bits position data for each:\\n\\n    // ExchangePricesAndConfig\\n    uint256 internal constant BITS_EXCHANGE_PRICES_BORROW_RATE = 0;\\n    uint256 internal constant BITS_EXCHANGE_PRICES_FEE = 16;\\n    uint256 internal constant BITS_EXCHANGE_PRICES_UTILIZATION = 30;\\n    uint256 internal constant BITS_EXCHANGE_PRICES_UPDATE_THRESHOLD = 44;\\n    uint256 internal constant BITS_EXCHANGE_PRICES_LAST_TIMESTAMP = 58;\\n    uint256 internal constant BITS_EXCHANGE_PRICES_SUPPLY_EXCHANGE_PRICE = 91;\\n    uint256 internal constant BITS_EXCHANGE_PRICES_BORROW_EXCHANGE_PRICE = 155;\\n    uint256 internal constant BITS_EXCHANGE_PRICES_SUPPLY_RATIO = 219;\\n    uint256 internal constant BITS_EXCHANGE_PRICES_BORROW_RATIO = 234;\\n    uint256 internal constant BITS_EXCHANGE_PRICES_USES_CONFIGS2 = 249;\\n\\n    // RateData:\\n    uint256 internal constant BITS_RATE_DATA_VERSION = 0;\\n    // RateData: V1\\n    uint256 internal constant BITS_RATE_DATA_V1_RATE_AT_UTILIZATION_ZERO = 4;\\n    uint256 internal constant BITS_RATE_DATA_V1_UTILIZATION_AT_KINK = 20;\\n    uint256 internal constant BITS_RATE_DATA_V1_RATE_AT_UTILIZATION_KINK = 36;\\n    uint256 internal constant BITS_RATE_DATA_V1_RATE_AT_UTILIZATION_MAX = 52;\\n    // RateData: V2\\n    uint256 internal constant BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_ZERO = 4;\\n    uint256 internal constant BITS_RATE_DATA_V2_UTILIZATION_AT_KINK1 = 20;\\n    uint256 internal constant BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_KINK1 = 36;\\n    uint256 internal constant BITS_RATE_DATA_V2_UTILIZATION_AT_KINK2 = 52;\\n    uint256 internal constant BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_KINK2 = 68;\\n    uint256 internal constant BITS_RATE_DATA_V2_RATE_AT_UTILIZATION_MAX = 84;\\n\\n    // TotalAmounts\\n    uint256 internal constant BITS_TOTAL_AMOUNTS_SUPPLY_WITH_INTEREST = 0;\\n    uint256 internal constant BITS_TOTAL_AMOUNTS_SUPPLY_INTEREST_FREE = 64;\\n    uint256 internal constant BITS_TOTAL_AMOUNTS_BORROW_WITH_INTEREST = 128;\\n    uint256 internal constant BITS_TOTAL_AMOUNTS_BORROW_INTEREST_FREE = 192;\\n\\n    // UserSupplyData\\n    uint256 internal constant BITS_USER_SUPPLY_MODE = 0;\\n    uint256 internal constant BITS_USER_SUPPLY_AMOUNT = 1;\\n    uint256 internal constant BITS_USER_SUPPLY_PREVIOUS_WITHDRAWAL_LIMIT = 65;\\n    uint256 internal constant BITS_USER_SUPPLY_LAST_UPDATE_TIMESTAMP = 129;\\n    uint256 internal constant BITS_USER_SUPPLY_EXPAND_PERCENT = 162;\\n    uint256 internal constant BITS_USER_SUPPLY_EXPAND_DURATION = 176;\\n    uint256 internal constant BITS_USER_SUPPLY_BASE_WITHDRAWAL_LIMIT = 200;\\n    uint256 internal constant BITS_USER_SUPPLY_IS_PAUSED = 255;\\n\\n    // UserBorrowData\\n    uint256 internal constant BITS_USER_BORROW_MODE = 0;\\n    uint256 internal constant BITS_USER_BORROW_AMOUNT = 1;\\n    uint256 internal constant BITS_USER_BORROW_PREVIOUS_BORROW_LIMIT = 65;\\n    uint256 internal constant BITS_USER_BORROW_LAST_UPDATE_TIMESTAMP = 129;\\n    uint256 internal constant BITS_USER_BORROW_EXPAND_PERCENT = 162;\\n    uint256 internal constant BITS_USER_BORROW_EXPAND_DURATION = 176;\\n    uint256 internal constant BITS_USER_BORROW_BASE_BORROW_LIMIT = 200;\\n    uint256 internal constant BITS_USER_BORROW_MAX_BORROW_LIMIT = 218;\\n    uint256 internal constant BITS_USER_BORROW_IS_PAUSED = 255;\\n\\n    // Configs2\\n    uint256 internal constant BITS_CONFIGS2_MAX_UTILIZATION = 0;\\n\\n    // --------------------------------\\n\\n    /// @notice Calculating the slot ID for Liquidity contract for single mapping at `slot_` for `key_`\\n    function calculateMappingStorageSlot(uint256 slot_, address key_) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(key_, slot_));\\n    }\\n\\n    /// @notice Calculating the slot ID for Liquidity contract for double mapping at `slot_` for `key1_` and `key2_`\\n    function calculateDoubleMappingStorageSlot(\\n        uint256 slot_,\\n        address key1_,\\n        address key2_\\n    ) internal pure returns (bytes32) {\\n        bytes32 intermediateSlot_ = keccak256(abi.encode(key1_, slot_));\\n        return keccak256(abi.encode(key2_, intermediateSlot_));\\n    }\\n}\\n\",\"keccak256\":\"0x0ae3e1d231bb6c14b54fc1f5ffa306edc0ac827a6a92279c77c0c09627fe08ae\",\"license\":\"BUSL-1.1\"},\"contracts/liquidity/adminModule/structs.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nabstract contract Structs {\\n    struct AddressBool {\\n        address addr;\\n        bool value;\\n    }\\n\\n    struct AddressUint256 {\\n        address addr;\\n        uint256 value;\\n    }\\n\\n    /// @notice struct to set borrow rate data for version 1\\n    struct RateDataV1Params {\\n        ///\\n        /// @param token for rate data\\n        address token;\\n        ///\\n        /// @param kink in borrow rate. in 1e2: 100% = 10_000; 1% = 100\\n        /// utilization below kink usually means slow increase in rate, once utilization is above kink borrow rate increases fast\\n        uint256 kink;\\n        ///\\n        /// @param rateAtUtilizationZero desired borrow rate when utilization is zero. in 1e2: 100% = 10_000; 1% = 100\\n        /// i.e. constant minimum borrow rate\\n        /// e.g. at utilization = 0.01% rate could still be at least 4% (rateAtUtilizationZero would be 400 then)\\n        uint256 rateAtUtilizationZero;\\n        ///\\n        /// @param rateAtUtilizationKink borrow rate when utilization is at kink. in 1e2: 100% = 10_000; 1% = 100\\n        /// e.g. when rate should be 7% at kink then rateAtUtilizationKink would be 700\\n        uint256 rateAtUtilizationKink;\\n        ///\\n        /// @param rateAtUtilizationMax borrow rate when utilization is maximum at 100%. in 1e2: 100% = 10_000; 1% = 100\\n        /// e.g. when rate should be 125% at 100% then rateAtUtilizationMax would be 12_500\\n        uint256 rateAtUtilizationMax;\\n    }\\n\\n    /// @notice struct to set borrow rate data for version 2\\n    struct RateDataV2Params {\\n        ///\\n        /// @param token for rate data\\n        address token;\\n        ///\\n        /// @param kink1 first kink in borrow rate. in 1e2: 100% = 10_000; 1% = 100\\n        /// utilization below kink 1 usually means slow increase in rate, once utilization is above kink 1 borrow rate increases faster\\n        uint256 kink1;\\n        ///\\n        /// @param kink2 second kink in borrow rate. in 1e2: 100% = 10_000; 1% = 100\\n        /// utilization below kink 2 usually means slow / medium increase in rate, once utilization is above kink 2 borrow rate increases fast\\n        uint256 kink2;\\n        ///\\n        /// @param rateAtUtilizationZero desired borrow rate when utilization is zero. in 1e2: 100% = 10_000; 1% = 100\\n        /// i.e. constant minimum borrow rate\\n        /// e.g. at utilization = 0.01% rate could still be at least 4% (rateAtUtilizationZero would be 400 then)\\n        uint256 rateAtUtilizationZero;\\n        ///\\n        /// @param rateAtUtilizationKink1 desired borrow rate when utilization is at first kink. in 1e2: 100% = 10_000; 1% = 100\\n        /// e.g. when rate should be 7% at first kink then rateAtUtilizationKink would be 700\\n        uint256 rateAtUtilizationKink1;\\n        ///\\n        /// @param rateAtUtilizationKink2 desired borrow rate when utilization is at second kink. in 1e2: 100% = 10_000; 1% = 100\\n        /// e.g. when rate should be 7% at second kink then rateAtUtilizationKink would be 1_200\\n        uint256 rateAtUtilizationKink2;\\n        ///\\n        /// @param rateAtUtilizationMax desired borrow rate when utilization is maximum at 100%. in 1e2: 100% = 10_000; 1% = 100\\n        /// e.g. when rate should be 125% at 100% then rateAtUtilizationMax would be 12_500\\n        uint256 rateAtUtilizationMax;\\n    }\\n\\n    /// @notice struct to set token config\\n    struct TokenConfig {\\n        ///\\n        /// @param token address\\n        address token;\\n        ///\\n        /// @param fee charges on borrower's interest. in 1e2: 100% = 10_000; 1% = 100\\n        uint256 fee;\\n        ///\\n        /// @param threshold on when to update the storage slot. in 1e2: 100% = 10_000; 1% = 100\\n        uint256 threshold;\\n        ///\\n        /// @param maxUtilization maximum allowed utilization. in 1e2: 100% = 10_000; 1% = 100\\n        ///                       set to 100% to disable and have default limit of 100% (avoiding SLOAD).\\n        uint256 maxUtilization;\\n    }\\n\\n    /// @notice struct to set user supply & withdrawal config\\n    struct UserSupplyConfig {\\n        ///\\n        /// @param user address\\n        address user;\\n        ///\\n        /// @param token address\\n        address token;\\n        ///\\n        /// @param mode: 0 = without interest. 1 = with interest\\n        uint8 mode;\\n        ///\\n        /// @param expandPercent withdrawal limit expand percent. in 1e2: 100% = 10_000; 1% = 100\\n        /// Also used to calculate rate at which withdrawal limit should decrease (instant).\\n        uint256 expandPercent;\\n        ///\\n        /// @param expandDuration withdrawal limit expand duration in seconds.\\n        /// used to calculate rate together with expandPercent\\n        uint256 expandDuration;\\n        ///\\n        /// @param baseWithdrawalLimit base limit, below this, user can withdraw the entire amount.\\n        /// amount in raw (to be multiplied with exchange price) or normal depends on configured mode in user config for the token:\\n        /// with interest -> raw, without interest -> normal\\n        uint256 baseWithdrawalLimit;\\n    }\\n\\n    /// @notice struct to set user borrow & payback config\\n    struct UserBorrowConfig {\\n        ///\\n        /// @param user address\\n        address user;\\n        ///\\n        /// @param token address\\n        address token;\\n        ///\\n        /// @param mode: 0 = without interest. 1 = with interest\\n        uint8 mode;\\n        ///\\n        /// @param expandPercent debt limit expand percent. in 1e2: 100% = 10_000; 1% = 100\\n        /// Also used to calculate rate at which debt limit should decrease (instant).\\n        uint256 expandPercent;\\n        ///\\n        /// @param expandDuration debt limit expand duration in seconds.\\n        /// used to calculate rate together with expandPercent\\n        uint256 expandDuration;\\n        ///\\n        /// @param baseDebtCeiling base borrow limit. until here, borrow limit remains as baseDebtCeiling\\n        /// (user can borrow until this point at once without stepped expansion). Above this, automated limit comes in place.\\n        /// amount in raw (to be multiplied with exchange price) or normal depends on configured mode in user config for the token:\\n        /// with interest -> raw, without interest -> normal\\n        uint256 baseDebtCeiling;\\n        ///\\n        /// @param maxDebtCeiling max borrow ceiling, maximum amount the user can borrow.\\n        /// amount in raw (to be multiplied with exchange price) or normal depends on configured mode in user config for the token:\\n        /// with interest -> raw, without interest -> normal\\n        uint256 maxDebtCeiling;\\n    }\\n}\\n\",\"keccak256\":\"0x10353c70015f27b880125cefab806dbed24a4458f187da66964f3ef60488f757\",\"license\":\"BUSL-1.1\"},\"contracts/liquidity/interfaces/iLiquidity.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nimport { IProxy } from \\\"../../infiniteProxy/interfaces/iProxy.sol\\\";\\nimport { Structs as AdminModuleStructs } from \\\"../adminModule/structs.sol\\\";\\n\\ninterface IFluidLiquidityAdmin {\\n    /// @notice adds/removes auths. Auths generally could be contracts which can have restricted actions defined on contract.\\n    ///         auths can be helpful in reducing governance overhead where it's not needed.\\n    /// @param authsStatus_ array of structs setting allowed status for an address.\\n    ///                     status true => add auth, false => remove auth\\n    function updateAuths(AdminModuleStructs.AddressBool[] calldata authsStatus_) external;\\n\\n    /// @notice adds/removes guardians. Only callable by Governance.\\n    /// @param guardiansStatus_ array of structs setting allowed status for an address.\\n    ///                         status true => add guardian, false => remove guardian\\n    function updateGuardians(AdminModuleStructs.AddressBool[] calldata guardiansStatus_) external;\\n\\n    /// @notice changes the revenue collector address (contract that is sent revenue). Only callable by Governance.\\n    /// @param revenueCollector_  new revenue collector address\\n    function updateRevenueCollector(address revenueCollector_) external;\\n\\n    /// @notice changes current status, e.g. for pausing or unpausing all user operations. Only callable by Auths.\\n    /// @param newStatus_ new status\\n    ///        status = 2 -> pause, status = 1 -> resume.\\n    function changeStatus(uint256 newStatus_) external;\\n\\n    /// @notice                  update tokens rate data version 1. Only callable by Auths.\\n    /// @param tokensRateData_   array of RateDataV1Params with rate data to set for each token\\n    function updateRateDataV1s(AdminModuleStructs.RateDataV1Params[] calldata tokensRateData_) external;\\n\\n    /// @notice                  update tokens rate data version 2. Only callable by Auths.\\n    /// @param tokensRateData_   array of RateDataV2Params with rate data to set for each token\\n    function updateRateDataV2s(AdminModuleStructs.RateDataV2Params[] calldata tokensRateData_) external;\\n\\n    /// @notice updates token configs: fee charge on borrowers interest & storage update utilization threshold.\\n    ///         Only callable by Auths.\\n    /// @param tokenConfigs_ contains token address, fee & utilization threshold\\n    function updateTokenConfigs(AdminModuleStructs.TokenConfig[] calldata tokenConfigs_) external;\\n\\n    /// @notice updates user classes: 0 is for new protocols, 1 is for established protocols.\\n    ///         Only callable by Auths.\\n    /// @param userClasses_ struct array of uint256 value to assign for each user address\\n    function updateUserClasses(AdminModuleStructs.AddressUint256[] calldata userClasses_) external;\\n\\n    /// @notice sets user supply configs per token basis. Eg: with interest or interest-free and automated limits.\\n    ///         Only callable by Auths.\\n    /// @param userSupplyConfigs_ struct array containing user supply config, see `UserSupplyConfig` struct for more info\\n    function updateUserSupplyConfigs(AdminModuleStructs.UserSupplyConfig[] memory userSupplyConfigs_) external;\\n\\n    /// @notice sets a new withdrawal limit as the current limit for a certain user\\n    /// @param user_ user address for which to update the withdrawal limit\\n    /// @param token_ token address for which to update the withdrawal limit\\n    /// @param newLimit_ new limit until which user supply can decrease to.\\n    ///                  Important: input in raw. Must account for exchange price in input param calculation.\\n    ///                  Note any limit that is < max expansion or > current user supply will set max expansion limit or\\n    ///                  current user supply as limit respectively.\\n    ///                  - set 0 to make maximum possible withdrawable: instant full expansion, and if that goes\\n    ///                  below base limit then fully down to 0.\\n    ///                  - set type(uint256).max to make current withdrawable 0 (sets current user supply as limit).\\n    function updateUserWithdrawalLimit(address user_, address token_, uint256 newLimit_) external;\\n\\n    /// @notice setting user borrow configs per token basis. Eg: with interest or interest-free and automated limits.\\n    ///         Only callable by Auths.\\n    /// @param userBorrowConfigs_ struct array containing user borrow config, see `UserBorrowConfig` struct for more info\\n    function updateUserBorrowConfigs(AdminModuleStructs.UserBorrowConfig[] memory userBorrowConfigs_) external;\\n\\n    /// @notice pause operations for a particular user in class 0 (class 1 users can't be paused by guardians).\\n    /// Only callable by Guardians.\\n    /// @param user_          address of user to pause operations for\\n    /// @param supplyTokens_  token addresses to pause withdrawals for\\n    /// @param borrowTokens_  token addresses to pause borrowings for\\n    function pauseUser(address user_, address[] calldata supplyTokens_, address[] calldata borrowTokens_) external;\\n\\n    /// @notice unpause operations for a particular user in class 0 (class 1 users can't be paused by guardians).\\n    /// Only callable by Guardians.\\n    /// @param user_          address of user to unpause operations for\\n    /// @param supplyTokens_  token addresses to unpause withdrawals for\\n    /// @param borrowTokens_  token addresses to unpause borrowings for\\n    function unpauseUser(address user_, address[] calldata supplyTokens_, address[] calldata borrowTokens_) external;\\n\\n    /// @notice         collects revenue for tokens to configured revenueCollector address.\\n    /// @param tokens_  array of tokens to collect revenue for\\n    /// @dev            Note that this can revert if token balance is < revenueAmount (utilization > 100%)\\n    function collectRevenue(address[] calldata tokens_) external;\\n\\n    /// @notice gets the current updated exchange prices for n tokens and updates all prices, rates related data in storage.\\n    /// @param tokens_ tokens to update exchange prices for\\n    /// @return supplyExchangePrices_ new supply rates of overall system for each token\\n    /// @return borrowExchangePrices_ new borrow rates of overall system for each token\\n    function updateExchangePrices(\\n        address[] calldata tokens_\\n    ) external returns (uint256[] memory supplyExchangePrices_, uint256[] memory borrowExchangePrices_);\\n}\\n\\ninterface IFluidLiquidityLogic is IFluidLiquidityAdmin {\\n    /// @notice Single function which handles supply, withdraw, borrow & payback\\n    /// @param token_ address of token (0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE for native)\\n    /// @param supplyAmount_ if +ve then supply, if -ve then withdraw, if 0 then nothing\\n    /// @param borrowAmount_ if +ve then borrow, if -ve then payback, if 0 then nothing\\n    /// @param withdrawTo_ if withdrawal then to which address\\n    /// @param borrowTo_ if borrow then to which address\\n    /// @param callbackData_ callback data passed to `liquidityCallback` method of protocol\\n    /// @return memVar3_ updated supplyExchangePrice\\n    /// @return memVar4_ updated borrowExchangePrice\\n    /// @dev to trigger skipping in / out transfers (gas optimization):\\n    /// -  ` callbackData_` MUST be encoded so that \\\"from\\\" address is the last 20 bytes in the last 32 bytes slot,\\n    ///     also for native token operations where liquidityCallback is not triggered!\\n    ///     from address must come at last position if there is more data. I.e. encode like:\\n    ///     abi.encode(otherVar1, otherVar2, FROM_ADDRESS). Note dynamic types used with abi.encode come at the end\\n    ///     so if dynamic types are needed, you must use abi.encodePacked to ensure the from address is at the end.\\n    /// -   this \\\"from\\\" address must match withdrawTo_ or borrowTo_ and must be == `msg.sender`\\n    /// -   `callbackData_` must in addition to the from address as described above include bytes32 SKIP_TRANSFERS\\n    ///     in the slot before (bytes 32 to 63)\\n    /// -   `msg.value` must be 0.\\n    /// -   Amounts must be either:\\n    ///     -  supply(+) == borrow(+), withdraw(-) == payback(-).\\n    ///     -  Liquidity must be on the winning side (deposit < borrow OR payback < withdraw).\\n    function operate(\\n        address token_,\\n        int256 supplyAmount_,\\n        int256 borrowAmount_,\\n        address withdrawTo_,\\n        address borrowTo_,\\n        bytes calldata callbackData_\\n    ) external payable returns (uint256 memVar3_, uint256 memVar4_);\\n}\\n\\ninterface IFluidLiquidity is IProxy, IFluidLiquidityLogic {}\\n\",\"keccak256\":\"0x4aa83e84baa7c2f4d58b07a3eca4ab7fe7d6fc660898daaac338dc3f129c4123\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e060405234801561001057600080fd5b5060405161112038038061112083398101604081905261002f916100cf565b6001600160a01b03831661006057604051636801712d60e11b8152620186cb60048201526024015b60405180910390fd5b81158061006b575080155b1561008e57604051636801712d60e11b8152620186cb6004820152602401610057565b6127108211156100b657604051636801712d60e11b8152620186cb6004820152602401610057565b6001600160a01b0390921660805260a05260c052610112565b6000806000606084860312156100e457600080fd5b83516001600160a01b03811681146100fb57600080fd5b602085015160409095015190969495509392505050565b60805160a05160c051610fa161017f600039600081816101410152818161034501526108e30152600081816101960152818161044b0152818161048101526109f80152600081816092015281816102940152818161063c015281816108320152610b950152610fa16000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c8063a2724a4d1161005b578063a2724a4d1461013c578063ae46749314610163578063b788f3a114610176578063cdcb13391461019157600080fd5b80632861c7d11461008d57806363baa025146100de578063958b65351461010c57806395ae47e114610121575b600080fd5b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100fe6100ec366004610d20565b60006020819052908152604090205481565b6040519081526020016100d5565b61011f61011a366004610d56565b6101b8565b005b6100b4731e2e1aed876f67fe4fd54090fd7b8f57ce23421981565b6100fe7f000000000000000000000000000000000000000000000000000000000000000081565b61011f610171366004610d6e565b610760565b6100b4734f6f977acdd1177dcd81ab83074855ecb9c2d49e81565b6100fe7f000000000000000000000000000000000000000000000000000000000000000081565b734f6f977acdd1177dcd81ab83074855ecb9c2d49e33148015906101f05750731e2e1aed876f67fe4fd54090fd7b8f57ce2342193314155b15610231576040517fd002e25a000000000000000000000000000000000000000000000000000000008152620186ca60048201526024015b60405180910390fd5b600061024a60066102456020850185610d20565b610c80565b6040517fb5c736e40000000000000000000000000000000000000000000000000000000081526004810182905290915060009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063b5c736e490602401602060405180830381865afa1580156102db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ff9190610d80565b905080600f16600214610343576040517fd002e25a000000000000000000000000000000000000000000000000000000008152620186cd6004820152602401610228565b7f00000000000000000000000000000000000000000000000000000000000000006000806103746020870187610d20565b73ffffffffffffffffffffffffffffffffffffffff1681526020810191909152604001600020546103a59042610dc8565b10156103e2576040517fd002e25a000000000000000000000000000000000000000000000000000000008152620186cc6004820152602401610228565b6104386040518060e00160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b61ffff602483901c811690604484901c167f0000000000000000000000000000000000000000000000000000000000000000610478836020890135610ccb565b11806104b057507f00000000000000000000000000000000000000000000000000000000000000006104ae828860400135610ccb565b115b156104ec576040517fd002e25a000000000000000000000000000000000000000000000000000000008152620186c96004820152602401610228565b6104f96020870187610d20565b73ffffffffffffffffffffffffffffffffffffffff168352601484901c61ffff908116602080860191909152603486901c8216604080870191909152600487901c831660608701529088013560808601528781013560a0860152605486901c90911660c085015280516001808252818301909252600091816020015b6105cb6040518060e00160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b81526020019060019003908161057557905050905083816000815181106105f4576105f4610ddb565b60209081029190910101526040517f9dde597700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690639dde597790610671908490600401610e0a565b600060405180830381600087803b15801561068b57600080fd5b505af115801561069f573d6000803e3d6000fd5b50429250600091508190506106b760208b018b610d20565b73ffffffffffffffffffffffffffffffffffffffff168152602080820192909252604001600020919091557f6dcaede9edba49e006cd7e84dd7d6efb7c552d258fc90525c171a47ad5adbb4c9061071090890189610d20565b6040805173ffffffffffffffffffffffffffffffffffffffff909216825260208281018790528a01358282015260608201859052890135608082015260a00160405180910390a150505050505050565b734f6f977acdd1177dcd81ab83074855ecb9c2d49e33148015906107985750731e2e1aed876f67fe4fd54090fd7b8f57ce2342193314155b156107d4576040517fd002e25a000000000000000000000000000000000000000000000000000000008152620186ca6004820152602401610228565b60006107e860066102456020850185610d20565b6040517fb5c736e40000000000000000000000000000000000000000000000000000000081526004810182905290915060009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063b5c736e490602401602060405180830381865afa158015610879573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089d9190610d80565b905080600f166001146108e1576040517fd002e25a000000000000000000000000000000000000000000000000000000008152620186cd6004820152602401610228565b7f00000000000000000000000000000000000000000000000000000000000000006000806109126020870187610d20565b73ffffffffffffffffffffffffffffffffffffffff1681526020810191909152604001600020546109439042610dc8565b1015610980576040517fd002e25a000000000000000000000000000000000000000000000000000000008152620186cc6004820152602401610228565b6109c86040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081525090565b6109d56020850185610d20565b73ffffffffffffffffffffffffffffffffffffffff168152602482901c61ffff167f0000000000000000000000000000000000000000000000000000000000000000610a25826020880135610ccb565b1115610a62576040517fd002e25a000000000000000000000000000000000000000000000000000000008152620186c96004820152602401610228565b610a6f6020860186610d20565b73ffffffffffffffffffffffffffffffffffffffff16825261ffff601484901c8116602080850191909152600485901c821660408501528601356060840152603484901c16608083015260006001604051908082528060200260200182016040528015610b3657816020015b610b236040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081525090565b815260200190600190039081610adb5790505b5090508281600081518110610b4d57610b4d610ddb565b60209081029190910101526040517f3fad77fc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690633fad77fc90610bca908490600401610ea2565b600060405180830381600087803b158015610be457600080fd5b505af1158015610bf8573d6000803e3d6000fd5b5050845173ffffffffffffffffffffffffffffffffffffffff9081166000908152602081815260408083204290558851815194168452838201889052908b0135908301526060820181905260808201527f6dcaede9edba49e006cd7e84dd7d6efb7c552d258fc90525c171a47ad5adbb4c925060a001905060405180910390a1505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff831660208201529081018390526000906060016040516020818303038152906040528051906020012090505b92915050565b6000818303610cdc57506000610cc5565b81831115610cf557610cee8284610dc8565b9050610d02565b610cff8383610dc8565b90505b82610d0f82612710610f19565b610d199190610f30565b9392505050565b600060208284031215610d3257600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610d1957600080fd5b600060608284031215610d6857600080fd5b50919050565b600060408284031215610d6857600080fd5b600060208284031215610d9257600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81810381811115610cc557610cc5610d99565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602080825282518282018190526000919060409081850190868401855b82811015610e95578151805173ffffffffffffffffffffffffffffffffffffffff16855286810151878601528581015186860152606080820151908601526080808201519086015260a0808201519086015260c0908101519085015260e09093019290850190600101610e27565b5091979650505050505050565b602080825282518282018190526000919060409081850190868401855b82811015610e95578151805173ffffffffffffffffffffffffffffffffffffffff16855286810151878601528581015186860152606080820151908601526080908101519085015260a09093019290850190600101610ebf565b8082028115828204841417610cc557610cc5610d99565b600082610f66577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea264697066735822122029fa4586572ac622064a5b411e6f40225c5642cdb42f01814df0b59c065d3a3564736f6c63430008150033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c8063a2724a4d1161005b578063a2724a4d1461013c578063ae46749314610163578063b788f3a114610176578063cdcb13391461019157600080fd5b80632861c7d11461008d57806363baa025146100de578063958b65351461010c57806395ae47e114610121575b600080fd5b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100fe6100ec366004610d20565b60006020819052908152604090205481565b6040519081526020016100d5565b61011f61011a366004610d56565b6101b8565b005b6100b4731e2e1aed876f67fe4fd54090fd7b8f57ce23421981565b6100fe7f000000000000000000000000000000000000000000000000000000000000000081565b61011f610171366004610d6e565b610760565b6100b4734f6f977acdd1177dcd81ab83074855ecb9c2d49e81565b6100fe7f000000000000000000000000000000000000000000000000000000000000000081565b734f6f977acdd1177dcd81ab83074855ecb9c2d49e33148015906101f05750731e2e1aed876f67fe4fd54090fd7b8f57ce2342193314155b15610231576040517fd002e25a000000000000000000000000000000000000000000000000000000008152620186ca60048201526024015b60405180910390fd5b600061024a60066102456020850185610d20565b610c80565b6040517fb5c736e40000000000000000000000000000000000000000000000000000000081526004810182905290915060009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063b5c736e490602401602060405180830381865afa1580156102db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906102ff9190610d80565b905080600f16600214610343576040517fd002e25a000000000000000000000000000000000000000000000000000000008152620186cd6004820152602401610228565b7f00000000000000000000000000000000000000000000000000000000000000006000806103746020870187610d20565b73ffffffffffffffffffffffffffffffffffffffff1681526020810191909152604001600020546103a59042610dc8565b10156103e2576040517fd002e25a000000000000000000000000000000000000000000000000000000008152620186cc6004820152602401610228565b6104386040518060e00160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b61ffff602483901c811690604484901c167f0000000000000000000000000000000000000000000000000000000000000000610478836020890135610ccb565b11806104b057507f00000000000000000000000000000000000000000000000000000000000000006104ae828860400135610ccb565b115b156104ec576040517fd002e25a000000000000000000000000000000000000000000000000000000008152620186c96004820152602401610228565b6104f96020870187610d20565b73ffffffffffffffffffffffffffffffffffffffff168352601484901c61ffff908116602080860191909152603486901c8216604080870191909152600487901c831660608701529088013560808601528781013560a0860152605486901c90911660c085015280516001808252818301909252600091816020015b6105cb6040518060e00160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b81526020019060019003908161057557905050905083816000815181106105f4576105f4610ddb565b60209081029190910101526040517f9dde597700000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690639dde597790610671908490600401610e0a565b600060405180830381600087803b15801561068b57600080fd5b505af115801561069f573d6000803e3d6000fd5b50429250600091508190506106b760208b018b610d20565b73ffffffffffffffffffffffffffffffffffffffff168152602080820192909252604001600020919091557f6dcaede9edba49e006cd7e84dd7d6efb7c552d258fc90525c171a47ad5adbb4c9061071090890189610d20565b6040805173ffffffffffffffffffffffffffffffffffffffff909216825260208281018790528a01358282015260608201859052890135608082015260a00160405180910390a150505050505050565b734f6f977acdd1177dcd81ab83074855ecb9c2d49e33148015906107985750731e2e1aed876f67fe4fd54090fd7b8f57ce2342193314155b156107d4576040517fd002e25a000000000000000000000000000000000000000000000000000000008152620186ca6004820152602401610228565b60006107e860066102456020850185610d20565b6040517fb5c736e40000000000000000000000000000000000000000000000000000000081526004810182905290915060009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063b5c736e490602401602060405180830381865afa158015610879573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061089d9190610d80565b905080600f166001146108e1576040517fd002e25a000000000000000000000000000000000000000000000000000000008152620186cd6004820152602401610228565b7f00000000000000000000000000000000000000000000000000000000000000006000806109126020870187610d20565b73ffffffffffffffffffffffffffffffffffffffff1681526020810191909152604001600020546109439042610dc8565b1015610980576040517fd002e25a000000000000000000000000000000000000000000000000000000008152620186cc6004820152602401610228565b6109c86040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081525090565b6109d56020850185610d20565b73ffffffffffffffffffffffffffffffffffffffff168152602482901c61ffff167f0000000000000000000000000000000000000000000000000000000000000000610a25826020880135610ccb565b1115610a62576040517fd002e25a000000000000000000000000000000000000000000000000000000008152620186c96004820152602401610228565b610a6f6020860186610d20565b73ffffffffffffffffffffffffffffffffffffffff16825261ffff601484901c8116602080850191909152600485901c821660408501528601356060840152603484901c16608083015260006001604051908082528060200260200182016040528015610b3657816020015b610b236040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081525090565b815260200190600190039081610adb5790505b5090508281600081518110610b4d57610b4d610ddb565b60209081029190910101526040517f3fad77fc00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690633fad77fc90610bca908490600401610ea2565b600060405180830381600087803b158015610be457600080fd5b505af1158015610bf8573d6000803e3d6000fd5b5050845173ffffffffffffffffffffffffffffffffffffffff9081166000908152602081815260408083204290558851815194168452838201889052908b0135908301526060820181905260808201527f6dcaede9edba49e006cd7e84dd7d6efb7c552d258fc90525c171a47ad5adbb4c925060a001905060405180910390a1505050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff831660208201529081018390526000906060016040516020818303038152906040528051906020012090505b92915050565b6000818303610cdc57506000610cc5565b81831115610cf557610cee8284610dc8565b9050610d02565b610cff8383610dc8565b90505b82610d0f82612710610f19565b610d199190610f30565b9392505050565b600060208284031215610d3257600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610d1957600080fd5b600060608284031215610d6857600080fd5b50919050565b600060408284031215610d6857600080fd5b600060208284031215610d9257600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81810381811115610cc557610cc5610d99565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b602080825282518282018190526000919060409081850190868401855b82811015610e95578151805173ffffffffffffffffffffffffffffffffffffffff16855286810151878601528581015186860152606080820151908601526080808201519086015260a0808201519086015260c0908101519085015260e09093019290850190600101610e27565b5091979650505050505050565b602080825282518282018190526000919060409081850190868401855b82811015610e95578151805173ffffffffffffffffffffffffffffffffffffffff16855286810151878601528581015186860152606080820151908601526080908101519085015260a09093019290850190600101610ebf565b8082028115828204841417610cc557610cc5610d99565b600082610f66577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b50049056fea264697066735822122029fa4586572ac622064a5b411e6f40225c5642cdb42f01814df0b59c065d3a3564736f6c63430008150033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "events": {
      "LogUpdateRateAtKink(address,uint256,uint256,uint256,uint256)": {
        "notice": "emitted when borrow rate for specified borrow token is updated based on         team multisig input of rate at kinks"
      }
    },
    "kind": "user",
    "methods": {
      "TEAM_MULTISIG()": {
        "notice": "Team multisigs allowed to trigger methods"
      },
      "tokenLastUpdateTimestamp(address)": {
        "notice": "last timestamp when a token's rate was updated"
      }
    },
    "notice": "Sets borrow rate for specified borrow token at Liquidity based on team multisig input.",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 15010,
        "contract": "contracts/config/ratesAuth/main.sol:FluidRatesAuth",
        "label": "tokenLastUpdateTimestamp",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}