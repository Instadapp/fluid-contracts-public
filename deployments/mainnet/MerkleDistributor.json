{
  "address": "0x252452ccf245a59A6d1Afab11cF16750029b4620",
  "abi": [
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "name",
              "type": "string"
            },
            {
              "internalType": "address",
              "name": "owner",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "proposer",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "approver",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "rewardToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "distributionInHours",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "cycleInHours",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "startBlock",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "pullFromDistributor",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "vestingTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "vestingStartTime",
              "type": "uint256"
            }
          ],
          "internalType": "struct Structs.ConstructorParams",
          "name": "params_",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidCycle",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidParams",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidProof",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MsgSenderNotRecipient",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NothingToClaim",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cycle",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "positionType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "positionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "LogClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startCycle",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endCycle",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "registrationBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "registrationTimestamp",
          "type": "uint256"
        }
      ],
      "name": "LogDistribution",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "pullFromSender",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blocksPerDistribution",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cyclesPerDistribution",
          "type": "uint256"
        }
      ],
      "name": "LogDistributionConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "cycle",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        }
      ],
      "name": "LogRewardCycle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "distributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isDistributor",
          "type": "bool"
        }
      ],
      "name": "LogRewardsDistributorToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cycle",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "contentHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "LogRootProposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cycle",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "contentHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "LogRootUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startBlockOfNextCycle",
          "type": "uint256"
        }
      ],
      "name": "LogStartBlockOfNextCycleUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "approver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isApprover",
          "type": "bool"
        }
      ],
      "name": "LogUpdateApprover",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isProposer",
          "type": "bool"
        }
      ],
      "name": "LogUpdateProposer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "root_",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "contentHash_",
          "type": "bytes32"
        },
        {
          "internalType": "uint40",
          "name": "cycle_",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "startBlock_",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "endBlock_",
          "type": "uint40"
        }
      ],
      "name": "approveRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blocksPerDistribution",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "cumulativeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "positionType",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "positionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "cycle",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "merkleProof",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            }
          ],
          "internalType": "struct FluidMerkleDistributor.Claim[]",
          "name": "claims_",
          "type": "tuple[]"
        }
      ],
      "name": "bulkClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cumulativeAmount_",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "positionType_",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "positionId_",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "cycle_",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "merkleProof_",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes",
          "name": "metadata_",
          "type": "bytes"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentMerkleCycle",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "merkleContentHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint40",
              "name": "cycle",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "timestamp",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "publishBlock",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "startBlock",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "endBlock",
              "type": "uint40"
            }
          ],
          "internalType": "struct Structs.MerkleCycle",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cyclesPerDistribution",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "distributeRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cumulativeAmount_",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "positionType_",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "positionId_",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "cycle_",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "metadata_",
          "type": "bytes"
        }
      ],
      "name": "encodeClaim",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "encoded_",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "hash_",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cycle_",
          "type": "uint256"
        }
      ],
      "name": "getCycleReward",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint40",
              "name": "cycle",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "startBlock",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "endBlock",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "epoch",
              "type": "uint40"
            }
          ],
          "internalType": "struct Structs.Reward",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCycleRewards",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint40",
              "name": "cycle",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "startBlock",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "endBlock",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "epoch",
              "type": "uint40"
            }
          ],
          "internalType": "struct Structs.Reward[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch_",
          "type": "uint256"
        }
      ],
      "name": "getDistributionForEpoch",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint40",
              "name": "epoch",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "startCycle",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "endCycle",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "registrationBlock",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "registrationTimestamp",
              "type": "uint40"
            }
          ],
          "internalType": "struct Structs.Distribution",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDistributions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint40",
              "name": "epoch",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "startCycle",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "endCycle",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "registrationBlock",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "registrationTimestamp",
              "type": "uint40"
            }
          ],
          "internalType": "struct Structs.Distribution[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasPendingRoot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver_",
          "type": "address"
        }
      ],
      "name": "isApprover",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "proposer_",
          "type": "address"
        }
      ],
      "name": "isProposer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingMerkleCycle",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "merkleContentHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint40",
              "name": "cycle",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "timestamp",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "publishBlock",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "startBlock",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "endBlock",
              "type": "uint40"
            }
          ],
          "internalType": "struct Structs.MerkleCycle",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "previousMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "root_",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "contentHash_",
          "type": "bytes32"
        },
        {
          "internalType": "uint40",
          "name": "cycle_",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "startBlock_",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "endBlock_",
          "type": "uint40"
        }
      ],
      "name": "proposeRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pullFromDistributor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardsDistributor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint40",
          "name": "startBlockOfNextCycle_",
          "type": "uint40"
        }
      ],
      "name": "setStartBlockOfNextCycle",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets_",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas_",
          "type": "bytes[]"
        }
      ],
      "name": "spell",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "startBlockOfNextCycle",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "distributor_",
          "type": "address"
        }
      ],
      "name": "toggleRewardsDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCycleRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDistributions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver_",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isApprover_",
          "type": "bool"
        }
      ],
      "name": "updateApprover",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "pullFromDistributor_",
          "type": "bool"
        },
        {
          "internalType": "uint40",
          "name": "blocksPerDistribution_",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "cyclesPerDistribution_",
          "type": "uint40"
        }
      ],
      "name": "updateDistributionConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "proposer_",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isProposer_",
          "type": "bool"
        }
      ],
      "name": "updateProposer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingStartTime",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "vestingTime",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x6d9f3ebbe97f9084db862e2ec3bc5fefd66f0dae4d9531884223177a20a5e771",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x000C3424b80640c6318E3F02BC253D9c9b6D1457",
    "contractAddress": null,
    "transactionIndex": 91,
    "gasUsed": "3601745",
    "logsBloom": "0x
    "blockHash": "0xf3b075d0963c95a8ddfe9e7667e7430090a98185741b8518acf264b8089a2979",
    "transactionHash": "0x6d9f3ebbe97f9084db862e2ec3bc5fefd66f0dae4d9531884223177a20a5e771",
    "logs": [
      {
        "transactionIndex": 91,
        "blockNumber": 22832397,
        "transactionHash": "0x6d9f3ebbe97f9084db862e2ec3bc5fefd66f0dae4d9531884223177a20a5e771",
        "address": "0x252452ccf245a59A6d1Afab11cF16750029b4620",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009800020b610194dba52cf606e8aa142f9f256166"
        ],
        "data": "0x",
        "logIndex": 188,
        "blockHash": "0xf3b075d0963c95a8ddfe9e7667e7430090a98185741b8518acf264b8089a2979"
      },
      {
        "transactionIndex": 91,
        "blockNumber": 22832397,
        "transactionHash": "0x6d9f3ebbe97f9084db862e2ec3bc5fefd66f0dae4d9531884223177a20a5e771",
        "address": "0x252452ccf245a59A6d1Afab11cF16750029b4620",
        "topics": [
          "0x780d738f356a91be5dfe8ffb87990c655a36b3430a233c71a209eb1e9a1a1a75"
        ],
        "data": "0x0000000000000000000000004f104710f8d9f6efb28c4b2f057554928daa3a830000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 189,
        "blockHash": "0xf3b075d0963c95a8ddfe9e7667e7430090a98185741b8518acf264b8089a2979"
      },
      {
        "transactionIndex": 91,
        "blockNumber": 22832397,
        "transactionHash": "0x6d9f3ebbe97f9084db862e2ec3bc5fefd66f0dae4d9531884223177a20a5e771",
        "address": "0x252452ccf245a59A6d1Afab11cF16750029b4620",
        "topics": [
          "0xeeeb06b5605b72367788db09c5284b141487cdc2ab0925fcf8880d30ea584376"
        ],
        "data": "0x00000000000000000000000085dc44e0c3afdfedca52678bd4c000917c6597b20000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 190,
        "blockHash": "0xf3b075d0963c95a8ddfe9e7667e7430090a98185741b8518acf264b8089a2979"
      },
      {
        "transactionIndex": 91,
        "blockNumber": 22832397,
        "transactionHash": "0x6d9f3ebbe97f9084db862e2ec3bc5fefd66f0dae4d9531884223177a20a5e771",
        "address": "0x252452ccf245a59A6d1Afab11cF16750029b4620",
        "topics": [
          "0x7ec0e33f381405196f961b48c778f62e8184d357d894aa02af2444db07a09fd8"
        ],
        "data": "0x0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000012c0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 191,
        "blockHash": "0xf3b075d0963c95a8ddfe9e7667e7430090a98185741b8518acf264b8089a2979"
      }
    ],
    "blockNumber": 22832397,
    "cumulativeGasUsed": "11719651",
    "status": 1,
    "byzantium": true
  },
  "args": [
    {
      "name": "ETH-USDC LP $FLUID rewards - Jul 2025",
      "owner": "0x9800020b610194dBa52CF606E8Aa142F9F256166",
      "proposer": "0x4f104710f8d9F6EFB28c4b2f057554928Daa3a83",
      "approver": "0x85dC44E0c3AfdFedCa52678bD4C000917C6597B2",
      "rewardToken": "0x6f40d4a6237c257fff2db00fa0510deeecd303eb",
      "distributionInHours": 1,
      "cycleInHours": 1,
      "startBlock": 0,
      "pullFromDistributor": false,
      "vestingTime": 31536000,
      "vestingStartTime": 1751673600
    }
  ],
  "numDeployments": 1,
  "solcInputHash": "0da73833beb3aafc5b9d2afa3a4fd781",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"distributionInHours\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cycleInHours\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"pullFromDistributor\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"vestingTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"vestingStartTime\",\"type\":\"uint256\"}],\"internalType\":\"struct Structs.ConstructorParams\",\"name\":\"params_\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidCycle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParams\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MsgSenderNotRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"positionType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"positionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"LogClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startCycle\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endCycle\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"registrationTimestamp\",\"type\":\"uint256\"}],\"name\":\"LogDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pullFromSender\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocksPerDistribution\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cyclesPerDistribution\",\"type\":\"uint256\"}],\"name\":\"LogDistributionConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"LogRewardCycle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDistributor\",\"type\":\"bool\"}],\"name\":\"LogRewardsDistributorToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"LogRootProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"LogRootUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlockOfNextCycle\",\"type\":\"uint256\"}],\"name\":\"LogStartBlockOfNextCycleUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isApprover\",\"type\":\"bool\"}],\"name\":\"LogUpdateApprover\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isProposer\",\"type\":\"bool\"}],\"name\":\"LogUpdateProposer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash_\",\"type\":\"bytes32\"},{\"internalType\":\"uint40\",\"name\":\"cycle_\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"startBlock_\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"endBlock_\",\"type\":\"uint40\"}],\"name\":\"approveRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksPerDistribution\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cumulativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"positionType\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"positionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct FluidMerkleDistributor.Claim[]\",\"name\":\"claims_\",\"type\":\"tuple[]\"}],\"name\":\"bulkClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cumulativeAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"positionType_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"positionId_\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cycle_\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof_\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"metadata_\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentMerkleCycle\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"merkleContentHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint40\",\"name\":\"cycle\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"timestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"publishBlock\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"startBlock\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"endBlock\",\"type\":\"uint40\"}],\"internalType\":\"struct Structs.MerkleCycle\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cyclesPerDistribution\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cumulativeAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"positionType_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"positionId_\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cycle_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"metadata_\",\"type\":\"bytes\"}],\"name\":\"encodeClaim\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"encoded_\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"hash_\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cycle_\",\"type\":\"uint256\"}],\"name\":\"getCycleReward\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"cycle\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"startBlock\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"endBlock\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"epoch\",\"type\":\"uint40\"}],\"internalType\":\"struct Structs.Reward\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCycleRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"cycle\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"startBlock\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"endBlock\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"epoch\",\"type\":\"uint40\"}],\"internalType\":\"struct Structs.Reward[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch_\",\"type\":\"uint256\"}],\"name\":\"getDistributionForEpoch\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"epoch\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"startCycle\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"endCycle\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"registrationBlock\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"registrationTimestamp\",\"type\":\"uint40\"}],\"internalType\":\"struct Structs.Distribution\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDistributions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"epoch\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"startCycle\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"endCycle\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"registrationBlock\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"registrationTimestamp\",\"type\":\"uint40\"}],\"internalType\":\"struct Structs.Distribution[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasPendingRoot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver_\",\"type\":\"address\"}],\"name\":\"isApprover\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposer_\",\"type\":\"address\"}],\"name\":\"isProposer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingMerkleCycle\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"merkleContentHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint40\",\"name\":\"cycle\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"timestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"publishBlock\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"startBlock\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"endBlock\",\"type\":\"uint40\"}],\"internalType\":\"struct Structs.MerkleCycle\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash_\",\"type\":\"bytes32\"},{\"internalType\":\"uint40\",\"name\":\"cycle_\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"startBlock_\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"endBlock_\",\"type\":\"uint40\"}],\"name\":\"proposeRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullFromDistributor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardsDistributor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint40\",\"name\":\"startBlockOfNextCycle_\",\"type\":\"uint40\"}],\"name\":\"setStartBlockOfNextCycle\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets_\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas_\",\"type\":\"bytes[]\"}],\"name\":\"spell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"startBlockOfNextCycle\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"distributor_\",\"type\":\"address\"}],\"name\":\"toggleRewardsDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCycleRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDistributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isApprover_\",\"type\":\"bool\"}],\"name\":\"updateApprover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pullFromDistributor_\",\"type\":\"bool\"},{\"internalType\":\"uint40\",\"name\":\"blocksPerDistribution_\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"cyclesPerDistribution_\",\"type\":\"uint40\"}],\"name\":\"updateDistributionConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposer_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isProposer_\",\"type\":\"bool\"}],\"name\":\"updateProposer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingStartTime\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"vestingTime\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"claim(address,uint256,uint8,bytes32,uint256,bytes32[],bytes)\":{\"params\":{\"cumulativeAmount_\":\"- cumulative amount of rewards to claim\",\"cycle_\":\"- cycle of the rewards\",\"merkleProof_\":\"- merkle proof of the rewards\",\"positionId_\":\"- id of the position, fToken address for lending and vaultId for vaults\",\"positionType_\":\"- type of position, 1 for lending, 2 for vaults, 3 for smart lending, etc\",\"recipient_\":\"- address of the recipient\"}},\"distributeRewards(uint256)\":{\"params\":{\"amount_\":\"- amount of tokens to distribute rewards for\"}},\"getCycleReward(uint256)\":{\"params\":{\"cycle_\":\"- cycle of the reward\"},\"returns\":{\"_0\":\"reward_ - reward\"}},\"getCycleRewards()\":{\"returns\":{\"_0\":\"rewards_ - rewards\"}},\"getDistributionForEpoch(uint256)\":{\"params\":{\"epoch_\":\"- epoch of the distribution\"},\"returns\":{\"_0\":\"distribution_ - distribution\"}},\"getDistributions()\":{\"returns\":{\"_0\":\"distributions_ - all distributions\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"setStartBlockOfNextCycle(uint40)\":{\"params\":{\"startBlockOfNextCycle_\":\"The start block of the next cycle\"}},\"spell(address[],bytes[])\":{\"details\":\"open payload method for admin to resolve emergency cases\"},\"toggleRewardsDistributor(address)\":{\"params\":{\"distributor_\":\"- address of the rewards distributor\"}},\"totalCycleRewards()\":{\"returns\":{\"_0\":\"totalCycles_ - total number of cycles\"}},\"totalDistributions()\":{\"returns\":{\"_0\":\"totalDistributions_ - total number of distributions\"}},\"updateApprover(address,bool)\":{\"params\":{\"approver_\":\"The address to update\",\"isApprover_\":\"Whether or not the address should be an allowed approver\"}},\"updateDistributionConfig(bool,uint40,uint40)\":{\"params\":{\"blocksPerDistribution_\":\"- duration of distribution in blocks\",\"cyclesPerDistribution_\":\"- number of cycles to distribute rewards, if 0 then means paused\",\"pullFromDistributor_\":\"- whether to pull rewards from distributor or not\"}},\"updateProposer(address,bool)\":{\"params\":{\"isProposer_\":\"Whether or not the address should be an allowed proposer\",\"proposer_\":\"The address to update\"}}},\"version\":1},\"userdoc\":{\"events\":{\"LogClaimed(address,uint256,uint256,uint8,bytes32,uint256,uint256)\":{\"notice\":\"Emitted when a `user` claims `amount` via a valid merkle proof\"},\"LogDistribution(uint256,address,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted when a new distribution is created\"},\"LogDistributionConfigUpdated(bool,uint256,uint256)\":{\"notice\":\"Emitted when the distribution configuration is updated\"},\"LogRewardCycle(uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted when a new reward cycle is created\"},\"LogRewardsDistributorToggled(address,bool)\":{\"notice\":\"Emitted when a rewards distributor is toggled\"},\"LogRootProposed(uint256,bytes32,bytes32,uint256,uint256)\":{\"notice\":\"Emitted when a new cycle root hash is proposed\"},\"LogRootUpdated(uint256,bytes32,bytes32,uint256,uint256)\":{\"notice\":\"Emitted when a new cycle root hash is approved by the owner and becomes the new active root\"},\"LogStartBlockOfNextCycleUpdated(uint256)\":{\"notice\":\"Emitted when the start block of the next cycle is updated\"},\"LogUpdateApprover(address,bool)\":{\"notice\":\"Emitted when an address is added or removed from the allowed approvers\"},\"LogUpdateProposer(address,bool)\":{\"notice\":\"Emitted when an address is added or removed from the allowed proposers\"}},\"kind\":\"user\",\"methods\":{\"approveRoot(bytes32,bytes32,uint40,uint40,uint40)\":{\"notice\":\"Approve the current pending root and content hash\"},\"blocksPerDistribution()\":{\"notice\":\"Duration of each distribution in blocks\"},\"claim(address,uint256,uint8,bytes32,uint256,bytes32[],bytes)\":{\"notice\":\"Claims rewards for a given recipient\"},\"claimed(address,bytes32)\":{\"notice\":\"total claimed amount per user address and fToken. user => positionId => claimed amount\"},\"currentMerkleCycle()\":{\"notice\":\"merkle root data related to current cycle (proposed and approved).\"},\"cyclesPerDistribution()\":{\"notice\":\"Number of cycles to distribute rewards\"},\"distributeRewards(uint256)\":{\"notice\":\"Distributes rewards for a given token\"},\"getCycleReward(uint256)\":{\"notice\":\"Returns the cycle reward for a given cycle\"},\"getCycleRewards()\":{\"notice\":\"Returns the cycle rewards\"},\"getDistributionForEpoch(uint256)\":{\"notice\":\"Returns the distribution for a given epoch\"},\"getDistributions()\":{\"notice\":\"Returns all distributions\"},\"hasPendingRoot()\":{\"notice\":\"checks if there is a proposed root waiting to be approved\"},\"isApprover(address)\":{\"notice\":\"checks if the `approver_` is an allowed root approver\"},\"isProposer(address)\":{\"notice\":\"checks if the `proposer_` is an allowed root proposer\"},\"pause()\":{\"notice\":\"Pause contract functionality of new roots and claiming\"},\"pendingMerkleCycle()\":{\"notice\":\"merkle root data related to pending cycle (proposed but not yet approved).\"},\"previousMerkleRoot()\":{\"notice\":\"merkle root of the previous cycle\"},\"proposeRoot(bytes32,bytes32,uint40,uint40,uint40)\":{\"notice\":\"Propose a new root and content hash, which will be stored as pending until approved\"},\"pullFromDistributor()\":{\"notice\":\"Whether to pull tokens from distributor or not\"},\"rewardsDistributor(address)\":{\"notice\":\"allow list for rewards distributors\"},\"setStartBlockOfNextCycle(uint40)\":{\"notice\":\"Sets the start block of the next cycle\"},\"startBlockOfNextCycle()\":{\"notice\":\"Start block of the next cycle\"},\"toggleRewardsDistributor(address)\":{\"notice\":\"Toggles a rewards distributor\"},\"totalCycleRewards()\":{\"notice\":\"Returns the total number of cycles\"},\"totalDistributions()\":{\"notice\":\"Returns the total number of distributions\"},\"unpause()\":{\"notice\":\"Unpause contract functionality of new roots and claiming\"},\"updateApprover(address,bool)\":{\"notice\":\"Updates an address status as a root approver\"},\"updateDistributionConfig(bool,uint40,uint40)\":{\"notice\":\"Updates the distribution configuration\"},\"updateProposer(address,bool)\":{\"notice\":\"Updates an address status as a root proposer\"},\"vestingStartTime()\":{\"notice\":\"Vesting start time\"},\"vestingTime()\":{\"notice\":\"Vesting time for rewards\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocols/lending/merkleDistributor/main.sol\":\"FluidMerkleDistributor\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"},\"contracts/libraries/errorTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nlibrary LibsErrorTypes {\\n    /***********************************|\\n    |         LiquidityCalcs            | \\n    |__________________________________*/\\n\\n    /// @notice thrown when supply or borrow exchange price is zero at calc token data (token not configured yet)\\n    uint256 internal constant LiquidityCalcs__ExchangePriceZero = 70001;\\n\\n    /// @notice thrown when rate data is set to a version that is not implemented\\n    uint256 internal constant LiquidityCalcs__UnsupportedRateVersion = 70002;\\n\\n    /// @notice thrown when the calculated borrow rate turns negative. This should never happen.\\n    uint256 internal constant LiquidityCalcs__BorrowRateNegative = 70003;\\n\\n    /***********************************|\\n    |           SafeTransfer            | \\n    |__________________________________*/\\n\\n    /// @notice thrown when safe transfer from for an ERC20 fails\\n    uint256 internal constant SafeTransfer__TransferFromFailed = 71001;\\n\\n    /// @notice thrown when safe transfer for an ERC20 fails\\n    uint256 internal constant SafeTransfer__TransferFailed = 71002;\\n\\n    /***********************************|\\n    |           SafeApprove             | \\n    |__________________________________*/\\n\\n    /// @notice thrown when safe approve from for an ERC20 fails\\n    uint256 internal constant SafeApprove__ApproveFailed = 81001;\\n}\\n\",\"keccak256\":\"0x4057f500fd44ce9e89049512d06d5f72c46f91938ed37312fb044c204451009b\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/safeTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.21;\\n\\nimport { LibsErrorTypes as ErrorTypes } from \\\"./errorTypes.sol\\\";\\n\\n/// @notice provides minimalistic methods for safe transfers, e.g. ERC20 safeTransferFrom\\nlibrary SafeTransfer {\\n    uint256 internal constant MAX_NATIVE_TRANSFER_GAS = 20000; // pass max. 20k gas for native transfers\\n\\n    error FluidSafeTransferError(uint256 errorId_);\\n\\n    /// @dev Transfer `amount_` of `token_` from `from_` to `to_`, spending the approval given by `from_` to the\\n    /// calling contract. If `token_` returns no value, non-reverting calls are assumed to be successful.\\n    /// Minimally modified from Solmate SafeTransferLib (address as input param for token, Custom Error):\\n    /// https://github.com/transmissions11/solmate/blob/50e15bb566f98b7174da9b0066126a4c3e75e0fd/src/utils/SafeTransferLib.sol#L31-L63\\n    function safeTransferFrom(address token_, address from_, address to_, uint256 amount_) internal {\\n        bool success_;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(from_, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"from_\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), and(to_, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to_\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount_) // Append the \\\"amount_\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            success_ := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token_, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        if (!success_) {\\n            revert FluidSafeTransferError(ErrorTypes.SafeTransfer__TransferFromFailed);\\n        }\\n    }\\n\\n    /// @dev Transfer `amount_` of `token_` to `to_`.\\n    /// If `token_` returns no value, non-reverting calls are assumed to be successful.\\n    /// Minimally modified from Solmate SafeTransferLib (address as input param for token, Custom Error):\\n    /// https://github.com/transmissions11/solmate/blob/50e15bb566f98b7174da9b0066126a4c3e75e0fd/src/utils/SafeTransferLib.sol#L65-L95\\n    function safeTransfer(address token_, address to_, uint256 amount_) internal {\\n        bool success_;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(to_, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to_\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount_) // Append the \\\"amount_\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            success_ := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token_, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        if (!success_) {\\n            revert FluidSafeTransferError(ErrorTypes.SafeTransfer__TransferFailed);\\n        }\\n    }\\n\\n    /// @dev Transfer `amount_` of ` native token to `to_`.\\n    /// Minimally modified from Solmate SafeTransferLib (Custom Error):\\n    /// https://github.com/transmissions11/solmate/blob/50e15bb566f98b7174da9b0066126a4c3e75e0fd/src/utils/SafeTransferLib.sol#L15-L25\\n    function safeTransferNative(address to_, uint256 amount_) internal {\\n        bool success_;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not. Pass limited gas\\n            success_ := call(MAX_NATIVE_TRANSFER_GAS, to_, amount_, 0, 0, 0, 0)\\n        }\\n\\n        if (!success_) {\\n            revert FluidSafeTransferError(ErrorTypes.SafeTransfer__TransferFailed);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7f7d3a39d984c62e41c669a3d11deb899b3512ace9313263592575bf48a6e079\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/protocols/lending/merkleDistributor/errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nabstract contract Errors {\\n    error Unauthorized();\\n    error InvalidParams();\\n\\n    // claim related errors:\\n    error InvalidCycle();\\n    error InvalidProof();\\n    error NothingToClaim();\\n    error MsgSenderNotRecipient();\\n}\\n\",\"keccak256\":\"0xe1fb6bea20d76327b9cf9f77694527a9c2ac4dbd346ba865789c21e73a779a3f\",\"license\":\"BUSL-1.1\"},\"contracts/protocols/lending/merkleDistributor/events.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nabstract contract Events {\\n    /// @notice Emitted when an address is added or removed from the allowed proposers\\n    event LogUpdateProposer(address proposer, bool isProposer);\\n\\n    /// @notice Emitted when an address is added or removed from the allowed approvers\\n    event LogUpdateApprover(address approver, bool isApprover);\\n\\n    /// @notice Emitted when a new cycle root hash is proposed\\n    event LogRootProposed(uint256 cycle, bytes32 root, bytes32 contentHash, uint256 timestamp, uint256 blockNumber);\\n\\n    /// @notice Emitted when a new cycle root hash is approved by the owner and becomes the new active root\\n    event LogRootUpdated(uint256 cycle, bytes32 root, bytes32 contentHash, uint256 timestamp, uint256 blockNumber);\\n\\n    /// @notice Emitted when a `user` claims `amount` via a valid merkle proof\\n    event LogClaimed(\\n        address user,\\n        uint256 amount,\\n        uint256 cycle,\\n        uint8 positionType,\\n        bytes32 positionId,\\n        uint256 timestamp,\\n        uint256 blockNumber\\n    );\\n\\n    /// @notice Emitted when a new reward cycle is created\\n    event LogRewardCycle(\\n        uint256 indexed cycle,\\n        uint256 indexed epoch,\\n        uint256 amount,\\n        uint256 startBlock,\\n        uint256 endBlock\\n    );\\n\\n    /// @notice Emitted when a new distribution is created\\n    event LogDistribution(\\n        uint256 indexed epoch,\\n        address indexed initiator,\\n        uint256 amount,\\n        uint256 startCycle,\\n        uint256 endCycle,\\n        uint256 registrationBlock,\\n        uint256 registrationTimestamp\\n    );\\n\\n    /// @notice Emitted when the distribution configuration is updated\\n    event LogDistributionConfigUpdated(\\n        bool pullFromSender,\\n        uint256 blocksPerDistribution,\\n        uint256 cyclesPerDistribution\\n    );\\n\\n    /// @notice Emitted when a rewards distributor is toggled\\n    event LogRewardsDistributorToggled(address distributor, bool isDistributor);\\n\\n    /// @notice Emitted when the start block of the next cycle is updated\\n    event LogStartBlockOfNextCycleUpdated(uint256 startBlockOfNextCycle);\\n}\\n\",\"keccak256\":\"0xe24dfc0c945a685a365fd5e9e81fdba4dd954b04e437ddd0f4273761a8894eec\",\"license\":\"BUSL-1.1\"},\"contracts/protocols/lending/merkleDistributor/main.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { MerkleProof } from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\nimport { Events } from \\\"./events.sol\\\";\\nimport { Errors } from \\\"./errors.sol\\\";\\nimport { Structs } from \\\"./structs.sol\\\";\\nimport { Variables } from \\\"./variables.sol\\\";\\nimport { SafeTransfer } from \\\"../../../libraries/safeTransfer.sol\\\";\\n\\n// ---------------------------------------------------------------------------------------------\\n//\\n// @dev WARNING: DO NOT USE `multiProof` related methods of `MerkleProof`.\\n// This repo uses OpenZeppelin 4.8.2 which has a vulnerability for multi proofs. See:\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-wprv-93r4-jj2p\\n//\\n// ---------------------------------------------------------------------------------------------\\n\\nabstract contract FluidMerkleDistributorCore is Structs, Variables, Events, Errors {\\n    /// @dev validates that an address is not the zero address\\n    modifier validAddress(address value_) {\\n        if (value_ == address(0)) {\\n            revert InvalidParams();\\n        }\\n        _;\\n    }\\n}\\n\\nabstract contract FluidMerkleDistributorAdmin is FluidMerkleDistributorCore {\\n    /// @notice                  Updates an address status as a root proposer\\n    /// @param proposer_         The address to update\\n    /// @param isProposer_       Whether or not the address should be an allowed proposer\\n    function updateProposer(address proposer_, bool isProposer_) public onlyOwner validAddress(proposer_) {\\n        _proposers[proposer_] = isProposer_;\\n        emit LogUpdateProposer(proposer_, isProposer_);\\n    }\\n\\n    /// @notice                  Updates an address status as a root approver\\n    /// @param approver_         The address to update\\n    /// @param isApprover_       Whether or not the address should be an allowed approver\\n    function updateApprover(address approver_, bool isApprover_) public onlyOwner validAddress(approver_) {\\n        _approvers[approver_] = isApprover_;\\n        emit LogUpdateApprover(approver_, isApprover_);\\n    }\\n\\n    /// @notice                         Spell allows owner aka governance to do any arbitrary call on factory\\n    /// @param target_                  Address to which the call needs to be delegated\\n    /// @param data_                    Data to execute at the delegated address\\n    function _spell(address target_, bytes memory data_) internal returns (bytes memory response_) {\\n        assembly {\\n            let succeeded := delegatecall(gas(), target_, add(data_, 0x20), mload(data_), 0, 0)\\n            let size := returndatasize()\\n\\n            response_ := mload(0x40)\\n            mstore(0x40, add(response_, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n            mstore(response_, size)\\n            returndatacopy(add(response_, 0x20), 0, size)\\n\\n            switch iszero(succeeded)\\n            case 1 {\\n                // throw if delegatecall failed\\n                returndatacopy(0x00, 0x00, size)\\n                revert(0x00, size)\\n            }\\n        }\\n    }\\n\\n    /// @dev open payload method for admin to resolve emergency cases\\n    function spell(address[] memory targets_, bytes[] memory calldatas_) public onlyOwner {\\n        for (uint256 i = 0; i < targets_.length; i++) _spell(targets_[i], calldatas_[i]);\\n    }\\n\\n    /// @notice Pause contract functionality of new roots and claiming\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @notice Unpause contract functionality of new roots and claiming\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n}\\n\\nabstract contract FluidMerkleDistributorApprover is FluidMerkleDistributorCore {\\n    /// @dev Checks that the sender is an approver\\n    modifier onlyApprover() {\\n        if (!isApprover(msg.sender)) {\\n            revert Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    /// @notice checks if the `approver_` is an allowed root approver\\n    function isApprover(address approver_) public view returns (bool) {\\n        return (_approvers[approver_] || owner == approver_);\\n    }\\n\\n    /// @notice Approve the current pending root and content hash\\n    function approveRoot(\\n        bytes32 root_,\\n        bytes32 contentHash_,\\n        uint40 cycle_,\\n        uint40 startBlock_,\\n        uint40 endBlock_\\n    ) external onlyApprover {\\n        MerkleCycle memory merkleCycle_ = _pendingMerkleCycle;\\n\\n        if (\\n            root_ != merkleCycle_.merkleRoot ||\\n            contentHash_ != merkleCycle_.merkleContentHash ||\\n            cycle_ != merkleCycle_.cycle ||\\n            startBlock_ != merkleCycle_.startBlock ||\\n            endBlock_ != merkleCycle_.endBlock\\n        ) {\\n            revert InvalidParams();\\n        }\\n\\n        previousMerkleRoot = _currentMerkleCycle.merkleRoot;\\n\\n        merkleCycle_.timestamp = uint40(block.timestamp);\\n        merkleCycle_.publishBlock = uint40(block.number);\\n\\n        _currentMerkleCycle = merkleCycle_;\\n\\n        emit LogRootUpdated(cycle_, root_, contentHash_, block.timestamp, block.number);\\n    }\\n}\\n\\nabstract contract FluidMerkleDistributorProposer is FluidMerkleDistributorCore {\\n    /// @dev Checks that the sender is a proposer\\n    modifier onlyProposer() {\\n        if (!isProposer(msg.sender)) {\\n            revert Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    /// @notice checks if the `proposer_` is an allowed root proposer\\n    function isProposer(address proposer_) public view returns (bool) {\\n        return (_proposers[proposer_] || owner == proposer_);\\n    }\\n\\n    /// @notice Propose a new root and content hash, which will be stored as pending until approved\\n    function proposeRoot(\\n        bytes32 root_,\\n        bytes32 contentHash_,\\n        uint40 cycle_,\\n        uint40 startBlock_,\\n        uint40 endBlock_\\n    ) external whenNotPaused onlyProposer {\\n        if (cycle_ != _currentMerkleCycle.cycle + 1 || startBlock_ > endBlock_) {\\n            revert InvalidParams();\\n        }\\n\\n        _pendingMerkleCycle = MerkleCycle({\\n            merkleRoot: root_,\\n            merkleContentHash: contentHash_,\\n            cycle: cycle_,\\n            startBlock: startBlock_,\\n            endBlock: endBlock_,\\n            timestamp: uint40(block.timestamp),\\n            publishBlock: uint40(block.number)\\n        });\\n\\n        emit LogRootProposed(cycle_, root_, contentHash_, block.timestamp, block.number);\\n    }\\n}\\n\\nabstract contract FluidMerkleDistributorRewards is FluidMerkleDistributorCore {\\n    /// @dev Modifier to check if the sender is a rewards distributor\\n    modifier onlyRewardsDistributor() {\\n        if (!rewardsDistributor[msg.sender] && owner != msg.sender) revert Unauthorized();\\n        _;\\n    }\\n\\n    /// @notice Updates the distribution configuration\\n    /// @param pullFromDistributor_ - whether to pull rewards from distributor or not\\n    /// @param blocksPerDistribution_ - duration of distribution in blocks\\n    /// @param cyclesPerDistribution_ - number of cycles to distribute rewards, if 0 then means paused\\n    function updateDistributionConfig(\\n        bool pullFromDistributor_,\\n        uint40 blocksPerDistribution_,\\n        uint40 cyclesPerDistribution_\\n    ) external onlyOwner {\\n        if (blocksPerDistribution_ == 0 || cyclesPerDistribution_ == 0) revert InvalidParams();\\n        emit LogDistributionConfigUpdated(\\n            pullFromDistributor = pullFromDistributor_,\\n            blocksPerDistribution = blocksPerDistribution_,\\n            cyclesPerDistribution = cyclesPerDistribution_\\n        );\\n    }\\n\\n    /// @notice Toggles a rewards distributor\\n    /// @param distributor_ - address of the rewards distributor\\n    function toggleRewardsDistributor(address distributor_) external onlyOwner {\\n        if (distributor_ == address(0)) revert InvalidParams();\\n        emit LogRewardsDistributorToggled(\\n            distributor_,\\n            rewardsDistributor[distributor_] = !rewardsDistributor[distributor_]\\n        );\\n    }\\n\\n    /// @notice Sets the start block of the next cycle\\n    /// @param startBlockOfNextCycle_ The start block of the next cycle\\n    function setStartBlockOfNextCycle(uint40 startBlockOfNextCycle_) external onlyOwner {\\n        if (startBlockOfNextCycle_ < block.number || startBlockOfNextCycle_ == 0) revert InvalidParams();\\n        emit LogStartBlockOfNextCycleUpdated(startBlockOfNextCycle = uint40(startBlockOfNextCycle_));\\n    }\\n\\n    /////// Public Functions ///////\\n\\n    /// @notice Returns the cycle rewards\\n    /// @return rewards_ - rewards\\n    function getCycleRewards() external view returns (Reward[] memory) {\\n        return rewards;\\n    }\\n\\n    /// @notice Returns the cycle reward for a given cycle\\n    /// @param cycle_ - cycle of the reward\\n    /// @return reward_ - reward\\n    function getCycleReward(uint256 cycle_) external view returns (Reward memory) {\\n        if (cycle_ > rewards.length || cycle_ == 0) revert InvalidParams();\\n        return rewards[cycle_ - 1];\\n    }\\n\\n    /// @notice Returns the total number of cycles\\n    /// @return totalCycles_ - total number of cycles\\n    function totalCycleRewards() external view returns (uint256) {\\n        return rewards.length;\\n    }\\n\\n    /// @notice Returns the total number of distributions\\n    /// @return totalDistributions_ - total number of distributions\\n    function totalDistributions() external view returns (uint256) {\\n        return distributions.length;\\n    }\\n\\n    /// @notice Returns the distribution for a given epoch\\n    /// @param epoch_ - epoch of the distribution\\n    /// @return distribution_ - distribution\\n    function getDistributionForEpoch(uint256 epoch_) external view returns (Distribution memory) {\\n        if (epoch_ > distributions.length || epoch_ == 0) revert InvalidParams();\\n        return distributions[epoch_ - 1];\\n    }\\n\\n    /// @notice Returns all distributions\\n    /// @return distributions_ - all distributions\\n    function getDistributions() external view returns (Distribution[] memory) {\\n        return distributions;\\n    }\\n\\n    ////////// Distribution Function //////////\\n\\n    /// @notice Distributes rewards for a given token\\n    /// @param amount_ - amount of tokens to distribute rewards for\\n    function distributeRewards(uint256 amount_) public onlyRewardsDistributor {\\n        if (amount_ == 0) revert InvalidParams();\\n\\n        uint256 amountPerCycle_ = amount_ / cyclesPerDistribution;\\n        uint256 blocksPerCycle_ = blocksPerDistribution / cyclesPerDistribution;\\n\\n        uint256 cyclesLength_ = rewards.length;\\n        uint256 startBlock_ = 0;\\n        if (cyclesLength_ > 0) {\\n            uint256 lastCycleEndBlock_ = rewards[cyclesLength_ - 1].endBlock + 1;\\n            // if there are already some cycles, then we need to check if startBlockOfNextCycle was set in order to start from that block, then assign it to startBlock_\\n            if (lastCycleEndBlock_ < startBlockOfNextCycle) {\\n                startBlock_ = startBlockOfNextCycle;\\n            } else {\\n                // if lastCycleEndBlock_ of last cycle is still syncing, then we need to start last cycle's end block + 1, else start from current block\\n                startBlock_ = lastCycleEndBlock_ > block.number ? lastCycleEndBlock_ : block.number;\\n            }\\n        } else {\\n            // if there are no cycles, that means this is the first distribution, then we need to start from startBlockOfNextCycle, if it was set, else start from current block\\n            startBlock_ = startBlockOfNextCycle > 0 ? startBlockOfNextCycle : block.number;\\n        }\\n\\n        if (startBlock_ == 0) revert InvalidParams();\\n\\n        uint256 distributionEpoch_ = distributions.length + 1;\\n\\n        distributions.push(\\n            Distribution({\\n                amount: amount_,\\n                epoch: uint40(distributionEpoch_),\\n                startCycle: uint40(cyclesLength_ + 1),\\n                endCycle: uint40(cyclesLength_ + cyclesPerDistribution),\\n                registrationBlock: uint40(block.number),\\n                registrationTimestamp: uint40(block.timestamp)\\n            })\\n        );\\n\\n        for (uint256 i = 0; i < cyclesPerDistribution; i++) {\\n            uint256 endBlock_ = startBlock_ + blocksPerCycle_ - 1;\\n            uint256 cycle_ = cyclesLength_ + 1 + i;\\n            uint256 cycleAmount_ = amountPerCycle_;\\n            if (i == cyclesPerDistribution - 1) {\\n                cycleAmount_ = amount_ - (amountPerCycle_ * i);\\n            }\\n            rewards.push(\\n                Reward({\\n                    cycle: uint40(cycle_),\\n                    amount: cycleAmount_,\\n                    startBlock: uint40(startBlock_),\\n                    endBlock: uint40(endBlock_),\\n                    epoch: uint40(distributionEpoch_)\\n                })\\n            );\\n            emit LogRewardCycle(cycle_, distributionEpoch_, cycleAmount_, startBlock_, endBlock_);\\n            startBlock_ = endBlock_ + 1;\\n        }\\n\\n        if (pullFromDistributor) SafeERC20.safeTransferFrom(TOKEN, msg.sender, address(this), amount_);\\n\\n        emit LogDistribution(\\n            distributionEpoch_,\\n            msg.sender,\\n            amount_,\\n            cyclesLength_ + 1,\\n            cyclesLength_ + cyclesPerDistribution,\\n            block.number,\\n            block.timestamp\\n        );\\n    }\\n}\\n\\ncontract FluidMerkleDistributor is\\n    FluidMerkleDistributorCore,\\n    FluidMerkleDistributorAdmin,\\n    FluidMerkleDistributorApprover,\\n    FluidMerkleDistributorProposer,\\n    FluidMerkleDistributorRewards\\n{\\n    constructor(\\n        ConstructorParams memory params_\\n    )\\n        validAddress(params_.owner)\\n        validAddress(params_.proposer)\\n        validAddress(params_.approver)\\n        validAddress(params_.rewardToken)\\n        Variables(params_.owner, params_.rewardToken)\\n    {\\n        if (params_.distributionInHours == 0 || params_.cycleInHours == 0) revert InvalidParams();\\n\\n        name = params_.name;\\n\\n        _proposers[params_.proposer] = true;\\n        emit LogUpdateProposer(params_.proposer, true);\\n\\n        _approvers[params_.approver] = true;\\n        emit LogUpdateApprover(params_.approver, true);\\n\\n        uint40 _blocksPerDistribution = uint40(params_.distributionInHours * 1 hours);\\n        uint40 _cyclesPerDistribution = uint40(params_.distributionInHours / params_.cycleInHours);\\n\\n        if (block.chainid == 1) _blocksPerDistribution = _blocksPerDistribution / 12 seconds;\\n        else if (block.chainid == 42161)\\n            _blocksPerDistribution = _blocksPerDistribution * 4; // 0.25 seconds blocktime, means 4 blocks per second\\n        else if (block.chainid == 8453 || block.chainid == 137)\\n            _blocksPerDistribution = _blocksPerDistribution / 2 seconds;\\n        else revert(\\\"Unsupported chain\\\");\\n\\n        emit LogDistributionConfigUpdated(\\n            pullFromDistributor = params_.pullFromDistributor,\\n            blocksPerDistribution = _blocksPerDistribution,\\n            cyclesPerDistribution = _cyclesPerDistribution\\n        );\\n\\n        vestingTime = uint40(params_.vestingTime);\\n        vestingStartTime = uint40(params_.vestingStartTime);\\n\\n        if (params_.startBlock > 0)\\n            emit LogStartBlockOfNextCycleUpdated(startBlockOfNextCycle = uint40(params_.startBlock));\\n    }\\n\\n    /// @notice checks if there is a proposed root waiting to be approved\\n    function hasPendingRoot() external view returns (bool) {\\n        return _pendingMerkleCycle.cycle == _currentMerkleCycle.cycle + 1;\\n    }\\n\\n    /// @notice merkle root data related to current cycle (proposed and approved).\\n    function currentMerkleCycle() public view returns (MerkleCycle memory) {\\n        return _currentMerkleCycle;\\n    }\\n\\n    /// @notice merkle root data related to pending cycle (proposed but not yet approved).\\n    function pendingMerkleCycle() public view returns (MerkleCycle memory) {\\n        return _pendingMerkleCycle;\\n    }\\n\\n    function encodeClaim(\\n        address recipient_,\\n        uint256 cumulativeAmount_,\\n        uint8 positionType_,\\n        bytes32 positionId_,\\n        uint256 cycle_,\\n        bytes memory metadata_\\n    ) public pure returns (bytes memory encoded_, bytes32 hash_) {\\n        encoded_ = abi.encode(positionType_, positionId_, recipient_, cycle_, cumulativeAmount_, metadata_);\\n        hash_ = keccak256(bytes.concat(keccak256(encoded_)));\\n    }\\n\\n    /// @notice Claims rewards for a given recipient\\n    /// @param recipient_ - address of the recipient\\n    /// @param cumulativeAmount_ - cumulative amount of rewards to claim\\n    /// @param positionType_ - type of position, 1 for lending, 2 for vaults, 3 for smart lending, etc\\n    /// @param positionId_ - id of the position, fToken address for lending and vaultId for vaults\\n    /// @param cycle_ - cycle of the rewards\\n    /// @param merkleProof_ - merkle proof of the rewards\\n    function claim(\\n        address recipient_,\\n        uint256 cumulativeAmount_,\\n        uint8 positionType_,\\n        bytes32 positionId_,\\n        uint256 cycle_,\\n        bytes32[] calldata merkleProof_,\\n        bytes memory metadata_\\n    ) public whenNotPaused {\\n        if (msg.sender != recipient_) revert MsgSenderNotRecipient();\\n        uint256 currentCycle_ = uint256(_currentMerkleCycle.cycle);\\n\\n        if (!(cycle_ == currentCycle_ || (currentCycle_ > 0 && cycle_ == currentCycle_ - 1))) {\\n            revert InvalidCycle();\\n        }\\n\\n        // Verify the merkle proof.\\n        bytes32 node_ = keccak256(\\n            bytes.concat(\\n                keccak256(abi.encode(positionType_, positionId_, recipient_, cycle_, cumulativeAmount_, metadata_))\\n            )\\n        );\\n        if (\\n            !MerkleProof.verify(\\n                merkleProof_,\\n                cycle_ == currentCycle_ ? _currentMerkleCycle.merkleRoot : previousMerkleRoot,\\n                node_\\n            )\\n        ) {\\n            revert InvalidProof();\\n        }\\n\\n        uint256 claimable_ = cumulativeAmount_ - claimed[recipient_][positionId_];\\n        if (claimable_ == 0) {\\n            revert NothingToClaim();\\n        }\\n\\n        if (vestingTime > 0) {\\n            uint256 vestingPeriod_ = block.timestamp - vestingStartTime;\\n            if (vestingPeriod_ < vestingTime) {\\n                // Calculate total vested amount at current time\\n                uint256 totalVestedAmount = (cumulativeAmount_ * vestingPeriod_) / vestingTime;\\n                // Adjust claimable to only what's newly vested\\n                claimable_ = totalVestedAmount - claimed[recipient_][positionId_];\\n            }\\n        }\\n\\n        claimed[recipient_][positionId_] += claimable_;\\n\\n        SafeERC20.safeTransfer(TOKEN, recipient_, claimable_);\\n\\n        emit LogClaimed(recipient_, claimable_, cycle_, positionType_, positionId_, block.timestamp, block.number);\\n    }\\n\\n    struct Claim {\\n        address recipient;\\n        uint256 cumulativeAmount;\\n        uint8 positionType;\\n        bytes32 positionId;\\n        uint256 cycle;\\n        bytes32[] merkleProof;\\n        bytes metadata;\\n    }\\n\\n    function bulkClaim(Claim[] calldata claims_) external {\\n        for (uint i = 0; i < claims_.length; i++) {\\n            claim(\\n                claims_[i].recipient,\\n                claims_[i].cumulativeAmount,\\n                claims_[i].positionType,\\n                claims_[i].positionId,\\n                claims_[i].cycle,\\n                claims_[i].merkleProof,\\n                claims_[i].metadata\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xae2d57513776417dc574a8257bb63e3d7a3be44d8b5628e26fdd53c1735508f9\",\"license\":\"BUSL-1.1\"},\"contracts/protocols/lending/merkleDistributor/structs.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nabstract contract Structs {\\n    struct ConstructorParams {\\n        string name;\\n        address owner;\\n        address proposer;\\n        address approver;\\n        address rewardToken;\\n        uint256 distributionInHours;\\n        uint256 cycleInHours;\\n        uint256 startBlock;\\n        bool pullFromDistributor;\\n        uint256 vestingTime;\\n        uint256 vestingStartTime;\\n    }\\n\\n    struct MerkleCycle {\\n        // slot 1\\n        bytes32 merkleRoot;\\n        // slot 2\\n        bytes32 merkleContentHash;\\n        // slot 3\\n        uint40 cycle;\\n        uint40 timestamp;\\n        uint40 publishBlock;\\n        uint40 startBlock;\\n        uint40 endBlock;\\n    }\\n\\n    struct Reward {\\n        // slot 1\\n        uint256 amount;\\n        // slot 2\\n        uint40 cycle;\\n        uint40 startBlock;\\n        uint40 endBlock;\\n        uint40 epoch;\\n    }\\n\\n    struct Distribution {\\n        // slot 1\\n        uint256 amount;\\n        // slot 2\\n        uint40 epoch;\\n        uint40 startCycle;\\n        uint40 endCycle;\\n        uint40 registrationBlock;\\n        uint40 registrationTimestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x56cca6153c1cded1c122e918475f6d4c74922e7dca765a555aa4c25b2e9cc456\",\"license\":\"BUSL-1.1\"},\"contracts/protocols/lending/merkleDistributor/variables.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Owned } from \\\"solmate/src/auth/Owned.sol\\\";\\nimport { Pausable } from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nimport { Structs } from \\\"./structs.sol\\\";\\n\\nabstract contract Constants {\\n    IERC20 public immutable TOKEN;\\n\\n    constructor(address rewardToken_) {\\n        TOKEN = IERC20(rewardToken_);\\n    }\\n}\\n\\nabstract contract Variables is Owned, Pausable, Constants, Structs {\\n    // ------------ storage variables from inherited contracts (Owned, Pausable) come before vars here --------\\n\\n    // ----------------------- slot 0 ---------------------------\\n    // address public owner; -> from Owned\\n\\n    // bool private _paused; -> from Pausable\\n\\n    // 11 bytes empty\\n\\n    // ----------------------- slot 1 ---------------------------\\n\\n    /// @dev Name of the Merkle Distributor\\n    string public name;\\n\\n    // ----------------------- slot 2 ---------------------------\\n\\n    /// @dev allow list for allowed root proposer addresses\\n    mapping(address => bool) internal _proposers;\\n\\n    // ----------------------- slot 3 ---------------------------\\n\\n    /// @dev allow list for allowed root proposer addresses\\n    mapping(address => bool) internal _approvers;\\n\\n    // ----------------------- slot 4-6 ---------------------------\\n\\n    /// @dev merkle root data related to current cycle (proposed and approved).\\n    /// @dev timestamp & publishBlock = data from last publish.\\n    // with custom getter to return whole struct at once instead of default solidity getter splitting it into tuple\\n    MerkleCycle internal _currentMerkleCycle;\\n\\n    // ----------------------- slot 7-9 ---------------------------\\n\\n    /// @dev merkle root data related to pending cycle (proposed but not yet approved).\\n    /// @dev timestamp & publishBlock = data from last propose.\\n    // with custom getter to return whole struct at once instead of default solidity getter splitting it into tuple\\n    MerkleCycle internal _pendingMerkleCycle;\\n\\n    // ----------------------- slot 10 ---------------------------\\n\\n    /// @notice merkle root of the previous cycle\\n    bytes32 public previousMerkleRoot;\\n\\n    // ----------------------- slot 11 ---------------------------\\n\\n    /// @notice total claimed amount per user address and fToken. user => positionId => claimed amount\\n    mapping(address => mapping(bytes32 => uint256)) public claimed;\\n\\n    // ----------------------- slot 12 ---------------------------\\n\\n    /// @notice Data of cycle rewards\\n    Reward[] internal rewards;\\n\\n    // ----------------------- slot 13 ---------------------------\\n\\n    /// @notice data of distributions\\n    Distribution[] internal distributions;\\n\\n    // ----------------------- slot 14 ---------------------------\\n\\n    /// @notice allow list for rewards distributors\\n    mapping(address => bool) public rewardsDistributor;\\n\\n    // ----------------------- slot 15 ---------------------------\\n\\n    /// @notice Number of cycles to distribute rewards\\n    uint40 public cyclesPerDistribution;\\n\\n    /// @notice Duration of each distribution in blocks\\n    uint40 public blocksPerDistribution;\\n\\n    /// @notice Start block of the next cycle\\n    uint40 public startBlockOfNextCycle;\\n\\n    /// @notice Whether to pull tokens from distributor or not\\n    bool public pullFromDistributor;\\n\\n    /// @notice Vesting time for rewards\\n    uint40 public vestingTime;\\n\\n    /// @notice Vesting start time\\n    uint40 public vestingStartTime;\\n\\n    constructor(address owner_, address rewardToken_) Constants(rewardToken_) Owned(owner_) {}\\n}\\n\",\"keccak256\":\"0x9a5cfe41fc0900390c187705e0b7bdd14220abbf957dd08802b328db52de645f\",\"license\":\"BUSL-1.1\"},\"solmate/src/auth/Owned.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\\nabstract contract Owned {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            OWNERSHIP STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address public owner;\\n\\n    modifier onlyOwner() virtual {\\n        require(msg.sender == owner, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             OWNERSHIP LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        owner = newOwner;\\n\\n        emit OwnershipTransferred(msg.sender, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xfedb27d14c508342c33eb067c9a02eabcdb0f9dcf93b04ded1001f580d12d0ea\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620045ec380380620045ec8339810160408190526200003491620005c6565b60208101516080820151600080546001600160a01b0319166001600160a01b038416908117825560405183928592917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506000805460ff60a01b191690556001600160a01b039081166080526020840151925082169050620000cd57604051635435b28960e11b815260040160405180910390fd5b60408201516001600160a01b038116620000fa57604051635435b28960e11b815260040160405180910390fd5b60608301516001600160a01b0381166200012757604051635435b28960e11b815260040160405180910390fd5b60808401516001600160a01b0381166200015457604051635435b28960e11b815260040160405180910390fd5b60a0850151158062000168575060c0850151155b156200018757604051635435b28960e11b815260040160405180910390fd5b845160019062000198908262000764565b50604085810180516001600160a01b0390811660009081526002602090815290849020805460ff1916600190811790915592518451921682528101919091527f780d738f356a91be5dfe8ffb87990c655a36b3430a233c71a209eb1e9a1a1a75910160405180910390a16060850180516001600160a01b03908116600090815260036020908152604091829020805460ff1916600190811790915593518251931683528201929092527feeeb06b5605b72367788db09c5284b141487cdc2ab0925fcf8880d30ea584376910160405180910390a160008560a00151610e1062000282919062000846565b905060008660c001518760a001516200029c91906200087c565b905046600103620002bc57620002b4600c8362000893565b915062000337565b4661a4b103620002d357620002b4826004620008ba565b466121051480620002e45750466089145b15620002f757620002b460028362000893565b60405162461bcd60e51b81526020600482015260116024820152702ab739bab83837b93a32b21031b430b4b760791b604482015260640160405180910390fd5b610100870151600f80546aff0000000000ffffffffff60281b1916600160781b92151592830264ffffffffff60281b1916176501000000000064ffffffffff8681169182029290921764ffffffffff1916918516918217909255604080519384526020840192909252908201527f7ec0e33f381405196f961b48c778f62e8184d357d894aa02af2444db07a09fd89060600160405180910390a1610120870151600f80546101408a015164ffffffffff908116600160a81b0264ffffffffff60a81b1991909416600160801b0216600160801b600160d01b03199091161791909117905560e087015115620004895760e0870151600f805464ffffffffff60501b19166a010000000000000000000064ffffffffff9093169283021790556040519081527f9d04c34d16567c8a1806a7cbaff030caed3589501bd3e0e3f282193a9b3afe619060200160405180910390a15b50505050505050620008e6565b634e487b7160e01b600052604160045260246000fd5b60405161016081016001600160401b0381118282101715620004d257620004d262000496565b60405290565b604051601f8201601f191681016001600160401b038111828210171562000503576200050362000496565b604052919050565b600082601f8301126200051d57600080fd5b81516001600160401b0381111562000539576200053962000496565b60206200054f601f8301601f19168201620004d8565b82815285828487010111156200056457600080fd5b60005b838110156200058457858101830151828201840152820162000567565b506000928101909101919091529392505050565b80516001600160a01b0381168114620005b057600080fd5b919050565b80518015158114620005b057600080fd5b600060208284031215620005d957600080fd5b81516001600160401b0380821115620005f157600080fd5b9083019061016082860312156200060757600080fd5b62000611620004ac565b8251828111156200062157600080fd5b6200062f878286016200050b565b825250620006406020840162000598565b6020820152620006536040840162000598565b6040820152620006666060840162000598565b6060820152620006796080840162000598565b608082015260a083015160a082015260c083015160c082015260e083015160e08201526101009150620006ae828401620005b5565b91810191909152610120828101519082015261014091820151918101919091529392505050565b600181811c90821680620006ea57607f821691505b6020821081036200070b57634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200075f57600081815260208120601f850160051c810160208610156200073a5750805b601f850160051c820191505b818110156200075b5782815560010162000746565b5050505b505050565b81516001600160401b0381111562000780576200078062000496565b6200079881620007918454620006d5565b8462000711565b602080601f831160018114620007d05760008415620007b75750858301515b600019600386901b1c1916600185901b1785556200075b565b600085815260208120601f198616915b828110156200080157888601518255948401946001909101908401620007e0565b5085821015620008205787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b808202811582820484141762000860576200086062000830565b92915050565b634e487b7160e01b600052601260045260246000fd5b6000826200088e576200088e62000866565b500490565b600064ffffffffff80841680620008ae57620008ae62000866565b92169190910492915050565b64ffffffffff818116838216028082169190828114620008de57620008de62000830565b505092915050565b608051613cdc62000910600039600081816105cd0152818161187b01526126870152613cdc6000f3fe608060405234801561001057600080fd5b50600436106102ad5760003560e01c806382bc4aaf1161017b578063a8a9bbfd116100d8578063da528f3e1161008c578063f2fde38b11610071578063f2fde38b14610821578063f3bd53bf14610834578063fc5e231e1461085557600080fd5b8063da528f3e146107e2578063dcf6de811461080157600080fd5b8063c7dab436116100bd578063c7dab436146106eb578063c81eec6614610710578063caf3791e146107d957600080fd5b8063a8a9bbfd146106c5578063be5013dc146106d857600080fd5b80638da5cb5b1161012f5780639d01a27d116101145780639d01a27d14610673578063a7e7344a14610686578063a8660a781461069b57600080fd5b80638da5cb5b146106425780639cfc7e831461066257600080fd5b80638456cb59116101605780638456cb5914610614578063864683d41461061c5780638a1e6bba1461062f57600080fd5b806382bc4aaf146105b557806382bfefc8146105c857600080fd5b80632f37a7741161022957806359974e38116101dd5780636d218e48116101c25780636d218e481461057c57806370feb52a1461058f57806374ec29a0146105a257600080fd5b806359974e38146105465780635c975abb1461055957600080fd5b80633f4ba83a1161020e5780633f4ba83a146104fb5780634617c06a14610503578063575936511461051657600080fd5b80632f37a774146104e057806335c1dd99146104e857600080fd5b80630f2d940b116102805780631563461b116102655780631563461b14610391578063163db71b146103a65780632274c5cd146103ae57600080fd5b80630f2d940b146103385780630fc1bf681461037157600080fd5b806302aa6318146102b257806304585ac7146102d0578063059527bf146102f057806306fdde0314610323575b600080fd5b6102ba61085d565b6040516102c791906130f9565b60405180910390f35b6102e36102de36600461318f565b610933565b6040516102c791906131a8565b6103136102fe36600461321b565b600e6020526000908152604090205460ff1681565b60405190151581526020016102c7565b61032b610a3d565b6040516102c791906132a4565b6103636103463660046132b7565b600b60209081526000928352604080842090915290825290205481565b6040519081526020016102c7565b600f54610313906f01000000000000000000000000000000900460ff1681565b6103a461039f3660046132f2565b610acb565b005b600d54610363565b6104776040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810191909152506040805160e0810182526007548152600854602082015260095464ffffffffff80821693830193909352650100000000008104831660608301526a01000000000000000000008104831660808301526f010000000000000000000000000000008104831660a083015274010000000000000000000000000000000000000000900490911660c082015290565b6040516102c79190600060e0820190508251825260208301516020830152604083015164ffffffffff80821660408501528060608601511660608501528060808601511660808501528060a08601511660a08501528060c08601511660c0850152505092915050565b610313610c2f565b6103a46104f636600461333e565b610c5b565b6103a4610f4e565b6103a461051136600461333e565b610fd9565b600f546105309065010000000000900464ffffffffff1681565b60405164ffffffffff90911681526020016102c7565b6103a461055436600461318f565b61124a565b60005474010000000000000000000000000000000000000000900460ff16610313565b61031361058a36600461321b565b611917565b6103a461059d36600461321b565b61196b565b6103136105b036600461321b565b611aca565b6103a46105c3366004613555565b611b1b565b6105ef7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016102c7565b6103a4611bfc565b6103a461062a366004613615565b611c85565b6103a461063d36600461367c565b611dcb565b6000546105ef9073ffffffffffffffffffffffffffffffffffffffff1681565b600f546105309064ffffffffff1681565b6103a46106813660046132f2565b611f68565b61068e6120be565b6040516102c791906136be565b600f54610530907501000000000000000000000000000000000000000000900464ffffffffff1681565b6103a46106d336600461373c565b61216c565b6103a46106e6366004613792565b612322565b600f5461053090700100000000000000000000000000000000900464ffffffffff1681565b6104776040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810191909152506040805160e0810182526004548152600554602082015260065464ffffffffff80821693830193909352650100000000008104831660608301526a01000000000000000000008104831660808301526f010000000000000000000000000000008104831660a083015274010000000000000000000000000000000000000000900490911660c082015290565b610363600a5481565b600f54610530906a0100000000000000000000900464ffffffffff1681565b61081461080f36600461318f565b61272d565b6040516102c79190613839565b6103a461082f36600461321b565b61285d565b61084761084236600461388f565b61294e565b6040516102c7929190613909565b600c54610363565b6060600d805480602002602001604051908101604052809291908181526020016000905b8282101561092a5760008481526020908190206040805160c081018252600286029092018054835260019081015464ffffffffff808216858701526501000000000082048116938501939093526a01000000000000000000008104831660608501526f0100000000000000000000000000000081048316608085015274010000000000000000000000000000000000000000900490911660a08301529083529092019101610881565b50505050905090565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152600c5482118061096c575081155b156109a3576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600c6109b060018461395a565b815481106109c0576109c061396d565b60009182526020918290206040805160a0810182526002909302909101805483526001015464ffffffffff808216948401949094526501000000000081048416918301919091526a01000000000000000000008104831660608301526f010000000000000000000000000000009004909116608082015292915050565b60018054610a4a9061399c565b80601f0160208091040260200160405190810160405280929190818152602001828054610a769061399c565b8015610ac35780601f10610a9857610100808354040283529160200191610ac3565b820191906000526020600020905b815481529060010190602001808311610aa657829003601f168201915b505050505081565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b51576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a4544000000000000000000000000000000000000000060448201526064015b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff8116610b9f576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff831660008181526003602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168615159081179091558251938452908301527feeeb06b5605b72367788db09c5284b141487cdc2ab0925fcf8880d30ea58437691015b60405180910390a1505050565b600654600090610c479064ffffffffff1660016139ef565b60095464ffffffffff908116911614919050565b610c6433611917565b610c9a576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160e081018252600754808252600854602083015260095464ffffffffff80821694840194909452650100000000008104841660608401526a01000000000000000000008104841660808401526f010000000000000000000000000000008104841660a084015274010000000000000000000000000000000000000000900490921660c08201529086141580610d37575080602001518514155b80610d545750806040015164ffffffffff168464ffffffffff1614155b80610d7157508060a0015164ffffffffff168364ffffffffff1614155b80610d8e57508060c0015164ffffffffff168264ffffffffff1614155b15610dc5576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60048054600a554264ffffffffff818116606085810182905243808416608080890182905288519097556020808901516005556040808a01516006805460a0808e015160c08f0151948c167fffffffffffffffffffffffffffffffffffffffffffff000000000000000000009093169290921765010000000000909a02999099177fffffffffffffffffffffffff00000000000000000000ffffffffffffffffffff166a01000000000000000000009096027fffffffffffffffffffffffff0000000000ffffffffffffffffffffffffffffff16959095176f01000000000000000000000000000000958a1695909502949094177fffffffffffffff0000000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000091891691909102179092558151958c16865285018d905284018b905290830193909352928101919091527fcc3c3071340d91a4fd687f9ad48d1ee5689f8083136feb3594807d0f7481f7cf910160405180910390a1505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610fcf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610b48565b610fd76129d0565b565b610fe1612a4d565b610fea33611aca565b611020576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006546110359064ffffffffff1660016139ef565b64ffffffffff168364ffffffffff1614158061105e57508064ffffffffff168264ffffffffff16115b15611095576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160e0810182528681526020810186905264ffffffffff8086168284018190524280831660608501819052438085166080870181905289861660a0880181905295891660c090970187905260078d905560088c905560098054740100000000000000000000000000000000000000009098027fffffffffffffff0000000000ffffffffffffffffffffffffffffffffffffffff6f010000000000000000000000000000009098027fffffffffffffffffffffffff0000000000ffffffffffffffffffffffffffffff6a0100000000000000000000909402939093167fffffffffffffffffffffffff00000000000000000000ffffffffffffffffffff650100000000009096027fffffffffffffffffffffffffffffffffffffffffffff00000000000000000000909a1690971798909817939093169490941793909317939093169390931790915591517fb38026cc978f6c2642a5108ee558571a1b01a939b056abcc065b7eabacaf2d9d9261123b9287928a928a929164ffffffffff959095168552602085019390935260408401919091526060830152608082015260a00190565b60405180910390a15050505050565b336000908152600e602052604090205460ff16158015611282575060005473ffffffffffffffffffffffffffffffffffffffff163314155b156112b9576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806000036112f3576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600f5460009061130a9064ffffffffff1683613a43565b600f549091506000906113309064ffffffffff8082169165010000000000900416613a57565b600c5464ffffffffff919091169150600081156113f0576000600c61135660018561395a565b815481106113665761136661396d565b9060005260206000209060020201600101600a9054906101000a900464ffffffffff16600161139591906139ef565b600f5464ffffffffff91821692506a01000000000000000000009004168110156113d857600f546a0100000000000000000000900464ffffffffff1691506113ea565b4381116113e557436113e7565b805b91505b5061142e565b600f546a0100000000000000000000900464ffffffffff16611412574361142b565b600f546a0100000000000000000000900464ffffffffff165b90505b80600003611468576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600d54600090611479906001613a7b565b9050600d6040518060c001604052808881526020018364ffffffffff1681526020018560016114a89190613a7b565b64ffffffffff9081168252600f546020909201916114c7911687613a7b565b64ffffffffff9081168252438116602080840191909152428216604093840152845460018181018755600096875282872086516002909302019182559185015191018054938501516060860151608087015160a090970151851674010000000000000000000000000000000000000000027fffffffffffffff0000000000ffffffffffffffffffffffffffffffffffffffff9786166f01000000000000000000000000000000027fffffffffffffffffffffffff0000000000ffffffffffffffffffffffffffffff9287166a010000000000000000000002929092167fffffffffffffffffffffffff00000000000000000000ffffffffffffffffffff93871665010000000000027fffffffffffffffffffffffffffffffffffffffffffff00000000000000000000909816959096169490941795909517169290921792909217929092161790555b600f5464ffffffffff16811015611857576000600161162f8786613a7b565b611639919061395a565b9050600082611649876001613a7b565b6116539190613a7b565b600f54909150889061166e9060019064ffffffffff16613a8e565b64ffffffffff16840361169257611685848a613aac565b61168f908b61395a565b90505b6040805160a08101825282815264ffffffffff80851660208301908152898216838501908152878316606085019081528a841660808601908152600c8054600181018255600091909152955160029096027fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c781019690965592517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c8909501805492519151935185166f01000000000000000000000000000000027fffffffffffffffffffffffff0000000000ffffffffffffffffffffffffffffff9486166a010000000000000000000002949094167fffffffffffffffffffffffff00000000000000000000ffffffffffffffffffff92861665010000000000027fffffffffffffffffffffffffffffffffffffffffffff00000000000000000000909416969095169590951791909117169190911717905551859083907f9d1578529527d7ca977e6e95da5e7302299dfa7894fea3a1992ce68741ff5a0a9061182c9085908b9089909283526020830191909152604082015260600190565b60405180910390a361183f836001613a7b565b9550505050808061184f90613ac3565b915050611610565b50600f546f01000000000000000000000000000000900460ff16156118a2576118a27f0000000000000000000000000000000000000000000000000000000000000000333089612ad2565b33817fd3aec04e72c75d4a42792ce6fe015d1ec10b07a8a621c9df2a89bd3644cf7ca8886118d1876001613a7b565b600f546118e59064ffffffffff1689613a7b565b6040805193845260208401929092529082015243606082015242608082015260a00160405180910390a3505050505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526003602052604081205460ff1680611965575060005473ffffffffffffffffffffffffffffffffffffffff8381169116145b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146119ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610b48565b73ffffffffffffffffffffffffffffffffffffffff8116611a39576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff81166000818152600e6020908152604091829020805460ff8116157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090911681179091558251938452908301527f7070b1fa79059dab7359a2e5b3be557471a19c213ba384d17144bc86d149672391015b60405180910390a150565b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602052604081205460ff168061196557505060005473ffffffffffffffffffffffffffffffffffffffff91821691161490565b60005473ffffffffffffffffffffffffffffffffffffffff163314611b9c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610b48565b60005b8251811015611bf757611be4838281518110611bbd57611bbd61396d565b6020026020010151838381518110611bd757611bd761396d565b6020026020010151612bb4565b5080611bef81613ac3565b915050611b9f565b505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611c7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610b48565b610fd7612c00565b60005473ffffffffffffffffffffffffffffffffffffffff163314611d06576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610b48565b438164ffffffffff161080611d20575064ffffffffff8116155b15611d57576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600f80547fffffffffffffffffffffffffffffffffff0000000000ffffffffffffffffffff166a010000000000000000000064ffffffffff8416908102919091179091556040519081527f9d04c34d16567c8a1806a7cbaff030caed3589501bd3e0e3f282193a9b3afe6190602001611abf565b60005b81811015611bf757611f56838383818110611deb57611deb61396d565b9050602002810190611dfd9190613afb565b611e0b90602081019061321b565b848484818110611e1d57611e1d61396d565b9050602002810190611e2f9190613afb565b60200135858585818110611e4557611e4561396d565b9050602002810190611e579190613afb565b611e68906060810190604001613b39565b868686818110611e7a57611e7a61396d565b9050602002810190611e8c9190613afb565b60600135878787818110611ea257611ea261396d565b9050602002810190611eb49190613afb565b60800135888888818110611eca57611eca61396d565b9050602002810190611edc9190613afb565b611eea9060a0810190613b54565b8a8a8a818110611efc57611efc61396d565b9050602002810190611f0e9190613afb565b611f1c9060c0810190613bbc565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061232292505050565b80611f6081613ac3565b915050611dce565b60005473ffffffffffffffffffffffffffffffffffffffff163314611fe9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610b48565b8173ffffffffffffffffffffffffffffffffffffffff8116612037576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff831660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168615159081179091558251938452908301527f780d738f356a91be5dfe8ffb87990c655a36b3430a233c71a209eb1e9a1a1a759101610c22565b6060600c805480602002602001604051908101604052809291908181526020016000905b8282101561092a5760008481526020908190206040805160a081018252600286029092018054835260019081015464ffffffffff808216858701526501000000000082048116938501939093526a01000000000000000000008104831660608501526f010000000000000000000000000000009004909116608083015290835290920191016120e2565b60005473ffffffffffffffffffffffffffffffffffffffff1633146121ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610b48565b64ffffffffff82161580612206575064ffffffffff8116155b1561223d576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600f80547fffffffffffffffffffffffffffffffff00ffffffffff0000000000ffffffffff166f010000000000000000000000000000008515159081027fffffffffffffffffffffffffffffffffffffffffffff0000000000ffffffffff16919091176501000000000064ffffffffff868116918202929092177fffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000016918516918217909355604080519283526020830193909352918101919091527f7ec0e33f381405196f961b48c778f62e8184d357d894aa02af2444db07a09fd890606001610c22565b61232a612a4d565b3373ffffffffffffffffffffffffffffffffffffffff891614612379576040517fbd79de5800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60065464ffffffffff16848114806123a557506000811180156123a557506123a260018261395a565b85145b6123db576040517f9b8febfe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600087878b888c876040516020016123f896959493929190613c21565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120908301520160405160208183030381529060405280519060200120905061249b8585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505050888514905061249157600a54612495565b6004545b83612c6f565b6124d1576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8a166000908152600b602090815260408083208a845290915281205461250c908b61395a565b905080600003612548576040517f969bf72800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600f54700100000000000000000000000000000000900464ffffffffff161561263c57600f5460009061259b907501000000000000000000000000000000000000000000900464ffffffffff164261395a565b600f54909150700100000000000000000000000000000000900464ffffffffff1681101561263a57600f54600090700100000000000000000000000000000000900464ffffffffff166125ee838e613aac565b6125f89190613a43565b73ffffffffffffffffffffffffffffffffffffffff8e166000908152600b602090815260408083208e8452909152902054909150612636908261395a565b9250505b505b73ffffffffffffffffffffffffffffffffffffffff8b166000908152600b602090815260408083208b84529091528120805483929061267c908490613a7b565b909155506126ad90507f00000000000000000000000000000000000000000000000000000000000000008c83612c85565b6040805173ffffffffffffffffffffffffffffffffffffffff8d1681526020810183905290810188905260ff8a166060820152608081018990524260a08201524360c08201527f309cb1c0dc6ce0f02c0c35cc1f46bbe61ec9deb311d101b87e7d25bd0b647fd79060e00160405180910390a15050505050505050505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810191909152600d5482118061276d575081155b156127a4576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600d6127b160018461395a565b815481106127c1576127c161396d565b60009182526020918290206040805160c0810182526002909302909101805483526001015464ffffffffff808216948401949094526501000000000081048416918301919091526a01000000000000000000008104831660608301526f0100000000000000000000000000000081048316608083015274010000000000000000000000000000000000000000900490911660a082015292915050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146128de576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610b48565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081178255604051909133917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b60606000858589868a8760405160200161296d96959493929190613c21565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152828252805160208083019190912090840152935001604051602081830303815290604052805190602001209050965096945050505050565b6129d8612cdb565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b60005474010000000000000000000000000000000000000000900460ff1615610fd7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610b48565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052612bae9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612d5f565b50505050565b6060600080835160208501865af43d6040519250601f19601f6020830101168301604052808352806000602085013e811560018103612bf757816000803e816000fd5b50505092915050565b612c08612a4d565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612a233390565b600082612c7c8584612e6b565b14949350505050565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052611bf79084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401612b2c565b60005474010000000000000000000000000000000000000000900460ff16610fd7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610b48565b6000612dc1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612eb89092919063ffffffff16565b805190915015611bf75780806020019051810190612ddf9190613c77565b611bf7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610b48565b600081815b8451811015612eb057612e9c82868381518110612e8f57612e8f61396d565b6020026020010151612ecf565b915080612ea881613ac3565b915050612e70565b509392505050565b6060612ec78484600085612f01565b949350505050565b6000818310612eeb576000828152602084905260409020612efa565b60008381526020839052604090205b9392505050565b606082471015612f93576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610b48565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612fbc9190613c94565b60006040518083038185875af1925050503d8060008114612ff9576040519150601f19603f3d011682016040523d82523d6000602084013e612ffe565b606091505b509150915061300f8783838761301a565b979650505050505050565b606083156130b05782516000036130a95773ffffffffffffffffffffffffffffffffffffffff85163b6130a9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b48565b5081612ec7565b612ec783838151156130c55781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4891906132a4565b6020808252825182820181905260009190848201906040850190845b818110156131835761317083855180518252602081015164ffffffffff80821660208501528060408401511660408501528060608401511660608501528060808401511660808501528060a08401511660a085015250505050565b9284019260c09290920191600101613115565b50909695505050505050565b6000602082840312156131a157600080fd5b5035919050565b60a08101611965828480518252602081015164ffffffffff808216602085015280604084015116604085015280606084015116606085015280608084015116608085015250505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461321657600080fd5b919050565b60006020828403121561322d57600080fd5b612efa826131f2565b60005b83811015613251578181015183820152602001613239565b50506000910152565b60008151808452613272816020860160208601613236565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000612efa602083018461325a565b600080604083850312156132ca57600080fd5b6132d3836131f2565b946020939093013593505050565b80151581146132ef57600080fd5b50565b6000806040838503121561330557600080fd5b61330e836131f2565b9150602083013561331e816132e1565b809150509250929050565b803564ffffffffff8116811461321657600080fd5b600080600080600060a0868803121561335657600080fd5b853594506020860135935061336d60408701613329565b925061337b60608701613329565b915061338960808701613329565b90509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561340b5761340b613395565b604052919050565b600067ffffffffffffffff82111561342d5761342d613395565b5060051b60200190565b600082601f83011261344857600080fd5b813567ffffffffffffffff81111561346257613462613395565b61349360207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016133c4565b8181528460208386010111156134a857600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f8301126134d657600080fd5b813560206134eb6134e683613413565b6133c4565b82815260059290921b8401810191818101908684111561350a57600080fd5b8286015b8481101561354a57803567ffffffffffffffff81111561352e5760008081fd5b61353c8986838b0101613437565b84525091830191830161350e565b509695505050505050565b6000806040838503121561356857600080fd5b823567ffffffffffffffff8082111561358057600080fd5b818501915085601f83011261359457600080fd5b813560206135a46134e683613413565b82815260059290921b840181019181810190898411156135c357600080fd5b948201945b838610156135e8576135d9866131f2565b825294820194908201906135c8565b965050860135925050808211156135fe57600080fd5b5061360b858286016134c5565b9150509250929050565b60006020828403121561362757600080fd5b612efa82613329565b60008083601f84011261364257600080fd5b50813567ffffffffffffffff81111561365a57600080fd5b6020830191508360208260051b850101111561367557600080fd5b9250929050565b6000806020838503121561368f57600080fd5b823567ffffffffffffffff8111156136a657600080fd5b6136b285828601613630565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b818110156131835761372983855180518252602081015164ffffffffff808216602085015280604084015116604085015280606084015116606085015280608084015116608085015250505050565b9284019260a092909201916001016136da565b60008060006060848603121561375157600080fd5b833561375c816132e1565b925061376a60208501613329565b915061377860408501613329565b90509250925092565b803560ff8116811461321657600080fd5b60008060008060008060008060e0898b0312156137ae57600080fd5b6137b7896131f2565b9750602089013596506137cc60408a01613781565b9550606089013594506080890135935060a089013567ffffffffffffffff808211156137f757600080fd5b6138038c838d01613630565b909550935060c08b013591508082111561381c57600080fd5b506138298b828c01613437565b9150509295985092959890939650565b60c08101611965828480518252602081015164ffffffffff80821660208501528060408401511660408501528060608401511660608501528060808401511660808501528060a08401511660a085015250505050565b60008060008060008060c087890312156138a857600080fd5b6138b1876131f2565b9550602087013594506138c660408801613781565b9350606087013592506080870135915060a087013567ffffffffffffffff8111156138f057600080fd5b6138fc89828a01613437565b9150509295509295509295565b60408152600061391c604083018561325a565b90508260208301529392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818103818111156119655761196561392b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600181811c908216806139b057607f821691505b6020821081036139e9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b64ffffffffff818116838216019080821115613a0d57613a0d61392b565b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082613a5257613a52613a14565b500490565b600064ffffffffff80841680613a6f57613a6f613a14565b92169190910492915050565b808201808211156119655761196561392b565b64ffffffffff828116828216039080821115613a0d57613a0d61392b565b80820281158282048414176119655761196561392b565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613af457613af461392b565b5060010190565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff21833603018112613b2f57600080fd5b9190910192915050565b600060208284031215613b4b57600080fd5b612efa82613781565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112613b8957600080fd5b83018035915067ffffffffffffffff821115613ba457600080fd5b6020019150600581901b360382131561367557600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112613bf157600080fd5b83018035915067ffffffffffffffff821115613c0c57600080fd5b60200191503681900382131561367557600080fd5b60ff8716815285602082015273ffffffffffffffffffffffffffffffffffffffff8516604082015283606082015282608082015260c060a08201526000613c6b60c083018461325a565b98975050505050505050565b600060208284031215613c8957600080fd5b8151612efa816132e1565b60008251613b2f81846020870161323656fea26469706673582212203a69baef2200202bf5a13b83e738b96aa691edd79234723ee35c1ce64123e5bd64736f6c63430008150033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106102ad5760003560e01c806382bc4aaf1161017b578063a8a9bbfd116100d8578063da528f3e1161008c578063f2fde38b11610071578063f2fde38b14610821578063f3bd53bf14610834578063fc5e231e1461085557600080fd5b8063da528f3e146107e2578063dcf6de811461080157600080fd5b8063c7dab436116100bd578063c7dab436146106eb578063c81eec6614610710578063caf3791e146107d957600080fd5b8063a8a9bbfd146106c5578063be5013dc146106d857600080fd5b80638da5cb5b1161012f5780639d01a27d116101145780639d01a27d14610673578063a7e7344a14610686578063a8660a781461069b57600080fd5b80638da5cb5b146106425780639cfc7e831461066257600080fd5b80638456cb59116101605780638456cb5914610614578063864683d41461061c5780638a1e6bba1461062f57600080fd5b806382bc4aaf146105b557806382bfefc8146105c857600080fd5b80632f37a7741161022957806359974e38116101dd5780636d218e48116101c25780636d218e481461057c57806370feb52a1461058f57806374ec29a0146105a257600080fd5b806359974e38146105465780635c975abb1461055957600080fd5b80633f4ba83a1161020e5780633f4ba83a146104fb5780634617c06a14610503578063575936511461051657600080fd5b80632f37a774146104e057806335c1dd99146104e857600080fd5b80630f2d940b116102805780631563461b116102655780631563461b14610391578063163db71b146103a65780632274c5cd146103ae57600080fd5b80630f2d940b146103385780630fc1bf681461037157600080fd5b806302aa6318146102b257806304585ac7146102d0578063059527bf146102f057806306fdde0314610323575b600080fd5b6102ba61085d565b6040516102c791906130f9565b60405180910390f35b6102e36102de36600461318f565b610933565b6040516102c791906131a8565b6103136102fe36600461321b565b600e6020526000908152604090205460ff1681565b60405190151581526020016102c7565b61032b610a3d565b6040516102c791906132a4565b6103636103463660046132b7565b600b60209081526000928352604080842090915290825290205481565b6040519081526020016102c7565b600f54610313906f01000000000000000000000000000000900460ff1681565b6103a461039f3660046132f2565b610acb565b005b600d54610363565b6104776040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810191909152506040805160e0810182526007548152600854602082015260095464ffffffffff80821693830193909352650100000000008104831660608301526a01000000000000000000008104831660808301526f010000000000000000000000000000008104831660a083015274010000000000000000000000000000000000000000900490911660c082015290565b6040516102c79190600060e0820190508251825260208301516020830152604083015164ffffffffff80821660408501528060608601511660608501528060808601511660808501528060a08601511660a08501528060c08601511660c0850152505092915050565b610313610c2f565b6103a46104f636600461333e565b610c5b565b6103a4610f4e565b6103a461051136600461333e565b610fd9565b600f546105309065010000000000900464ffffffffff1681565b60405164ffffffffff90911681526020016102c7565b6103a461055436600461318f565b61124a565b60005474010000000000000000000000000000000000000000900460ff16610313565b61031361058a36600461321b565b611917565b6103a461059d36600461321b565b61196b565b6103136105b036600461321b565b611aca565b6103a46105c3366004613555565b611b1b565b6105ef7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020016102c7565b6103a4611bfc565b6103a461062a366004613615565b611c85565b6103a461063d36600461367c565b611dcb565b6000546105ef9073ffffffffffffffffffffffffffffffffffffffff1681565b600f546105309064ffffffffff1681565b6103a46106813660046132f2565b611f68565b61068e6120be565b6040516102c791906136be565b600f54610530907501000000000000000000000000000000000000000000900464ffffffffff1681565b6103a46106d336600461373c565b61216c565b6103a46106e6366004613792565b612322565b600f5461053090700100000000000000000000000000000000900464ffffffffff1681565b6104776040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810191909152506040805160e0810182526004548152600554602082015260065464ffffffffff80821693830193909352650100000000008104831660608301526a01000000000000000000008104831660808301526f010000000000000000000000000000008104831660a083015274010000000000000000000000000000000000000000900490911660c082015290565b610363600a5481565b600f54610530906a0100000000000000000000900464ffffffffff1681565b61081461080f36600461318f565b61272d565b6040516102c79190613839565b6103a461082f36600461321b565b61285d565b61084761084236600461388f565b61294e565b6040516102c7929190613909565b600c54610363565b6060600d805480602002602001604051908101604052809291908181526020016000905b8282101561092a5760008481526020908190206040805160c081018252600286029092018054835260019081015464ffffffffff808216858701526501000000000082048116938501939093526a01000000000000000000008104831660608501526f0100000000000000000000000000000081048316608085015274010000000000000000000000000000000000000000900490911660a08301529083529092019101610881565b50505050905090565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152600c5482118061096c575081155b156109a3576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600c6109b060018461395a565b815481106109c0576109c061396d565b60009182526020918290206040805160a0810182526002909302909101805483526001015464ffffffffff808216948401949094526501000000000081048416918301919091526a01000000000000000000008104831660608301526f010000000000000000000000000000009004909116608082015292915050565b60018054610a4a9061399c565b80601f0160208091040260200160405190810160405280929190818152602001828054610a769061399c565b8015610ac35780601f10610a9857610100808354040283529160200191610ac3565b820191906000526020600020905b815481529060010190602001808311610aa657829003601f168201915b505050505081565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b51576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a4544000000000000000000000000000000000000000060448201526064015b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff8116610b9f576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff831660008181526003602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168615159081179091558251938452908301527feeeb06b5605b72367788db09c5284b141487cdc2ab0925fcf8880d30ea58437691015b60405180910390a1505050565b600654600090610c479064ffffffffff1660016139ef565b60095464ffffffffff908116911614919050565b610c6433611917565b610c9a576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160e081018252600754808252600854602083015260095464ffffffffff80821694840194909452650100000000008104841660608401526a01000000000000000000008104841660808401526f010000000000000000000000000000008104841660a084015274010000000000000000000000000000000000000000900490921660c08201529086141580610d37575080602001518514155b80610d545750806040015164ffffffffff168464ffffffffff1614155b80610d7157508060a0015164ffffffffff168364ffffffffff1614155b80610d8e57508060c0015164ffffffffff168264ffffffffff1614155b15610dc5576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60048054600a554264ffffffffff818116606085810182905243808416608080890182905288519097556020808901516005556040808a01516006805460a0808e015160c08f0151948c167fffffffffffffffffffffffffffffffffffffffffffff000000000000000000009093169290921765010000000000909a02999099177fffffffffffffffffffffffff00000000000000000000ffffffffffffffffffff166a01000000000000000000009096027fffffffffffffffffffffffff0000000000ffffffffffffffffffffffffffffff16959095176f01000000000000000000000000000000958a1695909502949094177fffffffffffffff0000000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000091891691909102179092558151958c16865285018d905284018b905290830193909352928101919091527fcc3c3071340d91a4fd687f9ad48d1ee5689f8083136feb3594807d0f7481f7cf910160405180910390a1505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610fcf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610b48565b610fd76129d0565b565b610fe1612a4d565b610fea33611aca565b611020576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006546110359064ffffffffff1660016139ef565b64ffffffffff168364ffffffffff1614158061105e57508064ffffffffff168264ffffffffff16115b15611095576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160e0810182528681526020810186905264ffffffffff8086168284018190524280831660608501819052438085166080870181905289861660a0880181905295891660c090970187905260078d905560088c905560098054740100000000000000000000000000000000000000009098027fffffffffffffff0000000000ffffffffffffffffffffffffffffffffffffffff6f010000000000000000000000000000009098027fffffffffffffffffffffffff0000000000ffffffffffffffffffffffffffffff6a0100000000000000000000909402939093167fffffffffffffffffffffffff00000000000000000000ffffffffffffffffffff650100000000009096027fffffffffffffffffffffffffffffffffffffffffffff00000000000000000000909a1690971798909817939093169490941793909317939093169390931790915591517fb38026cc978f6c2642a5108ee558571a1b01a939b056abcc065b7eabacaf2d9d9261123b9287928a928a929164ffffffffff959095168552602085019390935260408401919091526060830152608082015260a00190565b60405180910390a15050505050565b336000908152600e602052604090205460ff16158015611282575060005473ffffffffffffffffffffffffffffffffffffffff163314155b156112b9576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806000036112f3576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600f5460009061130a9064ffffffffff1683613a43565b600f549091506000906113309064ffffffffff8082169165010000000000900416613a57565b600c5464ffffffffff919091169150600081156113f0576000600c61135660018561395a565b815481106113665761136661396d565b9060005260206000209060020201600101600a9054906101000a900464ffffffffff16600161139591906139ef565b600f5464ffffffffff91821692506a01000000000000000000009004168110156113d857600f546a0100000000000000000000900464ffffffffff1691506113ea565b4381116113e557436113e7565b805b91505b5061142e565b600f546a0100000000000000000000900464ffffffffff16611412574361142b565b600f546a0100000000000000000000900464ffffffffff165b90505b80600003611468576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600d54600090611479906001613a7b565b9050600d6040518060c001604052808881526020018364ffffffffff1681526020018560016114a89190613a7b565b64ffffffffff9081168252600f546020909201916114c7911687613a7b565b64ffffffffff9081168252438116602080840191909152428216604093840152845460018181018755600096875282872086516002909302019182559185015191018054938501516060860151608087015160a090970151851674010000000000000000000000000000000000000000027fffffffffffffff0000000000ffffffffffffffffffffffffffffffffffffffff9786166f01000000000000000000000000000000027fffffffffffffffffffffffff0000000000ffffffffffffffffffffffffffffff9287166a010000000000000000000002929092167fffffffffffffffffffffffff00000000000000000000ffffffffffffffffffff93871665010000000000027fffffffffffffffffffffffffffffffffffffffffffff00000000000000000000909816959096169490941795909517169290921792909217929092161790555b600f5464ffffffffff16811015611857576000600161162f8786613a7b565b611639919061395a565b9050600082611649876001613a7b565b6116539190613a7b565b600f54909150889061166e9060019064ffffffffff16613a8e565b64ffffffffff16840361169257611685848a613aac565b61168f908b61395a565b90505b6040805160a08101825282815264ffffffffff80851660208301908152898216838501908152878316606085019081528a841660808601908152600c8054600181018255600091909152955160029096027fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c781019690965592517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c8909501805492519151935185166f01000000000000000000000000000000027fffffffffffffffffffffffff0000000000ffffffffffffffffffffffffffffff9486166a010000000000000000000002949094167fffffffffffffffffffffffff00000000000000000000ffffffffffffffffffff92861665010000000000027fffffffffffffffffffffffffffffffffffffffffffff00000000000000000000909416969095169590951791909117169190911717905551859083907f9d1578529527d7ca977e6e95da5e7302299dfa7894fea3a1992ce68741ff5a0a9061182c9085908b9089909283526020830191909152604082015260600190565b60405180910390a361183f836001613a7b565b9550505050808061184f90613ac3565b915050611610565b50600f546f01000000000000000000000000000000900460ff16156118a2576118a27f0000000000000000000000000000000000000000000000000000000000000000333089612ad2565b33817fd3aec04e72c75d4a42792ce6fe015d1ec10b07a8a621c9df2a89bd3644cf7ca8886118d1876001613a7b565b600f546118e59064ffffffffff1689613a7b565b6040805193845260208401929092529082015243606082015242608082015260a00160405180910390a3505050505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526003602052604081205460ff1680611965575060005473ffffffffffffffffffffffffffffffffffffffff8381169116145b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146119ec576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610b48565b73ffffffffffffffffffffffffffffffffffffffff8116611a39576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff81166000818152600e6020908152604091829020805460ff8116157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090911681179091558251938452908301527f7070b1fa79059dab7359a2e5b3be557471a19c213ba384d17144bc86d149672391015b60405180910390a150565b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602052604081205460ff168061196557505060005473ffffffffffffffffffffffffffffffffffffffff91821691161490565b60005473ffffffffffffffffffffffffffffffffffffffff163314611b9c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610b48565b60005b8251811015611bf757611be4838281518110611bbd57611bbd61396d565b6020026020010151838381518110611bd757611bd761396d565b6020026020010151612bb4565b5080611bef81613ac3565b915050611b9f565b505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611c7d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610b48565b610fd7612c00565b60005473ffffffffffffffffffffffffffffffffffffffff163314611d06576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610b48565b438164ffffffffff161080611d20575064ffffffffff8116155b15611d57576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600f80547fffffffffffffffffffffffffffffffffff0000000000ffffffffffffffffffff166a010000000000000000000064ffffffffff8416908102919091179091556040519081527f9d04c34d16567c8a1806a7cbaff030caed3589501bd3e0e3f282193a9b3afe6190602001611abf565b60005b81811015611bf757611f56838383818110611deb57611deb61396d565b9050602002810190611dfd9190613afb565b611e0b90602081019061321b565b848484818110611e1d57611e1d61396d565b9050602002810190611e2f9190613afb565b60200135858585818110611e4557611e4561396d565b9050602002810190611e579190613afb565b611e68906060810190604001613b39565b868686818110611e7a57611e7a61396d565b9050602002810190611e8c9190613afb565b60600135878787818110611ea257611ea261396d565b9050602002810190611eb49190613afb565b60800135888888818110611eca57611eca61396d565b9050602002810190611edc9190613afb565b611eea9060a0810190613b54565b8a8a8a818110611efc57611efc61396d565b9050602002810190611f0e9190613afb565b611f1c9060c0810190613bbc565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061232292505050565b80611f6081613ac3565b915050611dce565b60005473ffffffffffffffffffffffffffffffffffffffff163314611fe9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610b48565b8173ffffffffffffffffffffffffffffffffffffffff8116612037576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff831660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168615159081179091558251938452908301527f780d738f356a91be5dfe8ffb87990c655a36b3430a233c71a209eb1e9a1a1a759101610c22565b6060600c805480602002602001604051908101604052809291908181526020016000905b8282101561092a5760008481526020908190206040805160a081018252600286029092018054835260019081015464ffffffffff808216858701526501000000000082048116938501939093526a01000000000000000000008104831660608501526f010000000000000000000000000000009004909116608083015290835290920191016120e2565b60005473ffffffffffffffffffffffffffffffffffffffff1633146121ed576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610b48565b64ffffffffff82161580612206575064ffffffffff8116155b1561223d576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600f80547fffffffffffffffffffffffffffffffff00ffffffffff0000000000ffffffffff166f010000000000000000000000000000008515159081027fffffffffffffffffffffffffffffffffffffffffffff0000000000ffffffffff16919091176501000000000064ffffffffff868116918202929092177fffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000016918516918217909355604080519283526020830193909352918101919091527f7ec0e33f381405196f961b48c778f62e8184d357d894aa02af2444db07a09fd890606001610c22565b61232a612a4d565b3373ffffffffffffffffffffffffffffffffffffffff891614612379576040517fbd79de5800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60065464ffffffffff16848114806123a557506000811180156123a557506123a260018261395a565b85145b6123db576040517f9b8febfe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600087878b888c876040516020016123f896959493929190613c21565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120908301520160405160208183030381529060405280519060200120905061249b8585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505050888514905061249157600a54612495565b6004545b83612c6f565b6124d1576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8a166000908152600b602090815260408083208a845290915281205461250c908b61395a565b905080600003612548576040517f969bf72800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600f54700100000000000000000000000000000000900464ffffffffff161561263c57600f5460009061259b907501000000000000000000000000000000000000000000900464ffffffffff164261395a565b600f54909150700100000000000000000000000000000000900464ffffffffff1681101561263a57600f54600090700100000000000000000000000000000000900464ffffffffff166125ee838e613aac565b6125f89190613a43565b73ffffffffffffffffffffffffffffffffffffffff8e166000908152600b602090815260408083208e8452909152902054909150612636908261395a565b9250505b505b73ffffffffffffffffffffffffffffffffffffffff8b166000908152600b602090815260408083208b84529091528120805483929061267c908490613a7b565b909155506126ad90507f00000000000000000000000000000000000000000000000000000000000000008c83612c85565b6040805173ffffffffffffffffffffffffffffffffffffffff8d1681526020810183905290810188905260ff8a166060820152608081018990524260a08201524360c08201527f309cb1c0dc6ce0f02c0c35cc1f46bbe61ec9deb311d101b87e7d25bd0b647fd79060e00160405180910390a15050505050505050505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810191909152600d5482118061276d575081155b156127a4576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600d6127b160018461395a565b815481106127c1576127c161396d565b60009182526020918290206040805160c0810182526002909302909101805483526001015464ffffffffff808216948401949094526501000000000081048416918301919091526a01000000000000000000008104831660608301526f0100000000000000000000000000000081048316608083015274010000000000000000000000000000000000000000900490911660a082015292915050565b60005473ffffffffffffffffffffffffffffffffffffffff1633146128de576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610b48565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081178255604051909133917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b60606000858589868a8760405160200161296d96959493929190613c21565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152828252805160208083019190912090840152935001604051602081830303815290604052805190602001209050965096945050505050565b6129d8612cdb565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b60005474010000000000000000000000000000000000000000900460ff1615610fd7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610b48565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052612bae9085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612d5f565b50505050565b6060600080835160208501865af43d6040519250601f19601f6020830101168301604052808352806000602085013e811560018103612bf757816000803e816000fd5b50505092915050565b612c08612a4d565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612a233390565b600082612c7c8584612e6b565b14949350505050565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052611bf79084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401612b2c565b60005474010000000000000000000000000000000000000000900460ff16610fd7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610b48565b6000612dc1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612eb89092919063ffffffff16565b805190915015611bf75780806020019051810190612ddf9190613c77565b611bf7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610b48565b600081815b8451811015612eb057612e9c82868381518110612e8f57612e8f61396d565b6020026020010151612ecf565b915080612ea881613ac3565b915050612e70565b509392505050565b6060612ec78484600085612f01565b949350505050565b6000818310612eeb576000828152602084905260409020612efa565b60008381526020839052604090205b9392505050565b606082471015612f93576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610b48565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612fbc9190613c94565b60006040518083038185875af1925050503d8060008114612ff9576040519150601f19603f3d011682016040523d82523d6000602084013e612ffe565b606091505b509150915061300f8783838761301a565b979650505050505050565b606083156130b05782516000036130a95773ffffffffffffffffffffffffffffffffffffffff85163b6130a9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610b48565b5081612ec7565b612ec783838151156130c55781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610b4891906132a4565b6020808252825182820181905260009190848201906040850190845b818110156131835761317083855180518252602081015164ffffffffff80821660208501528060408401511660408501528060608401511660608501528060808401511660808501528060a08401511660a085015250505050565b9284019260c09290920191600101613115565b50909695505050505050565b6000602082840312156131a157600080fd5b5035919050565b60a08101611965828480518252602081015164ffffffffff808216602085015280604084015116604085015280606084015116606085015280608084015116608085015250505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461321657600080fd5b919050565b60006020828403121561322d57600080fd5b612efa826131f2565b60005b83811015613251578181015183820152602001613239565b50506000910152565b60008151808452613272816020860160208601613236565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000612efa602083018461325a565b600080604083850312156132ca57600080fd5b6132d3836131f2565b946020939093013593505050565b80151581146132ef57600080fd5b50565b6000806040838503121561330557600080fd5b61330e836131f2565b9150602083013561331e816132e1565b809150509250929050565b803564ffffffffff8116811461321657600080fd5b600080600080600060a0868803121561335657600080fd5b853594506020860135935061336d60408701613329565b925061337b60608701613329565b915061338960808701613329565b90509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561340b5761340b613395565b604052919050565b600067ffffffffffffffff82111561342d5761342d613395565b5060051b60200190565b600082601f83011261344857600080fd5b813567ffffffffffffffff81111561346257613462613395565b61349360207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016133c4565b8181528460208386010111156134a857600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f8301126134d657600080fd5b813560206134eb6134e683613413565b6133c4565b82815260059290921b8401810191818101908684111561350a57600080fd5b8286015b8481101561354a57803567ffffffffffffffff81111561352e5760008081fd5b61353c8986838b0101613437565b84525091830191830161350e565b509695505050505050565b6000806040838503121561356857600080fd5b823567ffffffffffffffff8082111561358057600080fd5b818501915085601f83011261359457600080fd5b813560206135a46134e683613413565b82815260059290921b840181019181810190898411156135c357600080fd5b948201945b838610156135e8576135d9866131f2565b825294820194908201906135c8565b965050860135925050808211156135fe57600080fd5b5061360b858286016134c5565b9150509250929050565b60006020828403121561362757600080fd5b612efa82613329565b60008083601f84011261364257600080fd5b50813567ffffffffffffffff81111561365a57600080fd5b6020830191508360208260051b850101111561367557600080fd5b9250929050565b6000806020838503121561368f57600080fd5b823567ffffffffffffffff8111156136a657600080fd5b6136b285828601613630565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b818110156131835761372983855180518252602081015164ffffffffff808216602085015280604084015116604085015280606084015116606085015280608084015116608085015250505050565b9284019260a092909201916001016136da565b60008060006060848603121561375157600080fd5b833561375c816132e1565b925061376a60208501613329565b915061377860408501613329565b90509250925092565b803560ff8116811461321657600080fd5b60008060008060008060008060e0898b0312156137ae57600080fd5b6137b7896131f2565b9750602089013596506137cc60408a01613781565b9550606089013594506080890135935060a089013567ffffffffffffffff808211156137f757600080fd5b6138038c838d01613630565b909550935060c08b013591508082111561381c57600080fd5b506138298b828c01613437565b9150509295985092959890939650565b60c08101611965828480518252602081015164ffffffffff80821660208501528060408401511660408501528060608401511660608501528060808401511660808501528060a08401511660a085015250505050565b60008060008060008060c087890312156138a857600080fd5b6138b1876131f2565b9550602087013594506138c660408801613781565b9350606087013592506080870135915060a087013567ffffffffffffffff8111156138f057600080fd5b6138fc89828a01613437565b9150509295509295509295565b60408152600061391c604083018561325a565b90508260208301529392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818103818111156119655761196561392b565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600181811c908216806139b057607f821691505b6020821081036139e9577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b64ffffffffff818116838216019080821115613a0d57613a0d61392b565b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082613a5257613a52613a14565b500490565b600064ffffffffff80841680613a6f57613a6f613a14565b92169190910492915050565b808201808211156119655761196561392b565b64ffffffffff828116828216039080821115613a0d57613a0d61392b565b80820281158282048414176119655761196561392b565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613af457613af461392b565b5060010190565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff21833603018112613b2f57600080fd5b9190910192915050565b600060208284031215613b4b57600080fd5b612efa82613781565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112613b8957600080fd5b83018035915067ffffffffffffffff821115613ba457600080fd5b6020019150600581901b360382131561367557600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112613bf157600080fd5b83018035915067ffffffffffffffff821115613c0c57600080fd5b60200191503681900382131561367557600080fd5b60ff8716815285602082015273ffffffffffffffffffffffffffffffffffffffff8516604082015283606082015282608082015260c060a08201526000613c6b60c083018461325a565b98975050505050505050565b600060208284031215613c8957600080fd5b8151612efa816132e1565b60008251613b2f81846020870161323656fea26469706673582212203a69baef2200202bf5a13b83e738b96aa691edd79234723ee35c1ce64123e5bd64736f6c63430008150033",
  "devdoc": {
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "claim(address,uint256,uint8,bytes32,uint256,bytes32[],bytes)": {
        "params": {
          "cumulativeAmount_": "- cumulative amount of rewards to claim",
          "cycle_": "- cycle of the rewards",
          "merkleProof_": "- merkle proof of the rewards",
          "positionId_": "- id of the position, fToken address for lending and vaultId for vaults",
          "positionType_": "- type of position, 1 for lending, 2 for vaults, 3 for smart lending, etc",
          "recipient_": "- address of the recipient"
        }
      },
      "distributeRewards(uint256)": {
        "params": {
          "amount_": "- amount of tokens to distribute rewards for"
        }
      },
      "getCycleReward(uint256)": {
        "params": {
          "cycle_": "- cycle of the reward"
        },
        "returns": {
          "_0": "reward_ - reward"
        }
      },
      "getCycleRewards()": {
        "returns": {
          "_0": "rewards_ - rewards"
        }
      },
      "getDistributionForEpoch(uint256)": {
        "params": {
          "epoch_": "- epoch of the distribution"
        },
        "returns": {
          "_0": "distribution_ - distribution"
        }
      },
      "getDistributions()": {
        "returns": {
          "_0": "distributions_ - all distributions"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "setStartBlockOfNextCycle(uint40)": {
        "params": {
          "startBlockOfNextCycle_": "The start block of the next cycle"
        }
      },
      "spell(address[],bytes[])": {
        "details": "open payload method for admin to resolve emergency cases"
      },
      "toggleRewardsDistributor(address)": {
        "params": {
          "distributor_": "- address of the rewards distributor"
        }
      },
      "totalCycleRewards()": {
        "returns": {
          "_0": "totalCycles_ - total number of cycles"
        }
      },
      "totalDistributions()": {
        "returns": {
          "_0": "totalDistributions_ - total number of distributions"
        }
      },
      "updateApprover(address,bool)": {
        "params": {
          "approver_": "The address to update",
          "isApprover_": "Whether or not the address should be an allowed approver"
        }
      },
      "updateDistributionConfig(bool,uint40,uint40)": {
        "params": {
          "blocksPerDistribution_": "- duration of distribution in blocks",
          "cyclesPerDistribution_": "- number of cycles to distribute rewards, if 0 then means paused",
          "pullFromDistributor_": "- whether to pull rewards from distributor or not"
        }
      },
      "updateProposer(address,bool)": {
        "params": {
          "isProposer_": "Whether or not the address should be an allowed proposer",
          "proposer_": "The address to update"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "LogClaimed(address,uint256,uint256,uint8,bytes32,uint256,uint256)": {
        "notice": "Emitted when a `user` claims `amount` via a valid merkle proof"
      },
      "LogDistribution(uint256,address,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Emitted when a new distribution is created"
      },
      "LogDistributionConfigUpdated(bool,uint256,uint256)": {
        "notice": "Emitted when the distribution configuration is updated"
      },
      "LogRewardCycle(uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Emitted when a new reward cycle is created"
      },
      "LogRewardsDistributorToggled(address,bool)": {
        "notice": "Emitted when a rewards distributor is toggled"
      },
      "LogRootProposed(uint256,bytes32,bytes32,uint256,uint256)": {
        "notice": "Emitted when a new cycle root hash is proposed"
      },
      "LogRootUpdated(uint256,bytes32,bytes32,uint256,uint256)": {
        "notice": "Emitted when a new cycle root hash is approved by the owner and becomes the new active root"
      },
      "LogStartBlockOfNextCycleUpdated(uint256)": {
        "notice": "Emitted when the start block of the next cycle is updated"
      },
      "LogUpdateApprover(address,bool)": {
        "notice": "Emitted when an address is added or removed from the allowed approvers"
      },
      "LogUpdateProposer(address,bool)": {
        "notice": "Emitted when an address is added or removed from the allowed proposers"
      }
    },
    "kind": "user",
    "methods": {
      "approveRoot(bytes32,bytes32,uint40,uint40,uint40)": {
        "notice": "Approve the current pending root and content hash"
      },
      "blocksPerDistribution()": {
        "notice": "Duration of each distribution in blocks"
      },
      "claim(address,uint256,uint8,bytes32,uint256,bytes32[],bytes)": {
        "notice": "Claims rewards for a given recipient"
      },
      "claimed(address,bytes32)": {
        "notice": "total claimed amount per user address and fToken. user => positionId => claimed amount"
      },
      "currentMerkleCycle()": {
        "notice": "merkle root data related to current cycle (proposed and approved)."
      },
      "cyclesPerDistribution()": {
        "notice": "Number of cycles to distribute rewards"
      },
      "distributeRewards(uint256)": {
        "notice": "Distributes rewards for a given token"
      },
      "getCycleReward(uint256)": {
        "notice": "Returns the cycle reward for a given cycle"
      },
      "getCycleRewards()": {
        "notice": "Returns the cycle rewards"
      },
      "getDistributionForEpoch(uint256)": {
        "notice": "Returns the distribution for a given epoch"
      },
      "getDistributions()": {
        "notice": "Returns all distributions"
      },
      "hasPendingRoot()": {
        "notice": "checks if there is a proposed root waiting to be approved"
      },
      "isApprover(address)": {
        "notice": "checks if the `approver_` is an allowed root approver"
      },
      "isProposer(address)": {
        "notice": "checks if the `proposer_` is an allowed root proposer"
      },
      "pause()": {
        "notice": "Pause contract functionality of new roots and claiming"
      },
      "pendingMerkleCycle()": {
        "notice": "merkle root data related to pending cycle (proposed but not yet approved)."
      },
      "previousMerkleRoot()": {
        "notice": "merkle root of the previous cycle"
      },
      "proposeRoot(bytes32,bytes32,uint40,uint40,uint40)": {
        "notice": "Propose a new root and content hash, which will be stored as pending until approved"
      },
      "pullFromDistributor()": {
        "notice": "Whether to pull tokens from distributor or not"
      },
      "rewardsDistributor(address)": {
        "notice": "allow list for rewards distributors"
      },
      "setStartBlockOfNextCycle(uint40)": {
        "notice": "Sets the start block of the next cycle"
      },
      "startBlockOfNextCycle()": {
        "notice": "Start block of the next cycle"
      },
      "toggleRewardsDistributor(address)": {
        "notice": "Toggles a rewards distributor"
      },
      "totalCycleRewards()": {
        "notice": "Returns the total number of cycles"
      },
      "totalDistributions()": {
        "notice": "Returns the total number of distributions"
      },
      "unpause()": {
        "notice": "Unpause contract functionality of new roots and claiming"
      },
      "updateApprover(address,bool)": {
        "notice": "Updates an address status as a root approver"
      },
      "updateDistributionConfig(bool,uint40,uint40)": {
        "notice": "Updates the distribution configuration"
      },
      "updateProposer(address,bool)": {
        "notice": "Updates an address status as a root proposer"
      },
      "vestingStartTime()": {
        "notice": "Vesting start time"
      },
      "vestingTime()": {
        "notice": "Vesting time for rewards"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 70250,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 185,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 53012,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 53017,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "_proposers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 53022,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "_approvers",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 53026,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "_currentMerkleCycle",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(MerkleCycle)52950_storage"
      },
      {
        "astId": 53030,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "_pendingMerkleCycle",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(MerkleCycle)52950_storage"
      },
      {
        "astId": 53033,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "previousMerkleRoot",
        "offset": 0,
        "slot": "10",
        "type": "t_bytes32"
      },
      {
        "astId": 53040,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "claimed",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))"
      },
      {
        "astId": 53045,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "rewards",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_struct(Reward)52961_storage)dyn_storage"
      },
      {
        "astId": 53050,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "distributions",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_struct(Distribution)52974_storage)dyn_storage"
      },
      {
        "astId": 53055,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "rewardsDistributor",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 53058,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "cyclesPerDistribution",
        "offset": 0,
        "slot": "15",
        "type": "t_uint40"
      },
      {
        "astId": 53061,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "blocksPerDistribution",
        "offset": 5,
        "slot": "15",
        "type": "t_uint40"
      },
      {
        "astId": 53064,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "startBlockOfNextCycle",
        "offset": 10,
        "slot": "15",
        "type": "t_uint40"
      },
      {
        "astId": 53067,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "pullFromDistributor",
        "offset": 15,
        "slot": "15",
        "type": "t_bool"
      },
      {
        "astId": 53070,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "vestingTime",
        "offset": 16,
        "slot": "15",
        "type": "t_uint40"
      },
      {
        "astId": 53073,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "vestingStartTime",
        "offset": 21,
        "slot": "15",
        "type": "t_uint40"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Distribution)52974_storage)dyn_storage": {
        "base": "t_struct(Distribution)52974_storage",
        "encoding": "dynamic_array",
        "label": "struct Structs.Distribution[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Reward)52961_storage)dyn_storage": {
        "base": "t_struct(Reward)52961_storage",
        "encoding": "dynamic_array",
        "label": "struct Structs.Reward[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_uint256)"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Distribution)52974_storage": {
        "encoding": "inplace",
        "label": "struct Structs.Distribution",
        "members": [
          {
            "astId": 52963,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 52965,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "epoch",
            "offset": 0,
            "slot": "1",
            "type": "t_uint40"
          },
          {
            "astId": 52967,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "startCycle",
            "offset": 5,
            "slot": "1",
            "type": "t_uint40"
          },
          {
            "astId": 52969,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "endCycle",
            "offset": 10,
            "slot": "1",
            "type": "t_uint40"
          },
          {
            "astId": 52971,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "registrationBlock",
            "offset": 15,
            "slot": "1",
            "type": "t_uint40"
          },
          {
            "astId": 52973,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "registrationTimestamp",
            "offset": 20,
            "slot": "1",
            "type": "t_uint40"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(MerkleCycle)52950_storage": {
        "encoding": "inplace",
        "label": "struct Structs.MerkleCycle",
        "members": [
          {
            "astId": 52937,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "merkleRoot",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 52939,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "merkleContentHash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 52941,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "cycle",
            "offset": 0,
            "slot": "2",
            "type": "t_uint40"
          },
          {
            "astId": 52943,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "timestamp",
            "offset": 5,
            "slot": "2",
            "type": "t_uint40"
          },
          {
            "astId": 52945,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "publishBlock",
            "offset": 10,
            "slot": "2",
            "type": "t_uint40"
          },
          {
            "astId": 52947,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "startBlock",
            "offset": 15,
            "slot": "2",
            "type": "t_uint40"
          },
          {
            "astId": 52949,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "endBlock",
            "offset": 20,
            "slot": "2",
            "type": "t_uint40"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Reward)52961_storage": {
        "encoding": "inplace",
        "label": "struct Structs.Reward",
        "members": [
          {
            "astId": 52952,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 52954,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "cycle",
            "offset": 0,
            "slot": "1",
            "type": "t_uint40"
          },
          {
            "astId": 52956,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "startBlock",
            "offset": 5,
            "slot": "1",
            "type": "t_uint40"
          },
          {
            "astId": 52958,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "endBlock",
            "offset": 10,
            "slot": "1",
            "type": "t_uint40"
          },
          {
            "astId": 52960,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "epoch",
            "offset": 15,
            "slot": "1",
            "type": "t_uint40"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      }
    }
  }
}