{
  "address": "0xBf70e5982Ca299d0f34fDB0192eb6b2693D784F2",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "fla_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "weth_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorId_",
          "type": "uint256"
        }
      ],
      "name": "FluidSafeApproveError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorId_",
          "type": "uint256"
        }
      ],
      "name": "FluidSafeTransferError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FluidVaultLiquidator__InvalidOperation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FluidVaultLiquidator__InvalidTimestamp",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FluidVaultLiquidator__InvalidTopTick",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        }
      ],
      "name": "Liquidated",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ETH_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FLA",
      "outputs": [
        {
          "internalType": "contract InstaFlashInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "contract IWETH9",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "premiums",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "executeOperation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "vault",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "vaultType",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "expiration",
              "type": "uint256"
            },
            {
              "internalType": "int256",
              "name": "topTick",
              "type": "int256"
            },
            {
              "internalType": "uint256",
              "name": "route",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "flashloanToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "flashloanAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token0DebtAmt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token1DebtAmt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "debtSharesMin",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "colPerUnitDebt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token0ColAmtPerUnitShares",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token1ColAmtPerUnitShares",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "absorb",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "swapToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "swapAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "swapRouter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "swapApproval",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "swapData",
              "type": "bytes"
            }
          ],
          "internalType": "struct VaultLiquidatorImplementationV1.LiquidationParams",
          "name": "params_",
          "type": "tuple"
        }
      ],
      "name": "liquidation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x309b190fdab7ae425ed179c4b28249a059e71928904d7e32a2a6a234084e563f",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x910E413DBF3F6276Fe8213fF656726bDc142E08E",
    "contractAddress": null,
    "transactionIndex": 59,
    "gasUsed": "1518504",
    "logsBloom": "0x
    "blockHash": "0x1c402ea34362aaef6d12da58ea081a10e5259bbf7ac20cadd506b67019267383",
    "transactionHash": "0x309b190fdab7ae425ed179c4b28249a059e71928904d7e32a2a6a234084e563f",
    "logs": [],
    "blockNumber": 21066282,
    "cumulativeGasUsed": "11707283",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x352423e2fA5D5c99343d371C9e3bC56C87723Cc7",
    "0x352423e2fA5D5c99343d371C9e3bC56C87723Cc7"
  ],
  "numDeployments": 1,
  "solcInputHash": "24ffd74afb47da7fb90af0d31f3c97a1",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"fla_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorId_\",\"type\":\"uint256\"}],\"name\":\"FluidSafeApproveError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorId_\",\"type\":\"uint256\"}],\"name\":\"FluidSafeTransferError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FluidVaultLiquidator__InvalidOperation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FluidVaultLiquidator__InvalidTimestamp\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FluidVaultLiquidator__InvalidTopTick\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"name\":\"Liquidated\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FLA\",\"outputs\":[{\"internalType\":\"contract InstaFlashInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH9\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"premiums\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"vaultType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expiration\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"topTick\",\"type\":\"int256\"},{\"internalType\":\"uint256\",\"name\":\"route\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"flashloanToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"flashloanAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0DebtAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1DebtAmt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"debtSharesMin\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colPerUnitDebt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0ColAmtPerUnitShares\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1ColAmtPerUnitShares\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"absorb\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"swapToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"swapAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapApproval\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"}],\"internalType\":\"struct VaultLiquidatorImplementationV1.LiquidationParams\",\"name\":\"params_\",\"type\":\"tuple\"}],\"name\":\"liquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/liquidation/implementations/implementationsV1.sol\":\"VaultLiquidatorImplementationV1\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/libraries/errorTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nlibrary LibsErrorTypes {\\n    /***********************************|\\n    |         LiquidityCalcs            | \\n    |__________________________________*/\\n\\n    /// @notice thrown when supply or borrow exchange price is zero at calc token data (token not configured yet)\\n    uint256 internal constant LiquidityCalcs__ExchangePriceZero = 70001;\\n\\n    /// @notice thrown when rate data is set to a version that is not implemented\\n    uint256 internal constant LiquidityCalcs__UnsupportedRateVersion = 70002;\\n\\n    /// @notice thrown when the calculated borrow rate turns negative. This should never happen.\\n    uint256 internal constant LiquidityCalcs__BorrowRateNegative = 70003;\\n\\n    /***********************************|\\n    |           SafeTransfer            | \\n    |__________________________________*/\\n\\n    /// @notice thrown when safe transfer from for an ERC20 fails\\n    uint256 internal constant SafeTransfer__TransferFromFailed = 71001;\\n\\n    /// @notice thrown when safe transfer for an ERC20 fails\\n    uint256 internal constant SafeTransfer__TransferFailed = 71002;\\n\\n    /***********************************|\\n    |           SafeApprove             | \\n    |__________________________________*/\\n\\n    /// @notice thrown when safe approve from for an ERC20 fails\\n    uint256 internal constant SafeApprove__ApproveFailed = 81001;\\n}\\n\",\"keccak256\":\"0x4057f500fd44ce9e89049512d06d5f72c46f91938ed37312fb044c204451009b\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/safeApprove.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.21;\\n\\nimport { LibsErrorTypes as ErrorTypes } from \\\"./errorTypes.sol\\\";\\n\\n/// @notice provides minimalistic methods for safe approve, e.g. ERC20 safeApprove\\nlibrary SafeApprove {\\n    error FluidSafeApproveError(uint256 errorId_);\\n\\n    /// @dev Approve `amount_` of `token_` to `to_`.\\n    /// If `token_` returns no value, non-reverting calls are assumed to be successful.\\n    /// Minimally modified from Solmate SafeTransferLib (address as input param for token, Custom Error):\\n    /// https://github.com/transmissions11/solmate/blob/50e15bb566f98b7174da9b0066126a4c3e75e0fd/src/utils/SafeTransferLib.sol#L97-L127\\n    function safeApprove(\\n        address token_,\\n        address to_,\\n        uint256 amount_\\n    ) internal {\\n        bool success_;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(to_, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount_) // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n            // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n            success_ := call(gas(), token_, 0, freeMemoryPointer, 68, 0, 32)\\n\\n            // Set success to whether the call reverted, if not we check it either\\n            // returned exactly 1 (can't just be non-zero data), or had no return data and token has code.\\n            if and(iszero(and(eq(mload(0), 1), gt(returndatasize(), 31))), success_) {\\n                success_ := iszero(or(iszero(extcodesize(token_)), returndatasize())) \\n            }\\n        }\\n\\n        if (!success_) {\\n            revert FluidSafeApproveError(ErrorTypes.SafeApprove__ApproveFailed);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6112bcad9048696a483ec916d94ffe941861632839c3a7a8d18e743420bf3d7f\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/libraries/safeTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.21;\\n\\nimport { LibsErrorTypes as ErrorTypes } from \\\"./errorTypes.sol\\\";\\n\\n/// @notice provides minimalistic methods for safe transfers, e.g. ERC20 safeTransferFrom\\nlibrary SafeTransfer {\\n    uint256 internal constant MAX_NATIVE_TRANSFER_GAS = 20000; // pass max. 20k gas for native transfers\\n\\n    error FluidSafeTransferError(uint256 errorId_);\\n\\n    /// @dev Transfer `amount_` of `token_` from `from_` to `to_`, spending the approval given by `from_` to the\\n    /// calling contract. If `token_` returns no value, non-reverting calls are assumed to be successful.\\n    /// Minimally modified from Solmate SafeTransferLib (address as input param for token, Custom Error):\\n    /// https://github.com/transmissions11/solmate/blob/50e15bb566f98b7174da9b0066126a4c3e75e0fd/src/utils/SafeTransferLib.sol#L31-L63\\n    function safeTransferFrom(address token_, address from_, address to_, uint256 amount_) internal {\\n        bool success_;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(from_, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"from_\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), and(to_, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to_\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount_) // Append the \\\"amount_\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            success_ := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token_, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        if (!success_) {\\n            revert FluidSafeTransferError(ErrorTypes.SafeTransfer__TransferFromFailed);\\n        }\\n    }\\n\\n    /// @dev Transfer `amount_` of `token_` to `to_`.\\n    /// If `token_` returns no value, non-reverting calls are assumed to be successful.\\n    /// Minimally modified from Solmate SafeTransferLib (address as input param for token, Custom Error):\\n    /// https://github.com/transmissions11/solmate/blob/50e15bb566f98b7174da9b0066126a4c3e75e0fd/src/utils/SafeTransferLib.sol#L65-L95\\n    function safeTransfer(address token_, address to_, uint256 amount_) internal {\\n        bool success_;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(to_, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to_\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount_) // Append the \\\"amount_\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            success_ := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token_, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        if (!success_) {\\n            revert FluidSafeTransferError(ErrorTypes.SafeTransfer__TransferFailed);\\n        }\\n    }\\n\\n    /// @dev Transfer `amount_` of ` native token to `to_`.\\n    /// Minimally modified from Solmate SafeTransferLib (Custom Error):\\n    /// https://github.com/transmissions11/solmate/blob/50e15bb566f98b7174da9b0066126a4c3e75e0fd/src/utils/SafeTransferLib.sol#L15-L25\\n    function safeTransferNative(address to_, uint256 amount_) internal {\\n        bool success_;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not. Pass limited gas\\n            success_ := call(MAX_NATIVE_TRANSFER_GAS, to_, amount_, 0, 0, 0, 0)\\n        }\\n\\n        if (!success_) {\\n            revert FluidSafeTransferError(ErrorTypes.SafeTransfer__TransferFailed);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7f7d3a39d984c62e41c669a3d11deb899b3512ace9313263592575bf48a6e079\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/periphery/liquidation/implementations/implementationsV1.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { IFluidVaultT1 } from \\\"../../../protocols/vault/interfaces/iVaultT1.sol\\\";\\nimport { IFluidVaultT2 } from \\\"../../../protocols/vault/interfaces/iVaultT2.sol\\\";\\nimport { IFluidVaultT3 } from \\\"../../../protocols/vault/interfaces/iVaultT3.sol\\\";\\nimport { IFluidVaultT4 } from \\\"../../../protocols/vault/interfaces/iVaultT4.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport { IWETH9 } from \\\"../../../protocols/lending/interfaces/external/iWETH9.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { SafeTransfer } from \\\"../../../libraries/safeTransfer.sol\\\";\\nimport { SafeApprove } from \\\"../../../libraries/safeApprove.sol\\\";\\n\\ninterface InstaFlashInterface {\\n    function flashLoan(address[] memory tokens, uint256[] memory amts, uint route, bytes memory data, bytes memory extraData) external;\\n}\\n\\ninterface InstaFlashReceiverInterface {\\n    function executeOperation(\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata premiums,\\n        address initiator,\\n        bytes calldata _data\\n    ) external returns (bool);\\n}\\n\\ncontract VaultLiquidatorImplementationV1 {\\n    uint256 internal constant X19 = 0x7ffff;\\n    uint256 internal constant X20 = 0xfffff;\\n    address constant public ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    InstaFlashInterface immutable public FLA;\\n    IWETH9 immutable public WETH;\\n    address internal immutable ADDRESS_THIS = address(this);\\n\\n\\n    error FluidVaultLiquidator__InvalidOperation();\\n    error FluidVaultLiquidator__InvalidTimestamp();\\n    error FluidVaultLiquidator__InvalidTopTick();\\n\\n    event Liquidated(\\n        address indexed vault,\\n        uint256 collateral,\\n        uint256 debt\\n    );\\n\\n    struct LiquidationParams {\\n        address vault; // address of the vault to liquidate\\n        uint256 vaultType; // 1 for T1, 2 for T2, 3 for T3, 4 for T4\\n        uint256 expiration; // 0 if no expiration\\n        int256 topTick; // type(int256).min if no topTick\\n\\n        uint256 route; // Flashloan Route\\n        address flashloanToken; // Debt Token\\n        uint256 flashloanAmount; // Amount of debt token to payback\\n\\n        uint256 token0DebtAmt;\\n        uint256 token1DebtAmt;\\n        uint256 debtSharesMin;\\n        uint256 colPerUnitDebt; // col per unit is w.r.t debt shares and not token0/1 debt amount\\n        uint256 token0ColAmtPerUnitShares; // in 1e18\\n        uint256 token1ColAmtPerUnitShares; // in 1e18\\n        bool absorb;\\n\\n        address swapToken; // Collateral Token\\n        uint256 swapAmount; // Collateral amount to swap\\n        address swapRouter; // Dex Aggregator Router Contract\\n        address swapApproval; // Dex Aggregator Approval Contract\\n        bytes swapData; // Data to swap collateral token\\n    }\\n\\n    constructor (\\n        address fla_,\\n        address weth_\\n    ) {\\n        FLA = InstaFlashInterface(fla_);\\n        WETH = IWETH9(weth_);\\n    }\\n\\n    modifier _onlyDelegateCall() {\\n        if (address(this) == ADDRESS_THIS) {\\n            revert FluidVaultLiquidator__InvalidOperation();\\n        }\\n        _;\\n    }\\n\\n    function _tickHelper(uint tickRaw_) internal pure returns (int tick) {\\n        require(tickRaw_ < X20, \\\"invalid-number\\\");\\n        if (tickRaw_ > 0) {\\n            tick = tickRaw_ & 1 == 1 ? int((tickRaw_ >> 1) & X19) : -int((tickRaw_ >> 1) & X19);\\n        } else {\\n            tick = type(int).min;\\n        }\\n    }\\n\\n    function _validateParams(LiquidationParams memory params_) internal view {\\n        if (params_.expiration > 0 && params_.expiration < block.timestamp) revert FluidVaultLiquidator__InvalidTimestamp();\\n\\n        uint256 vaultVariables_ = IFluidVaultT1(params_.vault).readFromStorage(0);\\n\\n        int256 topTick_ = _tickHelper(((vaultVariables_ >> 2) & X20));\\n\\n        if (params_.topTick > topTick_ && params_.topTick != type(int256).min) revert FluidVaultLiquidator__InvalidTopTick();\\n    }\\n\\n    function liquidation(LiquidationParams memory params_) public _onlyDelegateCall {\\n        _validateParams(params_);\\n\\n        address[] memory tokens = new address[](1);\\n        uint256[] memory amts = new uint256[](1);\\n\\n        // Take flashloan in borrow token of the vault\\n        tokens[0] = params_.flashloanToken == ETH_ADDRESS ? address(WETH) : params_.flashloanToken;\\n        amts[0] = params_.flashloanAmount;\\n\\n        bytes memory data_ = abi.encode(params_);\\n\\n        FLA.flashLoan(tokens, amts, params_.route, data_, abi.encode());\\n\\n    }\\n\\n    function executeOperation(\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata premiums,\\n        address initiator,\\n        bytes calldata _data\\n    ) external returns (bool) {\\n        if (msg.sender != address(FLA)) revert FluidVaultLiquidator__InvalidOperation();\\n        if (initiator != address(this)) revert FluidVaultLiquidator__InvalidOperation();\\n        LiquidationParams memory params_ = abi.decode(_data, (LiquidationParams));\\n\\n        {\\n            uint256 value_;\\n            if (params_.flashloanToken != ETH_ADDRESS) {\\n                SafeApprove.safeApprove(params_.flashloanToken, params_.vault, 0);\\n                SafeApprove.safeApprove(params_.flashloanToken, params_.vault, params_.flashloanAmount);\\n                value_ = 0;\\n            } else {\\n                WETH.withdraw(params_.flashloanAmount);\\n                value_ = params_.flashloanAmount;\\n            }\\n\\n            uint256 debtAmount_;\\n            uint256 collateralAmount_;\\n            if (params_.vaultType == 1) {\\n                (debtAmount_, collateralAmount_) = IFluidVaultT1(params_.vault).liquidate{value: value_}(params_.token0DebtAmt, params_.colPerUnitDebt, address(this), params_.absorb);\\n            } else if (params_.vaultType == 2) {\\n                (debtAmount_, collateralAmount_, , ) = IFluidVaultT2(params_.vault).liquidate{value: value_}(params_.token0DebtAmt, params_.colPerUnitDebt, params_.token0ColAmtPerUnitShares, params_.token1ColAmtPerUnitShares, address(this), params_.absorb);\\n            } else if (params_.vaultType == 3) {\\n                (debtAmount_, collateralAmount_) = IFluidVaultT3(params_.vault).liquidate{value: value_}(params_.token0DebtAmt, params_.token1DebtAmt, params_.debtSharesMin, params_.colPerUnitDebt, address(this), params_.absorb);\\n            } else if (params_.vaultType == 4) {\\n                (debtAmount_, collateralAmount_, , ) = IFluidVaultT4(params_.vault).liquidate{value: value_}(params_.token0DebtAmt, params_.token1DebtAmt, params_.debtSharesMin, params_.colPerUnitDebt, params_.token0ColAmtPerUnitShares, params_.token1ColAmtPerUnitShares, address(this), params_.absorb);\\n            }\\n\\n            if (params_.swapToken != ETH_ADDRESS) {\\n                SafeApprove.safeApprove(params_.swapToken, params_.swapApproval, 0);\\n                SafeApprove.safeApprove(params_.swapToken, params_.swapApproval, params_.swapAmount);\\n                value_ = 0;\\n            } else {\\n                value_ = params_.swapAmount;\\n            }\\n\\n            Address.functionCallWithValue(params_.swapRouter, params_.swapData, value_, \\\"Swap: failed\\\");\\n            emit Liquidated(params_.vault, collateralAmount_, debtAmount_);\\n        }\\n\\n        uint256 flashloanAmount_ = amounts[0] + premiums[0] + 10;\\n\\n        if (params_.flashloanToken == ETH_ADDRESS) {\\n            uint256 wethBalance_ = WETH.balanceOf(address(this));\\n            if (wethBalance_ < flashloanAmount_) {\\n                WETH.deposit{value: flashloanAmount_ - wethBalance_}();\\n            }\\n        }\\n\\n        SafeTransfer.safeTransfer(assets[0], msg.sender, flashloanAmount_);\\n\\n        return true;\\n    }\\n\\n    receive() payable external {}\\n}\",\"keccak256\":\"0x94f98d5c074c3cdb5a1caaebcd371d7cf048b93fd42bfa2b12c6e1420d8a2e95\",\"license\":\"BUSL-1.1\"},\"contracts/protocols/lending/interfaces/external/iWETH9.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH9 is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0x3e7e28357eb8914d51f7672a10d9ebe363e1aa36ccee6d928c17ac1ad7e4f7db\",\"license\":\"MIT\"},\"contracts/protocols/vault/interfaces/iVault.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\n/// @notice common Fluid vaults interface, some methods only available for vaults > T1 (type, simulateLiquidate, rebalance is different)\\ninterface IFluidVault {\\n    /// @notice returns the vault id\\n    function VAULT_ID() external view returns (uint256);\\n\\n    /// @notice returns the vault id\\n    function TYPE() external view returns (uint256);\\n\\n    /// @notice reads uint256 data `result_` from storage at a bytes32 storage `slot_` key.\\n    function readFromStorage(bytes32 slot_) external view returns (uint256 result_);\\n\\n    struct Tokens {\\n        address token0;\\n        address token1;\\n    }\\n\\n    struct ConstantViews {\\n        address liquidity;\\n        address factory;\\n        address operateImplementation;\\n        address adminImplementation;\\n        address secondaryImplementation;\\n        address deployer; // address which deploys oracle\\n        address supply; // either liquidity layer or DEX protocol\\n        address borrow; // either liquidity layer or DEX protocol\\n        Tokens supplyToken; // if smart collateral then address of token0 & token1 else just supply token address at token0 and token1 as empty\\n        Tokens borrowToken; // if smart debt then address of token0 & token1 else just borrow token address at token0 and token1 as empty\\n        uint256 vaultId;\\n        uint256 vaultType;\\n        bytes32 supplyExchangePriceSlot; // if smart collateral then slot is from DEX protocol else from liquidity layer\\n        bytes32 borrowExchangePriceSlot; // if smart debt then slot is from DEX protocol else from liquidity layer\\n        bytes32 userSupplySlot; // if smart collateral then slot is from DEX protocol else from liquidity layer\\n        bytes32 userBorrowSlot; // if smart debt then slot is from DEX protocol else from liquidity layer\\n    }\\n\\n    /// @notice returns all Vault constants\\n    function constantsView() external view returns (ConstantViews memory constantsView_);\\n\\n    /// @notice fetches the latest user position after a liquidation\\n    function fetchLatestPosition(\\n        int256 positionTick_,\\n        uint256 positionTickId_,\\n        uint256 positionRawDebt_,\\n        uint256 tickData_\\n    )\\n        external\\n        view\\n        returns (\\n            int256, // tick\\n            uint256, // raw debt\\n            uint256, // raw collateral\\n            uint256, // branchID_\\n            uint256 // branchData_\\n        );\\n\\n    /// @notice calculates the updated vault exchange prices\\n    function updateExchangePrices(\\n        uint256 vaultVariables2_\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 liqSupplyExPrice_,\\n            uint256 liqBorrowExPrice_,\\n            uint256 vaultSupplyExPrice_,\\n            uint256 vaultBorrowExPrice_\\n        );\\n\\n    /// @notice calculates the updated vault exchange prices and writes them to storage\\n    function updateExchangePricesOnStorage()\\n        external\\n        returns (\\n            uint256 liqSupplyExPrice_,\\n            uint256 liqBorrowExPrice_,\\n            uint256 vaultSupplyExPrice_,\\n            uint256 vaultBorrowExPrice_\\n        );\\n\\n    /// @notice returns the liquidity contract address\\n    function LIQUIDITY() external view returns (address);\\n\\n    error FluidLiquidateResult(uint256 colLiquidated, uint256 debtLiquidated);\\n\\n    function rebalance(\\n        int colToken0MinMax_,\\n        int colToken1MinMax_,\\n        int debtToken0MinMax_,\\n        int debtToken1MinMax_\\n    ) external returns (int supplyAmt_, int borrowAmt_);\\n\\n    /// @notice reverts with FluidLiquidateResult\\n    function simulateLiquidate(uint debtAmt_, bool absorb_) external;\\n}\\n\",\"keccak256\":\"0x9eb8e92c52e2ee7222a07a6e995b6bf7604a3e9a7ff1053722aef762948fd4bd\",\"license\":\"MIT\"},\"contracts/protocols/vault/interfaces/iVaultT1.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\ninterface IFluidVaultT1 {\\n    /// @notice returns the vault id\\n    function VAULT_ID() external view returns (uint256);\\n\\n    /// @notice reads uint256 data `result_` from storage at a bytes32 storage `slot_` key.\\n    function readFromStorage(bytes32 slot_) external view returns (uint256 result_);\\n\\n    struct ConstantViews {\\n        address liquidity;\\n        address factory;\\n        address adminImplementation;\\n        address secondaryImplementation;\\n        address supplyToken;\\n        address borrowToken;\\n        uint8 supplyDecimals;\\n        uint8 borrowDecimals;\\n        uint vaultId;\\n        bytes32 liquiditySupplyExchangePriceSlot;\\n        bytes32 liquidityBorrowExchangePriceSlot;\\n        bytes32 liquidityUserSupplySlot;\\n        bytes32 liquidityUserBorrowSlot;\\n    }\\n\\n    /// @notice returns all Vault constants\\n    function constantsView() external view returns (ConstantViews memory constantsView_);\\n\\n    /// @notice fetches the latest user position after a liquidation\\n    function fetchLatestPosition(\\n        int256 positionTick_,\\n        uint256 positionTickId_,\\n        uint256 positionRawDebt_,\\n        uint256 tickData_\\n    )\\n        external\\n        view\\n        returns (\\n            int256, // tick\\n            uint256, // raw debt\\n            uint256, // raw collateral\\n            uint256, // branchID_\\n            uint256 // branchData_\\n        );\\n\\n    /// @notice calculates the updated vault exchange prices\\n    function updateExchangePrices(\\n        uint256 vaultVariables2_\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 liqSupplyExPrice_,\\n            uint256 liqBorrowExPrice_,\\n            uint256 vaultSupplyExPrice_,\\n            uint256 vaultBorrowExPrice_\\n        );\\n\\n    /// @notice calculates the updated vault exchange prices and writes them to storage\\n    function updateExchangePricesOnStorage()\\n        external\\n        returns (\\n            uint256 liqSupplyExPrice_,\\n            uint256 liqBorrowExPrice_,\\n            uint256 vaultSupplyExPrice_,\\n            uint256 vaultBorrowExPrice_\\n        );\\n\\n    /// @notice returns the liquidity contract address\\n    function LIQUIDITY() external view returns (address);\\n\\n    function operate(\\n        uint256 nftId_, // if 0 then new position\\n        int256 newCol_, // if negative then withdraw\\n        int256 newDebt_, // if negative then payback\\n        address to_ // address at which the borrow & withdraw amount should go to. If address(0) then it'll go to msg.sender\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256, // nftId_\\n            int256, // final supply amount. if - then withdraw\\n            int256 // final borrow amount. if - then payback\\n        );\\n\\n    function liquidate(\\n        uint256 debtAmt_,\\n        uint256 colPerUnitDebt_, // min collateral needed per unit of debt in 1e18\\n        address to_,\\n        bool absorb_\\n    ) external payable returns (uint actualDebtAmt_, uint actualColAmt_);\\n\\n    function absorb() external;\\n\\n    function rebalance() external payable returns (int supplyAmt_, int borrowAmt_);\\n\\n    error FluidLiquidateResult(uint256 colLiquidated, uint256 debtLiquidated);\\n}\\n\",\"keccak256\":\"0x447e05743da212ce720baea2fabb6191ed1a7f3d1e737d4b1ce9bdcdd268d398\",\"license\":\"MIT\"},\"contracts/protocols/vault/interfaces/iVaultT2.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nimport { IFluidVault } from \\\"./iVault.sol\\\";\\n\\ninterface IFluidVaultT2 is IFluidVault {\\n    function operate(\\n        uint nftId_,\\n        int newColToken0_,\\n        int newColToken1_,\\n        int colSharesMinMax_,\\n        int newDebt_,\\n        address to_\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256, // nftId_\\n            int256, // final supply amount. if - then withdraw\\n            int256 // final borrow amount. if - then payback\\n        );\\n\\n    function operatePerfect(\\n        uint nftId_,\\n        int perfectColShares_,\\n        int colToken0MinMax_,\\n        int colToken1MinMax_,\\n        int newDebt_,\\n        address to_\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256, // nftId_\\n            int256[] memory r_\\n        );\\n\\n    function liquidate(\\n        uint256 debtAmt_,\\n        uint256 colPerUnitDebt_, // col per unit is w.r.t debt shares and not token0/1 debt amount\\n        uint256 token0ColAmtPerUnitShares_, // in 1e18\\n        uint256 token1ColAmtPerUnitShares_, // in 1e18\\n        address to_,\\n        bool absorb_\\n    ) external payable returns (uint256 actualDebt_, uint256 actualColShares_, uint256 token0Col_, uint256 token1Col_);\\n\\n    function liquidatePerfect(\\n        uint256 debtAmt_,\\n        uint256 colPerUnitDebt_, // col per unit is w.r.t debt shares and not token0/1 debt amount\\n        uint256 token0ColAmtPerUnitShares_, // in 1e18\\n        uint256 token1ColAmtPerUnitShares_, // in 1e18\\n        address to_,\\n        bool absorb_\\n    ) external payable returns (uint256 actualDebt_, uint256 actualColShares_, uint256 token0Col_, uint256 token1Col_);\\n}\\n\",\"keccak256\":\"0x541b4b9e98a0e3e3c688b3cb55d7b553dda07a7d6b97df9736f62f199e035b81\",\"license\":\"MIT\"},\"contracts/protocols/vault/interfaces/iVaultT3.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nimport { IFluidVault } from \\\"./iVault.sol\\\";\\n\\ninterface IFluidVaultT3 is IFluidVault {\\n    function operate(\\n        uint nftId_,\\n        int newCol_,\\n        int newDebtToken0_,\\n        int newDebtToken1_,\\n        int debtSharesMinMax_,\\n        address to_\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256, // nftId_\\n            int256, // final supply amount. if - then withdraw\\n            int256 // final borrow amount. if - then payback\\n        );\\n\\n    function operatePerfect(\\n        uint nftId_,\\n        int newCol_,\\n        int perfectDebtShares_,\\n        int debtToken0MinMax_,\\n        int debtToken1MinMax_,\\n        address to_\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256, // nftId_\\n            int256[] memory r_\\n        );\\n\\n    function liquidate(\\n        uint256 token0DebtAmt_,\\n        uint256 token1DebtAmt_,\\n        uint256 debtSharesMin_,\\n        uint256 colPerUnitDebt_,\\n        address to_,\\n        bool absorb_\\n    ) external payable returns (uint256 actualDebtShares_, uint256 actualCol_);\\n\\n    function liquidatePerfect(\\n        uint256 debtShares_,\\n        uint256 token0DebtAmtPerUnitShares_,\\n        uint256 token1DebtAmtPerUnitShares_,\\n        uint256 colPerUnitDebt_,\\n        address to_,\\n        bool absorb_\\n    )\\n        external\\n        payable\\n        returns (uint256 actualDebtShares_, uint256 token0Debt_, uint256 token1Debt_, uint256 actualCol_);\\n}\\n\",\"keccak256\":\"0xd8c96fd58640c45693f6a5baeecdf28ad7e162748342c1db1c670837d91803e6\",\"license\":\"MIT\"},\"contracts/protocols/vault/interfaces/iVaultT4.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nimport { IFluidVault } from \\\"./iVault.sol\\\";\\n\\ninterface IFluidVaultT4 is IFluidVault {\\n    function operate(\\n        uint nftId_,\\n        int newColToken0_,\\n        int newColToken1_,\\n        int colSharesMinMax_,\\n        int newDebtToken0_,\\n        int newDebtToken1_,\\n        int debtSharesMinMax_,\\n        address to_\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256, // nftId_\\n            int256, // final supply amount. if - then withdraw\\n            int256 // final borrow amount. if - then payback\\n        );\\n\\n    function operatePerfect(\\n        uint nftId_,\\n        int perfectColShares_,\\n        int colToken0MinMax_,\\n        int colToken1MinMax_,\\n        int perfectDebtShares_,\\n        int debtToken0MinMax_,\\n        int debtToken1MinMax_,\\n        address to_\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256, // nftId_\\n            int256[] memory r_\\n        );\\n\\n    function liquidate(\\n        uint256 token0DebtAmt_,\\n        uint256 token1DebtAmt_,\\n        uint256 debtSharesMin_,\\n        uint256 colPerUnitDebt_, // col per unit is w.r.t debt shares and not token0/1 debt amount\\n        uint256 token0ColAmtPerUnitShares_, // in 1e18\\n        uint256 token1ColAmtPerUnitShares_, // in 1e18\\n        address to_,\\n        bool absorb_\\n    )\\n        external\\n        payable\\n        returns (uint256 actualDebtShares_, uint256 actualColShares_, uint256 token0Col_, uint256 token1Col_);\\n\\n    function liquidatePerfect(\\n        uint256 debtShares_,\\n        uint256 token0DebtAmtPerUnitShares_,\\n        uint256 token1DebtAmtPerUnitShares_,\\n        uint256 colPerUnitDebt_, // col per unit is w.r.t debt shares and not token0/1 debt amount\\n        uint256 token0ColAmtPerUnitShares_, // in 1e18\\n        uint256 token1ColAmtPerUnitShares_, // in 1e18\\n        address to_,\\n        bool absorb_\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256 actualDebtShares_,\\n            uint256 token0Debt_,\\n            uint256 token1Debt_,\\n            uint256 actualColShares_,\\n            uint256 token0Col_,\\n            uint256 token1Col_\\n        );\\n}\\n\",\"keccak256\":\"0x7e46e73d0c597cdcf846f7330c52b1c14ec3f52ee55967617afcd40fb238940b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60e06040523060c0523480156200001557600080fd5b5060405162001b9838038062001b9883398101604081905262000038916200006d565b6001600160a01b039182166080521660a052620000a5565b80516001600160a01b03811681146200006857600080fd5b919050565b600080604083850312156200008157600080fd5b6200008c8362000050565b91506200009c6020840162000050565b90509250929050565b60805160a05160c051611a9a620000fe6000396000610a37015260008181610132015281816102fb015281816108c5015281816109660152610b1f015260008181607c015281816101900152610c3f0152611a9a6000f3fe60806040526004361061005e5760003560e01c8063a734f06e11610043578063a734f06e146100f8578063ad5c464814610120578063cf50d4501461015457600080fd5b806376ca658a1461006a578063920f5c84146100c857600080fd5b3661006557005b600080fd5b34801561007657600080fd5b5061009e7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b3480156100d457600080fd5b506100e86100e33660046112ba565b610176565b60405190151581526020016100bf565b34801561010457600080fd5b5061009e73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b34801561012c57600080fd5b5061009e7f000000000000000000000000000000000000000000000000000000000000000081565b34801561016057600080fd5b5061017461016f3660046114d2565b610a20565b005b60003373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146101e7576040517f97f5318b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff84163014610236576040517f97f5318b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610244838501856114d2565b9050600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168260a0015173ffffffffffffffffffffffffffffffffffffffff16146102c6576102a78260a0015183600001516000610cb1565b6102be8260a0015183600001518460c00151610cb1565b506000610374565b60c08201516040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815260048101919091527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690632e1a7d4d90602401600060405180830381600087803b15801561035457600080fd5b505af1158015610368573d6000803e3d6000fd5b505050508160c0015190505b600080836020015160010361044a57835160e08501516101408601516101a08701516040517f8433ea22000000000000000000000000000000000000000000000000000000008152600481019390935260248301919091523060448301521515606482015273ffffffffffffffffffffffffffffffffffffffff90911690638433ea229085906084015b604080518083038185885af115801561041b573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610440919061162c565b90925090506106e1565b836020015160020361053957835160e08501516101408601516101608701516101808801516101a08901516040517f7bae33610000000000000000000000000000000000000000000000000000000081526004810195909552602485019390935260448401919091526064830152306084830152151560a482015273ffffffffffffffffffffffffffffffffffffffff90911690637bae336190859060c40160806040518083038185885af1158015610507573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061052c9190611650565b5091935091506106e19050565b83602001516003036105dd57835160e08501516101008601516101208701516101408801516101a08901516040517f7bae33610000000000000000000000000000000000000000000000000000000081526004810195909552602485019390935260448401919091526064830152306084830152151560a482015273ffffffffffffffffffffffffffffffffffffffff90911690637bae336190859060c4016103fe565b83602001516004036106e157835160e08501516101008601516101208701516101408801516101608901516101808a01516101a08b01516040517f27fa2b530000000000000000000000000000000000000000000000000000000081526004810197909752602487019590955260448601939093526064850191909152608484015260a48301523060c4830152151560e482015273ffffffffffffffffffffffffffffffffffffffff909116906327fa2b539085906101040160806040518083038185885af11580156106b4573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906106d99190611650565b509193509150505b6101c084015173ffffffffffffffffffffffffffffffffffffffff1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146107505761072d846101c001518561022001516000610cb1565b610747846101c00151856102200151866101e00151610cb1565b60009250610759565b836101e0015192505b6107a4846102000151856102400151856040518060400160405280600c81526020017f537761703a206661696c65640000000000000000000000000000000000000000815250610d6c565b508351604080518381526020810185905273ffffffffffffffffffffffffffffffffffffffff909216917f09c223cfcd8c93e245f558f5f8de755fc0930fd9bc257441155ef5d54a170e0f910160405180910390a250505060008787600081811061081157610811611686565b905060200201358a8a600081811061082b5761082b611686565b9050602002013561083c91906116e4565b61084790600a6116e4565b905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168260a0015173ffffffffffffffffffffffffffffffffffffffff16036109dc576040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015610921573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094591906116f7565b9050818110156109da5773ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663d0e30db06109958385611710565b6040518263ffffffff1660e01b81526004016000604051808303818588803b1580156109c057600080fd5b505af11580156109d4573d6000803e3d6000fd5b50505050505b505b610a0e8c8c60008181106109f2576109f2611686565b9050602002016020810190610a079190611723565b3383610e87565b5060019b9a5050505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163003610a8f576040517f97f5318b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a9881610f2b565b6040805160018082528183019092526000916020808301908036833750506040805160018082528183019092529293506000929150602080830190803683370190505060a084015190915073ffffffffffffffffffffffffffffffffffffffff1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14610b1d578260a00151610b3f565b7f00000000000000000000000000000000000000000000000000000000000000005b82600081518110610b5257610b52611686565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508260c0015181600081518110610ba457610ba4611686565b602002602001018181525050600083604051602001610bc391906117b3565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815282825260808701516000845260208401928390527f095627e900000000000000000000000000000000000000000000000000000000909252925073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163095627e991610c79918791879187906024810161193d565b600060405180830381600087803b158015610c9357600080fd5b505af1158015610ca7573d6000803e3d6000fd5b5050505050505050565b60006040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152826024820152602060006044836000895af191505080601f3d1160016000511416151615610d255750823b153d17155b80610d66576040517fffd1fc0700000000000000000000000000000000000000000000000000000000815262013c6960048201526024015b60405180910390fd5b50505050565b606082471015610dfe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610d5d565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610e2791906119fd565b60006040518083038185875af1925050503d8060008114610e64576040519150601f19603f3d011682016040523d82523d6000602084013e610e69565b606091505b5091509150610e7a87838387611097565b925050505b949350505050565b60006040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080610d66576040517fdee51a8a0000000000000000000000000000000000000000000000000000000081526201155a6004820152602401610d5d565b60008160400151118015610f425750428160400151105b15610f79576040517f2fad55ba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80516040517fb5c736e40000000000000000000000000000000000000000000000000000000081526000600482018190529173ffffffffffffffffffffffffffffffffffffffff169063b5c736e490602401602060405180830381865afa158015610fe8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100c91906116f7565b90506000611022620fffff600284901c16611137565b905080836060015113801561105b57507f8000000000000000000000000000000000000000000000000000000000000000836060015114155b15611092576040517ff64eca4900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b6060831561112d5782516000036111265773ffffffffffffffffffffffffffffffffffffffff85163b611126576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610d5d565b5081610e7f565b610e7f8383611206565b6000620fffff82106111a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f696e76616c69642d6e756d6265720000000000000000000000000000000000006044820152606401610d5d565b81156111de57816001166001146111cd576111c8600183901c6207ffff16611a19565b6111d8565b6207ffff600183901c165b92915050565b507f80000000000000000000000000000000000000000000000000000000000000005b919050565b8151156112165781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5d9190611a51565b60008083601f84011261125c57600080fd5b50813567ffffffffffffffff81111561127457600080fd5b6020830191508360208260051b850101111561128f57600080fd5b9250929050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461120157600080fd5b600080600080600080600080600060a08a8c0312156112d857600080fd5b893567ffffffffffffffff808211156112f057600080fd5b6112fc8d838e0161124a565b909b50995060208c013591508082111561131557600080fd5b6113218d838e0161124a565b909950975060408c013591508082111561133a57600080fd5b6113468d838e0161124a565b909750955085915061135a60608d01611296565b945060808c013591508082111561137057600080fd5b818c0191508c601f83011261138457600080fd5b81358181111561139357600080fd5b8d60208285010111156113a557600080fd5b6020830194508093505050509295985092959850929598565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610260810167ffffffffffffffff81118282101715611411576114116113be565b60405290565b8035801515811461120157600080fd5b600082601f83011261143857600080fd5b813567ffffffffffffffff80821115611453576114536113be565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715611499576114996113be565b816040528381528660208588010111156114b257600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000602082840312156114e457600080fd5b813567ffffffffffffffff808211156114fc57600080fd5b90830190610260828603121561151157600080fd5b6115196113ed565b61152283611296565b81526020830135602082015260408301356040820152606083013560608201526080830135608082015261155860a08401611296565b60a082015260c0838101359082015260e08084013590820152610100808401359082015261012080840135908201526101408084013590820152610160808401359082015261018080840135908201526101a06115b6818501611417565b908201526101c06115c8848201611296565b908201526101e083810135908201526102006115e5818501611296565b908201526102206115f7848201611296565b90820152610240838101358381111561160f57600080fd5b61161b88828701611427565b918301919091525095945050505050565b6000806040838503121561163f57600080fd5b505080516020909101519092909150565b6000806000806080858703121561166657600080fd5b505082516020840151604085015160609095015191969095509092509050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156111d8576111d86116b5565b60006020828403121561170957600080fd5b5051919050565b818103818111156111d8576111d86116b5565b60006020828403121561173557600080fd5b61173e82611296565b9392505050565b60005b83811015611760578181015183820152602001611748565b50506000910152565b60008151808452611781816020860160208601611745565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526117da60208201835173ffffffffffffffffffffffffffffffffffffffff169052565b602082015160408201526040820151606082015260608201516080820152608082015160a0820152600060a083015161182b60c084018273ffffffffffffffffffffffffffffffffffffffff169052565b5060c083015160e08381019190915283015161010080840191909152830151610120808401919091528301516101408084019190915283015161016080840191909152830151610180808401919091528301516101a0808401919091528301516101c061189b8185018315159052565b84015190506101e06118c48482018373ffffffffffffffffffffffffffffffffffffffff169052565b8401516102008481019190915284015190506102206118fa8185018373ffffffffffffffffffffffffffffffffffffffff169052565b84015190506102406119238482018373ffffffffffffffffffffffffffffffffffffffff169052565b840151610260848101529050610e7f610280840182611769565b60a0808252865190820181905260009060209060c0840190828a01845b8281101561198c57815173ffffffffffffffffffffffffffffffffffffffff168452928401929084019060010161195a565b5050508381038285015287518082528883019183019060005b818110156119c1578351835292840192918401916001016119a5565b505087604086015284810360608601526119db8188611769565b9250505082810360808401526119f18185611769565b98975050505050505050565b60008251611a0f818460208701611745565b9190910192915050565b60007f80000000000000000000000000000000000000000000000000000000000000008203611a4a57611a4a6116b5565b5060000390565b60208152600061173e602083018461176956fea264697066735822122053b91b5e425b596cb1e296ffe0b41c50c8b19114ee2706a4b6aee44634b7b63864736f6c63430008150033",
  "deployedBytecode": "0x60806040526004361061005e5760003560e01c8063a734f06e11610043578063a734f06e146100f8578063ad5c464814610120578063cf50d4501461015457600080fd5b806376ca658a1461006a578063920f5c84146100c857600080fd5b3661006557005b600080fd5b34801561007657600080fd5b5061009e7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b3480156100d457600080fd5b506100e86100e33660046112ba565b610176565b60405190151581526020016100bf565b34801561010457600080fd5b5061009e73eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b34801561012c57600080fd5b5061009e7f000000000000000000000000000000000000000000000000000000000000000081565b34801561016057600080fd5b5061017461016f3660046114d2565b610a20565b005b60003373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146101e7576040517f97f5318b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff84163014610236576040517f97f5318b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610244838501856114d2565b9050600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168260a0015173ffffffffffffffffffffffffffffffffffffffff16146102c6576102a78260a0015183600001516000610cb1565b6102be8260a0015183600001518460c00151610cb1565b506000610374565b60c08201516040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815260048101919091527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690632e1a7d4d90602401600060405180830381600087803b15801561035457600080fd5b505af1158015610368573d6000803e3d6000fd5b505050508160c0015190505b600080836020015160010361044a57835160e08501516101408601516101a08701516040517f8433ea22000000000000000000000000000000000000000000000000000000008152600481019390935260248301919091523060448301521515606482015273ffffffffffffffffffffffffffffffffffffffff90911690638433ea229085906084015b604080518083038185885af115801561041b573d6000803e3d6000fd5b50505050506040513d601f19601f82011682018060405250810190610440919061162c565b90925090506106e1565b836020015160020361053957835160e08501516101408601516101608701516101808801516101a08901516040517f7bae33610000000000000000000000000000000000000000000000000000000081526004810195909552602485019390935260448401919091526064830152306084830152151560a482015273ffffffffffffffffffffffffffffffffffffffff90911690637bae336190859060c40160806040518083038185885af1158015610507573d6000803e3d6000fd5b50505050506040513d601f19601f8201168201806040525081019061052c9190611650565b5091935091506106e19050565b83602001516003036105dd57835160e08501516101008601516101208701516101408801516101a08901516040517f7bae33610000000000000000000000000000000000000000000000000000000081526004810195909552602485019390935260448401919091526064830152306084830152151560a482015273ffffffffffffffffffffffffffffffffffffffff90911690637bae336190859060c4016103fe565b83602001516004036106e157835160e08501516101008601516101208701516101408801516101608901516101808a01516101a08b01516040517f27fa2b530000000000000000000000000000000000000000000000000000000081526004810197909752602487019590955260448601939093526064850191909152608484015260a48301523060c4830152151560e482015273ffffffffffffffffffffffffffffffffffffffff909116906327fa2b539085906101040160806040518083038185885af11580156106b4573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906106d99190611650565b509193509150505b6101c084015173ffffffffffffffffffffffffffffffffffffffff1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee146107505761072d846101c001518561022001516000610cb1565b610747846101c00151856102200151866101e00151610cb1565b60009250610759565b836101e0015192505b6107a4846102000151856102400151856040518060400160405280600c81526020017f537761703a206661696c65640000000000000000000000000000000000000000815250610d6c565b508351604080518381526020810185905273ffffffffffffffffffffffffffffffffffffffff909216917f09c223cfcd8c93e245f558f5f8de755fc0930fd9bc257441155ef5d54a170e0f910160405180910390a250505060008787600081811061081157610811611686565b905060200201358a8a600081811061082b5761082b611686565b9050602002013561083c91906116e4565b61084790600a6116e4565b905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168260a0015173ffffffffffffffffffffffffffffffffffffffff16036109dc576040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015610921573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094591906116f7565b9050818110156109da5773ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663d0e30db06109958385611710565b6040518263ffffffff1660e01b81526004016000604051808303818588803b1580156109c057600080fd5b505af11580156109d4573d6000803e3d6000fd5b50505050505b505b610a0e8c8c60008181106109f2576109f2611686565b9050602002016020810190610a079190611723565b3383610e87565b5060019b9a5050505050505050505050565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163003610a8f576040517f97f5318b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a9881610f2b565b6040805160018082528183019092526000916020808301908036833750506040805160018082528183019092529293506000929150602080830190803683370190505060a084015190915073ffffffffffffffffffffffffffffffffffffffff1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14610b1d578260a00151610b3f565b7f00000000000000000000000000000000000000000000000000000000000000005b82600081518110610b5257610b52611686565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff16815250508260c0015181600081518110610ba457610ba4611686565b602002602001018181525050600083604051602001610bc391906117b3565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815282825260808701516000845260208401928390527f095627e900000000000000000000000000000000000000000000000000000000909252925073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163095627e991610c79918791879187906024810161193d565b600060405180830381600087803b158015610c9357600080fd5b505af1158015610ca7573d6000803e3d6000fd5b5050505050505050565b60006040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152826024820152602060006044836000895af191505080601f3d1160016000511416151615610d255750823b153d17155b80610d66576040517fffd1fc0700000000000000000000000000000000000000000000000000000000815262013c6960048201526024015b60405180910390fd5b50505050565b606082471015610dfe576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610d5d565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610e2791906119fd565b60006040518083038185875af1925050503d8060008114610e64576040519150601f19603f3d011682016040523d82523d6000602084013e610e69565b606091505b5091509150610e7a87838387611097565b925050505b949350505050565b60006040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080610d66576040517fdee51a8a0000000000000000000000000000000000000000000000000000000081526201155a6004820152602401610d5d565b60008160400151118015610f425750428160400151105b15610f79576040517f2fad55ba00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80516040517fb5c736e40000000000000000000000000000000000000000000000000000000081526000600482018190529173ffffffffffffffffffffffffffffffffffffffff169063b5c736e490602401602060405180830381865afa158015610fe8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100c91906116f7565b90506000611022620fffff600284901c16611137565b905080836060015113801561105b57507f8000000000000000000000000000000000000000000000000000000000000000836060015114155b15611092576040517ff64eca4900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b6060831561112d5782516000036111265773ffffffffffffffffffffffffffffffffffffffff85163b611126576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610d5d565b5081610e7f565b610e7f8383611206565b6000620fffff82106111a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f696e76616c69642d6e756d6265720000000000000000000000000000000000006044820152606401610d5d565b81156111de57816001166001146111cd576111c8600183901c6207ffff16611a19565b6111d8565b6207ffff600183901c165b92915050565b507f80000000000000000000000000000000000000000000000000000000000000005b919050565b8151156112165781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610d5d9190611a51565b60008083601f84011261125c57600080fd5b50813567ffffffffffffffff81111561127457600080fd5b6020830191508360208260051b850101111561128f57600080fd5b9250929050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461120157600080fd5b600080600080600080600080600060a08a8c0312156112d857600080fd5b893567ffffffffffffffff808211156112f057600080fd5b6112fc8d838e0161124a565b909b50995060208c013591508082111561131557600080fd5b6113218d838e0161124a565b909950975060408c013591508082111561133a57600080fd5b6113468d838e0161124a565b909750955085915061135a60608d01611296565b945060808c013591508082111561137057600080fd5b818c0191508c601f83011261138457600080fd5b81358181111561139357600080fd5b8d60208285010111156113a557600080fd5b6020830194508093505050509295985092959850929598565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610260810167ffffffffffffffff81118282101715611411576114116113be565b60405290565b8035801515811461120157600080fd5b600082601f83011261143857600080fd5b813567ffffffffffffffff80821115611453576114536113be565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908282118183101715611499576114996113be565b816040528381528660208588010111156114b257600080fd5b836020870160208301376000602085830101528094505050505092915050565b6000602082840312156114e457600080fd5b813567ffffffffffffffff808211156114fc57600080fd5b90830190610260828603121561151157600080fd5b6115196113ed565b61152283611296565b81526020830135602082015260408301356040820152606083013560608201526080830135608082015261155860a08401611296565b60a082015260c0838101359082015260e08084013590820152610100808401359082015261012080840135908201526101408084013590820152610160808401359082015261018080840135908201526101a06115b6818501611417565b908201526101c06115c8848201611296565b908201526101e083810135908201526102006115e5818501611296565b908201526102206115f7848201611296565b90820152610240838101358381111561160f57600080fd5b61161b88828701611427565b918301919091525095945050505050565b6000806040838503121561163f57600080fd5b505080516020909101519092909150565b6000806000806080858703121561166657600080fd5b505082516020840151604085015160609095015191969095509092509050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b808201808211156111d8576111d86116b5565b60006020828403121561170957600080fd5b5051919050565b818103818111156111d8576111d86116b5565b60006020828403121561173557600080fd5b61173e82611296565b9392505050565b60005b83811015611760578181015183820152602001611748565b50506000910152565b60008151808452611781816020860160208601611745565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526117da60208201835173ffffffffffffffffffffffffffffffffffffffff169052565b602082015160408201526040820151606082015260608201516080820152608082015160a0820152600060a083015161182b60c084018273ffffffffffffffffffffffffffffffffffffffff169052565b5060c083015160e08381019190915283015161010080840191909152830151610120808401919091528301516101408084019190915283015161016080840191909152830151610180808401919091528301516101a0808401919091528301516101c061189b8185018315159052565b84015190506101e06118c48482018373ffffffffffffffffffffffffffffffffffffffff169052565b8401516102008481019190915284015190506102206118fa8185018373ffffffffffffffffffffffffffffffffffffffff169052565b84015190506102406119238482018373ffffffffffffffffffffffffffffffffffffffff169052565b840151610260848101529050610e7f610280840182611769565b60a0808252865190820181905260009060209060c0840190828a01845b8281101561198c57815173ffffffffffffffffffffffffffffffffffffffff168452928401929084019060010161195a565b5050508381038285015287518082528883019183019060005b818110156119c1578351835292840192918401916001016119a5565b505087604086015284810360608601526119db8188611769565b9250505082810360808401526119f18185611769565b98975050505050505050565b60008251611a0f818460208701611745565b9190910192915050565b60007f80000000000000000000000000000000000000000000000000000000000000008203611a4a57611a4a6116b5565b5060000390565b60208152600061173e602083018461176956fea264697066735822122053b91b5e425b596cb1e296ffe0b41c50c8b19114ee2706a4b6aee44634b7b63864736f6c63430008150033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}