{
  "address": "0x16FFb96CE38d62Ef944BeF9Dc097447E7E071D20",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "fla_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "weth_",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "rebalancers_",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FluidVaultT1Liquidator__InvalidOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "collateral",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "debt",
          "type": "uint256"
        }
      ],
      "name": "Liquidated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rebalancer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "ToggleRebalancer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ETH_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FLA",
      "outputs": [
        {
          "internalType": "contract InstaFlashInterface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "contract IWETH9",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "assets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "premiums",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "executeOperation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "vault",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "supply",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "borrow",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "supplyAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "colPerUnitDebt",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "absorb",
              "type": "bool"
            },
            {
              "internalType": "address",
              "name": "swapRouter",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "swapApproval",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "swapData",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "route",
              "type": "uint256"
            }
          ],
          "internalType": "struct VaultT1Liquidator.LiquidationParams",
          "name": "params_",
          "type": "tuple"
        }
      ],
      "name": "liquidation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rebalancer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets_",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas_",
          "type": "bytes[]"
        }
      ],
      "name": "spell",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rebalancer_",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status_",
          "type": "bool"
        }
      ],
      "name": "toggleRebalancer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tokens_",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts_",
          "type": "uint256[]"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xfa6510723ef0d39b14391240b7af0cbfe6f46a86836ad5184f20f45f3b3d66f9",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x910E413DBF3F6276Fe8213fF656726bDc142E08E",
    "contractAddress": null,
    "transactionIndex": 34,
    "gasUsed": "2065647",
    "logsBloom": "0x00000000000000000000000000000000000000000000004000800000000000000400000000000000000000000000000000000100000000000000000040040000000000000000200000000000000000000001000000040000800000000000000000000000020000000000000000400c00000040000000000000000800000000408000000000000000000010040000000000800000000500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000100000000000800000000000000000000",
    "blockHash": "0xaef3fed971a0cc722c1e26a7e478dac19d5ea9e392c7622a17f624775beb1021",
    "transactionHash": "0xfa6510723ef0d39b14391240b7af0cbfe6f46a86836ad5184f20f45f3b3d66f9",
    "logs": [
      {
        "transactionIndex": 34,
        "blockNumber": 20428600,
        "transactionHash": "0xfa6510723ef0d39b14391240b7af0cbfe6f46a86836ad5184f20f45f3b3d66f9",
        "address": "0x16FFb96CE38d62Ef944BeF9Dc097447E7E071D20",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009800020b610194dba52cf606e8aa142f9f256166"
        ],
        "data": "0x",
        "logIndex": 24,
        "blockHash": "0xaef3fed971a0cc722c1e26a7e478dac19d5ea9e392c7622a17f624775beb1021"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 20428600,
        "transactionHash": "0xfa6510723ef0d39b14391240b7af0cbfe6f46a86836ad5184f20f45f3b3d66f9",
        "address": "0x16FFb96CE38d62Ef944BeF9Dc097447E7E071D20",
        "topics": [
          "0xd74bdcde9b66b7d08a366a43b11a78f3c8307dfeeb0a7741005200bfedfe933f",
          "0x0000000000000000000000003be5c671b20649dca5d916b5698328d54bdaaf88",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 25,
        "blockHash": "0xaef3fed971a0cc722c1e26a7e478dac19d5ea9e392c7622a17f624775beb1021"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 20428600,
        "transactionHash": "0xfa6510723ef0d39b14391240b7af0cbfe6f46a86836ad5184f20f45f3b3d66f9",
        "address": "0x16FFb96CE38d62Ef944BeF9Dc097447E7E071D20",
        "topics": [
          "0xd74bdcde9b66b7d08a366a43b11a78f3c8307dfeeb0a7741005200bfedfe933f",
          "0x000000000000000000000000b287f8a01a9538656c72fa6ae1ee0117a187be0c",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 26,
        "blockHash": "0xaef3fed971a0cc722c1e26a7e478dac19d5ea9e392c7622a17f624775beb1021"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 20428600,
        "transactionHash": "0xfa6510723ef0d39b14391240b7af0cbfe6f46a86836ad5184f20f45f3b3d66f9",
        "address": "0x16FFb96CE38d62Ef944BeF9Dc097447E7E071D20",
        "topics": [
          "0xd74bdcde9b66b7d08a366a43b11a78f3c8307dfeeb0a7741005200bfedfe933f",
          "0x000000000000000000000000ab957b471b22d307ac5fbb3fccd4191433b2aa62",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 27,
        "blockHash": "0xaef3fed971a0cc722c1e26a7e478dac19d5ea9e392c7622a17f624775beb1021"
      }
    ],
    "blockNumber": 20428600,
    "cumulativeGasUsed": "3546769",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9800020b610194dBa52CF606E8Aa142F9F256166",
    "0x352423e2fA5D5c99343d371C9e3bC56C87723Cc7",
    "0x82aF49447D8a07e3bd95BD0d56f35241523fBab1",
    [
      "0x3BE5C671b20649DCA5D916b5698328D54BdAAf88",
      "0xb287f8A01a9538656c72Fa6aE1EE0117A187Be0C",
      "0xAb957B471b22d307AC5fbB3FCcD4191433B2AA62"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "4607e0612f2ab0b557b0f88351465724",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fla_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"rebalancers_\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FluidVaultT1Liquidator__InvalidOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"collateral\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"debt\",\"type\":\"uint256\"}],\"name\":\"Liquidated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rebalancer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"ToggleRebalancer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FLA\",\"outputs\":[{\"internalType\":\"contract InstaFlashInterface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH9\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"assets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"premiums\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"vault\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"supply\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"borrow\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"supplyAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"colPerUnitDebt\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"absorb\",\"type\":\"bool\"},{\"internalType\":\"address\",\"name\":\"swapRouter\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"swapApproval\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"swapData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"route\",\"type\":\"uint256\"}],\"internalType\":\"struct VaultT1Liquidator.LiquidationParams\",\"name\":\"params_\",\"type\":\"tuple\"}],\"name\":\"liquidation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rebalancer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets_\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas_\",\"type\":\"bytes[]\"}],\"name\":\"spell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rebalancer_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status_\",\"type\":\"bool\"}],\"name\":\"toggleRebalancer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/liquidation/main.sol\":\"VaultT1Liquidator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/periphery/liquidation/main.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { Owned } from \\\"solmate/src/auth/Owned.sol\\\";\\n\\nimport { IFluidVaultT1 } from \\\"../../protocols/vault/interfaces/iVaultT1.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { IWETH9 } from \\\"../../protocols/lending/interfaces/external/iWETH9.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\ninterface InstaFlashInterface {\\n    function flashLoan(address[] memory tokens, uint256[] memory amts, uint route, bytes memory data, bytes memory extraData) external;\\n}\\n\\ninterface InstaFlashReceiverInterface {\\n    function executeOperation(\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata premiums,\\n        address initiator,\\n        bytes calldata _data\\n    ) external returns (bool);\\n}\\n\\ncontract VaultT1Liquidator is Owned {\\n    using SafeERC20 for IERC20;\\n\\n    address constant public ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    InstaFlashInterface immutable public FLA;\\n    IWETH9 immutable public WETH;\\n\\n    mapping (address => bool) public rebalancer; \\n\\n    error FluidVaultT1Liquidator__InvalidOperation();\\n\\n    event Liquidated(\\n        address indexed vault,\\n        uint256 collateral,\\n        uint256 debt\\n    );\\n\\n    event Withdraw(\\n        address indexed to,\\n        address indexed token,\\n        uint256 amount\\n    );\\n\\n    event ToggleRebalancer(\\n        address indexed rebalancer,\\n        bool indexed status\\n    );\\n\\n    struct LiquidationParams {\\n        address vault;\\n        address supply;\\n        address borrow;\\n        uint256 supplyAmount;\\n        uint256 borrowAmount;\\n        uint256 colPerUnitDebt;\\n        bool absorb;\\n        address swapRouter;\\n        address swapApproval;\\n        bytes swapData;\\n        uint256 route;\\n    }\\n\\n    constructor (\\n        address owner_,\\n        address fla_,\\n        address weth_,\\n        address[] memory rebalancers_\\n    ) Owned(owner_) {\\n        FLA = InstaFlashInterface(fla_);\\n        WETH = IWETH9(weth_);\\n        for (uint256 i = 0; i < rebalancers_.length; i++) {\\n            rebalancer[rebalancers_[i]] = true;\\n            emit ToggleRebalancer(rebalancers_[i], true);\\n        }\\n    }\\n\\n    modifier isRebalancer() {\\n        if (!rebalancer[msg.sender] && msg.sender != owner) {\\n            revert FluidVaultT1Liquidator__InvalidOperation();\\n        }\\n        _;\\n    }\\n\\n    function toggleRebalancer(address rebalancer_, bool status_) public onlyOwner {\\n        rebalancer[rebalancer_] = status_;\\n        emit ToggleRebalancer(rebalancer_, status_);\\n    }\\n\\n    function spell(address[] memory targets_, bytes[] memory calldatas_) public onlyOwner {\\n        for (uint256 i = 0; i < targets_.length; i++) {\\n            Address.functionDelegateCall(targets_[i], calldatas_[i]);\\n        }\\n    }\\n\\n    function withdraw(address to_, address[] memory tokens_, uint256[] memory amounts_) public onlyOwner {\\n        for (uint i = 0; i < tokens_.length; i++) {\\n            if (tokens_[i] == ETH_ADDRESS) {\\n                Address.sendValue(payable(to_), amounts_[i]);\\n            } else {\\n                IERC20(tokens_[i]).safeTransfer(to_, amounts_[i]);\\n            }\\n            emit Withdraw(to_, tokens_[i], amounts_[i]);\\n        }\\n    }\\n    \\n    function liquidation(LiquidationParams memory params_) public isRebalancer {\\n        address[] memory tokens = new address[](1);\\n        uint256[] memory amts = new uint256[](1);\\n\\n        // Take flashloan in borrow token of the vault\\n        tokens[0] = params_.borrow == ETH_ADDRESS ? address(WETH) : params_.borrow;\\n        amts[0] = params_.borrowAmount;\\n\\n        bytes memory data_ = abi.encode(params_);\\n\\n        FLA.flashLoan(tokens, amts, params_.route, data_, abi.encode());\\n\\n    }\\n\\n    function executeOperation(\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata premiums,\\n        address initiator,\\n        bytes calldata _data\\n    ) external returns (bool) {\\n        if (msg.sender != address(FLA)) revert FluidVaultT1Liquidator__InvalidOperation();\\n        if (initiator != address(this)) revert FluidVaultT1Liquidator__InvalidOperation();\\n        LiquidationParams memory params_ = abi.decode(_data, (LiquidationParams));\\n\\n        {\\n            uint256 value_;\\n            if (params_.borrow != ETH_ADDRESS) {\\n                IERC20(params_.borrow).safeApprove(params_.vault, 0);\\n                IERC20(params_.borrow).safeApprove(params_.vault, params_.borrowAmount);\\n                value_ = 0;\\n            } else {\\n                WETH.withdraw(params_.borrowAmount);\\n                value_ = params_.borrowAmount;\\n            }\\n\\n            (uint256 debtAmount_, uint256 collateralAmount_) = IFluidVaultT1(params_.vault).liquidate{value: value_}(params_.borrowAmount, params_.colPerUnitDebt, address(this), params_.absorb);\\n\\n            if (params_.supply != ETH_ADDRESS) {\\n                IERC20(params_.supply).safeApprove(params_.swapApproval, 0);\\n                IERC20(params_.supply).safeApprove(params_.swapApproval, params_.supplyAmount);\\n                value_ = 0;\\n            } else {\\n                value_ = params_.supplyAmount;\\n            }\\n\\n            Address.functionCallWithValue(params_.swapRouter, params_.swapData, value_, \\\"Swap: failed\\\");\\n            emit Liquidated(params_.vault, collateralAmount_, debtAmount_);\\n        }\\n\\n        uint256 flashloanAmount_ = amounts[0] + premiums[0] + 10;\\n        if (params_.borrow == ETH_ADDRESS) {\\n            uint256 wethBalance_ = WETH.balanceOf(address(this));\\n            if (wethBalance_ < flashloanAmount_) {\\n                WETH.deposit{value: flashloanAmount_ - wethBalance_}();\\n            }\\n        }\\n        IERC20(assets[0]).safeTransfer(msg.sender, flashloanAmount_);\\n\\n        return true;\\n    }\\n\\n    receive() payable external {}\\n}\",\"keccak256\":\"0x8ce2f5109a611a7f4f2c50428f45fde5511b1c834417ea8457ce31d5b2e37581\",\"license\":\"BUSL-1.1\"},\"contracts/protocols/lending/interfaces/external/iWETH9.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH9 is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0x3e7e28357eb8914d51f7672a10d9ebe363e1aa36ccee6d928c17ac1ad7e4f7db\",\"license\":\"MIT\"},\"contracts/protocols/vault/interfaces/iVaultT1.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\ninterface IFluidVaultT1 {\\n    /// @notice returns the vault id\\n    function VAULT_ID() external view returns (uint256);\\n\\n    /// @notice reads uint256 data `result_` from storage at a bytes32 storage `slot_` key.\\n    function readFromStorage(bytes32 slot_) external view returns (uint256 result_);\\n\\n    struct ConstantViews {\\n        address liquidity;\\n        address factory;\\n        address adminImplementation;\\n        address secondaryImplementation;\\n        address supplyToken;\\n        address borrowToken;\\n        uint8 supplyDecimals;\\n        uint8 borrowDecimals;\\n        uint vaultId;\\n        bytes32 liquiditySupplyExchangePriceSlot;\\n        bytes32 liquidityBorrowExchangePriceSlot;\\n        bytes32 liquidityUserSupplySlot;\\n        bytes32 liquidityUserBorrowSlot;\\n    }\\n\\n    /// @notice returns all Vault constants\\n    function constantsView() external view returns (ConstantViews memory constantsView_);\\n\\n    /// @notice fetches the latest user position after a liquidation\\n    function fetchLatestPosition(\\n        int256 positionTick_,\\n        uint256 positionTickId_,\\n        uint256 positionRawDebt_,\\n        uint256 tickData_\\n    )\\n        external\\n        view\\n        returns (\\n            int256, // tick\\n            uint256, // raw debt\\n            uint256, // raw collateral\\n            uint256, // branchID_\\n            uint256 // branchData_\\n        );\\n\\n    /// @notice calculates the updated vault exchange prices\\n    function updateExchangePrices(\\n        uint256 vaultVariables2_\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 liqSupplyExPrice_,\\n            uint256 liqBorrowExPrice_,\\n            uint256 vaultSupplyExPrice_,\\n            uint256 vaultBorrowExPrice_\\n        );\\n\\n    /// @notice calculates the updated vault exchange prices and writes them to storage\\n    function updateExchangePricesOnStorage()\\n        external\\n        returns (\\n            uint256 liqSupplyExPrice_,\\n            uint256 liqBorrowExPrice_,\\n            uint256 vaultSupplyExPrice_,\\n            uint256 vaultBorrowExPrice_\\n        );\\n\\n    /// @notice returns the liquidity contract address\\n    function LIQUIDITY() external view returns (address);\\n\\n    function operate(\\n        uint256 nftId_, // if 0 then new position\\n        int256 newCol_, // if negative then withdraw\\n        int256 newDebt_, // if negative then payback\\n        address to_ // address at which the borrow & withdraw amount should go to. If address(0) then it'll go to msg.sender\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256, // nftId_\\n            int256, // final supply amount. if - then withdraw\\n            int256 // final borrow amount. if - then payback\\n        );\\n    \\n    function liquidate(\\n        uint256 debtAmt_,\\n        uint256 colPerUnitDebt_, // min collateral needed per unit of debt in 1e18\\n        address to_,\\n        bool absorb_\\n    ) external payable returns (uint actualDebtAmt_, uint actualColAmt_);\\n\\n    function absorb() external;\\n\\n    function rebalance() external payable returns (int supplyAmt_, int borrowAmt_);\\n\\n    error FluidLiquidateResult(uint256 colLiquidated, uint256 debtLiquidated);\\n}\\n\",\"keccak256\":\"0xe0ec40a4531ecbcd7b8db25b4cd8529e0c284bb20eb40b7cf909fb8af0e3ca8b\",\"license\":\"MIT\"},\"solmate/src/auth/Owned.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\\nabstract contract Owned {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            OWNERSHIP STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address public owner;\\n\\n    modifier onlyOwner() virtual {\\n        require(msg.sender == owner, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             OWNERSHIP LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        owner = newOwner;\\n\\n        emit OwnershipTransferred(msg.sender, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xfedb27d14c508342c33eb067c9a02eabcdb0f9dcf93b04ded1001f580d12d0ea\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b50604051620025c2380380620025c283398101604081905262000034916200019f565b600080546001600160a01b0319166001600160a01b03861690811782556040518692907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160a01b03808416608052821660a05260005b815181101562000161576001806000848481518110620000b757620000b7620002aa565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600115158282815181106200010f576200010f620002aa565b60200260200101516001600160a01b03167fd74bdcde9b66b7d08a366a43b11a78f3c8307dfeeb0a7741005200bfedfe933f60405160405180910390a3806200015881620002c0565b91505062000093565b5050505050620002e8565b80516001600160a01b03811681146200018457600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b60008060008060808587031215620001b657600080fd5b620001c1856200016c565b93506020620001d28187016200016c565b9350620001e2604087016200016c565b60608701519093506001600160401b03808211156200020057600080fd5b818801915088601f8301126200021557600080fd5b8151818111156200022a576200022a62000189565b8060051b604051601f19603f8301168101818110858211171562000252576200025262000189565b60405291825284820192508381018501918b8311156200027157600080fd5b938501935b828510156200029a576200028a856200016c565b8452938501939285019262000276565b989b979a50959850505050505050565b634e487b7160e01b600052603260045260246000fd5b600060018201620002e157634e487b7160e01b600052601160045260246000fd5b5060010190565b60805160a05161228a62000338600039600081816102330152818161064e015281816109a901528181610a4a0152610f26015260008181610145015281816104b50152611047015261228a6000f3fe6080604052600436106100c05760003560e01c8063920f5c8411610074578063edbd76681161004e578063edbd766814610255578063f2fde38b14610275578063fd826f601461029557600080fd5b8063920f5c84146101d9578063a734f06e146101f9578063ad5c46481461022157600080fd5b806376ca658a116100a557806376ca658a1461013357806382bc4aaf1461018c5780638da5cb5b146101ac57600080fd5b806329e31bdd146100cc5780633f221521146100ee57600080fd5b366100c757005b600080fd5b3480156100d857600080fd5b506100ec6100e736600461187b565b6102b5565b005b3480156100fa57600080fd5b5061011e6101093660046118b2565b60016020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b34801561013f57600080fd5b506101677f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161012a565b34801561019857600080fd5b506100ec6101a7366004611a99565b6103ba565b3480156101b857600080fd5b506000546101679073ffffffffffffffffffffffffffffffffffffffff1681565b3480156101e557600080fd5b5061011e6101f4366004611bba565b61049b565b34801561020557600080fd5b5061016773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b34801561022d57600080fd5b506101677f000000000000000000000000000000000000000000000000000000000000000081565b34801561026157600080fd5b506100ec610270366004611cbe565b610b1c565b34801561028157600080fd5b506100ec6102903660046118b2565b610d3f565b3480156102a157600080fd5b506100ec6102b0366004611d88565b610e30565b60005473ffffffffffffffffffffffffffffffffffffffff16331461033b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a4544000000000000000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821660008181526001602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915590519092917fd74bdcde9b66b7d08a366a43b11a78f3c8307dfeeb0a7741005200bfedfe933f91a35050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461043b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610332565b60005b82518110156104965761048383828151811061045c5761045c611e8c565b602002602001015183838151811061047657610476611e8c565b60200260200101516110b9565b508061048e81611eea565b91505061043e565b505050565b60003373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461050c576040517f74bf188c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8416301461055b576040517f74bf188c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061056983850185611d88565b9050600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff16826040015173ffffffffffffffffffffffffffffffffffffffff161461061957815160408301516105e39173ffffffffffffffffffffffffffffffffffffffff9091169060006110e7565b8151608083015160408401516106119273ffffffffffffffffffffffffffffffffffffffff909116916110e7565b5060006106c7565b60808201516040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815260048101919091527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690632e1a7d4d90602401600060405180830381600087803b1580156106a757600080fd5b505af11580156106bb573d6000803e3d6000fd5b50505050816080015190505b8151608083015160a084015160c08501516040517f8433ea220000000000000000000000000000000000000000000000000000000081526004810193909352602483019190915230604483015215156064820152600091829173ffffffffffffffffffffffffffffffffffffffff90911690638433ea22908590608401604080518083038185885af1158015610761573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906107869190611f22565b6020860151919350915073ffffffffffffffffffffffffffffffffffffffff1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14610836576107f58461010001516000866020015173ffffffffffffffffffffffffffffffffffffffff166110e79092919063ffffffff16565b61082d8461010001518560600151866020015173ffffffffffffffffffffffffffffffffffffffff166110e79092919063ffffffff16565b6000925061083e565b836060015192505b6108888460e00151856101200151856040518060400160405280600c81526020017f537761703a206661696c656400000000000000000000000000000000000000008152506112e7565b508351604080518381526020810185905273ffffffffffffffffffffffffffffffffffffffff909216917f09c223cfcd8c93e245f558f5f8de755fc0930fd9bc257441155ef5d54a170e0f910160405180910390a25050506000878760008181106108f5576108f5611e8c565b905060200201358a8a600081811061090f5761090f611e8c565b905060200201356109209190611f46565b61092b90600a611f46565b905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff16826040015173ffffffffffffffffffffffffffffffffffffffff1603610ac0576040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015610a05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a299190611f59565b905081811015610abe5773ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663d0e30db0610a798385611f72565b6040518263ffffffff1660e01b81526004016000604051808303818588803b158015610aa457600080fd5b505af1158015610ab8573d6000803e3d6000fd5b50505050505b505b610b0a33828e8e6000818110610ad857610ad8611e8c565b9050602002016020810190610aed91906118b2565b73ffffffffffffffffffffffffffffffffffffffff169190611402565b5060019b9a5050505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b9d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610332565b60005b8251811015610d395773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff16838281518110610be657610be6611e8c565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1603610c3157610c2c84838381518110610c1f57610c1f611e8c565b6020026020010151611458565b610c8e565b610c8e84838381518110610c4757610c47611e8c565b6020026020010151858481518110610c6157610c61611e8c565b602002602001015173ffffffffffffffffffffffffffffffffffffffff166114029092919063ffffffff16565b828181518110610ca057610ca0611e8c565b602002602001015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb848481518110610d0857610d08611e8c565b6020026020010151604051610d1f91815260200190565b60405180910390a380610d3181611eea565b915050610ba0565b50505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610dc0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610332565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081178255604051909133917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b3360009081526001602052604090205460ff16158015610e68575060005473ffffffffffffffffffffffffffffffffffffffff163314155b15610e9f576040517f74bf188c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408051600180825281830190925260009160208083019080368337505060408051600180825281830190925292935060009291506020808301908036833701905050604084015190915073ffffffffffffffffffffffffffffffffffffffff1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14610f24578260400151610f46565b7f00000000000000000000000000000000000000000000000000000000000000005b82600081518110610f5957610f59611e8c565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050826080015181600081518110610fab57610fab611e8c565b602002602001018181525050600083604051602001610fca9190611ff3565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282526101408701516000845260208401928390527f095627e900000000000000000000000000000000000000000000000000000000909252925073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163095627e991611081918791879187906024810161211a565b600060405180830381600087803b15801561109b57600080fd5b505af11580156110af573d6000803e3d6000fd5b5050505050505050565b60606110de838360405180606001604052806027815260200161222e602791396115b2565b90505b92915050565b80158061118757506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e90604401602060405180830381865afa158015611161573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111859190611f59565b155b611213576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610332565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526104969084907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611637565b606082471015611379576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610332565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516113a291906121da565b60006040518083038185875af1925050503d80600081146113df576040519150601f19603f3d011682016040523d82523d6000602084013e6113e4565b606091505b50915091506113f587838387611743565b925050505b949350505050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526104969084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401611265565b804710156114c2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610332565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d806000811461151c576040519150601f19603f3d011682016040523d82523d6000602084013e611521565b606091505b5050905080610496576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610332565b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516115dc91906121da565b600060405180830381855af49150503d8060008114611617576040519150601f19603f3d011682016040523d82523d6000602084013e61161c565b606091505b509150915061162d86838387611743565b9695505050505050565b6000611699826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166117e39092919063ffffffff16565b80519091501561049657808060200190518101906116b791906121f6565b610496576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610332565b606083156117d95782516000036117d25773ffffffffffffffffffffffffffffffffffffffff85163b6117d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610332565b50816113fa565b6113fa83836117f2565b60606113fa84846000856112e7565b8151156118025781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610332919061221a565b803573ffffffffffffffffffffffffffffffffffffffff8116811461185a57600080fd5b919050565b801515811461186d57600080fd5b50565b803561185a8161185f565b6000806040838503121561188e57600080fd5b61189783611836565b915060208301356118a78161185f565b809150509250929050565b6000602082840312156118c457600080fd5b6110de82611836565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610160810167ffffffffffffffff81118282101715611920576119206118cd565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561196d5761196d6118cd565b604052919050565b600067ffffffffffffffff82111561198f5761198f6118cd565b5060051b60200190565b600082601f8301126119aa57600080fd5b813560206119bf6119ba83611975565b611926565b82815260059290921b840181019181810190868411156119de57600080fd5b8286015b84811015611a00576119f381611836565b83529183019183016119e2565b509695505050505050565b600082601f830112611a1c57600080fd5b813567ffffffffffffffff811115611a3657611a366118cd565b611a6760207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601611926565b818152846020838601011115611a7c57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215611aac57600080fd5b823567ffffffffffffffff80821115611ac457600080fd5b611ad086838701611999565b9350602091508185013581811115611ae757600080fd5b8501601f81018713611af857600080fd5b8035611b066119ba82611975565b81815260059190911b82018401908481019089831115611b2557600080fd5b8584015b83811015611b5d57803586811115611b415760008081fd5b611b4f8c8983890101611a0b565b845250918601918601611b29565b508096505050505050509250929050565b60008083601f840112611b8057600080fd5b50813567ffffffffffffffff811115611b9857600080fd5b6020830191508360208260051b8501011115611bb357600080fd5b9250929050565b600080600080600080600080600060a08a8c031215611bd857600080fd5b893567ffffffffffffffff80821115611bf057600080fd5b611bfc8d838e01611b6e565b909b50995060208c0135915080821115611c1557600080fd5b611c218d838e01611b6e565b909950975060408c0135915080821115611c3a57600080fd5b611c468d838e01611b6e565b9097509550859150611c5a60608d01611836565b945060808c0135915080821115611c7057600080fd5b818c0191508c601f830112611c8457600080fd5b813581811115611c9357600080fd5b8d6020828501011115611ca557600080fd5b6020830194508093505050509295985092959850929598565b600080600060608486031215611cd357600080fd5b611cdc84611836565b925060208085013567ffffffffffffffff80821115611cfa57600080fd5b611d0688838901611999565b94506040870135915080821115611d1c57600080fd5b508501601f81018713611d2e57600080fd5b8035611d3c6119ba82611975565b81815260059190911b82018301908381019089831115611d5b57600080fd5b928401925b82841015611d7957833582529284019290840190611d60565b80955050505050509250925092565b600060208284031215611d9a57600080fd5b813567ffffffffffffffff80821115611db257600080fd5b908301906101608286031215611dc757600080fd5b611dcf6118fc565b611dd883611836565b8152611de660208401611836565b6020820152611df760408401611836565b6040820152606083013560608201526080830135608082015260a083013560a0820152611e2660c08401611870565b60c0820152611e3760e08401611836565b60e0820152610100611e4a818501611836565b908201526101208381013583811115611e6257600080fd5b611e6e88828701611a0b565b91830191909152506101409283013592810192909252509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611f1b57611f1b611ebb565b5060010190565b60008060408385031215611f3557600080fd5b505080516020909101519092909150565b808201808211156110e1576110e1611ebb565b600060208284031215611f6b57600080fd5b5051919050565b818103818111156110e1576110e1611ebb565b60005b83811015611fa0578181015183820152602001611f88565b50506000910152565b60008151808452611fc1816020860160208601611f85565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815261201a60208201835173ffffffffffffffffffffffffffffffffffffffff169052565b60006020830151612043604084018273ffffffffffffffffffffffffffffffffffffffff169052565b50604083015173ffffffffffffffffffffffffffffffffffffffff811660608401525060608301516080830152608083015160a083015260a083015160c083015260c083015161209760e084018215159052565b5060e08301516101006120c18185018373ffffffffffffffffffffffffffffffffffffffff169052565b84015190506101206120ea8482018373ffffffffffffffffffffffffffffffffffffffff169052565b80850151915050610160610140818186015261210a610180860184611fa9565b9501519301929092525090919050565b60a0808252865190820181905260009060209060c0840190828a01845b8281101561216957815173ffffffffffffffffffffffffffffffffffffffff1684529284019290840190600101612137565b5050508381038285015287518082528883019183019060005b8181101561219e57835183529284019291840191600101612182565b505087604086015284810360608601526121b88188611fa9565b9250505082810360808401526121ce8185611fa9565b98975050505050505050565b600082516121ec818460208701611f85565b9190910192915050565b60006020828403121561220857600080fd5b81516122138161185f565b9392505050565b6020815260006110de6020830184611fa956fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220d6c6169b3d15a024be52f3cb9015a1b461757f5d24a4f7f1b191186322f30d6264736f6c63430008150033",
  "deployedBytecode": "0x6080604052600436106100c05760003560e01c8063920f5c8411610074578063edbd76681161004e578063edbd766814610255578063f2fde38b14610275578063fd826f601461029557600080fd5b8063920f5c84146101d9578063a734f06e146101f9578063ad5c46481461022157600080fd5b806376ca658a116100a557806376ca658a1461013357806382bc4aaf1461018c5780638da5cb5b146101ac57600080fd5b806329e31bdd146100cc5780633f221521146100ee57600080fd5b366100c757005b600080fd5b3480156100d857600080fd5b506100ec6100e736600461187b565b6102b5565b005b3480156100fa57600080fd5b5061011e6101093660046118b2565b60016020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b34801561013f57600080fd5b506101677f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161012a565b34801561019857600080fd5b506100ec6101a7366004611a99565b6103ba565b3480156101b857600080fd5b506000546101679073ffffffffffffffffffffffffffffffffffffffff1681565b3480156101e557600080fd5b5061011e6101f4366004611bba565b61049b565b34801561020557600080fd5b5061016773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b34801561022d57600080fd5b506101677f000000000000000000000000000000000000000000000000000000000000000081565b34801561026157600080fd5b506100ec610270366004611cbe565b610b1c565b34801561028157600080fd5b506100ec6102903660046118b2565b610d3f565b3480156102a157600080fd5b506100ec6102b0366004611d88565b610e30565b60005473ffffffffffffffffffffffffffffffffffffffff16331461033b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a4544000000000000000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821660008181526001602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915590519092917fd74bdcde9b66b7d08a366a43b11a78f3c8307dfeeb0a7741005200bfedfe933f91a35050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461043b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610332565b60005b82518110156104965761048383828151811061045c5761045c611e8c565b602002602001015183838151811061047657610476611e8c565b60200260200101516110b9565b508061048e81611eea565b91505061043e565b505050565b60003373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461050c576040517f74bf188c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8416301461055b576040517f74bf188c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061056983850185611d88565b9050600073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff16826040015173ffffffffffffffffffffffffffffffffffffffff161461061957815160408301516105e39173ffffffffffffffffffffffffffffffffffffffff9091169060006110e7565b8151608083015160408401516106119273ffffffffffffffffffffffffffffffffffffffff909116916110e7565b5060006106c7565b60808201516040517f2e1a7d4d00000000000000000000000000000000000000000000000000000000815260048101919091527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690632e1a7d4d90602401600060405180830381600087803b1580156106a757600080fd5b505af11580156106bb573d6000803e3d6000fd5b50505050816080015190505b8151608083015160a084015160c08501516040517f8433ea220000000000000000000000000000000000000000000000000000000081526004810193909352602483019190915230604483015215156064820152600091829173ffffffffffffffffffffffffffffffffffffffff90911690638433ea22908590608401604080518083038185885af1158015610761573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906107869190611f22565b6020860151919350915073ffffffffffffffffffffffffffffffffffffffff1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14610836576107f58461010001516000866020015173ffffffffffffffffffffffffffffffffffffffff166110e79092919063ffffffff16565b61082d8461010001518560600151866020015173ffffffffffffffffffffffffffffffffffffffff166110e79092919063ffffffff16565b6000925061083e565b836060015192505b6108888460e00151856101200151856040518060400160405280600c81526020017f537761703a206661696c656400000000000000000000000000000000000000008152506112e7565b508351604080518381526020810185905273ffffffffffffffffffffffffffffffffffffffff909216917f09c223cfcd8c93e245f558f5f8de755fc0930fd9bc257441155ef5d54a170e0f910160405180910390a25050506000878760008181106108f5576108f5611e8c565b905060200201358a8a600081811061090f5761090f611e8c565b905060200201356109209190611f46565b61092b90600a611f46565b905073eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff16826040015173ffffffffffffffffffffffffffffffffffffffff1603610ac0576040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015610a05573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a299190611f59565b905081811015610abe5773ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663d0e30db0610a798385611f72565b6040518263ffffffff1660e01b81526004016000604051808303818588803b158015610aa457600080fd5b505af1158015610ab8573d6000803e3d6000fd5b50505050505b505b610b0a33828e8e6000818110610ad857610ad8611e8c565b9050602002016020810190610aed91906118b2565b73ffffffffffffffffffffffffffffffffffffffff169190611402565b5060019b9a5050505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b9d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610332565b60005b8251811015610d395773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff16838281518110610be657610be6611e8c565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1603610c3157610c2c84838381518110610c1f57610c1f611e8c565b6020026020010151611458565b610c8e565b610c8e84838381518110610c4757610c47611e8c565b6020026020010151858481518110610c6157610c61611e8c565b602002602001015173ffffffffffffffffffffffffffffffffffffffff166114029092919063ffffffff16565b828181518110610ca057610ca0611e8c565b602002602001015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb848481518110610d0857610d08611e8c565b6020026020010151604051610d1f91815260200190565b60405180910390a380610d3181611eea565b915050610ba0565b50505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610dc0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610332565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081178255604051909133917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b3360009081526001602052604090205460ff16158015610e68575060005473ffffffffffffffffffffffffffffffffffffffff163314155b15610e9f576040517f74bf188c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408051600180825281830190925260009160208083019080368337505060408051600180825281830190925292935060009291506020808301908036833701905050604084015190915073ffffffffffffffffffffffffffffffffffffffff1673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14610f24578260400151610f46565b7f00000000000000000000000000000000000000000000000000000000000000005b82600081518110610f5957610f59611e8c565b602002602001019073ffffffffffffffffffffffffffffffffffffffff16908173ffffffffffffffffffffffffffffffffffffffff1681525050826080015181600081518110610fab57610fab611e8c565b602002602001018181525050600083604051602001610fca9190611ff3565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282526101408701516000845260208401928390527f095627e900000000000000000000000000000000000000000000000000000000909252925073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169163095627e991611081918791879187906024810161211a565b600060405180830381600087803b15801561109b57600080fd5b505af11580156110af573d6000803e3d6000fd5b5050505050505050565b60606110de838360405180606001604052806027815260200161222e602791396115b2565b90505b92915050565b80158061118757506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e90604401602060405180830381865afa158015611161573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111859190611f59565b155b611213576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e6365000000000000000000006064820152608401610332565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526104969084907f095ea7b300000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152611637565b606082471015611379576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610332565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516113a291906121da565b60006040518083038185875af1925050503d80600081146113df576040519150601f19603f3d011682016040523d82523d6000602084013e6113e4565b606091505b50915091506113f587838387611743565b925050505b949350505050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526104969084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401611265565b804710156114c2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e63650000006044820152606401610332565b60008273ffffffffffffffffffffffffffffffffffffffff168260405160006040518083038185875af1925050503d806000811461151c576040519150601f19603f3d011682016040523d82523d6000602084013e611521565b606091505b5050905080610496576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d617920686176652072657665727465640000000000006064820152608401610332565b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516115dc91906121da565b600060405180830381855af49150503d8060008114611617576040519150601f19603f3d011682016040523d82523d6000602084013e61161c565b606091505b509150915061162d86838387611743565b9695505050505050565b6000611699826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166117e39092919063ffffffff16565b80519091501561049657808060200190518101906116b791906121f6565b610496576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610332565b606083156117d95782516000036117d25773ffffffffffffffffffffffffffffffffffffffff85163b6117d2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610332565b50816113fa565b6113fa83836117f2565b60606113fa84846000856112e7565b8151156118025781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610332919061221a565b803573ffffffffffffffffffffffffffffffffffffffff8116811461185a57600080fd5b919050565b801515811461186d57600080fd5b50565b803561185a8161185f565b6000806040838503121561188e57600080fd5b61189783611836565b915060208301356118a78161185f565b809150509250929050565b6000602082840312156118c457600080fd5b6110de82611836565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610160810167ffffffffffffffff81118282101715611920576119206118cd565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561196d5761196d6118cd565b604052919050565b600067ffffffffffffffff82111561198f5761198f6118cd565b5060051b60200190565b600082601f8301126119aa57600080fd5b813560206119bf6119ba83611975565b611926565b82815260059290921b840181019181810190868411156119de57600080fd5b8286015b84811015611a00576119f381611836565b83529183019183016119e2565b509695505050505050565b600082601f830112611a1c57600080fd5b813567ffffffffffffffff811115611a3657611a366118cd565b611a6760207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601611926565b818152846020838601011115611a7c57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215611aac57600080fd5b823567ffffffffffffffff80821115611ac457600080fd5b611ad086838701611999565b9350602091508185013581811115611ae757600080fd5b8501601f81018713611af857600080fd5b8035611b066119ba82611975565b81815260059190911b82018401908481019089831115611b2557600080fd5b8584015b83811015611b5d57803586811115611b415760008081fd5b611b4f8c8983890101611a0b565b845250918601918601611b29565b508096505050505050509250929050565b60008083601f840112611b8057600080fd5b50813567ffffffffffffffff811115611b9857600080fd5b6020830191508360208260051b8501011115611bb357600080fd5b9250929050565b600080600080600080600080600060a08a8c031215611bd857600080fd5b893567ffffffffffffffff80821115611bf057600080fd5b611bfc8d838e01611b6e565b909b50995060208c0135915080821115611c1557600080fd5b611c218d838e01611b6e565b909950975060408c0135915080821115611c3a57600080fd5b611c468d838e01611b6e565b9097509550859150611c5a60608d01611836565b945060808c0135915080821115611c7057600080fd5b818c0191508c601f830112611c8457600080fd5b813581811115611c9357600080fd5b8d6020828501011115611ca557600080fd5b6020830194508093505050509295985092959850929598565b600080600060608486031215611cd357600080fd5b611cdc84611836565b925060208085013567ffffffffffffffff80821115611cfa57600080fd5b611d0688838901611999565b94506040870135915080821115611d1c57600080fd5b508501601f81018713611d2e57600080fd5b8035611d3c6119ba82611975565b81815260059190911b82018301908381019089831115611d5b57600080fd5b928401925b82841015611d7957833582529284019290840190611d60565b80955050505050509250925092565b600060208284031215611d9a57600080fd5b813567ffffffffffffffff80821115611db257600080fd5b908301906101608286031215611dc757600080fd5b611dcf6118fc565b611dd883611836565b8152611de660208401611836565b6020820152611df760408401611836565b6040820152606083013560608201526080830135608082015260a083013560a0820152611e2660c08401611870565b60c0820152611e3760e08401611836565b60e0820152610100611e4a818501611836565b908201526101208381013583811115611e6257600080fd5b611e6e88828701611a0b565b91830191909152506101409283013592810192909252509392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611f1b57611f1b611ebb565b5060010190565b60008060408385031215611f3557600080fd5b505080516020909101519092909150565b808201808211156110e1576110e1611ebb565b600060208284031215611f6b57600080fd5b5051919050565b818103818111156110e1576110e1611ebb565b60005b83811015611fa0578181015183820152602001611f88565b50506000910152565b60008151808452611fc1816020860160208601611f85565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815261201a60208201835173ffffffffffffffffffffffffffffffffffffffff169052565b60006020830151612043604084018273ffffffffffffffffffffffffffffffffffffffff169052565b50604083015173ffffffffffffffffffffffffffffffffffffffff811660608401525060608301516080830152608083015160a083015260a083015160c083015260c083015161209760e084018215159052565b5060e08301516101006120c18185018373ffffffffffffffffffffffffffffffffffffffff169052565b84015190506101206120ea8482018373ffffffffffffffffffffffffffffffffffffffff169052565b80850151915050610160610140818186015261210a610180860184611fa9565b9501519301929092525090919050565b60a0808252865190820181905260009060209060c0840190828a01845b8281101561216957815173ffffffffffffffffffffffffffffffffffffffff1684529284019290840190600101612137565b5050508381038285015287518082528883019183019060005b8181101561219e57835183529284019291840191600101612182565b505087604086015284810360608601526121b88188611fa9565b9250505082810360808401526121ce8185611fa9565b98975050505050505050565b600082516121ec818460208701611f85565b9190910192915050565b60006020828403121561220857600080fd5b81516122138161185f565b9392505050565b6020815260006110de6020830184611fa956fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220d6c6169b3d15a024be52f3cb9015a1b461757f5d24a4f7f1b191186322f30d6264736f6c63430008150033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 68672,
        "contract": "contracts/periphery/liquidation/main.sol:VaultT1Liquidator",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 29966,
        "contract": "contracts/periphery/liquidation/main.sol:VaultT1Liquidator",
        "label": "rebalancer",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}