{
  "address": "0xfE1CBE632855e279601EaAF58D3cB552271BfDF5",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FACTORY",
      "outputs": [
        {
          "internalType": "contract IFluidDexFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dex_",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "swap0to1_",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin_",
          "type": "uint256"
        }
      ],
      "name": "estimateSwapIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut_",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dex_",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "swap0to1_",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amountOut_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax_",
          "type": "uint256"
        }
      ],
      "name": "estimateSwapOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPoolAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "pools_",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPools",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token0_",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1_",
              "type": "address"
            }
          ],
          "internalType": "struct Structs.Pool[]",
          "name": "pools_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPoolsReserves",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token0_",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1_",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "token0RealReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1RealReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token0ImaginaryReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1ImaginaryReserves",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IFluidDexT1.CollateralReserves",
              "name": "collateralReserves",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "token0Debt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1Debt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token0RealReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1RealReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token0ImaginaryReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1ImaginaryReserves",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IFluidDexT1.DebtReserves",
              "name": "debtReserves",
              "type": "tuple"
            }
          ],
          "internalType": "struct Structs.PoolWithReserves[]",
          "name": "poolsReserves_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dex_",
          "type": "address"
        }
      ],
      "name": "getDexCollateralReserves",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "token0RealReserves",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token1RealReserves",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token0ImaginaryReserves",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token1ImaginaryReserves",
              "type": "uint256"
            }
          ],
          "internalType": "struct IFluidDexT1.CollateralReserves",
          "name": "reserves_",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dex_",
          "type": "address"
        }
      ],
      "name": "getDexDebtReserves",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "token0Debt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token1Debt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token0RealReserves",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token1RealReserves",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token0ImaginaryReserves",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token1ImaginaryReserves",
              "type": "uint256"
            }
          ],
          "internalType": "struct IFluidDexT1.DebtReserves",
          "name": "reserves_",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dex_",
          "type": "address"
        }
      ],
      "name": "getDexPricesAndExchangePrices",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lastStoredPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "centerPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperRange",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lowerRange",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "geometricMean",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyToken0ExchangePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowToken0ExchangePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyToken1ExchangePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowToken1ExchangePrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct IFluidDexT1.PricesAndExchangePrice",
          "name": "pex_",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId_",
          "type": "uint256"
        }
      ],
      "name": "getPool",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token0_",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1_",
              "type": "address"
            }
          ],
          "internalType": "struct Structs.Pool",
          "name": "pool_",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId_",
          "type": "uint256"
        }
      ],
      "name": "getPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool_",
          "type": "address"
        }
      ],
      "name": "getPoolConstantsView",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dexId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "liquidity",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "factory",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "shift",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "admin",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "colOperations",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "debtOperations",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "perfectOperationsAndOracle",
                  "type": "address"
                }
              ],
              "internalType": "struct IFluidDexT1.Implementations",
              "name": "implementations",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "deployerContract",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "supplyToken0Slot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "borrowToken0Slot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "supplyToken1Slot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "borrowToken1Slot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "exchangePriceToken0Slot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "exchangePriceToken1Slot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "oracleMapping",
              "type": "uint256"
            }
          ],
          "internalType": "struct IFluidDexT1.ConstantViews",
          "name": "constantsView_",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool_",
          "type": "address"
        }
      ],
      "name": "getPoolConstantsView2",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "token0NumeratorPrecision",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token0DenominatorPrecision",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token1NumeratorPrecision",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token1DenominatorPrecision",
              "type": "uint256"
            }
          ],
          "internalType": "struct IFluidDexT1.ConstantViews2",
          "name": "constantsView2_",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool_",
          "type": "address"
        }
      ],
      "name": "getPoolReserves",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token0_",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1_",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "token0RealReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1RealReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token0ImaginaryReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1ImaginaryReserves",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IFluidDexT1.CollateralReserves",
              "name": "collateralReserves",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "token0Debt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1Debt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token0RealReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1RealReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token0ImaginaryReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1ImaginaryReserves",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IFluidDexT1.DebtReserves",
              "name": "debtReserves",
              "type": "tuple"
            }
          ],
          "internalType": "struct Structs.PoolWithReserves",
          "name": "poolReserves_",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool_",
          "type": "address"
        }
      ],
      "name": "getPoolTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "token0_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "pools_",
          "type": "address[]"
        }
      ],
      "name": "getPoolsReserves",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token0_",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1_",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "token0RealReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1RealReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token0ImaginaryReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1ImaginaryReserves",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IFluidDexT1.CollateralReserves",
              "name": "collateralReserves",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "token0Debt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1Debt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token0RealReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1RealReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token0ImaginaryReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1ImaginaryReserves",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IFluidDexT1.DebtReserves",
              "name": "debtReserves",
              "type": "tuple"
            }
          ],
          "internalType": "struct Structs.PoolWithReserves[]",
          "name": "poolsReserves_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalPools",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2dcf6745fdb1d32a884ec8e4aa7007e6f749a5f3111ecb979ec331add60fb297",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x0Ed35B1609Ec45c7079E80d11149a52717e4859A",
    "contractAddress": null,
    "transactionIndex": 1,
    "gasUsed": "2073859",
    "logsBloom": "0x
    "blockHash": "0x51cd59ee3a74062ab904ac191cbedf1563573dd4d2c2b2598196c83df982f24d",
    "transactionHash": "0x2dcf6745fdb1d32a884ec8e4aa7007e6f749a5f3111ecb979ec331add60fb297",
    "logs": [],
    "blockNumber": 20790223,
    "cumulativeGasUsed": "2278339",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x93DD426446B5370F094a1e31f19991AAA6Ac0bE0"
  ],
  "numDeployments": 2,
  "solcInputHash": "c9202e70634b5da796ab11d7427507e3",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FACTORY\",\"outputs\":[{\"internalType\":\"contract IFluidDexFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dex_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"swap0to1_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin_\",\"type\":\"uint256\"}],\"name\":\"estimateSwapIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut_\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dex_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"swap0to1_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountOut_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax_\",\"type\":\"uint256\"}],\"name\":\"estimateSwapOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPoolAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"pools_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPools\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1_\",\"type\":\"address\"}],\"internalType\":\"struct Structs.Pool[]\",\"name\":\"pools_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPoolsReserves\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"token0RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0ImaginaryReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1ImaginaryReserves\",\"type\":\"uint256\"}],\"internalType\":\"struct IFluidDexT1.CollateralReserves\",\"name\":\"collateralReserves\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"token0Debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0ImaginaryReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1ImaginaryReserves\",\"type\":\"uint256\"}],\"internalType\":\"struct IFluidDexT1.DebtReserves\",\"name\":\"debtReserves\",\"type\":\"tuple\"}],\"internalType\":\"struct Structs.PoolWithReserves[]\",\"name\":\"poolsReserves_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dex_\",\"type\":\"address\"}],\"name\":\"getDexCollateralReserves\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"token0RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0ImaginaryReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1ImaginaryReserves\",\"type\":\"uint256\"}],\"internalType\":\"struct IFluidDexT1.CollateralReserves\",\"name\":\"reserves_\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dex_\",\"type\":\"address\"}],\"name\":\"getDexDebtReserves\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"token0Debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0ImaginaryReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1ImaginaryReserves\",\"type\":\"uint256\"}],\"internalType\":\"struct IFluidDexT1.DebtReserves\",\"name\":\"reserves_\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dex_\",\"type\":\"address\"}],\"name\":\"getDexPricesAndExchangePrices\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lastStoredPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"centerPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperRange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lowerRange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"geometricMean\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyToken0ExchangePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowToken0ExchangePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyToken1ExchangePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowToken1ExchangePrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IFluidDexT1.PricesAndExchangePrice\",\"name\":\"pex_\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId_\",\"type\":\"uint256\"}],\"name\":\"getPool\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1_\",\"type\":\"address\"}],\"internalType\":\"struct Structs.Pool\",\"name\":\"pool_\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId_\",\"type\":\"uint256\"}],\"name\":\"getPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"name\":\"getPoolConstantsView\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dexId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"liquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"shift\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"colOperations\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtOperations\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"perfectOperationsAndOracle\",\"type\":\"address\"}],\"internalType\":\"struct IFluidDexT1.Implementations\",\"name\":\"implementations\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"deployerContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"supplyToken0Slot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"borrowToken0Slot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"supplyToken1Slot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"borrowToken1Slot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"exchangePriceToken0Slot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"exchangePriceToken1Slot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"oracleMapping\",\"type\":\"uint256\"}],\"internalType\":\"struct IFluidDexT1.ConstantViews\",\"name\":\"constantsView_\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"name\":\"getPoolConstantsView2\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"token0NumeratorPrecision\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0DenominatorPrecision\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1NumeratorPrecision\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1DenominatorPrecision\",\"type\":\"uint256\"}],\"internalType\":\"struct IFluidDexT1.ConstantViews2\",\"name\":\"constantsView2_\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"name\":\"getPoolReserves\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"token0RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0ImaginaryReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1ImaginaryReserves\",\"type\":\"uint256\"}],\"internalType\":\"struct IFluidDexT1.CollateralReserves\",\"name\":\"collateralReserves\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"token0Debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0ImaginaryReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1ImaginaryReserves\",\"type\":\"uint256\"}],\"internalType\":\"struct IFluidDexT1.DebtReserves\",\"name\":\"debtReserves\",\"type\":\"tuple\"}],\"internalType\":\"struct Structs.PoolWithReserves\",\"name\":\"poolReserves_\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"name\":\"getPoolTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token0_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pools_\",\"type\":\"address[]\"}],\"name\":\"getPoolsReserves\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1_\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"token0RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0ImaginaryReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1ImaginaryReserves\",\"type\":\"uint256\"}],\"internalType\":\"struct IFluidDexT1.CollateralReserves\",\"name\":\"collateralReserves\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"token0Debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0ImaginaryReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1ImaginaryReserves\",\"type\":\"uint256\"}],\"internalType\":\"struct IFluidDexT1.DebtReserves\",\"name\":\"debtReserves\",\"type\":\"tuple\"}],\"internalType\":\"struct Structs.PoolWithReserves[]\",\"name\":\"poolsReserves_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"estimateSwapIn(address,bool,uint256,uint256)\":{\"params\":{\"amountIn_\":\"The exact amount of input tokens to swap\",\"amountOutMin_\":\"The minimum amount of output tokens the user is willing to accept\",\"dex_\":\"Dex pool\",\"swap0to1_\":\"Direction of swap. If true, swaps token0 for token1; if false, swaps token1 for token0\"},\"returns\":{\"amountOut_\":\"The amount of output tokens received from the swap\"}},\"estimateSwapOut(address,bool,uint256,uint256)\":{\"params\":{\"amountInMax_\":\"Maximum amount of tokens to swap in\",\"amountOut_\":\"The exact amount of tokens to receive after swap\",\"dex_\":\"Dex pool\",\"swap0to1_\":\"Direction of swap. If true, swaps token0 for token1; if false, swaps token1 for token0\"},\"returns\":{\"amountIn_\":\"The amount of input tokens used for the swap\"}},\"getAllPoolAddresses()\":{\"returns\":{\"pools_\":\"An array containing all Pool addresses\"}},\"getAllPools()\":{\"returns\":{\"pools_\":\"An array containing all Pool data\"}},\"getAllPoolsReserves()\":{\"details\":\"expected to be called via callStatic\",\"returns\":{\"poolsReserves_\":\"An array containing all Pool data with reserves\"}},\"getDexCollateralReserves(address)\":{\"details\":\"expected to be called via callStatic\",\"params\":{\"dex_\":\"The address of the DEX\"},\"returns\":{\"reserves_\":\"A struct containing collateral reserve information\"}},\"getDexDebtReserves(address)\":{\"details\":\"expected to be called via callStatic\",\"params\":{\"dex_\":\"The address of the DEX\"},\"returns\":{\"reserves_\":\"A struct containing debt reserve information\"}},\"getDexPricesAndExchangePrices(address)\":{\"details\":\"expected to be called via callStatic\",\"params\":{\"dex_\":\"The address of the DEX\"},\"returns\":{\"pex_\":\"A struct containing prices and exchange prices\"}},\"getPool(uint256)\":{\"params\":{\"poolId_\":\"The ID of the Pool\"},\"returns\":{\"pool_\":\"The Pool data\"}},\"getPoolAddress(uint256)\":{\"params\":{\"poolId_\":\"The ID of the Pool\"},\"returns\":{\"pool_\":\"The address of the Pool\"}},\"getPoolReserves(address)\":{\"details\":\"expected to be called via callStatic\",\"params\":{\"pool_\":\"The Pool address\"},\"returns\":{\"poolReserves_\":\"The Pool data with reserves\"}},\"getPoolTokens(address)\":{\"params\":{\"pool_\":\"The address of the Pool\"},\"returns\":{\"token0_\":\"The address of token0 in the Pool\",\"token1_\":\"The address of token1 in the Pool\"}},\"getPoolsReserves(address[])\":{\"details\":\"expected to be called via callStatic\",\"params\":{\"pools_\":\"The array of Pool addresses\"},\"returns\":{\"poolsReserves_\":\"An array containing all Pool data with reserves\"}},\"getTotalPools()\":{\"returns\":{\"_0\":\"The total number of Pools\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"estimateSwapIn(address,bool,uint256,uint256)\":{\"notice\":\"estimates swap IN tokens execution\"},\"estimateSwapOut(address,bool,uint256,uint256)\":{\"notice\":\"estimates swap OUT tokens execution\"},\"getAllPoolAddresses()\":{\"notice\":\"Get an array of all Pool addresses\"},\"getAllPools()\":{\"notice\":\"Get an array of all Pool addresses and their token addresses\"},\"getAllPoolsReserves()\":{\"notice\":\"Get an array of all Pool addresses, their token addresses, collateral reserves, and debt reserves\"},\"getDexCollateralReserves(address)\":{\"notice\":\"Get the collateral reserves for a DEX\"},\"getDexDebtReserves(address)\":{\"notice\":\"Get the debt reserves for a DEX\"},\"getDexPricesAndExchangePrices(address)\":{\"notice\":\"Get the prices and exchange prices for a DEX\"},\"getPool(uint256)\":{\"notice\":\"Get a Pool's address and its token addresses\"},\"getPoolAddress(uint256)\":{\"notice\":\"Get the address of a Pool given its ID\"},\"getPoolConstantsView(address)\":{\"notice\":\"returns all Pool constants\"},\"getPoolConstantsView2(address)\":{\"notice\":\"returns all Pool constants 2\"},\"getPoolReserves(address)\":{\"notice\":\"Get the token addresses, collateral reserves, and debt reserves for a given Pool address\"},\"getPoolTokens(address)\":{\"notice\":\"Get the addresses of the tokens in a Pool\"},\"getPoolsReserves(address[])\":{\"notice\":\"Get an array of Pool addresses, their token addresses, collateral reserves, and debt reserves for a given array of Pool addresses\"},\"getTotalPools()\":{\"notice\":\"Get the total number of Pools\"}},\"notice\":\"Fluid Dex Reserves resolver Implements various view-only methods to give easy access to Dex protocol reserves data.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/resolvers/dexReserves/main.sol\":\"FluidDexReservesResolver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000000},\"remappings\":[]},\"sources\":{\"contracts/libraries/addressCalcs.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\n/// @notice implements calculation of address for contracts deployed through CREATE.\\n/// Accepts contract deployed from which address & nonce\\nlibrary AddressCalcs {\\n\\n    /// @notice                         Computes the address of a contract based\\n    /// @param deployedFrom_            Address from which the contract was deployed\\n    /// @param nonce_                   Nonce at which the contract was deployed\\n    /// @return contract_               Address of deployed contract\\n    function addressCalc(address deployedFrom_, uint nonce_) internal pure returns (address contract_) {\\n        // @dev based on https://ethereum.stackexchange.com/a/61413\\n\\n        // nonce of smart contract always starts with 1. so, with nonce 0 there won't be any deployment\\n        // hence, nonce of vault deployment starts with 1.\\n        bytes memory data;\\n        if (nonce_ == 0x00) {\\n            return address(0);\\n        } else if (nonce_ <= 0x7f) {\\n            data = abi.encodePacked(bytes1(0xd6), bytes1(0x94), deployedFrom_, uint8(nonce_));\\n        } else if (nonce_ <= 0xff) {\\n            data = abi.encodePacked(bytes1(0xd7), bytes1(0x94), deployedFrom_, bytes1(0x81), uint8(nonce_));\\n        } else if (nonce_ <= 0xffff) {\\n            data = abi.encodePacked(bytes1(0xd8), bytes1(0x94), deployedFrom_, bytes1(0x82), uint16(nonce_));\\n        } else if (nonce_ <= 0xffffff) {\\n            data = abi.encodePacked(bytes1(0xd9), bytes1(0x94), deployedFrom_, bytes1(0x83), uint24(nonce_));\\n        } else {\\n            data = abi.encodePacked(bytes1(0xda), bytes1(0x94), deployedFrom_, bytes1(0x84), uint32(nonce_));\\n        }\\n\\n        return address(uint160(uint256(keccak256(data))));\\n    }\\n\\n}\",\"keccak256\":\"0xca389bcfef035463ff43939ac5eccab07ab74cbb053e201541f9bcd846b3105a\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/bytesSliceAndConcat.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nlibrary BytesSliceAndConcat {\\n    // @dev taken from https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol\\n    function bytesConcat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    ) internal pure returns (bytes memory tempBytes) {\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31) // Round down to the nearest 32 bytes.\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    // @dev taken from https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol\\n    function bytesSlice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory tempBytes) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n}\\n\",\"keccak256\":\"0x42966896926a24dc7645ebf4679e6d701cb991144ef4d710d87738165d4024c7\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/dexSlotsLink.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\n/// @notice library that helps in reading / working with storage slot data of Fluid Dex.\\n/// @dev as all data for Fluid Dex is internal, any data must be fetched directly through manual\\n/// slot reading through this library or, if gas usage is less important, through the FluidDexResolver.\\nlibrary DexSlotsLink {\\n    /// @dev storage slot for variables at Dex\\n    uint256 internal constant DEX_VARIABLES_SLOT = 0;\\n    /// @dev storage slot for variables2 at Dex\\n    uint256 internal constant DEX_VARIABLES2_SLOT = 1;\\n    /// @dev storage slot for total supply shares at Dex\\n    uint256 internal constant DEX_TOTAL_SUPPLY_SHARES_SLOT = 2;\\n    /// @dev storage slot for user supply mapping at Dex\\n    uint256 internal constant DEX_USER_SUPPLY_MAPPING_SLOT = 3;\\n    /// @dev storage slot for total borrow shares at Dex\\n    uint256 internal constant DEX_TOTAL_BORROW_SHARES_SLOT = 4;\\n    /// @dev storage slot for user borrow mapping at Dex\\n    uint256 internal constant DEX_USER_BORROW_MAPPING_SLOT = 5;\\n    /// @dev storage slot for oracle mapping at Dex\\n    uint256 internal constant DEX_ORACLE_MAPPING_SLOT = 6;\\n    /// @dev storage slot for range and threshold shifts at Dex\\n    uint256 internal constant DEX_RANGE_THRESHOLD_SHIFTS_SLOT = 7;\\n    /// @dev storage slot for center price shift at Dex\\n    uint256 internal constant DEX_CENTER_PRICE_SHIFT_SLOT = 8;\\n\\n    // --------------------------------\\n    // @dev stacked uint256 storage slots bits position data for each:\\n\\n    // UserSupplyData\\n    uint256 internal constant BITS_USER_SUPPLY_ALLOWED = 0;\\n    uint256 internal constant BITS_USER_SUPPLY_AMOUNT = 1;\\n    uint256 internal constant BITS_USER_SUPPLY_PREVIOUS_WITHDRAWAL_LIMIT = 65;\\n    uint256 internal constant BITS_USER_SUPPLY_LAST_UPDATE_TIMESTAMP = 129;\\n    uint256 internal constant BITS_USER_SUPPLY_EXPAND_PERCENT = 162;\\n    uint256 internal constant BITS_USER_SUPPLY_EXPAND_DURATION = 176;\\n    uint256 internal constant BITS_USER_SUPPLY_BASE_WITHDRAWAL_LIMIT = 200;\\n\\n    // UserBorrowData\\n    uint256 internal constant BITS_USER_BORROW_ALLOWED = 0;\\n    uint256 internal constant BITS_USER_BORROW_AMOUNT = 1;\\n    uint256 internal constant BITS_USER_BORROW_PREVIOUS_BORROW_LIMIT = 65;\\n    uint256 internal constant BITS_USER_BORROW_LAST_UPDATE_TIMESTAMP = 129;\\n    uint256 internal constant BITS_USER_BORROW_EXPAND_PERCENT = 162;\\n    uint256 internal constant BITS_USER_BORROW_EXPAND_DURATION = 176;\\n    uint256 internal constant BITS_USER_BORROW_BASE_BORROW_LIMIT = 200;\\n    uint256 internal constant BITS_USER_BORROW_MAX_BORROW_LIMIT = 218;\\n\\n    // --------------------------------\\n\\n    /// @notice Calculating the slot ID for Dex contract for single mapping at `slot_` for `key_`\\n    function calculateMappingStorageSlot(uint256 slot_, address key_) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(key_, slot_));\\n    }\\n\\n    /// @notice Calculating the slot ID for Dex contract for double mapping at `slot_` for `key1_` and `key2_`\\n    function calculateDoubleMappingStorageSlot(\\n        uint256 slot_,\\n        address key1_,\\n        address key2_\\n    ) internal pure returns (bytes32) {\\n        bytes32 intermediateSlot_ = keccak256(abi.encode(key1_, slot_));\\n        return keccak256(abi.encode(key2_, intermediateSlot_));\\n    }\\n}\\n\",\"keccak256\":\"0xf1d6550d83fb0155a26655234922c9bdf4a1bbcf7a3ca767e9123d367a795307\",\"license\":\"BUSL-1.1\"},\"contracts/periphery/resolvers/dexReserves/main.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { AddressCalcs } from \\\"../../../libraries/addressCalcs.sol\\\";\\nimport { DexSlotsLink } from \\\"../../../libraries/dexSlotsLink.sol\\\";\\nimport { BytesSliceAndConcat } from \\\"../../../libraries/bytesSliceAndConcat.sol\\\";\\nimport { IFluidDexT1 } from \\\"../../../protocols/dex/interfaces/iDexT1.sol\\\";\\nimport { Variables } from \\\"./variables.sol\\\";\\nimport { Structs } from \\\"./structs.sol\\\";\\n\\n/// @title DexFactoryViews\\n/// @notice Abstract contract providing view functions for DEX factory-related operations\\nabstract contract DexFactoryViews is Variables {\\n    /// @notice Get the address of a Pool given its ID\\n    /// @param poolId_ The ID of the Pool\\n    /// @return pool_ The address of the Pool\\n    function getPoolAddress(uint256 poolId_) public view returns (address pool_) {\\n        return AddressCalcs.addressCalc(address(FACTORY), poolId_);\\n    }\\n\\n    /// @notice Get the total number of Pools\\n    /// @return The total number of Pools\\n    function getTotalPools() public view returns (uint) {\\n        return FACTORY.totalDexes();\\n    }\\n\\n    /// @notice Get an array of all Pool addresses\\n    /// @return pools_ An array containing all Pool addresses\\n    function getAllPoolAddresses() public view returns (address[] memory pools_) {\\n        uint totalPools_ = getTotalPools();\\n        pools_ = new address[](totalPools_);\\n        for (uint i = 0; i < totalPools_; i++) {\\n            pools_[i] = getPoolAddress((i + 1));\\n        }\\n    }\\n}\\n\\n/// @title DexPublicViews\\n/// @notice Abstract contract providing view functions for DEX public data\\nabstract contract DexPublicViews {\\n    /// @notice Get the prices and exchange prices for a DEX\\n    /// @param dex_ The address of the DEX\\n    /// @return pex_ A struct containing prices and exchange prices\\n    /// @dev expected to be called via callStatic\\n    function getDexPricesAndExchangePrices(\\n        address dex_\\n    ) public returns (IFluidDexT1.PricesAndExchangePrice memory pex_) {\\n        try IFluidDexT1(dex_).getPricesAndExchangePrices() {} catch (bytes memory lowLevelData_) {\\n            bytes4 errorSelector_;\\n            assembly {\\n                // Extract the selector from the error data\\n                errorSelector_ := mload(add(lowLevelData_, 0x20))\\n            }\\n            if (errorSelector_ == IFluidDexT1.FluidDexPricesAndExchangeRates.selector) {\\n                pex_ = abi.decode(\\n                    BytesSliceAndConcat.bytesSlice(lowLevelData_, 4, lowLevelData_.length - 4),\\n                    (IFluidDexT1.PricesAndExchangePrice)\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @notice Get the collateral reserves for a DEX\\n    /// @param dex_ The address of the DEX\\n    /// @return reserves_ A struct containing collateral reserve information\\n    /// @dev expected to be called via callStatic\\n    function getDexCollateralReserves(address dex_) public returns (IFluidDexT1.CollateralReserves memory reserves_) {\\n        uint256 dexVariables2_ = IFluidDexT1(dex_).readFromStorage(bytes32(DexSlotsLink.DEX_VARIABLES2_SLOT));\\n        if ((dexVariables2_ & 1) != 1) {\\n            // smart col not enabled\\n            return IFluidDexT1.CollateralReserves(0, 0, 0, 0);\\n        }\\n\\n        try this.getDexPricesAndExchangePrices(dex_) returns (IFluidDexT1.PricesAndExchangePrice memory pex_) {\\n            try\\n                IFluidDexT1(dex_).getCollateralReserves(\\n                    pex_.geometricMean,\\n                    pex_.upperRange,\\n                    pex_.lowerRange,\\n                    pex_.supplyToken0ExchangePrice,\\n                    pex_.supplyToken1ExchangePrice\\n                )\\n            returns (IFluidDexT1.CollateralReserves memory colReserves_) {\\n                reserves_ = colReserves_;\\n            } catch {\\n                reserves_ = IFluidDexT1.CollateralReserves(0, 0, 0, 0);\\n            }\\n        } catch {\\n            reserves_ = IFluidDexT1.CollateralReserves(0, 0, 0, 0);\\n        }\\n    }\\n\\n    /// @notice Get the debt reserves for a DEX\\n    /// @param dex_ The address of the DEX\\n    /// @return reserves_ A struct containing debt reserve information\\n    /// @dev expected to be called via callStatic\\n    function getDexDebtReserves(address dex_) public returns (IFluidDexT1.DebtReserves memory reserves_) {\\n        uint256 dexVariables2_ = IFluidDexT1(dex_).readFromStorage(bytes32(DexSlotsLink.DEX_VARIABLES2_SLOT));\\n        if ((dexVariables2_ & 2) != 2) {\\n            // smart debt not enabled\\n            return IFluidDexT1.DebtReserves(0, 0, 0, 0, 0, 0);\\n        }\\n\\n        try this.getDexPricesAndExchangePrices(dex_) returns (IFluidDexT1.PricesAndExchangePrice memory pex_) {\\n            try\\n                IFluidDexT1(dex_).getDebtReserves(\\n                    pex_.geometricMean,\\n                    pex_.upperRange,\\n                    pex_.lowerRange,\\n                    pex_.borrowToken0ExchangePrice,\\n                    pex_.borrowToken1ExchangePrice\\n                )\\n            returns (IFluidDexT1.DebtReserves memory debtReserves_) {\\n                reserves_ = debtReserves_;\\n            } catch {\\n                reserves_ = IFluidDexT1.DebtReserves(0, 0, 0, 0, 0, 0);\\n            }\\n        } catch {\\n            reserves_ = IFluidDexT1.DebtReserves(0, 0, 0, 0, 0, 0);\\n        }\\n    }\\n}\\n\\n/// @title DexConstantsViews\\n/// @notice Abstract contract providing view functions for DEX constants\\nabstract contract DexConstantsViews {\\n    /// @notice returns all Pool constants\\n    function getPoolConstantsView(address pool_) public view returns (IFluidDexT1.ConstantViews memory constantsView_) {\\n        return IFluidDexT1(pool_).constantsView();\\n    }\\n\\n    /// @notice returns all Pool constants 2\\n    function getPoolConstantsView2(\\n        address pool_\\n    ) public view returns (IFluidDexT1.ConstantViews2 memory constantsView2_) {\\n        return IFluidDexT1(pool_).constantsView2();\\n    }\\n\\n    /// @notice Get the addresses of the tokens in a Pool\\n    /// @param pool_ The address of the Pool\\n    /// @return token0_ The address of token0 in the Pool\\n    /// @return token1_ The address of token1 in the Pool\\n    function getPoolTokens(address pool_) public view returns (address token0_, address token1_) {\\n        IFluidDexT1.ConstantViews memory constantsView_ = IFluidDexT1(pool_).constantsView();\\n        return (constantsView_.token0, constantsView_.token1);\\n    }\\n}\\n\\nabstract contract DexActionEstimates {\\n    address private constant ADDRESS_DEAD = 0x000000000000000000000000000000000000dEaD;\\n\\n    /// @notice estimates swap IN tokens execution\\n    /// @param dex_ Dex pool\\n    /// @param swap0to1_ Direction of swap. If true, swaps token0 for token1; if false, swaps token1 for token0\\n    /// @param amountIn_ The exact amount of input tokens to swap\\n    /// @param amountOutMin_ The minimum amount of output tokens the user is willing to accept\\n    /// @return amountOut_ The amount of output tokens received from the swap\\n    function estimateSwapIn(\\n        address dex_,\\n        bool swap0to1_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_\\n    ) public payable returns (uint256 amountOut_) {\\n        try IFluidDexT1(dex_).swapIn{ value: msg.value }(swap0to1_, amountIn_, amountOutMin_, ADDRESS_DEAD) {} catch (\\n            bytes memory lowLevelData_\\n        ) {\\n            (amountOut_) = _decodeLowLevelUint1x(lowLevelData_, IFluidDexT1.FluidDexSwapResult.selector);\\n        }\\n    }\\n\\n    /// @notice estimates swap OUT tokens execution\\n    /// @param dex_ Dex pool\\n    /// @param swap0to1_ Direction of swap. If true, swaps token0 for token1; if false, swaps token1 for token0\\n    /// @param amountOut_ The exact amount of tokens to receive after swap\\n    /// @param amountInMax_ Maximum amount of tokens to swap in\\n    /// @return amountIn_ The amount of input tokens used for the swap\\n    function estimateSwapOut(\\n        address dex_,\\n        bool swap0to1_,\\n        uint256 amountOut_,\\n        uint256 amountInMax_\\n    ) public payable returns (uint256 amountIn_) {\\n        try IFluidDexT1(dex_).swapOut{ value: msg.value }(swap0to1_, amountOut_, amountInMax_, ADDRESS_DEAD) {} catch (\\n            bytes memory lowLevelData_\\n        ) {\\n            (amountIn_) = _decodeLowLevelUint1x(lowLevelData_, IFluidDexT1.FluidDexSwapResult.selector);\\n        }\\n    }\\n\\n    function _decodeLowLevelUint1x(\\n        bytes memory lowLevelData_,\\n        bytes4 targetErrorSelector_\\n    ) internal pure returns (uint value1_) {\\n        if (lowLevelData_.length < 36) {\\n            return 0;\\n        }\\n\\n        bytes4 errorSelector_;\\n        assembly {\\n            // Extract the selector from the error data\\n            errorSelector_ := mload(add(lowLevelData_, 0x20))\\n        }\\n        if (errorSelector_ == targetErrorSelector_) {\\n            assembly {\\n                value1_ := mload(add(lowLevelData_, 36))\\n            }\\n        }\\n        // else => values remain 0\\n    }\\n}\\n\\n/// @notice Fluid Dex Reserves resolver\\n/// Implements various view-only methods to give easy access to Dex protocol reserves data.\\ncontract FluidDexReservesResolver is\\n    Variables,\\n    Structs,\\n    DexFactoryViews,\\n    DexConstantsViews,\\n    DexPublicViews,\\n    DexActionEstimates\\n{\\n    constructor(address factory_) Variables(factory_) {}\\n\\n    /// @notice Get a Pool's address and its token addresses\\n    /// @param poolId_ The ID of the Pool\\n    /// @return pool_ The Pool data\\n    function getPool(uint256 poolId_) public view returns (Pool memory pool_) {\\n        address poolAddress_ = getPoolAddress(poolId_);\\n        (address token0_, address token1_) = getPoolTokens(poolAddress_);\\n        return Pool(poolAddress_, token0_, token1_);\\n    }\\n\\n    /// @notice Get an array of all Pool addresses and their token addresses\\n    /// @return pools_ An array containing all Pool data\\n    function getAllPools() public view returns (Pool[] memory pools_) {\\n        uint256 totalPools_ = getTotalPools();\\n        pools_ = new Pool[](totalPools_);\\n        for (uint256 i; i < totalPools_; i++) {\\n            pools_[i] = getPool(i + 1);\\n        }\\n    }\\n\\n    /// @notice Get the token addresses, collateral reserves, and debt reserves for a given Pool address\\n    /// @param pool_ The Pool address\\n    /// @return poolReserves_ The Pool data with reserves\\n    /// @dev expected to be called via callStatic\\n    function getPoolReserves(address pool_) public returns (PoolWithReserves memory poolReserves_) {\\n        (address token0_, address token1_) = getPoolTokens(pool_);\\n        IFluidDexT1.CollateralReserves memory collateralReserves_ = getDexCollateralReserves(pool_);\\n        IFluidDexT1.DebtReserves memory debtReserves_ = getDexDebtReserves(pool_);\\n        return PoolWithReserves(pool_, token0_, token1_, collateralReserves_, debtReserves_);\\n    }\\n\\n    /// @notice Get an array of Pool addresses, their token addresses, collateral reserves, and debt reserves for a given array of Pool addresses\\n    /// @param pools_ The array of Pool addresses\\n    /// @return poolsReserves_ An array containing all Pool data with reserves\\n    /// @dev expected to be called via callStatic\\n    function getPoolsReserves(address[] memory pools_) public returns (PoolWithReserves[] memory poolsReserves_) {\\n        poolsReserves_ = new PoolWithReserves[](pools_.length);\\n        for (uint256 i; i < pools_.length; i++) {\\n            poolsReserves_[i] = getPoolReserves(pools_[i]);\\n        }\\n    }\\n\\n    /// @notice Get an array of all Pool addresses, their token addresses, collateral reserves, and debt reserves\\n    /// @return poolsReserves_ An array containing all Pool data with reserves\\n    /// @dev expected to be called via callStatic\\n    function getAllPoolsReserves() public returns (PoolWithReserves[] memory poolsReserves_) {\\n        return getPoolsReserves(getAllPoolAddresses());\\n    }\\n}\\n\",\"keccak256\":\"0x4132a2f503aa56dbc4931b374396975b26a7746620a1f3f9ff84910d335eba83\",\"license\":\"BUSL-1.1\"},\"contracts/periphery/resolvers/dexReserves/structs.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { IFluidDexT1 } from \\\"../../../protocols/dex/interfaces/iDexT1.sol\\\";\\n\\nabstract contract Structs {\\n    struct Pool {\\n        address pool;\\n        address token0_;\\n        address token1_;\\n    }\\n\\n    struct PoolWithReserves {\\n        address pool;\\n        address token0_;\\n        address token1_;\\n        IFluidDexT1.CollateralReserves collateralReserves;\\n        IFluidDexT1.DebtReserves debtReserves;\\n    }\\n}\\n\",\"keccak256\":\"0xba17b7859b67f05a00c960e18cfd60510540651a9cd903756c1a716a4b56d5b9\",\"license\":\"BUSL-1.1\"},\"contracts/periphery/resolvers/dexReserves/variables.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { IFluidDexFactory } from \\\"../../../protocols/dex/interfaces/iDexFactory.sol\\\";\\n\\nabstract contract Variables {\\n    IFluidDexFactory public immutable FACTORY;\\n\\n    constructor(address factory_) {\\n        FACTORY = IFluidDexFactory(factory_);\\n    }\\n}\\n\",\"keccak256\":\"0x4782cde1ecc2bf689343a0150738b8e030e7a55d16db73ab4070bd3dcaf81573\",\"license\":\"BUSL-1.1\"},\"contracts/protocols/dex/interfaces/iDexFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\ninterface IFluidDexFactory {\\n    /// @notice Global auth is auth for all dexes\\n    function isGlobalAuth(address auth_) external view returns (bool);\\n\\n    /// @notice Dex auth is auth for a specific dex\\n    function isDexAuth(address vault_, address auth_) external view returns (bool);\\n\\n    /// @notice Total dexes deployed.\\n    function totalDexes() external view returns (uint256);\\n\\n    /// @notice Compute dexAddress\\n    function getDexAddress(uint256 vaultId) external view returns (address);\\n\\n    /// @notice read uint256 `result_` for a storage `slot_` key\\n    function readFromStorage(bytes32 slot_) external view returns (uint256 result_);\\n}\\n\",\"keccak256\":\"0xe6e7efed6dfd3a58f17fa24e21d0acda2bf7549d60b88ed8e9a0d6bd0bfb2d94\",\"license\":\"MIT\"},\"contracts/protocols/dex/interfaces/iDexT1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\ninterface IFluidDexT1 {\\n    error FluidDexError(uint256 errorId);\\n\\n    /// @notice used to simulate swap to find the output amount\\n    error FluidDexSwapResult(uint256 amountOut);\\n\\n    error FluidDexPerfectLiquidityOutput(uint256 token0Amt, uint token1Amt);\\n\\n    error FluidDexSingleTokenOutput(uint256 tokenAmt);\\n\\n    error FluidDexLiquidityOutput(uint256 shares);\\n\\n    error FluidDexPricesAndExchangeRates(PricesAndExchangePrice pex_);\\n\\n    /// @notice returns the dex id\\n    function DEX_ID() external view returns (uint256);\\n\\n    /// @notice reads uint256 data `result_` from storage at a bytes32 storage `slot_` key.\\n    function readFromStorage(bytes32 slot_) external view returns (uint256 result_);\\n\\n    struct Implementations {\\n        address shift;\\n        address admin;\\n        address colOperations;\\n        address debtOperations;\\n        address perfectOperationsAndOracle;\\n    }\\n\\n    struct ConstantViews {\\n        uint256 dexId;\\n        address liquidity;\\n        address factory;\\n        Implementations implementations;\\n        address deployerContract;\\n        address token0;\\n        address token1;\\n        bytes32 supplyToken0Slot;\\n        bytes32 borrowToken0Slot;\\n        bytes32 supplyToken1Slot;\\n        bytes32 borrowToken1Slot;\\n        bytes32 exchangePriceToken0Slot;\\n        bytes32 exchangePriceToken1Slot;\\n        uint256 oracleMapping;\\n    }\\n\\n        struct ConstantViews2 {\\n        uint token0NumeratorPrecision;\\n        uint token0DenominatorPrecision;\\n        uint token1NumeratorPrecision;\\n        uint token1DenominatorPrecision;\\n    }\\n    struct PricesAndExchangePrice {\\n        uint lastStoredPrice; // last stored price in 1e27 decimals\\n        uint centerPrice; // last stored price in 1e27 decimals\\n        uint upperRange; // price at upper range in 1e27 decimals\\n        uint lowerRange; // price at lower range in 1e27 decimals\\n        uint geometricMean; // geometric mean of upper range & lower range in 1e27 decimals\\n        uint supplyToken0ExchangePrice;\\n        uint borrowToken0ExchangePrice;\\n        uint supplyToken1ExchangePrice;\\n        uint borrowToken1ExchangePrice;\\n    }\\n\\n    struct CollateralReserves {\\n        uint token0RealReserves;\\n        uint token1RealReserves;\\n        uint token0ImaginaryReserves;\\n        uint token1ImaginaryReserves;\\n    }\\n\\n    struct DebtReserves {\\n        uint token0Debt;\\n        uint token1Debt;\\n        uint token0RealReserves;\\n        uint token1RealReserves;\\n        uint token0ImaginaryReserves;\\n        uint token1ImaginaryReserves;\\n    }\\n\\n    function getCollateralReserves(\\n        uint geometricMean_,\\n        uint upperRange_,\\n        uint lowerRange_,\\n        uint token0SupplyExchangePrice_,\\n        uint token1SupplyExchangePrice_\\n    ) external view returns (CollateralReserves memory c_);\\n\\n    function getDebtReserves(\\n        uint geometricMean_,\\n        uint upperRange_,\\n        uint lowerRange_,\\n        uint token0BorrowExchangePrice_,\\n        uint token1BorrowExchangePrice_\\n    ) external view returns (DebtReserves memory d_);\\n\\n    // reverts with FluidDexPricesAndExchangeRates(pex_);\\n    function getPricesAndExchangePrices() external;\\n\\n    function constantsView() external view returns (ConstantViews memory constantsView_);\\n\\n    function constantsView2() external view returns (ConstantViews2 memory constantsView2_);\\n\\n    struct Oracle {\\n        uint twap1by0; // TWAP price\\n        uint lowestPrice1by0; // lowest price point\\n        uint highestPrice1by0; // highest price point\\n        uint twap0by1; // TWAP price\\n        uint lowestPrice0by1; // lowest price point\\n        uint highestPrice0by1; // highest price point\\n    }\\n\\n    /// @dev This function allows users to swap a specific amount of input tokens for output tokens\\n    /// @param swap0to1_ Direction of swap. If true, swaps token0 for token1; if false, swaps token1 for token0\\n    /// @param amountIn_ The exact amount of input tokens to swap\\n    /// @param amountOutMin_ The minimum amount of output tokens the user is willing to accept\\n    /// @param to_ Recipient of swapped tokens. If to_ == address(0) then out tokens will be sent to msg.sender. If to_ == ADDRESS_DEAD then function will revert with amountOut_\\n    /// @return amountOut_ The amount of output tokens received from the swap\\n    function swapIn(\\n        bool swap0to1_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address to_\\n    ) external payable returns (uint256 amountOut_);\\n\\n    /// @dev Swap tokens with perfect amount out\\n    /// @param swap0to1_ Direction of swap. If true, swaps token0 for token1; if false, swaps token1 for token0\\n    /// @param amountOut_ The exact amount of tokens to receive after swap\\n    /// @param amountInMax_ Maximum amount of tokens to swap in\\n    /// @param to_ Recipient of swapped tokens. If to_ == address(0) then out tokens will be sent to msg.sender. If to_ == ADDRESS_DEAD then function will revert with amountIn_\\n    /// @return amountIn_ The amount of input tokens used for the swap\\n    function swapOut(\\n        bool swap0to1_,\\n        uint256 amountOut_,\\n        uint256 amountInMax_,\\n        address to_\\n    ) external payable returns (uint256 amountIn_);\\n\\n    /// @dev Deposit tokens in equal proportion to the current pool ratio\\n    /// @param shares_ The number of shares to mint\\n    /// @param maxToken0Deposit_ Maximum amount of token0 to deposit\\n    /// @param maxToken1Deposit_ Maximum amount of token1 to deposit\\n    /// @param estimate_ If true, function will revert with estimated deposit amounts without executing the deposit\\n    /// @return token0Amt_ Amount of token0 deposited\\n    /// @return token1Amt_ Amount of token1 deposited\\n    function depositPerfect(\\n        uint shares_,\\n        uint maxToken0Deposit_,\\n        uint maxToken1Deposit_,\\n        bool estimate_\\n    ) external payable returns (uint token0Amt_, uint token1Amt_);\\n\\n    /// @dev This function allows users to withdraw a perfect amount of collateral liquidity\\n    /// @param shares_ The number of shares to withdraw\\n    /// @param minToken0Withdraw_ The minimum amount of token0 the user is willing to accept\\n    /// @param minToken1Withdraw_ The minimum amount of token1 the user is willing to accept\\n    /// @param estimate_ If true, the function will revert with the estimated withdrawal amounts without actually performing the withdrawal\\n    /// @return token0Amt_ The amount of token0 withdrawn\\n    /// @return token1Amt_ The amount of token1 withdrawn\\n    function withdrawPerfect(\\n        uint shares_,\\n        uint minToken0Withdraw_,\\n        uint minToken1Withdraw_,\\n        bool estimate_\\n    ) external returns (uint token0Amt_, uint token1Amt_);\\n\\n    /// @dev This function allows users to borrow tokens in equal proportion to the current debt pool ratio\\n    /// @param shares_ The number of shares to borrow\\n    /// @param minToken0Borrow_ Minimum amount of token0 to borrow\\n    /// @param minToken1Borrow_ Minimum amount of token1 to borrow\\n    /// @param estimate_ If true, function will revert with estimated borrow amounts without executing the borrow\\n    /// @return token0Amt_ Amount of token0 borrowed\\n    /// @return token1Amt_ Amount of token1 borrowed\\n    function borrowPerfect(\\n        uint shares_,\\n        uint minToken0Borrow_,\\n        uint minToken1Borrow_,\\n        bool estimate_\\n    ) external returns (uint token0Amt_, uint token1Amt_);\\n\\n    /// @dev This function allows users to pay back borrowed tokens in equal proportion to the current debt pool ratio\\n    /// @param shares_ The number of shares to pay back\\n    /// @param maxToken0Payback_ Maximum amount of token0 to pay back\\n    /// @param maxToken1Payback_ Maximum amount of token1 to pay back\\n    /// @param estimate_ If true, function will revert with estimated payback amounts without executing the payback\\n    /// @return token0Amt_ Amount of token0 paid back\\n    /// @return token1Amt_ Amount of token1 paid back\\n    function paybackPerfect(\\n        uint shares_,\\n        uint maxToken0Payback_,\\n        uint maxToken1Payback_,\\n        bool estimate_\\n    ) external payable returns (uint token0Amt_, uint token1Amt_);\\n\\n    /// @dev This function allows users to deposit tokens in any proportion into the col pool\\n    /// @param token0Amt_ The amount of token0 to deposit\\n    /// @param token1Amt_ The amount of token1 to deposit\\n    /// @param minSharesAmt_ The minimum amount of shares the user expects to receive\\n    /// @param estimate_ If true, function will revert with estimated shares without executing the deposit\\n    /// @return shares_ The amount of shares minted for the deposit\\n    function deposit(\\n        uint token0Amt_,\\n        uint token1Amt_,\\n        uint minSharesAmt_,\\n        bool estimate_\\n    ) external payable returns (uint shares_);\\n\\n    /// @dev This function allows users to withdraw tokens in any proportion from the col pool\\n    /// @param token0Amt_ The amount of token0 to withdraw\\n    /// @param token1Amt_ The amount of token1 to withdraw\\n    /// @param maxSharesAmt_ The maximum number of shares the user is willing to burn\\n    /// @param estimate_ If true, the function will revert with the estimated shares to burn without actually performing the withdrawal\\n    /// @return shares_ The number of shares burned for the withdrawal\\n    function withdraw(\\n        uint token0Amt_,\\n        uint token1Amt_,\\n        uint maxSharesAmt_,\\n        bool estimate_\\n    ) external returns (uint shares_);\\n\\n    /// @dev This function allows users to borrow tokens in any proportion from the debt pool\\n    /// @param token0Amt_ The amount of token0 to borrow\\n    /// @param token1Amt_ The amount of token1 to borrow\\n    /// @param maxSharesAmt_ The maximum amount of shares the user is willing to receive\\n    /// @param estimate_ If true, only estimates the shares without actually borrowing\\n    /// @return shares_ The amount of borrow shares minted to represent the borrowed amount\\n    function borrow(\\n        uint token0Amt_,\\n        uint token1Amt_,\\n        uint maxSharesAmt_,\\n        bool estimate_\\n    ) external returns (uint shares_);\\n\\n    /// @dev This function allows users to payback tokens in any proportion to the debt pool\\n    /// @param token0Amt_ The amount of token0 to payback\\n    /// @param token1Amt_ The amount of token1 to payback\\n    /// @param minSharesAmt_ The minimum amount of shares the user expects to burn\\n    /// @param estimate_ If true, function will revert with estimated shares without executing the payback\\n    /// @return shares_ The amount of borrow shares burned for the payback\\n    function payback(\\n        uint token0Amt_,\\n        uint token1Amt_,\\n        uint minSharesAmt_,\\n        bool estimate_\\n    ) external payable returns (uint shares_);\\n\\n    /// @dev This function allows users to withdraw their collateral with perfect shares in one token\\n    /// @param shares_ The number of shares to burn for withdrawal\\n    /// @param minToken0_ The minimum amount of token0 the user expects to receive (set to 0 if withdrawing in token1)\\n    /// @param minToken1_ The minimum amount of token1 the user expects to receive (set to 0 if withdrawing in token0)\\n    /// @param estimate_ If true, the function will revert with the estimated withdrawal amount without executing the withdrawal\\n    /// @return withdrawAmt_ The amount of tokens withdrawn in the chosen token\\n    function withdrawPerfectInOneToken(\\n        uint shares_,\\n        uint minToken0_,\\n        uint minToken1_,\\n        bool estimate_\\n    ) external returns (uint withdrawAmt_);\\n\\n    /// @dev This function allows users to payback their debt with perfect shares in one token\\n    /// @param shares_ The number of shares to burn for payback\\n    /// @param maxToken0_ The maximum amount of token0 the user is willing to pay (set to 0 if paying back in token1)\\n    /// @param maxToken1_ The maximum amount of token1 the user is willing to pay (set to 0 if paying back in token0)\\n    /// @param estimate_ If true, the function will revert with the estimated payback amount without executing the payback\\n    /// @return paybackAmt_ The amount of tokens paid back in the chosen token\\n    function paybackPerfectInOneToken(\\n        uint shares_,\\n        uint maxToken0_,\\n        uint maxToken1_,\\n        bool estimate_\\n    ) external payable returns (uint paybackAmt_);\\n\\n    /// @dev the oracle assumes last set price of pool till the next swap happens.\\n    /// There's a possibility that during that time some interest is generated hence the last stored price is not the 100% correct price for the whole duration\\n    /// but the difference due to interest will be super low so this difference is ignored\\n    /// For example 2 swaps happened 10min (600 seconds) apart and 1 token has 10% higher interest than other.\\n    /// then that token will accrue about 10% * 600 / secondsInAYear = ~0.0002%\\n    /// @param secondsAgos_ array of seconds ago for which TWAP is needed. If user sends [10, 30, 60] then twaps_ will return [10-0, 30-10, 60-30]\\n    /// @return twaps_ twap price, lowest price (aka minima) & highest price (aka maxima) between secondsAgo checkpoints\\n    /// @return currentPrice_ price of pool after the most recent swap\\n    function oraclePrice(uint[] memory secondsAgos_) external view returns (Oracle[] memory twaps_, uint currentPrice_);\\n\\n}\\n\",\"keccak256\":\"0x6f186436aefda8ddd635dfaa8525b37410ac7abee2d9428bff4b2595564103cc\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a060405234801561001057600080fd5b506040516200254c3803806200254c83398101604081905261003191610042565b6001600160a01b0316608052610072565b60006020828403121561005457600080fd5b81516001600160a01b038116811461006b57600080fd5b9392505050565b6080516124b06200009c600039600081816102280152818161044101526111f901526124b06000f3fe60806040526004361061010d5760003560e01c806355181f11116100a5578063bb39e3a111610074578063ca4f280311610059578063ca4f2803146103b6578063d3ffe67a14610403578063d88ff1f41461041857600080fd5b8063bb39e3a114610381578063c56f1b441461039457600080fd5b806355181f11146102f25780636e38c0231461031f578063957755e614610341578063a59737631461036157600080fd5b80633973a11b116100e15780633973a11b1461024a5780633ec841e41461027757806342571137146102a45780634bee9395146102c557600080fd5b8062a5ae2114610112578063015f6cfa1461015c578063068bcd8d146101e95780632dd3100014610216575b600080fd5b34801561011e57600080fd5b5061013261012d366004611a6c565b61043a565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b34801561016857600080fd5b5061017c610177366004611aaa565b61046c565b6040516101539190600061012082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525092915050565b3480156101f557600080fd5b50610209610204366004611a6c565b6105cc565b6040516101539190611ace565b34801561022257600080fd5b506101327f000000000000000000000000000000000000000000000000000000000000000081565b34801561025657600080fd5b5061026a610265366004611aaa565b61063e565b6040516101539190611b0b565b34801561028357600080fd5b50610297610292366004611aaa565b61074b565b6040516101539190611c9d565b6102b76102b2366004611cc8565b6107e5565b604051908152602001610153565b3480156102d157600080fd5b506102e56102e0366004611aaa565b610919565b6040516101539190611dc0565b3480156102fe57600080fd5b5061031261030d366004611aaa565b610992565b6040516101539190611dcf565b34801561032b57600080fd5b50610334610ca5565b6040516101539190611e12565b34801561034d57600080fd5b5061029761035c366004611aaa565b610cb7565b34801561036d57600080fd5b5061033461037c366004611f2d565b610f8b565b6102b761038f366004611cc8565b611041565b3480156103a057600080fd5b506103a96110b0565b6040516101539190611fdf565b3480156103c257600080fd5b506103d66103d1366004611aaa565b61116a565b6040805173ffffffffffffffffffffffffffffffffffffffff938416815292909116602083015201610153565b34801561040f57600080fd5b506102b76111f5565b34801561042457600080fd5b5061042d611286565b604051610153919061202d565b60006104667f000000000000000000000000000000000000000000000000000000000000000083611362565b92915050565b6104bb6040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8173ffffffffffffffffffffffffffffffffffffffff1663916cef4e6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561050357600080fd5b505af1925050508015610514575060015b6105c7573d808015610542576040519150601f19603f3d011682016040523d82523d6000602084013e610547565b606091505b5060208101517fdc4022c5000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008216016105c4576105ae8260048085516105a991906120cd565b6117cc565b8060200190518101906105c191906120e0565b92505b50505b919050565b60408051606081018252600080825260208201819052918101829052906105f28361043a565b90506000806106008361116a565b6040805160608101825273ffffffffffffffffffffffffffffffffffffffff9687168152928616602084015294169381019390935250909392505050565b6106db604080516101c08101825260008082526020808301829052828401829052835160a08101855282815290810182905292830181905260608381018290526080840191909152909190820190815260006020820181905260408201819052606082018190526080820181905260a0820181905260c0820181905260e08201819052610100820181905261012082018190526101409091015290565b8173ffffffffffffffffffffffffffffffffffffffff1663b7791bf26040518163ffffffff1660e01b815260040161024060405180830381865afa158015610727573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104669190612204565b6107766040518060800160405280600081526020016000815260200160008152602001600081525090565b8173ffffffffffffffffffffffffffffffffffffffff16631595cbd36040518163ffffffff1660e01b8152600401608060405180830381865afa1580156107c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104669190612351565b6040517f286f0e610000000000000000000000000000000000000000000000000000000081528315156004820152602481018390526044810182905261dead606482015260009073ffffffffffffffffffffffffffffffffffffffff86169063286f0e619034906084015b60206040518083038185885af1935050505080156108a9575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526108a69181019061236d565b60015b61090f573d8080156108d7576040519150601f19603f3d011682016040523d82523d6000602084013e6108dc565b606091505b50610907817fb3bfda9900000000000000000000000000000000000000000000000000000000611948565b915050610911565b505b949350505050565b61092161199c565b60008061092d8461116a565b91509150600061093c85610cb7565b9050600061094986610992565b6040805160a08101825273ffffffffffffffffffffffffffffffffffffffff98891681529588166020870152939096169284019290925260608301525060808101929092525090565b6109cb6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040517fb5c736e40000000000000000000000000000000000000000000000000000000081526001600482015260009073ffffffffffffffffffffffffffffffffffffffff84169063b5c736e490602401602060405180830381865afa158015610a39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5d919061236d565b905080600216600214610aa5576040518060c0016040528060008152602001600081526020016000815260200160008152602001600081526020016000815250915050919050565b6040517f015f6cfa00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152309063015f6cfa90602401610120604051808303816000875af1925050508015610b4c575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252610b49918101906120e0565b60015b610b8a576040518060c00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152509150610c9f565b6080810151604080830151606084015160c085015161010086015193517f05d455a90000000000000000000000000000000000000000000000000000000081526004810195909552602485019290925260448401526064830152608482015273ffffffffffffffffffffffffffffffffffffffff8516906305d455a99060a40160c060405180830381865afa925050508015610c61575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252610c5e91810190612386565b60015b6105c1576040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525092506105c4565b50919050565b6060610cb261037c6110b0565b905090565b610ce26040518060800160405280600081526020016000815260200160008152602001600081525090565b6040517fb5c736e40000000000000000000000000000000000000000000000000000000081526001600482015260009073ffffffffffffffffffffffffffffffffffffffff84169063b5c736e490602401602060405180830381865afa158015610d50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d74919061236d565b905080600116600114610dae5760405180608001604052806000815260200160008152602001600081526020016000815250915050919050565b6040517f015f6cfa00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152309063015f6cfa90602401610120604051808303816000875af1925050508015610e55575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252610e52918101906120e0565b60015b610e8557604051806080016040528060008152602001600081526020016000815260200160008152509150610c9f565b6080810151604080830151606084015160a085015160e086015193517f6560abaa0000000000000000000000000000000000000000000000000000000081526004810195909552602485019290925260448401526064830152608482015273ffffffffffffffffffffffffffffffffffffffff851690636560abaa9060a401608060405180830381865afa925050508015610f5b575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252610f5891810190612351565b60015b6105c1576040518060800160405280600081526020016000815260200160008152602001600081525092506105c4565b6060815167ffffffffffffffff811115610fa757610fa7611e61565b604051908082528060200260200182016040528015610fe057816020015b610fcd61199c565b815260200190600190039081610fc55790505b50905060005b8251811015610c9f5761101183828151811061100457611004612400565b6020026020010151610919565b82828151811061102357611023612400565b602002602001018190525080806110399061242f565b915050610fe6565b6040517f2668dfaa0000000000000000000000000000000000000000000000000000000081528315156004820152602481018390526044810182905261dead606482015260009073ffffffffffffffffffffffffffffffffffffffff861690632668dfaa903490608401610850565b606060006110bc6111f5565b90508067ffffffffffffffff8111156110d7576110d7611e61565b604051908082528060200260200182016040528015611100578160200160208202803683370190505b50915060005b818110156111655761111c61012d826001612467565b83828151811061112e5761112e612400565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101528061115d8161242f565b915050611106565b505090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1663b7791bf26040518163ffffffff1660e01b815260040161024060405180830381865afa1580156111bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111df9190612204565b90508060a001518160c001519250925050915091565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166393656c176040518163ffffffff1660e01b8152600401602060405180830381865afa158015611262573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb2919061236d565b606060006112926111f5565b90508067ffffffffffffffff8111156112ad576112ad611e61565b60405190808252806020026020018201604052801561131657816020015b60408051606081018252600080825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816112cb5790505b50915060005b8181101561116557611332610204826001612467565b83828151811061134457611344612400565b6020026020010181905250808061135a9061242f565b91505061131c565b6000606082600003611378576000915050610466565b607f8311611441576040517fd60000000000000000000000000000000000000000000000000000000000000060208201527f940000000000000000000000000000000000000000000000000000000000000060218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b16602282015260f884901b7fff000000000000000000000000000000000000000000000000000000000000001660368201526037015b60405160208183030381529060405290506117bd565b60ff831161151e576040517fd70000000000000000000000000000000000000000000000000000000000000060208201527f940000000000000000000000000000000000000000000000000000000000000060218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b1660228201527f8100000000000000000000000000000000000000000000000000000000000000603682015260f884901b7fff0000000000000000000000000000000000000000000000000000000000000016603782015260380161142b565b61ffff83116115fc576040517fd80000000000000000000000000000000000000000000000000000000000000060208201527f940000000000000000000000000000000000000000000000000000000000000060218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b1660228201527f820000000000000000000000000000000000000000000000000000000000000060368201527fffff00000000000000000000000000000000000000000000000000000000000060f085901b16603782015260390161142b565b62ffffff83116116db576040517fd90000000000000000000000000000000000000000000000000000000000000060208201527f940000000000000000000000000000000000000000000000000000000000000060218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b1660228201527f830000000000000000000000000000000000000000000000000000000000000060368201527fffffff000000000000000000000000000000000000000000000000000000000060e885901b166037820152603a0161142b565b6040517fda0000000000000000000000000000000000000000000000000000000000000060208201527f940000000000000000000000000000000000000000000000000000000000000060218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b1660228201527f840000000000000000000000000000000000000000000000000000000000000060368201527fffffffff0000000000000000000000000000000000000000000000000000000060e085901b166037820152603b0160405160208183030381529060405290505b80516020909101209392505050565b6060816117da81601f612467565b1015611847576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f7700000000000000000000000000000000000060448201526064015b60405180910390fd5b6118518284612467565b845110156118bb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f736c6963655f6f75744f66426f756e6473000000000000000000000000000000604482015260640161183e565b811580156118d85760405191506000825260208201604052611940565b6040519150601f8316801560200281840101848101868315602002848a0101015b818310156119115780518352602092830192016118f9565b5050848452601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016604052505b509392505050565b600060248351101561195c57506000610466565b60208301517fffffffff000000000000000000000000000000000000000000000000000000008084169082160361199557602484015191505b5092915050565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001611a296040518060800160405280600081526020016000815260200160008152602001600081525090565b8152602001611a676040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b905290565b600060208284031215611a7e57600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff81168114611aa757600080fd5b50565b600060208284031215611abc57600080fd5b8135611ac781611a85565b9392505050565b606081016104668284805173ffffffffffffffffffffffffffffffffffffffff908116835260208083015182169084015260409182015116910152565b81518152602080830151610240830191611b3c9084018273ffffffffffffffffffffffffffffffffffffffff169052565b506040830151611b64604084018273ffffffffffffffffffffffffffffffffffffffff169052565b506060830151611bc2606084018273ffffffffffffffffffffffffffffffffffffffff808251168352806020830151166020840152806040830151166040840152806060830151166060840152806080830151166080840152505050565b506080830151610100611bec8185018373ffffffffffffffffffffffffffffffffffffffff169052565b60a08501519150610120611c178186018473ffffffffffffffffffffffffffffffffffffffff169052565b60c08601519250610140611c428187018573ffffffffffffffffffffffffffffffffffffffff169052565b60e0870151610160878101919091529287015161018080880191909152918701516101a080880191909152908701516101c0870152918601516101e08601528501516102008501529093015161022090920191909152919050565b8151815260208083015190820152604080830151908201526060808301519082015260808101610466565b60008060008060808587031215611cde57600080fd5b8435611ce981611a85565b935060208501358015158114611cfe57600080fd5b93969395505050506040820135916060013590565b73ffffffffffffffffffffffffffffffffffffffff808251168352806020830151166020840152806040830151166040840152506060810151611d7a6060840182805182526020810151602083015260408101516040830152606081015160608301525050565b50608090810151805160e08401526020810151610100840152604081015161012084015260608101516101408401529081015161016083015260a0015161018090910152565b6101a081016104668284611d13565b60c081016104668284805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a08301525050565b6020808252825182820181905260009190848201906040850190845b81811015611e5557611e41838551611d13565b928401926101a09290920191600101611e2e565b50909695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610120810167ffffffffffffffff81118282101715611eb457611eb4611e61565b60405290565b6040516101c0810167ffffffffffffffff81118282101715611eb457611eb4611e61565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611f2557611f25611e61565b604052919050565b60006020808385031215611f4057600080fd5b823567ffffffffffffffff80821115611f5857600080fd5b818501915085601f830112611f6c57600080fd5b813581811115611f7e57611f7e611e61565b8060051b9150611f8f848301611ede565b8181529183018401918481019088841115611fa957600080fd5b938501935b83851015611fd35784359250611fc383611a85565b8282529385019390850190611fae565b98975050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611e5557835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101611ffb565b6020808252825182820181905260009190848201906040850190845b81811015611e555761208b838551805173ffffffffffffffffffffffffffffffffffffffff908116835260208083015182169084015260409182015116910152565b9284019260609290920191600101612049565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818103818111156104665761046661209e565b600061012082840312156120f357600080fd5b6120fb611e90565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152508091505092915050565b80516105c781611a85565b600060a0828403121561217857600080fd5b60405160a0810181811067ffffffffffffffff8211171561219b5761219b611e61565b806040525080915082516121ae81611a85565b815260208301516121be81611a85565b602082015260408301516121d181611a85565b604082015260608301516121e481611a85565b606082015260808301516121f781611a85565b6080919091015292915050565b6000610240828403121561221757600080fd5b61221f611eba565b8251815261222f6020840161215b565b60208201526122406040840161215b565b60408201526122528460608501612166565b606082015261010061226581850161215b565b608083015261012061227881860161215b565b60a084015261014061228b81870161215b565b60c08501526101608087015160e086015261018080880151858701526101a0945084880151848701526101c0880151838701526101e088015182870152610200880151818701525050505061022084015181830152508091505092915050565b6000608082840312156122fd57600080fd5b6040516080810181811067ffffffffffffffff8211171561232057612320611e61565b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b60006080828403121561236357600080fd5b611ac783836122eb565b60006020828403121561237f57600080fd5b5051919050565b600060c0828403121561239857600080fd5b60405160c0810181811067ffffffffffffffff821117156123bb576123bb611e61565b8060405250825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a08201528091505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036124605761246061209e565b5060010190565b808201808211156104665761046661209e56fea26469706673582212203b2cb3d12c10df610eab48ac25bcdaa84c1a69c7caf39838404872d25b48bf4364736f6c63430008150033",
  "deployedBytecode": "0x60806040526004361061010d5760003560e01c806355181f11116100a5578063bb39e3a111610074578063ca4f280311610059578063ca4f2803146103b6578063d3ffe67a14610403578063d88ff1f41461041857600080fd5b8063bb39e3a114610381578063c56f1b441461039457600080fd5b806355181f11146102f25780636e38c0231461031f578063957755e614610341578063a59737631461036157600080fd5b80633973a11b116100e15780633973a11b1461024a5780633ec841e41461027757806342571137146102a45780634bee9395146102c557600080fd5b8062a5ae2114610112578063015f6cfa1461015c578063068bcd8d146101e95780632dd3100014610216575b600080fd5b34801561011e57600080fd5b5061013261012d366004611a6c565b61043a565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b34801561016857600080fd5b5061017c610177366004611aaa565b61046c565b6040516101539190600061012082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525092915050565b3480156101f557600080fd5b50610209610204366004611a6c565b6105cc565b6040516101539190611ace565b34801561022257600080fd5b506101327f000000000000000000000000000000000000000000000000000000000000000081565b34801561025657600080fd5b5061026a610265366004611aaa565b61063e565b6040516101539190611b0b565b34801561028357600080fd5b50610297610292366004611aaa565b61074b565b6040516101539190611c9d565b6102b76102b2366004611cc8565b6107e5565b604051908152602001610153565b3480156102d157600080fd5b506102e56102e0366004611aaa565b610919565b6040516101539190611dc0565b3480156102fe57600080fd5b5061031261030d366004611aaa565b610992565b6040516101539190611dcf565b34801561032b57600080fd5b50610334610ca5565b6040516101539190611e12565b34801561034d57600080fd5b5061029761035c366004611aaa565b610cb7565b34801561036d57600080fd5b5061033461037c366004611f2d565b610f8b565b6102b761038f366004611cc8565b611041565b3480156103a057600080fd5b506103a96110b0565b6040516101539190611fdf565b3480156103c257600080fd5b506103d66103d1366004611aaa565b61116a565b6040805173ffffffffffffffffffffffffffffffffffffffff938416815292909116602083015201610153565b34801561040f57600080fd5b506102b76111f5565b34801561042457600080fd5b5061042d611286565b604051610153919061202d565b60006104667f000000000000000000000000000000000000000000000000000000000000000083611362565b92915050565b6104bb6040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8173ffffffffffffffffffffffffffffffffffffffff1663916cef4e6040518163ffffffff1660e01b8152600401600060405180830381600087803b15801561050357600080fd5b505af1925050508015610514575060015b6105c7573d808015610542576040519150601f19603f3d011682016040523d82523d6000602084013e610547565b606091505b5060208101517fdc4022c5000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008216016105c4576105ae8260048085516105a991906120cd565b6117cc565b8060200190518101906105c191906120e0565b92505b50505b919050565b60408051606081018252600080825260208201819052918101829052906105f28361043a565b90506000806106008361116a565b6040805160608101825273ffffffffffffffffffffffffffffffffffffffff9687168152928616602084015294169381019390935250909392505050565b6106db604080516101c08101825260008082526020808301829052828401829052835160a08101855282815290810182905292830181905260608381018290526080840191909152909190820190815260006020820181905260408201819052606082018190526080820181905260a0820181905260c0820181905260e08201819052610100820181905261012082018190526101409091015290565b8173ffffffffffffffffffffffffffffffffffffffff1663b7791bf26040518163ffffffff1660e01b815260040161024060405180830381865afa158015610727573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104669190612204565b6107766040518060800160405280600081526020016000815260200160008152602001600081525090565b8173ffffffffffffffffffffffffffffffffffffffff16631595cbd36040518163ffffffff1660e01b8152600401608060405180830381865afa1580156107c1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104669190612351565b6040517f286f0e610000000000000000000000000000000000000000000000000000000081528315156004820152602481018390526044810182905261dead606482015260009073ffffffffffffffffffffffffffffffffffffffff86169063286f0e619034906084015b60206040518083038185885af1935050505080156108a9575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526108a69181019061236d565b60015b61090f573d8080156108d7576040519150601f19603f3d011682016040523d82523d6000602084013e6108dc565b606091505b50610907817fb3bfda9900000000000000000000000000000000000000000000000000000000611948565b915050610911565b505b949350505050565b61092161199c565b60008061092d8461116a565b91509150600061093c85610cb7565b9050600061094986610992565b6040805160a08101825273ffffffffffffffffffffffffffffffffffffffff98891681529588166020870152939096169284019290925260608301525060808101929092525090565b6109cb6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040517fb5c736e40000000000000000000000000000000000000000000000000000000081526001600482015260009073ffffffffffffffffffffffffffffffffffffffff84169063b5c736e490602401602060405180830381865afa158015610a39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a5d919061236d565b905080600216600214610aa5576040518060c0016040528060008152602001600081526020016000815260200160008152602001600081526020016000815250915050919050565b6040517f015f6cfa00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152309063015f6cfa90602401610120604051808303816000875af1925050508015610b4c575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252610b49918101906120e0565b60015b610b8a576040518060c00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152509150610c9f565b6080810151604080830151606084015160c085015161010086015193517f05d455a90000000000000000000000000000000000000000000000000000000081526004810195909552602485019290925260448401526064830152608482015273ffffffffffffffffffffffffffffffffffffffff8516906305d455a99060a40160c060405180830381865afa925050508015610c61575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252610c5e91810190612386565b60015b6105c1576040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525092506105c4565b50919050565b6060610cb261037c6110b0565b905090565b610ce26040518060800160405280600081526020016000815260200160008152602001600081525090565b6040517fb5c736e40000000000000000000000000000000000000000000000000000000081526001600482015260009073ffffffffffffffffffffffffffffffffffffffff84169063b5c736e490602401602060405180830381865afa158015610d50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d74919061236d565b905080600116600114610dae5760405180608001604052806000815260200160008152602001600081526020016000815250915050919050565b6040517f015f6cfa00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152309063015f6cfa90602401610120604051808303816000875af1925050508015610e55575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252610e52918101906120e0565b60015b610e8557604051806080016040528060008152602001600081526020016000815260200160008152509150610c9f565b6080810151604080830151606084015160a085015160e086015193517f6560abaa0000000000000000000000000000000000000000000000000000000081526004810195909552602485019290925260448401526064830152608482015273ffffffffffffffffffffffffffffffffffffffff851690636560abaa9060a401608060405180830381865afa925050508015610f5b575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252610f5891810190612351565b60015b6105c1576040518060800160405280600081526020016000815260200160008152602001600081525092506105c4565b6060815167ffffffffffffffff811115610fa757610fa7611e61565b604051908082528060200260200182016040528015610fe057816020015b610fcd61199c565b815260200190600190039081610fc55790505b50905060005b8251811015610c9f5761101183828151811061100457611004612400565b6020026020010151610919565b82828151811061102357611023612400565b602002602001018190525080806110399061242f565b915050610fe6565b6040517f2668dfaa0000000000000000000000000000000000000000000000000000000081528315156004820152602481018390526044810182905261dead606482015260009073ffffffffffffffffffffffffffffffffffffffff861690632668dfaa903490608401610850565b606060006110bc6111f5565b90508067ffffffffffffffff8111156110d7576110d7611e61565b604051908082528060200260200182016040528015611100578160200160208202803683370190505b50915060005b818110156111655761111c61012d826001612467565b83828151811061112e5761112e612400565b73ffffffffffffffffffffffffffffffffffffffff909216602092830291909101909101528061115d8161242f565b915050611106565b505090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1663b7791bf26040518163ffffffff1660e01b815260040161024060405180830381865afa1580156111bb573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111df9190612204565b90508060a001518160c001519250925050915091565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166393656c176040518163ffffffff1660e01b8152600401602060405180830381865afa158015611262573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cb2919061236d565b606060006112926111f5565b90508067ffffffffffffffff8111156112ad576112ad611e61565b60405190808252806020026020018201604052801561131657816020015b60408051606081018252600080825260208083018290529282015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816112cb5790505b50915060005b8181101561116557611332610204826001612467565b83828151811061134457611344612400565b6020026020010181905250808061135a9061242f565b91505061131c565b6000606082600003611378576000915050610466565b607f8311611441576040517fd60000000000000000000000000000000000000000000000000000000000000060208201527f940000000000000000000000000000000000000000000000000000000000000060218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b16602282015260f884901b7fff000000000000000000000000000000000000000000000000000000000000001660368201526037015b60405160208183030381529060405290506117bd565b60ff831161151e576040517fd70000000000000000000000000000000000000000000000000000000000000060208201527f940000000000000000000000000000000000000000000000000000000000000060218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b1660228201527f8100000000000000000000000000000000000000000000000000000000000000603682015260f884901b7fff0000000000000000000000000000000000000000000000000000000000000016603782015260380161142b565b61ffff83116115fc576040517fd80000000000000000000000000000000000000000000000000000000000000060208201527f940000000000000000000000000000000000000000000000000000000000000060218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b1660228201527f820000000000000000000000000000000000000000000000000000000000000060368201527fffff00000000000000000000000000000000000000000000000000000000000060f085901b16603782015260390161142b565b62ffffff83116116db576040517fd90000000000000000000000000000000000000000000000000000000000000060208201527f940000000000000000000000000000000000000000000000000000000000000060218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b1660228201527f830000000000000000000000000000000000000000000000000000000000000060368201527fffffff000000000000000000000000000000000000000000000000000000000060e885901b166037820152603a0161142b565b6040517fda0000000000000000000000000000000000000000000000000000000000000060208201527f940000000000000000000000000000000000000000000000000000000000000060218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b1660228201527f840000000000000000000000000000000000000000000000000000000000000060368201527fffffffff0000000000000000000000000000000000000000000000000000000060e085901b166037820152603b0160405160208183030381529060405290505b80516020909101209392505050565b6060816117da81601f612467565b1015611847576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f7700000000000000000000000000000000000060448201526064015b60405180910390fd5b6118518284612467565b845110156118bb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f736c6963655f6f75744f66426f756e6473000000000000000000000000000000604482015260640161183e565b811580156118d85760405191506000825260208201604052611940565b6040519150601f8316801560200281840101848101868315602002848a0101015b818310156119115780518352602092830192016118f9565b5050848452601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016604052505b509392505050565b600060248351101561195c57506000610466565b60208301517fffffffff000000000000000000000000000000000000000000000000000000008084169082160361199557602484015191505b5092915050565b6040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001611a296040518060800160405280600081526020016000815260200160008152602001600081525090565b8152602001611a676040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b905290565b600060208284031215611a7e57600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff81168114611aa757600080fd5b50565b600060208284031215611abc57600080fd5b8135611ac781611a85565b9392505050565b606081016104668284805173ffffffffffffffffffffffffffffffffffffffff908116835260208083015182169084015260409182015116910152565b81518152602080830151610240830191611b3c9084018273ffffffffffffffffffffffffffffffffffffffff169052565b506040830151611b64604084018273ffffffffffffffffffffffffffffffffffffffff169052565b506060830151611bc2606084018273ffffffffffffffffffffffffffffffffffffffff808251168352806020830151166020840152806040830151166040840152806060830151166060840152806080830151166080840152505050565b506080830151610100611bec8185018373ffffffffffffffffffffffffffffffffffffffff169052565b60a08501519150610120611c178186018473ffffffffffffffffffffffffffffffffffffffff169052565b60c08601519250610140611c428187018573ffffffffffffffffffffffffffffffffffffffff169052565b60e0870151610160878101919091529287015161018080880191909152918701516101a080880191909152908701516101c0870152918601516101e08601528501516102008501529093015161022090920191909152919050565b8151815260208083015190820152604080830151908201526060808301519082015260808101610466565b60008060008060808587031215611cde57600080fd5b8435611ce981611a85565b935060208501358015158114611cfe57600080fd5b93969395505050506040820135916060013590565b73ffffffffffffffffffffffffffffffffffffffff808251168352806020830151166020840152806040830151166040840152506060810151611d7a6060840182805182526020810151602083015260408101516040830152606081015160608301525050565b50608090810151805160e08401526020810151610100840152604081015161012084015260608101516101408401529081015161016083015260a0015161018090910152565b6101a081016104668284611d13565b60c081016104668284805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a08301525050565b6020808252825182820181905260009190848201906040850190845b81811015611e5557611e41838551611d13565b928401926101a09290920191600101611e2e565b50909695505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610120810167ffffffffffffffff81118282101715611eb457611eb4611e61565b60405290565b6040516101c0810167ffffffffffffffff81118282101715611eb457611eb4611e61565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611f2557611f25611e61565b604052919050565b60006020808385031215611f4057600080fd5b823567ffffffffffffffff80821115611f5857600080fd5b818501915085601f830112611f6c57600080fd5b813581811115611f7e57611f7e611e61565b8060051b9150611f8f848301611ede565b8181529183018401918481019088841115611fa957600080fd5b938501935b83851015611fd35784359250611fc383611a85565b8282529385019390850190611fae565b98975050505050505050565b6020808252825182820181905260009190848201906040850190845b81811015611e5557835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101611ffb565b6020808252825182820181905260009190848201906040850190845b81811015611e555761208b838551805173ffffffffffffffffffffffffffffffffffffffff908116835260208083015182169084015260409182015116910152565b9284019260609290920191600101612049565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818103818111156104665761046661209e565b600061012082840312156120f357600080fd5b6120fb611e90565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152508091505092915050565b80516105c781611a85565b600060a0828403121561217857600080fd5b60405160a0810181811067ffffffffffffffff8211171561219b5761219b611e61565b806040525080915082516121ae81611a85565b815260208301516121be81611a85565b602082015260408301516121d181611a85565b604082015260608301516121e481611a85565b606082015260808301516121f781611a85565b6080919091015292915050565b6000610240828403121561221757600080fd5b61221f611eba565b8251815261222f6020840161215b565b60208201526122406040840161215b565b60408201526122528460608501612166565b606082015261010061226581850161215b565b608083015261012061227881860161215b565b60a084015261014061228b81870161215b565b60c08501526101608087015160e086015261018080880151858701526101a0945084880151848701526101c0880151838701526101e088015182870152610200880151818701525050505061022084015181830152508091505092915050565b6000608082840312156122fd57600080fd5b6040516080810181811067ffffffffffffffff8211171561232057612320611e61565b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b60006080828403121561236357600080fd5b611ac783836122eb565b60006020828403121561237f57600080fd5b5051919050565b600060c0828403121561239857600080fd5b60405160c0810181811067ffffffffffffffff821117156123bb576123bb611e61565b8060405250825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a08201528091505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036124605761246061209e565b5060010190565b808201808211156104665761046661209e56fea26469706673582212203b2cb3d12c10df610eab48ac25bcdaa84c1a69c7caf39838404872d25b48bf4364736f6c63430008150033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "estimateSwapIn(address,bool,uint256,uint256)": {
        "params": {
          "amountIn_": "The exact amount of input tokens to swap",
          "amountOutMin_": "The minimum amount of output tokens the user is willing to accept",
          "dex_": "Dex pool",
          "swap0to1_": "Direction of swap. If true, swaps token0 for token1; if false, swaps token1 for token0"
        },
        "returns": {
          "amountOut_": "The amount of output tokens received from the swap"
        }
      },
      "estimateSwapOut(address,bool,uint256,uint256)": {
        "params": {
          "amountInMax_": "Maximum amount of tokens to swap in",
          "amountOut_": "The exact amount of tokens to receive after swap",
          "dex_": "Dex pool",
          "swap0to1_": "Direction of swap. If true, swaps token0 for token1; if false, swaps token1 for token0"
        },
        "returns": {
          "amountIn_": "The amount of input tokens used for the swap"
        }
      },
      "getAllPoolAddresses()": {
        "returns": {
          "pools_": "An array containing all Pool addresses"
        }
      },
      "getAllPools()": {
        "returns": {
          "pools_": "An array containing all Pool data"
        }
      },
      "getAllPoolsReserves()": {
        "details": "expected to be called via callStatic",
        "returns": {
          "poolsReserves_": "An array containing all Pool data with reserves"
        }
      },
      "getDexCollateralReserves(address)": {
        "details": "expected to be called via callStatic",
        "params": {
          "dex_": "The address of the DEX"
        },
        "returns": {
          "reserves_": "A struct containing collateral reserve information"
        }
      },
      "getDexDebtReserves(address)": {
        "details": "expected to be called via callStatic",
        "params": {
          "dex_": "The address of the DEX"
        },
        "returns": {
          "reserves_": "A struct containing debt reserve information"
        }
      },
      "getDexPricesAndExchangePrices(address)": {
        "details": "expected to be called via callStatic",
        "params": {
          "dex_": "The address of the DEX"
        },
        "returns": {
          "pex_": "A struct containing prices and exchange prices"
        }
      },
      "getPool(uint256)": {
        "params": {
          "poolId_": "The ID of the Pool"
        },
        "returns": {
          "pool_": "The Pool data"
        }
      },
      "getPoolAddress(uint256)": {
        "params": {
          "poolId_": "The ID of the Pool"
        },
        "returns": {
          "pool_": "The address of the Pool"
        }
      },
      "getPoolReserves(address)": {
        "details": "expected to be called via callStatic",
        "params": {
          "pool_": "The Pool address"
        },
        "returns": {
          "poolReserves_": "The Pool data with reserves"
        }
      },
      "getPoolTokens(address)": {
        "params": {
          "pool_": "The address of the Pool"
        },
        "returns": {
          "token0_": "The address of token0 in the Pool",
          "token1_": "The address of token1 in the Pool"
        }
      },
      "getPoolsReserves(address[])": {
        "details": "expected to be called via callStatic",
        "params": {
          "pools_": "The array of Pool addresses"
        },
        "returns": {
          "poolsReserves_": "An array containing all Pool data with reserves"
        }
      },
      "getTotalPools()": {
        "returns": {
          "_0": "The total number of Pools"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "estimateSwapIn(address,bool,uint256,uint256)": {
        "notice": "estimates swap IN tokens execution"
      },
      "estimateSwapOut(address,bool,uint256,uint256)": {
        "notice": "estimates swap OUT tokens execution"
      },
      "getAllPoolAddresses()": {
        "notice": "Get an array of all Pool addresses"
      },
      "getAllPools()": {
        "notice": "Get an array of all Pool addresses and their token addresses"
      },
      "getAllPoolsReserves()": {
        "notice": "Get an array of all Pool addresses, their token addresses, collateral reserves, and debt reserves"
      },
      "getDexCollateralReserves(address)": {
        "notice": "Get the collateral reserves for a DEX"
      },
      "getDexDebtReserves(address)": {
        "notice": "Get the debt reserves for a DEX"
      },
      "getDexPricesAndExchangePrices(address)": {
        "notice": "Get the prices and exchange prices for a DEX"
      },
      "getPool(uint256)": {
        "notice": "Get a Pool's address and its token addresses"
      },
      "getPoolAddress(uint256)": {
        "notice": "Get the address of a Pool given its ID"
      },
      "getPoolConstantsView(address)": {
        "notice": "returns all Pool constants"
      },
      "getPoolConstantsView2(address)": {
        "notice": "returns all Pool constants 2"
      },
      "getPoolReserves(address)": {
        "notice": "Get the token addresses, collateral reserves, and debt reserves for a given Pool address"
      },
      "getPoolTokens(address)": {
        "notice": "Get the addresses of the tokens in a Pool"
      },
      "getPoolsReserves(address[])": {
        "notice": "Get an array of Pool addresses, their token addresses, collateral reserves, and debt reserves for a given array of Pool addresses"
      },
      "getTotalPools()": {
        "notice": "Get the total number of Pools"
      }
    },
    "notice": "Fluid Dex Reserves resolver Implements various view-only methods to give easy access to Dex protocol reserves data.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}