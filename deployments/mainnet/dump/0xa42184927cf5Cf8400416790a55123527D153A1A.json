{
  "address": "0xa42184927cf5Cf8400416790a55123527D153A1A",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vaultFactory_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "fluidWalletFactory_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorId_",
          "type": "uint256"
        }
      ],
      "name": "FluidSafeTransferError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FluidWallet__NotAllowed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FluidWallet__ToHexDigit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FluidWallet__Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Executed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ExecutedCast",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "ETH_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "FLUID_WALLET_FACTORY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VAULT_FACTORY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "uint256",
              "name": "value",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "operation",
              "type": "uint8"
            }
          ],
          "internalType": "struct FluidWalletErrorsAndEvents.Action[]",
          "name": "actions_",
          "type": "tuple[]"
        }
      ],
      "name": "cast",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[]",
          "name": "",
          "type": "uint256[]"
        },
        {
          "internalType": "address",
          "name": "initiator_",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data_",
          "type": "bytes"
        }
      ],
      "name": "executeOperation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "from_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "data_",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x22db7b85133e7f72f81dd7bd2b4c32330e7ee2744c643f93780b8c2eff449ee8",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x910E413DBF3F6276Fe8213fF656726bDc142E08E",
    "contractAddress": null,
    "transactionIndex": 19,
    "gasUsed": "2122081",
    "logsBloom": "0x
    "blockHash": "0x27518fe87d32d0bb13eb29a610e55fccb07974d85ba0e0e6f660c3503ace6992",
    "transactionHash": "0x22db7b85133e7f72f81dd7bd2b4c32330e7ee2744c643f93780b8c2eff449ee8",
    "logs": [],
    "blockNumber": 21041300,
    "cumulativeGasUsed": "5033507",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x324c5Dc1fC42c7a4D43d92df1eBA58a54d13Bf2d",
    "0xd8Ae986159e350B6535539B8A1e488658452f25E"
  ],
  "numDeployments": 3,
  "solcInputHash": "d915c0ce08d4d30716f7cbea6a277f04",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultFactory_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"fluidWalletFactory_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorId_\",\"type\":\"uint256\"}],\"name\":\"FluidSafeTransferError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FluidWallet__NotAllowed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FluidWallet__ToHexDigit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FluidWallet__Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Executed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ExecutedCast\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"FLUID_WALLET_FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT_FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"value\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"operation\",\"type\":\"uint8\"}],\"internalType\":\"struct FluidWalletErrorsAndEvents.Action[]\",\"name\":\"actions_\",\"type\":\"tuple[]\"}],\"name\":\"cast\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[]\",\"name\":\"\",\"type\":\"uint256[]\"},{\"internalType\":\"address\",\"name\":\"initiator_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"executeOperation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"from_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"executeOperation(address[],uint256[],uint256[],address,bytes)\":{\"params\":{\"data_\":\"data bytes containing the `abi.encoded()` actions that are executed like in `CastParams.actions`\",\"initiator_\":\"flashloan initiator -> must be this contract\"}},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"ERC721 callback used Fluid Vault Factory and executes actions encoded in `data_`                         Caller should be Fluid Wallet Factory.\",\"params\":{\"data_\":\"data bytes containing the `abi.encoded()` actions that are executed like in `Action[]` & `owner`\",\"from_\":\"from_ previous owner of the given token ID\",\"operator_\":\"operator_ caller to transfer the the given token ID\",\"tokenId_\":\"tokenId_ id of the ERC721\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/wallet/wallet/main.sol\":\"FluidWalletImplementation\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC721/IERC721.sol\\\";\\n\",\"keccak256\":\"0xaf297d12d8d4a57fe01a70f0ef38908f208e3faedc577056d0b728fa2f3ccf0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/Clones.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/Clones.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev https://eips.ethereum.org/EIPS/eip-1167[EIP 1167] is a standard for\\n * deploying minimal proxy contracts, also known as \\\"clones\\\".\\n *\\n * > To simply and cheaply clone contract functionality in an immutable way, this standard specifies\\n * > a minimal bytecode implementation that delegates all calls to a known, fixed address.\\n *\\n * The library includes functions to deploy a proxy using either `create` (traditional deployment) or `create2`\\n * (salted deterministic deployment). It also includes functions to predict the addresses of clones deployed using the\\n * deterministic method.\\n *\\n * _Available since v3.4._\\n */\\nlibrary Clones {\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create opcode, which should never revert.\\n     */\\n    function clone(address implementation) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create(0, 0x09, 0x37)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create failed\\\");\\n    }\\n\\n    /**\\n     * @dev Deploys and returns the address of a clone that mimics the behaviour of `implementation`.\\n     *\\n     * This function uses the create2 opcode and a `salt` to deterministically deploy\\n     * the clone. Using the same `implementation` and `salt` multiple time will revert, since\\n     * the clones cannot be deployed twice at the same address.\\n     */\\n    function cloneDeterministic(address implementation, bytes32 salt) internal returns (address instance) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Cleans the upper 96 bits of the `implementation` word, then packs the first 3 bytes\\n            // of the `implementation` address with the bytecode before the address.\\n            mstore(0x00, or(shr(0xe8, shl(0x60, implementation)), 0x3d602d80600a3d3981f3363d3d373d3d3d363d73000000))\\n            // Packs the remaining 17 bytes of `implementation` with the bytecode after the address.\\n            mstore(0x20, or(shl(0x78, implementation), 0x5af43d82803e903d91602b57fd5bf3))\\n            instance := create2(0, 0x09, 0x37, salt)\\n        }\\n        require(instance != address(0), \\\"ERC1167: create2 failed\\\");\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(\\n        address implementation,\\n        bytes32 salt,\\n        address deployer\\n    ) internal pure returns (address predicted) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let ptr := mload(0x40)\\n            mstore(add(ptr, 0x38), deployer)\\n            mstore(add(ptr, 0x24), 0x5af43d82803e903d91602b57fd5bf3ff)\\n            mstore(add(ptr, 0x14), implementation)\\n            mstore(ptr, 0x3d602d80600a3d3981f3363d3d373d3d3d363d73)\\n            mstore(add(ptr, 0x58), salt)\\n            mstore(add(ptr, 0x78), keccak256(add(ptr, 0x0c), 0x37))\\n            predicted := keccak256(add(ptr, 0x43), 0x55)\\n        }\\n    }\\n\\n    /**\\n     * @dev Computes the address of a clone deployed using {Clones-cloneDeterministic}.\\n     */\\n    function predictDeterministicAddress(address implementation, bytes32 salt)\\n        internal\\n        view\\n        returns (address predicted)\\n    {\\n        return predictDeterministicAddress(implementation, salt, address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x888d64d221d52c31d015b76e50ca1af5ef8ff076550810b49cea6b01d8267a10\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC721/IERC721.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Note that the caller is responsible to confirm that the recipient is capable of receiving ERC721\\n     * or else they may be permanently lost. Usage of {safeTransferFrom} prevents loss, though the caller must\\n     * understand this adds an external call which potentially creates a reentrancy vulnerability.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xab28a56179c1db258c9bf5235b382698cb650debecb51b23d12be9e241374b68\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (token/ERC721/extensions/IERC721Enumerable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xd1556954440b31c97a142c6ba07d5cade45f96fafd52091d33a14ebe365aecbf\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./math/Math.sol\\\";\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _SYMBOLS = \\\"0123456789abcdef\\\";\\n    uint8 private constant _ADDRESS_LENGTH = 20;\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            uint256 length = Math.log10(value) + 1;\\n            string memory buffer = new string(length);\\n            uint256 ptr;\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                ptr := add(buffer, add(32, length))\\n            }\\n            while (true) {\\n                ptr--;\\n                /// @solidity memory-safe-assembly\\n                assembly {\\n                    mstore8(ptr, byte(mod(value, 10), _SYMBOLS))\\n                }\\n                value /= 10;\\n                if (value == 0) break;\\n            }\\n            return buffer;\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        unchecked {\\n            return toHexString(value, Math.log256(value) + 1);\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts an `address` with fixed length of 20 bytes to its not checksummed ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(address addr) internal pure returns (string memory) {\\n        return toHexString(uint256(uint160(addr)), _ADDRESS_LENGTH);\\n    }\\n}\\n\",\"keccak256\":\"0xa4d1d62251f8574deb032a35fc948386a9b4de74b812d4f545a1ac120486b48a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x447a5f3ddc18419d41ff92b3773fb86471b1db25773e07f877f548918a185bf1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/math/Math.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/math/Math.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Standard math utilities missing in the Solidity language.\\n */\\nlibrary Math {\\n    enum Rounding {\\n        Down, // Toward negative infinity\\n        Up, // Toward infinity\\n        Zero // Toward zero\\n    }\\n\\n    /**\\n     * @dev Returns the largest of two numbers.\\n     */\\n    function max(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a > b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the smallest of two numbers.\\n     */\\n    function min(uint256 a, uint256 b) internal pure returns (uint256) {\\n        return a < b ? a : b;\\n    }\\n\\n    /**\\n     * @dev Returns the average of two numbers. The result is rounded towards\\n     * zero.\\n     */\\n    function average(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b) / 2 can overflow.\\n        return (a & b) + (a ^ b) / 2;\\n    }\\n\\n    /**\\n     * @dev Returns the ceiling of the division of two numbers.\\n     *\\n     * This differs from standard division with `/` in that it rounds up instead\\n     * of rounding down.\\n     */\\n    function ceilDiv(uint256 a, uint256 b) internal pure returns (uint256) {\\n        // (a + b - 1) / b can overflow on addition, so we distribute.\\n        return a == 0 ? 0 : (a - 1) / b + 1;\\n    }\\n\\n    /**\\n     * @notice Calculates floor(x * y / denominator) with full precision. Throws if result overflows a uint256 or denominator == 0\\n     * @dev Original credit to Remco Bloemen under MIT license (https://xn--2-umb.com/21/muldiv)\\n     * with further edits by Uniswap Labs also under MIT license.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 result) {\\n        unchecked {\\n            // 512-bit multiply [prod1 prod0] = x * y. Compute the product mod 2^256 and mod 2^256 - 1, then use\\n            // use the Chinese Remainder Theorem to reconstruct the 512 bit result. The result is stored in two 256\\n            // variables such that product = prod1 * 2^256 + prod0.\\n            uint256 prod0; // Least significant 256 bits of the product\\n            uint256 prod1; // Most significant 256 bits of the product\\n            assembly {\\n                let mm := mulmod(x, y, not(0))\\n                prod0 := mul(x, y)\\n                prod1 := sub(sub(mm, prod0), lt(mm, prod0))\\n            }\\n\\n            // Handle non-overflow cases, 256 by 256 division.\\n            if (prod1 == 0) {\\n                return prod0 / denominator;\\n            }\\n\\n            // Make sure the result is less than 2^256. Also prevents denominator == 0.\\n            require(denominator > prod1);\\n\\n            ///////////////////////////////////////////////\\n            // 512 by 256 division.\\n            ///////////////////////////////////////////////\\n\\n            // Make division exact by subtracting the remainder from [prod1 prod0].\\n            uint256 remainder;\\n            assembly {\\n                // Compute remainder using mulmod.\\n                remainder := mulmod(x, y, denominator)\\n\\n                // Subtract 256 bit number from 512 bit number.\\n                prod1 := sub(prod1, gt(remainder, prod0))\\n                prod0 := sub(prod0, remainder)\\n            }\\n\\n            // Factor powers of two out of denominator and compute largest power of two divisor of denominator. Always >= 1.\\n            // See https://cs.stackexchange.com/q/138556/92363.\\n\\n            // Does not overflow because the denominator cannot be zero at this stage in the function.\\n            uint256 twos = denominator & (~denominator + 1);\\n            assembly {\\n                // Divide denominator by twos.\\n                denominator := div(denominator, twos)\\n\\n                // Divide [prod1 prod0] by twos.\\n                prod0 := div(prod0, twos)\\n\\n                // Flip twos such that it is 2^256 / twos. If twos is zero, then it becomes one.\\n                twos := add(div(sub(0, twos), twos), 1)\\n            }\\n\\n            // Shift in bits from prod1 into prod0.\\n            prod0 |= prod1 * twos;\\n\\n            // Invert denominator mod 2^256. Now that denominator is an odd number, it has an inverse modulo 2^256 such\\n            // that denominator * inv = 1 mod 2^256. Compute the inverse by starting with a seed that is correct for\\n            // four bits. That is, denominator * inv = 1 mod 2^4.\\n            uint256 inverse = (3 * denominator) ^ 2;\\n\\n            // Use the Newton-Raphson iteration to improve the precision. Thanks to Hensel's lifting lemma, this also works\\n            // in modular arithmetic, doubling the correct bits in each step.\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^8\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^16\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^32\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^64\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^128\\n            inverse *= 2 - denominator * inverse; // inverse mod 2^256\\n\\n            // Because the division is now exact we can divide by multiplying with the modular inverse of denominator.\\n            // This will give us the correct result modulo 2^256. Since the preconditions guarantee that the outcome is\\n            // less than 2^256, this is the final result. We don't need to compute the high bits of the result and prod1\\n            // is no longer required.\\n            result = prod0 * inverse;\\n            return result;\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates x * y / denominator with full precision, following the selected rounding direction.\\n     */\\n    function mulDiv(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator,\\n        Rounding rounding\\n    ) internal pure returns (uint256) {\\n        uint256 result = mulDiv(x, y, denominator);\\n        if (rounding == Rounding.Up && mulmod(x, y, denominator) > 0) {\\n            result += 1;\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Returns the square root of a number. If the number is not a perfect square, the value is rounded down.\\n     *\\n     * Inspired by Henry S. Warren, Jr.'s \\\"Hacker's Delight\\\" (Chapter 11).\\n     */\\n    function sqrt(uint256 a) internal pure returns (uint256) {\\n        if (a == 0) {\\n            return 0;\\n        }\\n\\n        // For our first guess, we get the biggest power of 2 which is smaller than the square root of the target.\\n        //\\n        // We know that the \\\"msb\\\" (most significant bit) of our target number `a` is a power of 2 such that we have\\n        // `msb(a) <= a < 2*msb(a)`. This value can be written `msb(a)=2**k` with `k=log2(a)`.\\n        //\\n        // This can be rewritten `2**log2(a) <= a < 2**(log2(a) + 1)`\\n        // \\u2192 `sqrt(2**k) <= sqrt(a) < sqrt(2**(k+1))`\\n        // \\u2192 `2**(k/2) <= sqrt(a) < 2**((k+1)/2) <= 2**(k/2 + 1)`\\n        //\\n        // Consequently, `2**(log2(a) / 2)` is a good first approximation of `sqrt(a)` with at least 1 correct bit.\\n        uint256 result = 1 << (log2(a) >> 1);\\n\\n        // At this point `result` is an estimation with one bit of precision. We know the true value is a uint128,\\n        // since it is the square root of a uint256. Newton's method converges quadratically (precision doubles at\\n        // every iteration). We thus need at most 7 iteration to turn our partial result with one bit of precision\\n        // into the expected uint128 result.\\n        unchecked {\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            result = (result + a / result) >> 1;\\n            return min(result, a / result);\\n        }\\n    }\\n\\n    /**\\n     * @notice Calculates sqrt(a), following the selected rounding direction.\\n     */\\n    function sqrt(uint256 a, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = sqrt(a);\\n            return result + (rounding == Rounding.Up && result * result < a ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 128;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 64;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 32;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 16;\\n            }\\n            if (value >> 8 > 0) {\\n                value >>= 8;\\n                result += 8;\\n            }\\n            if (value >> 4 > 0) {\\n                value >>= 4;\\n                result += 4;\\n            }\\n            if (value >> 2 > 0) {\\n                value >>= 2;\\n                result += 2;\\n            }\\n            if (value >> 1 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 2, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log2(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log2(value);\\n            return result + (rounding == Rounding.Up && 1 << result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >= 10**64) {\\n                value /= 10**64;\\n                result += 64;\\n            }\\n            if (value >= 10**32) {\\n                value /= 10**32;\\n                result += 32;\\n            }\\n            if (value >= 10**16) {\\n                value /= 10**16;\\n                result += 16;\\n            }\\n            if (value >= 10**8) {\\n                value /= 10**8;\\n                result += 8;\\n            }\\n            if (value >= 10**4) {\\n                value /= 10**4;\\n                result += 4;\\n            }\\n            if (value >= 10**2) {\\n                value /= 10**2;\\n                result += 2;\\n            }\\n            if (value >= 10**1) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log10(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log10(value);\\n            return result + (rounding == Rounding.Up && 10**result < value ? 1 : 0);\\n        }\\n    }\\n\\n    /**\\n     * @dev Return the log in base 256, rounded down, of a positive value.\\n     * Returns 0 if given 0.\\n     *\\n     * Adding one to the result gives the number of pairs of hex symbols needed to represent `value` as a hex string.\\n     */\\n    function log256(uint256 value) internal pure returns (uint256) {\\n        uint256 result = 0;\\n        unchecked {\\n            if (value >> 128 > 0) {\\n                value >>= 128;\\n                result += 16;\\n            }\\n            if (value >> 64 > 0) {\\n                value >>= 64;\\n                result += 8;\\n            }\\n            if (value >> 32 > 0) {\\n                value >>= 32;\\n                result += 4;\\n            }\\n            if (value >> 16 > 0) {\\n                value >>= 16;\\n                result += 2;\\n            }\\n            if (value >> 8 > 0) {\\n                result += 1;\\n            }\\n        }\\n        return result;\\n    }\\n\\n    /**\\n     * @dev Return the log in base 10, following the selected rounding direction, of a positive value.\\n     * Returns 0 if given 0.\\n     */\\n    function log256(uint256 value, Rounding rounding) internal pure returns (uint256) {\\n        unchecked {\\n            uint256 result = log256(value);\\n            return result + (rounding == Rounding.Up && 1 << (result * 8) < value ? 1 : 0);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xa1e8e83cd0087785df04ac79fb395d9f3684caeaf973d9e2c71caef723a3a5d6\",\"license\":\"MIT\"},\"contracts/libraries/errorTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nlibrary LibsErrorTypes {\\n    /***********************************|\\n    |         LiquidityCalcs            | \\n    |__________________________________*/\\n\\n    /// @notice thrown when supply or borrow exchange price is zero at calc token data (token not configured yet)\\n    uint256 internal constant LiquidityCalcs__ExchangePriceZero = 70001;\\n\\n    /// @notice thrown when rate data is set to a version that is not implemented\\n    uint256 internal constant LiquidityCalcs__UnsupportedRateVersion = 70002;\\n\\n    /// @notice thrown when the calculated borrow rate turns negative. This should never happen.\\n    uint256 internal constant LiquidityCalcs__BorrowRateNegative = 70003;\\n\\n    /***********************************|\\n    |           SafeTransfer            | \\n    |__________________________________*/\\n\\n    /// @notice thrown when safe transfer from for an ERC20 fails\\n    uint256 internal constant SafeTransfer__TransferFromFailed = 71001;\\n\\n    /// @notice thrown when safe transfer for an ERC20 fails\\n    uint256 internal constant SafeTransfer__TransferFailed = 71002;\\n}\\n\",\"keccak256\":\"0xaf7732f30d00dd38082d37aa37887be485fc94b0c76ff302aff615d03381674f\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/safeTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.21;\\n\\nimport { LibsErrorTypes as ErrorTypes } from \\\"./errorTypes.sol\\\";\\n\\n/// @notice provides minimalistic methods for safe transfers, e.g. ERC20 safeTransferFrom\\nlibrary SafeTransfer {\\n    uint256 internal constant MAX_NATIVE_TRANSFER_GAS = 20000; // pass max. 20k gas for native transfers\\n\\n    error FluidSafeTransferError(uint256 errorId_);\\n\\n    /// @dev Transfer `amount_` of `token_` from `from_` to `to_`, spending the approval given by `from_` to the\\n    /// calling contract. If `token_` returns no value, non-reverting calls are assumed to be successful.\\n    /// Minimally modified from Solmate SafeTransferLib (address as input param for token, Custom Error):\\n    /// https://github.com/transmissions11/solmate/blob/50e15bb566f98b7174da9b0066126a4c3e75e0fd/src/utils/SafeTransferLib.sol#L31-L63\\n    function safeTransferFrom(address token_, address from_, address to_, uint256 amount_) internal {\\n        bool success_;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(from_, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"from_\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), and(to_, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to_\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount_) // Append the \\\"amount_\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            success_ := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token_, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        if (!success_) {\\n            revert FluidSafeTransferError(ErrorTypes.SafeTransfer__TransferFromFailed);\\n        }\\n    }\\n\\n    /// @dev Transfer `amount_` of `token_` to `to_`.\\n    /// If `token_` returns no value, non-reverting calls are assumed to be successful.\\n    /// Minimally modified from Solmate SafeTransferLib (address as input param for token, Custom Error):\\n    /// https://github.com/transmissions11/solmate/blob/50e15bb566f98b7174da9b0066126a4c3e75e0fd/src/utils/SafeTransferLib.sol#L65-L95\\n    function safeTransfer(address token_, address to_, uint256 amount_) internal {\\n        bool success_;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(to_, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to_\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount_) // Append the \\\"amount_\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            success_ := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token_, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        if (!success_) {\\n            revert FluidSafeTransferError(ErrorTypes.SafeTransfer__TransferFailed);\\n        }\\n    }\\n\\n    /// @dev Transfer `amount_` of ` native token to `to_`.\\n    /// Minimally modified from Solmate SafeTransferLib (Custom Error):\\n    /// https://github.com/transmissions11/solmate/blob/50e15bb566f98b7174da9b0066126a4c3e75e0fd/src/utils/SafeTransferLib.sol#L15-L25\\n    function safeTransferNative(address to_, uint256 amount_) internal {\\n        bool success_;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not. Pass limited gas\\n            success_ := call(MAX_NATIVE_TRANSFER_GAS, to_, amount_, 0, 0, 0, 0)\\n        }\\n\\n        if (!success_) {\\n            revert FluidSafeTransferError(ErrorTypes.SafeTransfer__TransferFailed);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7f7d3a39d984c62e41c669a3d11deb899b3512ace9313263592575bf48a6e079\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/periphery/wallet/wallet/main.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { IERC721 } from \\\"@openzeppelin/contracts/interfaces/IERC721.sol\\\";\\nimport { IERC20 } from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\n\\nimport { SafeTransfer } from \\\"../../../libraries/safeTransfer.sol\\\";\\n\\nimport { Clones } from \\\"@openzeppelin/contracts/proxy/Clones.sol\\\";\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\n\\nimport { IFluidVaultFactory } from \\\"../../../protocols/vault/interfaces/iVaultFactory.sol\\\";\\nimport { IFluidVaultT1 } from \\\"../../../protocols/vault/interfaces/iVaultT1.sol\\\";\\nimport { IFluidVault } from \\\"../../../protocols/vault/interfaces/iVault.sol\\\";\\n\\n\\ninterface IFluidWalletFactory {\\n    function WALLET_PROXY() external view returns(address);\\n}\\n\\ninterface InstaFlashReceiverInterface {\\n    function executeOperation(\\n        address[] calldata assets,\\n        uint256[] calldata amounts,\\n        uint256[] calldata premiums,\\n        address initiator,\\n        bytes calldata _data\\n    ) external returns (bool);\\n}\\n\\nabstract contract FluidWalletVariables {\\n    /***********************************|\\n    |   Constants/Immutables            |\\n    |__________________________________*/\\n    string public constant VERSION = \\\"1.1.0\\\";\\n    address public constant ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    uint256 internal constant X32 = 0xffffffff;\\n\\n    address public immutable VAULT_FACTORY;\\n    address public immutable FLUID_WALLET_FACTORY;\\n\\n    /***********************************|\\n    |           Slot 0                  |\\n    |__________________________________*/\\n    /// @dev owner address of this wallet. It is initialized while deploying the wallet for the user.\\n    address public owner;\\n\\n    /***********************************|\\n    |           Slot 1                  |\\n    |__________________________________*/\\n    /// @dev transient allow hash used to signal allowing certain entry into methods such as executeOperation etc.\\n    bytes32 internal _transientAllowHash;\\n    \\n    function _resetTransientStorage() internal {\\n        assembly {\\n            sstore(1, 1) // Store 1 in the transient storage 1\\n        }\\n    }\\n}\\n\\ncontract FluidWalletErrorsAndEvents {\\n    error FluidWallet__NotAllowed();\\n    error FluidWallet__ToHexDigit();\\n    error FluidWallet__Unauthorized();\\n\\n    event Executed(\\n        address indexed owner,\\n        uint256 indexed tokenId\\n    );\\n\\n    event ExecutedCast(address indexed owner);\\n\\n    struct Action {\\n        address target;\\n        bytes data;\\n        uint256 value;\\n        uint8 operation;\\n    }\\n}\\n\\ncontract FluidWalletImplementation is FluidWalletVariables, FluidWalletErrorsAndEvents {\\n    \\n    constructor(\\n        address vaultFactory_,\\n        address fluidWalletFactory_\\n    ) {\\n        VAULT_FACTORY = vaultFactory_;\\n        FLUID_WALLET_FACTORY = fluidWalletFactory_;\\n    }\\n\\n    /// @dev                    ERC721 callback used Fluid Vault Factory and executes actions encoded in `data_`\\n    ///                         Caller should be Fluid Wallet Factory.\\n    /// @param operator_        operator_ caller to transfer the the given token ID\\n    /// @param from_            from_ previous owner of the given token ID\\n    /// @param tokenId_         tokenId_ id of the ERC721\\n    /// @param data_            data bytes containing the `abi.encoded()` actions that are executed like in `Action[]` & `owner`\\n    function onERC721Received(\\n        address operator_,\\n        address from_,\\n        uint256 tokenId_,\\n        bytes calldata data_\\n    ) external returns (bytes4) {\\n        if (msg.sender != address(VAULT_FACTORY)) revert FluidWallet__NotAllowed();\\n        if (operator_ != from_) revert FluidWallet__NotAllowed();\\n        if (operator_ != FLUID_WALLET_FACTORY) revert FluidWallet__NotAllowed();\\n\\n        (address owner_, Action[] memory actions_) = abi.decode(data_, (address, Action[]));\\n\\n        /// @dev validate owner by computing wallet address.\\n        _validateOwner(owner_);\\n\\n        /// @dev execute actions.\\n        _executeActions(actions_);\\n\\n        /// @dev reset _transientAllowHash to prevent reentrancy\\n        _resetTransientStorage();\\n\\n        // Transfer tokenId back to main owner\\n        if (IERC721(VAULT_FACTORY).ownerOf(tokenId_) == address(this)) {\\n            IERC721(VAULT_FACTORY).transferFrom(address(this), owner_, tokenId_);\\n        }\\n\\n        // sweep vault specific tokens to owner address\\n        _sweepTokens(owner_, tokenId_);\\n\\n        emit Executed(owner_, tokenId_);\\n\\n        return this.onERC721Received.selector;\\n    }\\n\\n    function cast(\\n        Action[] memory actions_\\n    ) public {\\n        /// @dev validate owner by computing wallet address.\\n        _validateOwner(msg.sender);\\n\\n        /// @dev execute actions.\\n        _executeActions(actions_);\\n\\n        /// @dev reset _transientAllowHash to prevent reentrancy\\n        _resetTransientStorage();\\n\\n        emit ExecutedCast(msg.sender);\\n    }\\n    \\n\\n    /***********************************|\\n    |         FLASHLOAN CALLBACK        |\\n    |__________________________________*/\\n\\n    /// @dev                    callback used by Instadapp Flashloan Aggregator, executes operations while owning\\n    ///                         the flashloaned amounts. `data_` must contain actions, one of them must pay back flashloan\\n    // /// @param assets_       assets_ received a flashloan for\\n    // /// @param amounts_      flashloaned amounts for each asset\\n    // /// @param premiums_     fees to pay for the flashloan\\n    /// @param initiator_       flashloan initiator -> must be this contract\\n    /// @param data_            data bytes containing the `abi.encoded()` actions that are executed like in `CastParams.actions`\\n\\n    function executeOperation(\\n        address[] calldata /* assets */,\\n        uint256[] calldata /* amounts */,\\n        uint256[] calldata /* premiums */,\\n        address initiator_,\\n        bytes calldata data_\\n    ) external returns (bool) {\\n        if (\\n            !(_transientAllowHash ==\\n                bytes32(keccak256(abi.encode(data_, block.timestamp))) &&\\n                initiator_ == address(this))\\n        ) {\\n            revert FluidWallet__Unauthorized();\\n        }\\n\\n        _executeActions(abi.decode(data_, (Action[])));\\n\\n        return true;\\n    }\\n\\n    /***********************************|\\n    |         INTERNAL HELPERS          |\\n    |__________________________________*/\\n\\n    /// @notice Calculating the slot ID for Liquidity contract for single mapping\\n    function _calculateStorageSlotUintMapping(uint256 slot_, uint key_) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(key_, slot_));\\n    }\\n\\n    struct VaultConstants {\\n        address supplyToken0;\\n        address supplyToken1;\\n        address borrowToken0;\\n        address borrowToken1;\\n    }\\n\\n    function _sweepTokens(address owner_, uint256 tokenId_) internal {\\n        uint256 tokenConfig_ = IFluidVaultFactory(VAULT_FACTORY).readFromStorage(_calculateStorageSlotUintMapping(3, tokenId_));\\n        address vaultAddress_ = IFluidVaultFactory(VAULT_FACTORY).getVaultAddress((tokenConfig_ >> 192) & X32);\\n\\n        VaultConstants memory constants_ = _getVaultConstants(vaultAddress_);\\n\\n        _flushTokens(constants_.supplyToken0, owner_);\\n        _flushTokens(constants_.supplyToken1, owner_);\\n        _flushTokens(constants_.borrowToken0, owner_);\\n        _flushTokens(constants_.borrowToken1, owner_);\\n    }\\n\\n    function _getVaultConstants(address vault_) internal view returns (VaultConstants memory constants_) {\\n        if (vault_.code.length == 0) {\\n            return constants_;\\n        }\\n        try IFluidVault(vault_).TYPE() returns (uint256 type_) {\\n            IFluidVault.ConstantViews memory vaultConstants_ = IFluidVault(vault_).constantsView();\\n\\n            constants_.supplyToken0 = vaultConstants_.supplyToken.token0;\\n            constants_.supplyToken1 = vaultConstants_.supplyToken.token1;\\n            constants_.borrowToken0 = vaultConstants_.borrowToken.token0;\\n            constants_.borrowToken1 = vaultConstants_.borrowToken.token1;\\n        } catch {\\n            IFluidVaultT1.ConstantViews memory vaultConstants_ = IFluidVaultT1(vault_).constantsView();\\n            \\n            constants_.supplyToken0 = vaultConstants_.supplyToken;\\n            constants_.supplyToken1 = address(0);\\n            constants_.borrowToken0 = vaultConstants_.borrowToken;\\n            constants_.borrowToken1 = address(0);\\n        }\\n    }\\n\\n    function _flushTokens(address token_, address owner_) internal {\\n        if (token_ == address(0)) return;\\n\\n        if (token_ == ETH_ADDRESS) {\\n            uint256 balance_ = address(this).balance;\\n            \\n            if (balance_ > 0) SafeTransfer.safeTransferNative(payable(owner_), balance_);\\n        } else {\\n            uint256 balance_ = IERC20(token_).balanceOf(address(this));\\n\\n            if (balance_ > 0) SafeTransfer.safeTransfer(token_, owner_, balance_);\\n        }\\n    }\\n\\n    /// @dev validate `owner` by recomputing fluid address.\\n    function _validateOwner(address owner_) internal view {\\n        address wallet_ = Clones.predictDeterministicAddress(\\n            IFluidWalletFactory(FLUID_WALLET_FACTORY).WALLET_PROXY(),\\n            keccak256(abi.encode(owner_)),\\n            FLUID_WALLET_FACTORY\\n        );\\n        if (wallet_ != address(this)) revert FluidWallet__NotAllowed();\\n    }\\n\\n    /// @dev executes `actions_` with respective target, calldata, operation etc.\\n    function _executeActions(Action[] memory actions_) internal {\\n       uint256 actionsLength_ = actions_.length;\\n        for (uint256 i; i < actionsLength_; ) {\\n            Action memory action_ = actions_[i];\\n\\n            // execute action\\n            bool success_;\\n            bytes memory result_;\\n            if (action_.operation == 0) {\\n                // call (operation = 0)\\n\\n                // low-level call will return success true also if action target is not even a contract.\\n                // we do not explicitly check for this, default interaction is via UI which can check and handle this.\\n                // Also applies to delegatecall etc.\\n                (success_, result_) = action_.target.call{ value: action_.value }(action_.data);\\n\\n                // handle action failure right after external call to better detect out of gas errors\\n                if (!success_) {\\n                    _handleActionFailure(i, result_);\\n                }\\n            } else if (action_.operation == 1) {\\n                // delegatecall (operation = 1)\\n\\n                (success_, result_) = action_.target.delegatecall(action_.data);\\n\\n                // reset _transientAllowHash to make sure it can not be set up in any way for reentrancy\\n                _resetTransientStorage();\\n\\n                // handle action failure right after external call to better detect out of gas errors\\n                if (!success_) {\\n                    _handleActionFailure(i, result_);\\n                }\\n            } else if (action_.operation == 2) {\\n                // flashloan (operation = 2)\\n                // flashloan is always executed via .call, flashloan aggregator uses `msg.sender`, so .delegatecall\\n                // wouldn't send funds to this contract but rather to the original sender.\\n\\n                bytes memory data_ = action_.data;\\n                assembly {\\n                    data_ := add(data_, 4) // Skip function selector (4 bytes)\\n                }\\n                // get actions data from calldata action_.data. Only supports InstaFlashAggregatorInterface\\n                (, , , data_, ) = abi.decode(data_, (address[], uint256[], uint256, bytes, bytes));\\n\\n                // set allowHash to signal allowed entry into executeOperation()\\n                _transientAllowHash = bytes32(\\n                    keccak256(abi.encode(data_, block.timestamp))\\n                );\\n\\n                // handle action failure right after external call to better detect out of gas errors\\n                (success_, result_) = action_.target.call{ value: action_.value }(action_.data);\\n\\n                if (!success_) {\\n                    _handleActionFailure(i, result_);\\n                }\\n\\n                // reset _transientAllowHash to prevent reentrancy during actions execution\\n                _resetTransientStorage();\\n            } else {\\n                // either operation does not exist or the id was not set according to what the action wants to execute\\n                revert(string.concat(Strings.toString(i), \\\"_FLUID__INVALID_ID_OR_OPERATION\\\"));\\n            }\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n    }\\n\\n    /// @dev handles failure of an action execution depending on error cause,\\n    /// decoding and reverting with `result_` as reason string.\\n    function _handleActionFailure(uint256 i_, bytes memory result_) internal pure {\\n        revert(string.concat(Strings.toString(i_), _getRevertReasonFromReturnedData(result_)));\\n    }\\n\\n    uint256 internal constant REVERT_REASON_MAX_LENGTH = 250;\\n\\n    /// @dev Get the revert reason from the returnedData (supports Panic, Error & Custom Errors).\\n    /// Based on https://github.com/superfluid-finance/protocol-monorepo/blob/dev/packages/ethereum-contracts/contracts/libs/CallUtils.sol\\n    /// This is needed in order to provide some human-readable revert message from a call.\\n    /// @param returnedData_ revert data of the call\\n    /// @return reason_      revert reason\\n    function _getRevertReasonFromReturnedData(\\n        bytes memory returnedData_\\n    ) internal pure returns (string memory reason_) {\\n        if (returnedData_.length < 4) {\\n            // case 1: catch all\\n            return \\\"_REASON_NOT_DEFINED\\\";\\n        }\\n\\n        bytes4 errorSelector_;\\n        assembly {\\n            errorSelector_ := mload(add(returnedData_, 0x20))\\n        }\\n        if (errorSelector_ == bytes4(0x4e487b71)) {\\n            // case 2: Panic(uint256), selector 0x4e487b71 (Defined since 0.8.0)\\n            // ref: https://docs.soliditylang.org/en/v0.8.0/control-structures.html#panic-via-assert-and-error-via-require)\\n\\n            // convert last byte to hex digits -> string to decode the panic code\\n            bytes memory result_ = new bytes(2);\\n            result_[0] = _toHexDigit(uint8(returnedData_[returnedData_.length - 1]) / 16);\\n            result_[1] = _toHexDigit(uint8(returnedData_[returnedData_.length - 1]) % 16);\\n            reason_ = string.concat(\\\"_TARGET_PANICKED: 0x\\\", string(result_));\\n        } else if (errorSelector_ == bytes4(0x08c379a0)) {\\n            // case 3: Error(string), selector 0x08c379a0 (Defined at least since 0.7.0)\\n            // based on https://ethereum.stackexchange.com/a/83577\\n            assembly {\\n                returnedData_ := add(returnedData_, 0x04)\\n            }\\n            reason_ = string.concat(\\\"_\\\", abi.decode(returnedData_, (string)));\\n        } else {\\n            // case 4: Custom errors (Defined since 0.8.0)\\n\\n            // convert bytes4 selector to string, params are ignored...\\n            // based on https://ethereum.stackexchange.com/a/111876\\n            bytes memory result_ = new bytes(8);\\n            for (uint256 i; i < 4; ) {\\n                // use unchecked as i is < 4 and division. also errorSelector can not underflow\\n                unchecked {\\n                    result_[2 * i] = _toHexDigit(uint8(errorSelector_[i]) / 16);\\n                    result_[2 * i + 1] = _toHexDigit(uint8(errorSelector_[i]) % 16);\\n                    ++i;\\n                }\\n            }\\n            reason_ = string.concat(\\\"_CUSTOM_ERROR: 0x\\\", string(result_));\\n        }\\n\\n        {\\n            // truncate reason_ string to REVERT_REASON_MAX_LENGTH for reserveGas used to ensure Cast event is emitted\\n            if (bytes(reason_).length > REVERT_REASON_MAX_LENGTH) {\\n                bytes memory reasonBytes_ = bytes(reason_);\\n                uint256 maxLength_ = REVERT_REASON_MAX_LENGTH + 1; // cheaper than <= in each loop\\n                bytes memory truncatedRevertReason_ = new bytes(maxLength_);\\n                for (uint256 i; i < maxLength_; ) {\\n                    truncatedRevertReason_[i] = reasonBytes_[i];\\n\\n                    unchecked {\\n                        ++i;\\n                    }\\n                }\\n                reason_ = string(truncatedRevertReason_);\\n            }\\n        }\\n    }\\n\\n    /// @dev used to convert bytes4 selector to string\\n    function _toHexDigit(uint8 d) internal pure returns (bytes1) {\\n        // use unchecked as the operations with d can not over / underflow\\n        unchecked {\\n            if (d < 10) {\\n                return bytes1(uint8(bytes1(\\\"0\\\")) + d);\\n            }\\n            if (d < 16) {\\n                return bytes1(uint8(bytes1(\\\"a\\\")) + d - 10);\\n            }\\n        }\\n        revert FluidWallet__ToHexDigit();\\n    }\\n}\",\"keccak256\":\"0x4703cbe2fee9b742e97060a981f40ff1b46834272c3a259128ab530252e30cf0\",\"license\":\"BUSL-1.1\"},\"contracts/protocols/vault/interfaces/iVault.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\n/// @notice common Fluid vaults interface, some methods only available for vaults > T1 (type, simulateLiquidate, rebalance is different)\\ninterface IFluidVault {\\n    /// @notice returns the vault id\\n    function VAULT_ID() external view returns (uint256);\\n\\n    /// @notice returns the vault id\\n    function TYPE() external view returns (uint256);\\n\\n    /// @notice reads uint256 data `result_` from storage at a bytes32 storage `slot_` key.\\n    function readFromStorage(bytes32 slot_) external view returns (uint256 result_);\\n\\n    struct Tokens {\\n        address token0;\\n        address token1;\\n    }\\n\\n    struct ConstantViews {\\n        address liquidity;\\n        address factory;\\n        address operateImplementation;\\n        address adminImplementation;\\n        address secondaryImplementation;\\n        address deployer; // address which deploys oracle\\n        address supply; // either liquidity layer or DEX protocol\\n        address borrow; // either liquidity layer or DEX protocol\\n        Tokens supplyToken; // if smart collateral then address of token0 & token1 else just supply token address at token0 and token1 as empty\\n        Tokens borrowToken; // if smart debt then address of token0 & token1 else just borrow token address at token0 and token1 as empty\\n        uint256 vaultId;\\n        uint256 vaultType;\\n        bytes32 supplyExchangePriceSlot; // if smart collateral then slot is from DEX protocol else from liquidity layer\\n        bytes32 borrowExchangePriceSlot; // if smart debt then slot is from DEX protocol else from liquidity layer\\n        bytes32 userSupplySlot; // if smart collateral then slot is from DEX protocol else from liquidity layer\\n        bytes32 userBorrowSlot; // if smart debt then slot is from DEX protocol else from liquidity layer\\n    }\\n\\n    /// @notice returns all Vault constants\\n    function constantsView() external view returns (ConstantViews memory constantsView_);\\n\\n    /// @notice fetches the latest user position after a liquidation\\n    function fetchLatestPosition(\\n        int256 positionTick_,\\n        uint256 positionTickId_,\\n        uint256 positionRawDebt_,\\n        uint256 tickData_\\n    )\\n        external\\n        view\\n        returns (\\n            int256, // tick\\n            uint256, // raw debt\\n            uint256, // raw collateral\\n            uint256, // branchID_\\n            uint256 // branchData_\\n        );\\n\\n    /// @notice calculates the updated vault exchange prices\\n    function updateExchangePrices(\\n        uint256 vaultVariables2_\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 liqSupplyExPrice_,\\n            uint256 liqBorrowExPrice_,\\n            uint256 vaultSupplyExPrice_,\\n            uint256 vaultBorrowExPrice_\\n        );\\n\\n    /// @notice calculates the updated vault exchange prices and writes them to storage\\n    function updateExchangePricesOnStorage()\\n        external\\n        returns (\\n            uint256 liqSupplyExPrice_,\\n            uint256 liqBorrowExPrice_,\\n            uint256 vaultSupplyExPrice_,\\n            uint256 vaultBorrowExPrice_\\n        );\\n\\n    /// @notice returns the liquidity contract address\\n    function LIQUIDITY() external view returns (address);\\n\\n    error FluidLiquidateResult(uint256 colLiquidated, uint256 debtLiquidated);\\n\\n    function rebalance(\\n        int colToken0MinMax_,\\n        int colToken1MinMax_,\\n        int debtToken0MinMax_,\\n        int debtToken1MinMax_\\n    ) external returns (int supplyAmt_, int borrowAmt_);\\n\\n    /// @notice reverts with FluidLiquidateResult\\n    function simulateLiquidate(uint debtAmt_, bool absorb_) external;\\n}\\n\",\"keccak256\":\"0x9eb8e92c52e2ee7222a07a6e995b6bf7604a3e9a7ff1053722aef762948fd4bd\",\"license\":\"MIT\"},\"contracts/protocols/vault/interfaces/iVaultFactory.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nimport { IERC721Enumerable } from \\\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\\\";\\n\\ninterface IFluidVaultFactory is IERC721Enumerable {\\n    /// @notice Minting an NFT Vault for the user\\n    function mint(uint256 vaultId_, address user_) external returns (uint256 tokenId_);\\n\\n    /// @notice returns owner of Vault which is also an NFT\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /// @notice Global auth is auth for all vaults\\n    function isGlobalAuth(address auth_) external view returns (bool);\\n\\n    /// @notice Vault auth is auth for a specific vault\\n    function isVaultAuth(address vault_, address auth_) external view returns (bool);\\n\\n    /// @notice Total vaults deployed.\\n    function totalVaults() external view returns (uint256);\\n\\n    /// @notice Compute vaultAddress\\n    function getVaultAddress(uint256 vaultId) external view returns (address);\\n\\n    /// @notice read uint256 `result_` for a storage `slot_` key\\n    function readFromStorage(bytes32 slot_) external view returns (uint256 result_);\\n}\\n\",\"keccak256\":\"0xc4a0caed89a8670e1ccf159d03fa23bb29f69c579f522bb0e33b1b5cb106c40d\",\"license\":\"MIT\"},\"contracts/protocols/vault/interfaces/iVaultT1.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\ninterface IFluidVaultT1 {\\n    /// @notice returns the vault id\\n    function VAULT_ID() external view returns (uint256);\\n\\n    /// @notice reads uint256 data `result_` from storage at a bytes32 storage `slot_` key.\\n    function readFromStorage(bytes32 slot_) external view returns (uint256 result_);\\n\\n    struct ConstantViews {\\n        address liquidity;\\n        address factory;\\n        address adminImplementation;\\n        address secondaryImplementation;\\n        address supplyToken;\\n        address borrowToken;\\n        uint8 supplyDecimals;\\n        uint8 borrowDecimals;\\n        uint vaultId;\\n        bytes32 liquiditySupplyExchangePriceSlot;\\n        bytes32 liquidityBorrowExchangePriceSlot;\\n        bytes32 liquidityUserSupplySlot;\\n        bytes32 liquidityUserBorrowSlot;\\n    }\\n\\n    /// @notice returns all Vault constants\\n    function constantsView() external view returns (ConstantViews memory constantsView_);\\n\\n    /// @notice fetches the latest user position after a liquidation\\n    function fetchLatestPosition(\\n        int256 positionTick_,\\n        uint256 positionTickId_,\\n        uint256 positionRawDebt_,\\n        uint256 tickData_\\n    )\\n        external\\n        view\\n        returns (\\n            int256, // tick\\n            uint256, // raw debt\\n            uint256, // raw collateral\\n            uint256, // branchID_\\n            uint256 // branchData_\\n        );\\n\\n    /// @notice calculates the updated vault exchange prices\\n    function updateExchangePrices(\\n        uint256 vaultVariables2_\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 liqSupplyExPrice_,\\n            uint256 liqBorrowExPrice_,\\n            uint256 vaultSupplyExPrice_,\\n            uint256 vaultBorrowExPrice_\\n        );\\n\\n    /// @notice calculates the updated vault exchange prices and writes them to storage\\n    function updateExchangePricesOnStorage()\\n        external\\n        returns (\\n            uint256 liqSupplyExPrice_,\\n            uint256 liqBorrowExPrice_,\\n            uint256 vaultSupplyExPrice_,\\n            uint256 vaultBorrowExPrice_\\n        );\\n\\n    /// @notice returns the liquidity contract address\\n    function LIQUIDITY() external view returns (address);\\n\\n    function operate(\\n        uint256 nftId_, // if 0 then new position\\n        int256 newCol_, // if negative then withdraw\\n        int256 newDebt_, // if negative then payback\\n        address to_ // address at which the borrow & withdraw amount should go to. If address(0) then it'll go to msg.sender\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256, // nftId_\\n            int256, // final supply amount. if - then withdraw\\n            int256 // final borrow amount. if - then payback\\n        );\\n\\n    function liquidate(\\n        uint256 debtAmt_,\\n        uint256 colPerUnitDebt_, // min collateral needed per unit of debt in 1e18\\n        address to_,\\n        bool absorb_\\n    ) external payable returns (uint actualDebtAmt_, uint actualColAmt_);\\n\\n    function absorb() external;\\n\\n    function rebalance() external payable returns (int supplyAmt_, int borrowAmt_);\\n\\n    error FluidLiquidateResult(uint256 colLiquidated, uint256 debtLiquidated);\\n}\\n\",\"keccak256\":\"0x447e05743da212ce720baea2fabb6191ed1a7f3d1e737d4b1ce9bdcdd268d398\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c06040523480156200001157600080fd5b506040516200267d3803806200267d833981016040819052620000349162000069565b6001600160a01b039182166080521660a052620000a1565b80516001600160a01b03811681146200006457600080fd5b919050565b600080604083850312156200007d57600080fd5b62000088836200004c565b915062000098602084016200004c565b90509250929050565b60805160a05161257f620000fe6000396000818161013c015281816102dd0152818161067f015261074501526000818160920152818161021f015281816103d4015281816104ac01528181610b270152610c1e015261257f6000f3fe608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b1461015e578063920f5c841461017e578063a734f06e146101a1578063ffa1ad74146101bc57600080fd5b8063103f29071461008d578063150b7a02146100de57806357b7bf20146101225780636ff66e7914610137575b600080fd5b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100f16100ec36600461185a565b610205565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016100d5565b610135610130366004611b97565b610583565b005b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6000546100b49073ffffffffffffffffffffffffffffffffffffffff1681565b61019161018c366004611c19565b6105cc565b60405190151581526020016100d5565b6100b473eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6101f86040518060400160405280600581526020017f312e312e3000000000000000000000000000000000000000000000000000000081525081565b6040516100d59190611d62565b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610276576040517f52df424e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146102db576040517f52df424e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614610360576040517f52df424e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008061036f84860186611d7c565b9150915061037c82610678565b61038581610815565b61038e60018055565b6040517f6352211e00000000000000000000000000000000000000000000000000000000815260048101879052309073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690636352211e90602401602060405180830381865afa15801561041b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043f9190611dd7565b73ffffffffffffffffffffffffffffffffffffffff1603610509576040517f23b872dd00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8381166024830152604482018890527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd90606401600060405180830381600087803b1580156104f057600080fd5b505af1158015610504573d6000803e3d6000fd5b505050505b6105138287610b23565b604051869073ffffffffffffffffffffffffffffffffffffffff8416907f6f6c6d78a4851d4c222c8404fc92372ee84b7b81054305ae8ea3c83c2dabd42e90600090a3507f150b7a0200000000000000000000000000000000000000000000000000000000979650505050505050565b61058c33610678565b61059581610815565b61059e60018055565b60405133907fd2c4fe7e5a558f9b1b406ce6cd257540e044fe92fa299597ed9656533c6a8c8d90600090a250565b60008282426040516020016105e393929190611df4565b6040516020818303038152906040528051906020012060015414801561061e575073ffffffffffffffffffffffffffffffffffffffff841630145b610654576040517f38b760c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61066861066383850185611b97565b610815565b5060019998505050505050505050565b60006107c07f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ba8df43c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070c9190611dd7565b6040805173ffffffffffffffffffffffffffffffffffffffff8616602082015201604051602081830303815290604052805190602001207f000000000000000000000000000000000000000000000000000000000000000060405160388101919091526f5af43d82803e903d91602b57fd5bf3ff60248201526014810192909252733d602d80600a3d3981f3363d3d373d3d3d363d73825260588201526037600c8201206078820152605560439091012090565b905073ffffffffffffffffffffffffffffffffffffffff81163014610811576040517f52df424e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b805160005b81811015610b1e57600083828151811061083657610836611e4b565b6020026020010151905060006060826060015160ff166000036108e157826000015173ffffffffffffffffffffffffffffffffffffffff16836040015184602001516040516108859190611e7a565b60006040518083038185875af1925050503d80600081146108c2576040519150601f19603f3d011682016040523d82523d6000602084013e6108c7565b606091505b509092509050816108dc576108dc8482610cd7565b610b10565b826060015160ff1660010361097b57826000015173ffffffffffffffffffffffffffffffffffffffff16836020015160405161091d9190611e7a565b600060405180830381855af49150503d8060008114610958576040519150601f19603f3d011682016040523d82523d6000602084013e61095d565b606091505b50909250905061096c60018055565b816108dc576108dc8482610cd7565b826060015160ff16600203610a9057602083015160048101805190916109a991810160249081019101611f41565b506040519094506109c39350849250429150602001612059565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815282825280516020918201206001558651918701519087015173ffffffffffffffffffffffffffffffffffffffff909216929091610a2a91611e7a565b60006040518083038185875af1925050503d8060008114610a67576040519150601f19603f3d011682016040523d82523d6000602084013e610a6c565b606091505b50909350915082610a8157610a818583610cd7565b610a8a60018055565b50610b10565b610a9984610cfa565b604051602001610aa9919061207b565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a0000000000000000000000000000000000000000000000000000000008252610b0791600401611d62565b60405180910390fd5b83600101935050505061081a565b505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b5c736e4610b6c600385610db8565b6040518263ffffffff1660e01b8152600401610b8a91815260200190565b602060405180830381865afa158015610ba7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcb91906120bc565b6040517fe6bd26a200000000000000000000000000000000000000000000000000000000815260c082901c63ffffffff16600482015290915060009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063e6bd26a290602401602060405180830381865afa158015610c65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c899190611dd7565b90506000610c9682610de7565b9050610ca681600001518661102e565b610cb481602001518661102e565b610cc281604001518661102e565b610cd081606001518661102e565b5050505050565b610ce082610cfa565b610ce98261113f565b604051602001610aa99291906120d5565b60606000610d07836115b4565b600101905060008167ffffffffffffffff811115610d2757610d276118cd565b6040519080825280601f01601f191660200182016040528015610d51576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084610d5b57509392505050565b604080516020808201849052818301859052825180830384018152606090920190925280519101205b92915050565b6040805160808101825260008082526020820181905291810182905260608101919091528173ffffffffffffffffffffffffffffffffffffffff163b600003610e2f57919050565b8173ffffffffffffffffffffffffffffffffffffffff1663bb24fe8a6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610eb4575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252610eb1918101906120bc565b60015b610f695760008273ffffffffffffffffffffffffffffffffffffffff1663b7791bf26040518163ffffffff1660e01b81526004016101a060405180830381865afa158015610f06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2a919061213e565b608081015173ffffffffffffffffffffffffffffffffffffffff908116845260006020850181905260a090920151166040840152606083015250919050565b60008373ffffffffffffffffffffffffffffffffffffffff1663b7791bf26040518163ffffffff1660e01b815260040161024060405180830381865afa158015610fb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdb9190612280565b610100810180515173ffffffffffffffffffffffffffffffffffffffff9081168652905160209081015182168187015261012090920180515182166040870152519091015116606084015250505b919050565b73ffffffffffffffffffffffffffffffffffffffff821661104d575050565b7fffffffffffffffffffffffff111111111111111111111111111111111111111273ffffffffffffffffffffffffffffffffffffffff83160161109b57478015610b1e57610b1e8282611696565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa158015611108573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112c91906120bc565b90508015610b1e57610b1e8383836116e2565b606060048251101561118457505060408051808201909152601381527f5f524541534f4e5f4e4f545f444546494e454400000000000000000000000000602082015290565b60208201517fb1b7848f000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008216016113105760408051600280825281830190925260009160208201818036833701905050905061122e6010856001875161120791906123c7565b8151811061121757611217611e4b565b0160200151611229919060f81c6123da565b61178c565b8160008151811061124157611241611e4b565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506112a66010856001875161128491906123c7565b8151811061129457611294611e4b565b0160200151611229919060f81c6123fc565b816001815181106112b9576112b9611e4b565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350806040516020016112f9919061241e565b6040516020818303038152906040529250506114d4565b7ff73c8660000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000082160161139957600483019250828060200190518101906113739190612463565b60405160200161138391906124ac565b60405160208183030381529060405291506114d4565b60408051600880825281830190925260009160208201818036833701905050905060005b60048110156114af576113f160108483600481106113dd576113dd611e4b565b1a816113eb576113eb612104565b0461178c565b82826002028151811061140657611406611e4b565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350611460601084836004811061144c5761144c611e4b565b1a8161145a5761145a612104565b0661178c565b82826002026001018151811061147857611478611e4b565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506001016113bd565b50806040516020016114c191906124f1565b6040516020818303038152906040529250505b60fa825111156115ae578160006114ed60fa6001612536565b905060008167ffffffffffffffff81111561150a5761150a6118cd565b6040519080825280601f01601f191660200182016040528015611534576020820181803683370190505b50905060005b828110156115a85783818151811061155457611554611e4b565b602001015160f81c60f81b82828151811061157157611571611e4b565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060010161153a565b50935050505b50919050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106115fd577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310611629576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061164757662386f26fc10000830492506010015b6305f5e100831061165f576305f5e100830492506008015b612710831061167357612710830492506004015b60648310611685576064830492506002015b600a8310610de15760010192915050565b60008060008060008587614e20f1905080610b1e576040517fdee51a8a0000000000000000000000000000000000000000000000000000000081526201155a6004820152602401610b07565b60006040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080611786576040517fdee51a8a0000000000000000000000000000000000000000000000000000000081526201155a6004820152602401610b07565b50505050565b6000600a8260ff1610156117a4575060300160f81b90565b60108260ff1610156117ba575060570160f81b90565b6040517fb0b8d61a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461180e57600080fd5b50565b60008083601f84011261182357600080fd5b50813567ffffffffffffffff81111561183b57600080fd5b60208301915083602082850101111561185357600080fd5b9250929050565b60008060008060006080868803121561187257600080fd5b853561187d816117ec565b9450602086013561188d816117ec565b935060408601359250606086013567ffffffffffffffff8111156118b057600080fd5b6118bc88828901611811565b969995985093965092949392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516080810167ffffffffffffffff8111828210171561191f5761191f6118cd565b60405290565b6040516101a0810167ffffffffffffffff8111828210171561191f5761191f6118cd565b604051610200810167ffffffffffffffff8111828210171561191f5761191f6118cd565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156119b4576119b46118cd565b604052919050565b600067ffffffffffffffff8211156119d6576119d66118cd565b5060051b60200190565b600067ffffffffffffffff8211156119fa576119fa6118cd565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60ff8116811461180e57600080fd5b803561102981611a26565b600082601f830112611a5157600080fd5b81356020611a66611a61836119bc565b61196d565b82815260059290921b84018101918181019086841115611a8557600080fd5b8286015b84811015611b8c57803567ffffffffffffffff80821115611aaa5760008081fd5b81890191506080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0848d03011215611ae35760008081fd5b611aeb6118fc565b87840135611af8816117ec565b815260408481013584811115611b0e5760008081fd5b85019350603f84018d13611b225760008081fd5b88840135611b32611a61826119e0565b8181528e83838801011115611b475760008081fd5b818387018c83013760008b8383010152808b850152505060609350838501358183015250611b76828501611a35565b9281019290925250845250918301918301611a89565b509695505050505050565b600060208284031215611ba957600080fd5b813567ffffffffffffffff811115611bc057600080fd5b611bcc84828501611a40565b949350505050565b60008083601f840112611be657600080fd5b50813567ffffffffffffffff811115611bfe57600080fd5b6020830191508360208260051b850101111561185357600080fd5b600080600080600080600080600060a08a8c031215611c3757600080fd5b893567ffffffffffffffff80821115611c4f57600080fd5b611c5b8d838e01611bd4565b909b50995060208c0135915080821115611c7457600080fd5b611c808d838e01611bd4565b909950975060408c0135915080821115611c9957600080fd5b611ca58d838e01611bd4565b909750955060608c01359150611cba826117ec565b90935060808b01359080821115611cd057600080fd5b50611cdd8c828d01611811565b915080935050809150509295985092959850929598565b60005b83811015611d0f578181015183820152602001611cf7565b50506000910152565b60008151808452611d30816020860160208601611cf4565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000611d756020830184611d18565b9392505050565b60008060408385031215611d8f57600080fd5b8235611d9a816117ec565b9150602083013567ffffffffffffffff811115611db657600080fd5b611dc285828601611a40565b9150509250929050565b8051611029816117ec565b600060208284031215611de957600080fd5b8151611d75816117ec565b6040815282604082015282846060830137600060608483010152600060607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8601168301019050826020830152949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008251611e8c818460208701611cf4565b9190910192915050565b600082601f830112611ea757600080fd5b81516020611eb7611a61836119bc565b82815260059290921b84018101918181019086841115611ed657600080fd5b8286015b84811015611b8c5780518352918301918301611eda565b6000611eff611a61846119e0565b9050828152838383011115611f1357600080fd5b611d75836020830184611cf4565b600082601f830112611f3257600080fd5b611d7583835160208501611ef1565b600080600080600060a08688031215611f5957600080fd5b855167ffffffffffffffff80821115611f7157600080fd5b818801915088601f830112611f8557600080fd5b81516020611f95611a61836119bc565b82815260059290921b8401810191818101908c841115611fb457600080fd5b948201945b83861015611fdb578551611fcc816117ec565b82529482019490820190611fb9565b918b0151919950909350505080821115611ff457600080fd5b61200089838a01611e96565b955060408801519450606088015191508082111561201d57600080fd5b61202989838a01611f21565b9350608088015191508082111561203f57600080fd5b5061204c88828901611f21565b9150509295509295909350565b60408152600061206c6040830185611d18565b90508260208301529392505050565b6000825161208d818460208701611cf4565b7f5f464c5549445f5f494e56414c49445f49445f4f525f4f5045524154494f4e00920191825250601f01919050565b6000602082840312156120ce57600080fd5b5051919050565b600083516120e7818460208801611cf4565b8351908301906120fb818360208801611cf4565b01949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b805161102981611a26565b60006101a0828403121561215157600080fd5b612159611925565b61216283611dcc565b815261217060208401611dcc565b602082015261218160408401611dcc565b604082015261219260608401611dcc565b60608201526121a360808401611dcc565b60808201526121b460a08401611dcc565b60a08201526121c560c08401612133565b60c08201526121d660e08401612133565b60e08201526101008381015190820152610120808401519082015261014080840151908201526101608084015190820152610180928301519281019290925250919050565b60006040828403121561222d57600080fd5b6040516040810181811067ffffffffffffffff82111715612250576122506118cd565b80604052508091508251612263816117ec565b81526020830151612273816117ec565b6020919091015292915050565b6000610240828403121561229357600080fd5b61229b611949565b6122a483611dcc565b81526122b260208401611dcc565b60208201526122c360408401611dcc565b60408201526122d460608401611dcc565b60608201526122e560808401611dcc565b60808201526122f660a08401611dcc565b60a082015261230760c08401611dcc565b60c082015261231860e08401611dcc565b60e082015261010061232c8582860161221b565b9082015261014061233f8585830161221b565b61012083015261018080850151828401526101a09150818501516101608401526101c080860151828501526101e09150818601518385015261020086015181850152506102208501518184015250508091505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81810381811115610de157610de1612398565b600060ff8316806123ed576123ed612104565b8060ff84160491505092915050565b600060ff83168061240f5761240f612104565b8060ff84160691505092915050565b7f5f5441524745545f50414e49434b45443a203078000000000000000000000000815260008251612456816014850160208701611cf4565b9190910160140192915050565b60006020828403121561247557600080fd5b815167ffffffffffffffff81111561248c57600080fd5b8201601f8101841361249d57600080fd5b611bcc84825160208401611ef1565b7f5f000000000000000000000000000000000000000000000000000000000000008152600082516124e4816001850160208701611cf4565b9190910160010192915050565b7f5f435553544f4d5f4552524f523a203078000000000000000000000000000000815260008251612529816011850160208701611cf4565b9190910160110192915050565b80820180821115610de157610de161239856fea2646970667358221220aace86a84be1f01b9e364d89d65960652c66d949f8711ebe7882cd09086c5c1064736f6c63430008150033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100885760003560e01c80638da5cb5b1161005b5780638da5cb5b1461015e578063920f5c841461017e578063a734f06e146101a1578063ffa1ad74146101bc57600080fd5b8063103f29071461008d578063150b7a02146100de57806357b7bf20146101225780636ff66e7914610137575b600080fd5b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100f16100ec36600461185a565b610205565b6040517fffffffff0000000000000000000000000000000000000000000000000000000090911681526020016100d5565b610135610130366004611b97565b610583565b005b6100b47f000000000000000000000000000000000000000000000000000000000000000081565b6000546100b49073ffffffffffffffffffffffffffffffffffffffff1681565b61019161018c366004611c19565b6105cc565b60405190151581526020016100d5565b6100b473eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b6101f86040518060400160405280600581526020017f312e312e3000000000000000000000000000000000000000000000000000000081525081565b6040516100d59190611d62565b60003373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610276576040517f52df424e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8473ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff16146102db576040517f52df424e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168673ffffffffffffffffffffffffffffffffffffffff1614610360576040517f52df424e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008061036f84860186611d7c565b9150915061037c82610678565b61038581610815565b61038e60018055565b6040517f6352211e00000000000000000000000000000000000000000000000000000000815260048101879052309073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001690636352211e90602401602060405180830381865afa15801561041b573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061043f9190611dd7565b73ffffffffffffffffffffffffffffffffffffffff1603610509576040517f23b872dd00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff8381166024830152604482018890527f000000000000000000000000000000000000000000000000000000000000000016906323b872dd90606401600060405180830381600087803b1580156104f057600080fd5b505af1158015610504573d6000803e3d6000fd5b505050505b6105138287610b23565b604051869073ffffffffffffffffffffffffffffffffffffffff8416907f6f6c6d78a4851d4c222c8404fc92372ee84b7b81054305ae8ea3c83c2dabd42e90600090a3507f150b7a0200000000000000000000000000000000000000000000000000000000979650505050505050565b61058c33610678565b61059581610815565b61059e60018055565b60405133907fd2c4fe7e5a558f9b1b406ce6cd257540e044fe92fa299597ed9656533c6a8c8d90600090a250565b60008282426040516020016105e393929190611df4565b6040516020818303038152906040528051906020012060015414801561061e575073ffffffffffffffffffffffffffffffffffffffff841630145b610654576040517f38b760c500000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61066861066383850185611b97565b610815565b5060019998505050505050505050565b60006107c07f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663ba8df43c6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156106e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061070c9190611dd7565b6040805173ffffffffffffffffffffffffffffffffffffffff8616602082015201604051602081830303815290604052805190602001207f000000000000000000000000000000000000000000000000000000000000000060405160388101919091526f5af43d82803e903d91602b57fd5bf3ff60248201526014810192909252733d602d80600a3d3981f3363d3d373d3d3d363d73825260588201526037600c8201206078820152605560439091012090565b905073ffffffffffffffffffffffffffffffffffffffff81163014610811576040517f52df424e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b805160005b81811015610b1e57600083828151811061083657610836611e4b565b6020026020010151905060006060826060015160ff166000036108e157826000015173ffffffffffffffffffffffffffffffffffffffff16836040015184602001516040516108859190611e7a565b60006040518083038185875af1925050503d80600081146108c2576040519150601f19603f3d011682016040523d82523d6000602084013e6108c7565b606091505b509092509050816108dc576108dc8482610cd7565b610b10565b826060015160ff1660010361097b57826000015173ffffffffffffffffffffffffffffffffffffffff16836020015160405161091d9190611e7a565b600060405180830381855af49150503d8060008114610958576040519150601f19603f3d011682016040523d82523d6000602084013e61095d565b606091505b50909250905061096c60018055565b816108dc576108dc8482610cd7565b826060015160ff16600203610a9057602083015160048101805190916109a991810160249081019101611f41565b506040519094506109c39350849250429150602001612059565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815282825280516020918201206001558651918701519087015173ffffffffffffffffffffffffffffffffffffffff909216929091610a2a91611e7a565b60006040518083038185875af1925050503d8060008114610a67576040519150601f19603f3d011682016040523d82523d6000602084013e610a6c565b606091505b50909350915082610a8157610a818583610cd7565b610a8a60018055565b50610b10565b610a9984610cfa565b604051602001610aa9919061207b565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152908290527f08c379a0000000000000000000000000000000000000000000000000000000008252610b0791600401611d62565b60405180910390fd5b83600101935050505061081a565b505050565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663b5c736e4610b6c600385610db8565b6040518263ffffffff1660e01b8152600401610b8a91815260200190565b602060405180830381865afa158015610ba7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bcb91906120bc565b6040517fe6bd26a200000000000000000000000000000000000000000000000000000000815260c082901c63ffffffff16600482015290915060009073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000169063e6bd26a290602401602060405180830381865afa158015610c65573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c899190611dd7565b90506000610c9682610de7565b9050610ca681600001518661102e565b610cb481602001518661102e565b610cc281604001518661102e565b610cd081606001518661102e565b5050505050565b610ce082610cfa565b610ce98261113f565b604051602001610aa99291906120d5565b60606000610d07836115b4565b600101905060008167ffffffffffffffff811115610d2757610d276118cd565b6040519080825280601f01601f191660200182016040528015610d51576020820181803683370190505b5090508181016020015b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a8504945084610d5b57509392505050565b604080516020808201849052818301859052825180830384018152606090920190925280519101205b92915050565b6040805160808101825260008082526020820181905291810182905260608101919091528173ffffffffffffffffffffffffffffffffffffffff163b600003610e2f57919050565b8173ffffffffffffffffffffffffffffffffffffffff1663bb24fe8a6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610eb4575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252610eb1918101906120bc565b60015b610f695760008273ffffffffffffffffffffffffffffffffffffffff1663b7791bf26040518163ffffffff1660e01b81526004016101a060405180830381865afa158015610f06573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f2a919061213e565b608081015173ffffffffffffffffffffffffffffffffffffffff908116845260006020850181905260a090920151166040840152606083015250919050565b60008373ffffffffffffffffffffffffffffffffffffffff1663b7791bf26040518163ffffffff1660e01b815260040161024060405180830381865afa158015610fb7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fdb9190612280565b610100810180515173ffffffffffffffffffffffffffffffffffffffff9081168652905160209081015182168187015261012090920180515182166040870152519091015116606084015250505b919050565b73ffffffffffffffffffffffffffffffffffffffff821661104d575050565b7fffffffffffffffffffffffff111111111111111111111111111111111111111273ffffffffffffffffffffffffffffffffffffffff83160161109b57478015610b1e57610b1e8282611696565b6040517f70a0823100000000000000000000000000000000000000000000000000000000815230600482015260009073ffffffffffffffffffffffffffffffffffffffff8416906370a0823190602401602060405180830381865afa158015611108573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112c91906120bc565b90508015610b1e57610b1e8383836116e2565b606060048251101561118457505060408051808201909152601381527f5f524541534f4e5f4e4f545f444546494e454400000000000000000000000000602082015290565b60208201517fb1b7848f000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008216016113105760408051600280825281830190925260009160208201818036833701905050905061122e6010856001875161120791906123c7565b8151811061121757611217611e4b565b0160200151611229919060f81c6123da565b61178c565b8160008151811061124157611241611e4b565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506112a66010856001875161128491906123c7565b8151811061129457611294611e4b565b0160200151611229919060f81c6123fc565b816001815181106112b9576112b9611e4b565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350806040516020016112f9919061241e565b6040516020818303038152906040529250506114d4565b7ff73c8660000000000000000000000000000000000000000000000000000000007fffffffff0000000000000000000000000000000000000000000000000000000082160161139957600483019250828060200190518101906113739190612463565b60405160200161138391906124ac565b60405160208183030381529060405291506114d4565b60408051600880825281830190925260009160208201818036833701905050905060005b60048110156114af576113f160108483600481106113dd576113dd611e4b565b1a816113eb576113eb612104565b0461178c565b82826002028151811061140657611406611e4b565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a905350611460601084836004811061144c5761144c611e4b565b1a8161145a5761145a612104565b0661178c565b82826002026001018151811061147857611478611e4b565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053506001016113bd565b50806040516020016114c191906124f1565b6040516020818303038152906040529250505b60fa825111156115ae578160006114ed60fa6001612536565b905060008167ffffffffffffffff81111561150a5761150a6118cd565b6040519080825280601f01601f191660200182016040528015611534576020820181803683370190505b50905060005b828110156115a85783818151811061155457611554611e4b565b602001015160f81c60f81b82828151811061157157611571611e4b565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a90535060010161153a565b50935050505b50919050565b6000807a184f03e93ff9f4daa797ed6e38ed64bf6a1f01000000000000000083106115fd577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310611629576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061164757662386f26fc10000830492506010015b6305f5e100831061165f576305f5e100830492506008015b612710831061167357612710830492506004015b60648310611685576064830492506002015b600a8310610de15760010192915050565b60008060008060008587614e20f1905080610b1e576040517fdee51a8a0000000000000000000000000000000000000000000000000000000081526201155a6004820152602401610b07565b60006040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080611786576040517fdee51a8a0000000000000000000000000000000000000000000000000000000081526201155a6004820152602401610b07565b50505050565b6000600a8260ff1610156117a4575060300160f81b90565b60108260ff1610156117ba575060570160f81b90565b6040517fb0b8d61a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8116811461180e57600080fd5b50565b60008083601f84011261182357600080fd5b50813567ffffffffffffffff81111561183b57600080fd5b60208301915083602082850101111561185357600080fd5b9250929050565b60008060008060006080868803121561187257600080fd5b853561187d816117ec565b9450602086013561188d816117ec565b935060408601359250606086013567ffffffffffffffff8111156118b057600080fd5b6118bc88828901611811565b969995985093965092949392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6040516080810167ffffffffffffffff8111828210171561191f5761191f6118cd565b60405290565b6040516101a0810167ffffffffffffffff8111828210171561191f5761191f6118cd565b604051610200810167ffffffffffffffff8111828210171561191f5761191f6118cd565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156119b4576119b46118cd565b604052919050565b600067ffffffffffffffff8211156119d6576119d66118cd565b5060051b60200190565b600067ffffffffffffffff8211156119fa576119fa6118cd565b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01660200190565b60ff8116811461180e57600080fd5b803561102981611a26565b600082601f830112611a5157600080fd5b81356020611a66611a61836119bc565b61196d565b82815260059290921b84018101918181019086841115611a8557600080fd5b8286015b84811015611b8c57803567ffffffffffffffff80821115611aaa5760008081fd5b81890191506080807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0848d03011215611ae35760008081fd5b611aeb6118fc565b87840135611af8816117ec565b815260408481013584811115611b0e5760008081fd5b85019350603f84018d13611b225760008081fd5b88840135611b32611a61826119e0565b8181528e83838801011115611b475760008081fd5b818387018c83013760008b8383010152808b850152505060609350838501358183015250611b76828501611a35565b9281019290925250845250918301918301611a89565b509695505050505050565b600060208284031215611ba957600080fd5b813567ffffffffffffffff811115611bc057600080fd5b611bcc84828501611a40565b949350505050565b60008083601f840112611be657600080fd5b50813567ffffffffffffffff811115611bfe57600080fd5b6020830191508360208260051b850101111561185357600080fd5b600080600080600080600080600060a08a8c031215611c3757600080fd5b893567ffffffffffffffff80821115611c4f57600080fd5b611c5b8d838e01611bd4565b909b50995060208c0135915080821115611c7457600080fd5b611c808d838e01611bd4565b909950975060408c0135915080821115611c9957600080fd5b611ca58d838e01611bd4565b909750955060608c01359150611cba826117ec565b90935060808b01359080821115611cd057600080fd5b50611cdd8c828d01611811565b915080935050809150509295985092959850929598565b60005b83811015611d0f578181015183820152602001611cf7565b50506000910152565b60008151808452611d30816020860160208601611cf4565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000611d756020830184611d18565b9392505050565b60008060408385031215611d8f57600080fd5b8235611d9a816117ec565b9150602083013567ffffffffffffffff811115611db657600080fd5b611dc285828601611a40565b9150509250929050565b8051611029816117ec565b600060208284031215611de957600080fd5b8151611d75816117ec565b6040815282604082015282846060830137600060608483010152600060607fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8601168301019050826020830152949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60008251611e8c818460208701611cf4565b9190910192915050565b600082601f830112611ea757600080fd5b81516020611eb7611a61836119bc565b82815260059290921b84018101918181019086841115611ed657600080fd5b8286015b84811015611b8c5780518352918301918301611eda565b6000611eff611a61846119e0565b9050828152838383011115611f1357600080fd5b611d75836020830184611cf4565b600082601f830112611f3257600080fd5b611d7583835160208501611ef1565b600080600080600060a08688031215611f5957600080fd5b855167ffffffffffffffff80821115611f7157600080fd5b818801915088601f830112611f8557600080fd5b81516020611f95611a61836119bc565b82815260059290921b8401810191818101908c841115611fb457600080fd5b948201945b83861015611fdb578551611fcc816117ec565b82529482019490820190611fb9565b918b0151919950909350505080821115611ff457600080fd5b61200089838a01611e96565b955060408801519450606088015191508082111561201d57600080fd5b61202989838a01611f21565b9350608088015191508082111561203f57600080fd5b5061204c88828901611f21565b9150509295509295909350565b60408152600061206c6040830185611d18565b90508260208301529392505050565b6000825161208d818460208701611cf4565b7f5f464c5549445f5f494e56414c49445f49445f4f525f4f5045524154494f4e00920191825250601f01919050565b6000602082840312156120ce57600080fd5b5051919050565b600083516120e7818460208801611cf4565b8351908301906120fb818360208801611cf4565b01949350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b805161102981611a26565b60006101a0828403121561215157600080fd5b612159611925565b61216283611dcc565b815261217060208401611dcc565b602082015261218160408401611dcc565b604082015261219260608401611dcc565b60608201526121a360808401611dcc565b60808201526121b460a08401611dcc565b60a08201526121c560c08401612133565b60c08201526121d660e08401612133565b60e08201526101008381015190820152610120808401519082015261014080840151908201526101608084015190820152610180928301519281019290925250919050565b60006040828403121561222d57600080fd5b6040516040810181811067ffffffffffffffff82111715612250576122506118cd565b80604052508091508251612263816117ec565b81526020830151612273816117ec565b6020919091015292915050565b6000610240828403121561229357600080fd5b61229b611949565b6122a483611dcc565b81526122b260208401611dcc565b60208201526122c360408401611dcc565b60408201526122d460608401611dcc565b60608201526122e560808401611dcc565b60808201526122f660a08401611dcc565b60a082015261230760c08401611dcc565b60c082015261231860e08401611dcc565b60e082015261010061232c8582860161221b565b9082015261014061233f8585830161221b565b61012083015261018080850151828401526101a09150818501516101608401526101c080860151828501526101e09150818601518385015261020086015181850152506102208501518184015250508091505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81810381811115610de157610de1612398565b600060ff8316806123ed576123ed612104565b8060ff84160491505092915050565b600060ff83168061240f5761240f612104565b8060ff84160691505092915050565b7f5f5441524745545f50414e49434b45443a203078000000000000000000000000815260008251612456816014850160208701611cf4565b9190910160140192915050565b60006020828403121561247557600080fd5b815167ffffffffffffffff81111561248c57600080fd5b8201601f8101841361249d57600080fd5b611bcc84825160208401611ef1565b7f5f000000000000000000000000000000000000000000000000000000000000008152600082516124e4816001850160208701611cf4565b9190910160010192915050565b7f5f435553544f4d5f4552524f523a203078000000000000000000000000000000815260008251612529816011850160208701611cf4565b9190910160110192915050565b80820180821115610de157610de161239856fea2646970667358221220aace86a84be1f01b9e364d89d65960652c66d949f8711ebe7882cd09086c5c1064736f6c63430008150033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "executeOperation(address[],uint256[],uint256[],address,bytes)": {
        "params": {
          "data_": "data bytes containing the `abi.encoded()` actions that are executed like in `CastParams.actions`",
          "initiator_": "flashloan initiator -> must be this contract"
        }
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "ERC721 callback used Fluid Vault Factory and executes actions encoded in `data_`                         Caller should be Fluid Wallet Factory.",
        "params": {
          "data_": "data bytes containing the `abi.encoded()` actions that are executed like in `Action[]` & `owner`",
          "from_": "from_ previous owner of the given token ID",
          "operator_": "operator_ caller to transfer the the given token ID",
          "tokenId_": "tokenId_ id of the ERC721"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 7868,
        "contract": "contracts/periphery/wallet/wallet/main.sol:FluidWalletImplementation",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 7871,
        "contract": "contracts/periphery/wallet/wallet/main.sol:FluidWalletImplementation",
        "label": "_transientAllowHash",
        "offset": 0,
        "slot": "1",
        "type": "t_bytes32"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      }
    }
  }
}