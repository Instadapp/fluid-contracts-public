{
  "address": "0x6E09C6B27FBe673f61f6bca4e277B49bBB5A6AF7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "vaultAddress_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "weth_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorId_",
          "type": "uint256"
        }
      ],
      "name": "FluidSafeApproveError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorId_",
          "type": "uint256"
        }
      ],
      "name": "FluidSafeTransferError",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorId_",
          "type": "uint256"
        }
      ],
      "name": "FluidWethWrapperError",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "previousAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newAdmin",
          "type": "address"
        }
      ],
      "name": "AdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "beacon",
          "type": "address"
        }
      ],
      "name": "BeaconUpgraded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LogBorrow",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LogDeposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LogPayback",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "nftId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "LogWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        }
      ],
      "name": "Upgraded",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "BORROW_TOKEN",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDITY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VAULT",
      "outputs": [
        {
          "internalType": "contract IFluidVaultT1",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VAULT_FACTORY",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VAULT_ID",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "WETH",
      "outputs": [
        {
          "internalType": "contract IWETH9",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRateMode",
          "type": "uint256"
        },
        {
          "internalType": "uint16",
          "name": "referralCode",
          "type": "uint16"
        },
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        }
      ],
      "name": "borrow",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPosition",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nftId",
      "outputs": [
        {
          "internalType": "uint64",
          "name": "",
          "type": "uint64"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId_",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proxiableUUID",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "interestRateMode",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        }
      ],
      "name": "repay",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target_",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data_",
          "type": "bytes"
        }
      ],
      "name": "spell",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "response_",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "onBehalfOf",
          "type": "address"
        },
        {
          "internalType": "uint16",
          "name": "referralCode",
          "type": "uint16"
        }
      ],
      "name": "supply",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        }
      ],
      "name": "upgradeTo",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newImplementation",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "upgradeToAndCall",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "asset",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x18b320b417bf553090cd0afd0a10b32c280bca69fcbdb23ea5adbb38bad8705b",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x0Ed35B1609Ec45c7079E80d11149a52717e4859A",
    "contractAddress": null,
    "transactionIndex": 55,
    "gasUsed": "3168577",
    "logsBloom": "0x
    "blockHash": "0x2afa7a2299142d8658f918eb0bb682b706be16cc74286395328d2392f6cad594",
    "transactionHash": "0x18b320b417bf553090cd0afd0a10b32c280bca69fcbdb23ea5adbb38bad8705b",
    "logs": [
      {
        "transactionIndex": 55,
        "blockNumber": 21722789,
        "transactionHash": "0x18b320b417bf553090cd0afd0a10b32c280bca69fcbdb23ea5adbb38bad8705b",
        "address": "0x6E09C6B27FBe673f61f6bca4e277B49bBB5A6AF7",
        "topics": [
          "0x7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb3847402498"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000000000000000ff",
        "logIndex": 121,
        "blockHash": "0x2afa7a2299142d8658f918eb0bb682b706be16cc74286395328d2392f6cad594"
      }
    ],
    "blockNumber": 21722789,
    "cumulativeGasUsed": "7560387",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x0C8C77B7FF4c2aF7F6CEBbe67350A490E3DD6cB3",
    "0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2"
  ],
  "numDeployments": 1,
  "solcInputHash": "7ded33794b695102c601d6aba03eb026",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"vaultAddress_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorId_\",\"type\":\"uint256\"}],\"name\":\"FluidSafeApproveError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorId_\",\"type\":\"uint256\"}],\"name\":\"FluidSafeTransferError\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorId_\",\"type\":\"uint256\"}],\"name\":\"FluidWethWrapperError\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"previousAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newAdmin\",\"type\":\"address\"}],\"name\":\"AdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"beacon\",\"type\":\"address\"}],\"name\":\"BeaconUpgraded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogBorrow\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogDeposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogPayback\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"nftId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"LogWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"}],\"name\":\"Upgraded\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"BORROW_TOKEN\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDITY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT\",\"outputs\":[{\"internalType\":\"contract IFluidVaultT1\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT_FACTORY\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VAULT_ID\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"WETH\",\"outputs\":[{\"internalType\":\"contract IWETH9\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRateMode\",\"type\":\"uint256\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"}],\"name\":\"borrow\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPosition\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nftId\",\"outputs\":[{\"internalType\":\"uint64\",\"name\":\"\",\"type\":\"uint64\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proxiableUUID\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"interestRateMode\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"}],\"name\":\"repay\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"spell\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"response_\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"onBehalfOf\",\"type\":\"address\"},{\"internalType\":\"uint16\",\"name\":\"referralCode\",\"type\":\"uint16\"}],\"name\":\"supply\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"}],\"name\":\"upgradeTo\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newImplementation\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"upgradeToAndCall\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"asset\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"details\":\"wrapping/unwrapping to ETH under the hood for vault T1\",\"events\":{\"AdminChanged(address,address)\":{\"details\":\"Emitted when the admin account has changed.\"},\"BeaconUpgraded(address)\":{\"details\":\"Emitted when the beacon is upgraded.\"},\"Initialized(uint8)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"},\"LogBorrow(address,uint256,uint256)\":{\"params\":{\"amount\":\"Amount borrowed\",\"nftId\":\"The vault NFT ID\",\"user\":\"The user performing the borrow\"}},\"LogDeposit(address,uint256,uint256)\":{\"params\":{\"amount\":\"Amount of WETH deposited\",\"nftId\":\"The vault NFT ID\",\"user\":\"The user performing the deposit\"}},\"LogPayback(address,uint256,uint256)\":{\"params\":{\"amount\":\"Amount repaid\",\"nftId\":\"The vault NFT ID\",\"user\":\"The user performing the payback\"}},\"LogWithdraw(address,uint256,uint256)\":{\"params\":{\"amount\":\"Amount of WETH withdrawn\",\"nftId\":\"The vault NFT ID\",\"user\":\"The user performing the withdrawal\"}},\"Upgraded(address)\":{\"details\":\"Emitted when the implementation is upgraded.\"}},\"kind\":\"dev\",\"methods\":{\"borrow(address,uint256,uint256,uint16,address)\":{\"params\":{\"amount\":\"Amount of asset to borrow\",\"asset\":\"The asset to borrow\",\"interestRateMode\":\"The interest rate mode at which the user wants to borrow, Not used\",\"onBehalfOf\":\"The address of the user who will receive the debt.\",\"referralCode\":\"The code used to register the integrator originating the operation, for potential rewards.NA\"}},\"constructor\":{\"params\":{\"vaultAddress_\":\"Fluid Vault address\",\"weth_\":\"WETH token address\"}},\"getPosition()\":{\"returns\":{\"_0\":\"supply amount\",\"_1\":\"borrow amount\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"proxiableUUID()\":{\"details\":\"Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\"},\"repay(address,uint256,uint256,address)\":{\"params\":{\"amount\":\"Amount of asset to repay\",\"asset\":\"The asset to repay (USDC)\",\"interestRateMode\":\"The interest rate mode at which the user wants to borrow, Not used\",\"onBehalfOf\":\"should be equal to msg.sender\"}},\"spell(address,bytes)\":{\"params\":{\"data_\":\"Data to execute at the delegated address\",\"target_\":\"Address to which the call needs to be delegated\"}},\"supply(address,uint256,address,uint16)\":{\"params\":{\"amount\":\"Amount of asset to deposit as collateral\",\"asset\":\"The asset to deposit in contract (weth)\",\"onBehalfOf\":\"Deposit on behalf of, should be same as msg.sender\",\"referralCode\":\"Un-used param\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"upgradeTo(address)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"upgradeToAndCall(address,bytes)\":{\"details\":\"Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event.\"},\"withdraw(address,uint256,address)\":{\"details\":\"The vault sends us ETH, which we wrap into WETH and transfer to the user.\",\"params\":{\"amount\":\"Amount of asset to borrow as collateral\",\"asset\":\"The asset to deposit in contract (weth)\",\"to\":\"withdraw should go to this address\"}}},\"stateVariables\":{\"BORROW_TOKEN\":{\"details\":\"below variables can be derived directly or indirectly using vault address\"}},\"title\":\"WETH Wrapper for Fluid Vault T1\",\"version\":1},\"userdoc\":{\"events\":{\"LogBorrow(address,uint256,uint256)\":{\"notice\":\"Emitted when user borrows\"},\"LogDeposit(address,uint256,uint256)\":{\"notice\":\"Emitted when user deposits collateral in WETH\"},\"LogPayback(address,uint256,uint256)\":{\"notice\":\"Emitted when user pays back debt\"},\"LogWithdraw(address,uint256,uint256)\":{\"notice\":\"Emitted when user withdraws collateral (receives WETH)\"}},\"kind\":\"user\",\"methods\":{\"borrow(address,uint256,uint256,uint16,address)\":{\"notice\":\"Borrow in USDC from vault, the vault will send ETH to this contract.\"},\"getPosition()\":{\"notice\":\"get the vault nft position on vault\"},\"onERC721Received(address,address,uint256,bytes)\":{\"notice\":\"Accepts NFT transfers only from the configured VAULT.         Records the `from_` address as the NFT's owner in our mapping,         so that `from_` can have ownership for withdraw and borrow.\"},\"repay(address,uint256,uint256,address)\":{\"notice\":\"Repay debt in USDC to VAULT.\"},\"spell(address,bytes)\":{\"notice\":\"Spell allows owner aka governance to do any arbitrary call on factory\"},\"supply(address,uint256,address,uint16)\":{\"notice\":\"Deposit WETH as collateral to a T1 VAULT.         - If `nftId` == 0, new vault position gets created (NFT mint to this)\"},\"withdraw(address,uint256,address)\":{\"notice\":\"Withdraw WETH collateral from a T1 vault\"}},\"notice\":\"Allows depositing, withdrawal, borrowing and repaying of assets from vaults using WETH following aave interface\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/wethWrapper/main.sol\":\"FluidWETHWrapper\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.1) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized < type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x037c334add4b033ad3493038c25be1682d78c00992e1acb0e2795caff3925271\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x2edcb41c121abc510932e8d83ff8b82cf9cdde35e7c297622f5c29ef0af25183\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (interfaces/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../token/ERC20/IERC20.sol\\\";\\n\",\"keccak256\":\"0x6ebf1944ab804b8660eb6fc52f9fe84588cee01c2566a69023e59497e7d27f45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/draft-IERC1822.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (interfaces/draft-IERC1822.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev ERC1822: Universal Upgradeable Proxy Standard (UUPS) documents a method for upgradeability through a simplified\\n * proxy whose upgrades are fully controlled by the current implementation.\\n */\\ninterface IERC1822Proxiable {\\n    /**\\n     * @dev Returns the storage slot that the proxiable contract assumes is being used to store the implementation\\n     * address.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy.\\n     */\\n    function proxiableUUID() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0x1d4afe6cb24200cc4545eed814ecf5847277dfe5d613a1707aad5fceecebcfff\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/ERC1967/ERC1967Upgrade.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.5.0) (proxy/ERC1967/ERC1967Upgrade.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../beacon/IBeacon.sol\\\";\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/StorageSlot.sol\\\";\\n\\n/**\\n * @dev This abstract contract provides getters and event emitting update functions for\\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\\n *\\n * _Available since v4.1._\\n *\\n * @custom:oz-upgrades-unsafe-allow delegatecall\\n */\\nabstract contract ERC1967Upgrade {\\n    // This is the keccak-256 hash of \\\"eip1967.proxy.rollback\\\" subtracted by 1\\n    bytes32 private constant _ROLLBACK_SLOT = 0x4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd9143;\\n\\n    /**\\n     * @dev Storage slot with the address of the current implementation.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.implementation\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n\\n    /**\\n     * @dev Emitted when the implementation is upgraded.\\n     */\\n    event Upgraded(address indexed implementation);\\n\\n    /**\\n     * @dev Returns the current implementation address.\\n     */\\n    function _getImplementation() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 implementation slot.\\n     */\\n    function _setImplementation(address newImplementation) private {\\n        require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n        StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeTo(address newImplementation) internal {\\n        _setImplementation(newImplementation);\\n        emit Upgraded(newImplementation);\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCall(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _upgradeTo(newImplementation);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(newImplementation, data);\\n        }\\n    }\\n\\n    /**\\n     * @dev Perform implementation upgrade with security checks for UUPS proxies, and additional setup call.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function _upgradeToAndCallUUPS(\\n        address newImplementation,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        // Upgrades from old implementations will perform a rollback test. This test requires the new\\n        // implementation to upgrade back to the old, non-ERC1822 compliant, implementation. Removing\\n        // this special case will break upgrade paths from old UUPS implementation to new ones.\\n        if (StorageSlot.getBooleanSlot(_ROLLBACK_SLOT).value) {\\n            _setImplementation(newImplementation);\\n        } else {\\n            try IERC1822Proxiable(newImplementation).proxiableUUID() returns (bytes32 slot) {\\n                require(slot == _IMPLEMENTATION_SLOT, \\\"ERC1967Upgrade: unsupported proxiableUUID\\\");\\n            } catch {\\n                revert(\\\"ERC1967Upgrade: new implementation is not UUPS\\\");\\n            }\\n            _upgradeToAndCall(newImplementation, data, forceCall);\\n        }\\n    }\\n\\n    /**\\n     * @dev Storage slot with the admin of the contract.\\n     * This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is\\n     * validated in the constructor.\\n     */\\n    bytes32 internal constant _ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    /**\\n     * @dev Emitted when the admin account has changed.\\n     */\\n    event AdminChanged(address previousAdmin, address newAdmin);\\n\\n    /**\\n     * @dev Returns the current admin.\\n     */\\n    function _getAdmin() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_ADMIN_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new address in the EIP1967 admin slot.\\n     */\\n    function _setAdmin(address newAdmin) private {\\n        require(newAdmin != address(0), \\\"ERC1967: new admin is the zero address\\\");\\n        StorageSlot.getAddressSlot(_ADMIN_SLOT).value = newAdmin;\\n    }\\n\\n    /**\\n     * @dev Changes the admin of the proxy.\\n     *\\n     * Emits an {AdminChanged} event.\\n     */\\n    function _changeAdmin(address newAdmin) internal {\\n        emit AdminChanged(_getAdmin(), newAdmin);\\n        _setAdmin(newAdmin);\\n    }\\n\\n    /**\\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\\n     * This is bytes32(uint256(keccak256('eip1967.proxy.beacon')) - 1)) and is validated in the constructor.\\n     */\\n    bytes32 internal constant _BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\\n\\n    /**\\n     * @dev Emitted when the beacon is upgraded.\\n     */\\n    event BeaconUpgraded(address indexed beacon);\\n\\n    /**\\n     * @dev Returns the current beacon.\\n     */\\n    function _getBeacon() internal view returns (address) {\\n        return StorageSlot.getAddressSlot(_BEACON_SLOT).value;\\n    }\\n\\n    /**\\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\\n     */\\n    function _setBeacon(address newBeacon) private {\\n        require(Address.isContract(newBeacon), \\\"ERC1967: new beacon is not a contract\\\");\\n        require(\\n            Address.isContract(IBeacon(newBeacon).implementation()),\\n            \\\"ERC1967: beacon implementation is not a contract\\\"\\n        );\\n        StorageSlot.getAddressSlot(_BEACON_SLOT).value = newBeacon;\\n    }\\n\\n    /**\\n     * @dev Perform beacon upgrade with additional setup call. Note: This upgrades the address of the beacon, it does\\n     * not upgrade the implementation contained in the beacon (see {UpgradeableBeacon-_setImplementation} for that).\\n     *\\n     * Emits a {BeaconUpgraded} event.\\n     */\\n    function _upgradeBeaconToAndCall(\\n        address newBeacon,\\n        bytes memory data,\\n        bool forceCall\\n    ) internal {\\n        _setBeacon(newBeacon);\\n        emit BeaconUpgraded(newBeacon);\\n        if (data.length > 0 || forceCall) {\\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xabf3f59bc0e5423eae45e459dbe92e7052c6983628d39008590edc852a62f94a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/beacon/IBeacon.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/beacon/IBeacon.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\\n */\\ninterface IBeacon {\\n    /**\\n     * @dev Must return an address that can be used as a delegate call target.\\n     *\\n     * {BeaconProxy} will check that this address is a contract.\\n     */\\n    function implementation() external view returns (address);\\n}\\n\",\"keccak256\":\"0xd50a3421ac379ccb1be435fa646d66a65c986b4924f0849839f08692f39dde61\",\"license\":\"MIT\"},\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (proxy/utils/UUPSUpgradeable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../interfaces/draft-IERC1822.sol\\\";\\nimport \\\"../ERC1967/ERC1967Upgrade.sol\\\";\\n\\n/**\\n * @dev An upgradeability mechanism designed for UUPS proxies. The functions included here can perform an upgrade of an\\n * {ERC1967Proxy}, when this contract is set as the implementation behind such a proxy.\\n *\\n * A security mechanism ensures that an upgrade does not turn off upgradeability accidentally, although this risk is\\n * reinstated if the upgrade retains upgradeability but removes the security mechanism, e.g. by replacing\\n * `UUPSUpgradeable` with a custom implementation of upgrades.\\n *\\n * The {_authorizeUpgrade} function must be overridden to include access restriction to the upgrade mechanism.\\n *\\n * _Available since v4.1._\\n */\\nabstract contract UUPSUpgradeable is IERC1822Proxiable, ERC1967Upgrade {\\n    /// @custom:oz-upgrades-unsafe-allow state-variable-immutable state-variable-assignment\\n    address private immutable __self = address(this);\\n\\n    /**\\n     * @dev Check that the execution is being performed through a delegatecall call and that the execution context is\\n     * a proxy contract with an implementation (as defined in ERC1967) pointing to self. This should only be the case\\n     * for UUPS and transparent proxies that are using the current contract as their implementation. Execution of a\\n     * function through ERC1167 minimal proxies (clones) would not normally pass this test, but is not guaranteed to\\n     * fail.\\n     */\\n    modifier onlyProxy() {\\n        require(address(this) != __self, \\\"Function must be called through delegatecall\\\");\\n        require(_getImplementation() == __self, \\\"Function must be called through active proxy\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Check that the execution is not being performed through a delegate call. This allows a function to be\\n     * callable on the implementing contract but not through proxies.\\n     */\\n    modifier notDelegated() {\\n        require(address(this) == __self, \\\"UUPSUpgradeable: must not be called through delegatecall\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the\\n     * implementation. It is used to validate the implementation's compatibility when performing an upgrade.\\n     *\\n     * IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks\\n     * bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this\\n     * function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier.\\n     */\\n    function proxiableUUID() external view virtual override notDelegated returns (bytes32) {\\n        return _IMPLEMENTATION_SLOT;\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeTo(address newImplementation) external virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, new bytes(0), false);\\n    }\\n\\n    /**\\n     * @dev Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call\\n     * encoded in `data`.\\n     *\\n     * Calls {_authorizeUpgrade}.\\n     *\\n     * Emits an {Upgraded} event.\\n     */\\n    function upgradeToAndCall(address newImplementation, bytes memory data) external payable virtual onlyProxy {\\n        _authorizeUpgrade(newImplementation);\\n        _upgradeToAndCallUUPS(newImplementation, data, true);\\n    }\\n\\n    /**\\n     * @dev Function that should revert when `msg.sender` is not authorized to upgrade the contract. Called by\\n     * {upgradeTo} and {upgradeToAndCall}.\\n     *\\n     * Normally, this function will use an xref:access.adoc[access control] modifier such as {Ownable-onlyOwner}.\\n     *\\n     * ```solidity\\n     * function _authorizeUpgrade(address) internal override onlyOwner {}\\n     * ```\\n     */\\n    function _authorizeUpgrade(address newImplementation) internal virtual;\\n}\\n\",\"keccak256\":\"0x85cc5aca68692044586dc5ca19a9868d3288f6b35d1085c620dd0278ed0abdaa\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/StorageSlot.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (utils/StorageSlot.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Library for reading and writing primitive types to specific storage slots.\\n *\\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\\n * This library helps with reading and writing to such slots without the need for inline assembly.\\n *\\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\\n *\\n * Example usage to set ERC1967 implementation slot:\\n * ```\\n * contract ERC1967 {\\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\\n *\\n *     function _getImplementation() internal view returns (address) {\\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\\n *     }\\n *\\n *     function _setImplementation(address newImplementation) internal {\\n *         require(Address.isContract(newImplementation), \\\"ERC1967: new implementation is not a contract\\\");\\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\\n *     }\\n * }\\n * ```\\n *\\n * _Available since v4.1 for `address`, `bool`, `bytes32`, and `uint256`._\\n */\\nlibrary StorageSlot {\\n    struct AddressSlot {\\n        address value;\\n    }\\n\\n    struct BooleanSlot {\\n        bool value;\\n    }\\n\\n    struct Bytes32Slot {\\n        bytes32 value;\\n    }\\n\\n    struct Uint256Slot {\\n        uint256 value;\\n    }\\n\\n    /**\\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\\n     */\\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\\n     */\\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\\n     */\\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\\n     */\\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            r.slot := slot\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd5c50c54bf02740ebd122ff06832546cb5fa84486d52695a9ccfd11666e0c81d\",\"license\":\"MIT\"},\"contracts/libraries/errorTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nlibrary LibsErrorTypes {\\n    /***********************************|\\n    |         LiquidityCalcs            | \\n    |__________________________________*/\\n\\n    /// @notice thrown when supply or borrow exchange price is zero at calc token data (token not configured yet)\\n    uint256 internal constant LiquidityCalcs__ExchangePriceZero = 70001;\\n\\n    /// @notice thrown when rate data is set to a version that is not implemented\\n    uint256 internal constant LiquidityCalcs__UnsupportedRateVersion = 70002;\\n\\n    /// @notice thrown when the calculated borrow rate turns negative. This should never happen.\\n    uint256 internal constant LiquidityCalcs__BorrowRateNegative = 70003;\\n\\n    /***********************************|\\n    |           SafeTransfer            | \\n    |__________________________________*/\\n\\n    /// @notice thrown when safe transfer from for an ERC20 fails\\n    uint256 internal constant SafeTransfer__TransferFromFailed = 71001;\\n\\n    /// @notice thrown when safe transfer for an ERC20 fails\\n    uint256 internal constant SafeTransfer__TransferFailed = 71002;\\n\\n    /***********************************|\\n    |           SafeApprove             | \\n    |__________________________________*/\\n\\n    /// @notice thrown when safe approve from for an ERC20 fails\\n    uint256 internal constant SafeApprove__ApproveFailed = 81001;\\n}\\n\",\"keccak256\":\"0x4057f500fd44ce9e89049512d06d5f72c46f91938ed37312fb044c204451009b\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/safeApprove.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.21;\\n\\nimport { LibsErrorTypes as ErrorTypes } from \\\"./errorTypes.sol\\\";\\n\\n/// @notice provides minimalistic methods for safe approve, e.g. ERC20 safeApprove\\nlibrary SafeApprove {\\n    error FluidSafeApproveError(uint256 errorId_);\\n\\n    /// @dev Approve `amount_` of `token_` to `to_`.\\n    /// If `token_` returns no value, non-reverting calls are assumed to be successful.\\n    /// Minimally modified from Solmate SafeTransferLib (address as input param for token, Custom Error):\\n    /// https://github.com/transmissions11/solmate/blob/50e15bb566f98b7174da9b0066126a4c3e75e0fd/src/utils/SafeTransferLib.sol#L97-L127\\n    function safeApprove(\\n        address token_,\\n        address to_,\\n        uint256 amount_\\n    ) internal {\\n        bool success_;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x095ea7b300000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(to_, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount_) // Append the \\\"amount\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n            // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n            success_ := call(gas(), token_, 0, freeMemoryPointer, 68, 0, 32)\\n\\n            // Set success to whether the call reverted, if not we check it either\\n            // returned exactly 1 (can't just be non-zero data), or had no return data and token has code.\\n            if and(iszero(and(eq(mload(0), 1), gt(returndatasize(), 31))), success_) {\\n                success_ := iszero(or(iszero(extcodesize(token_)), returndatasize())) \\n            }\\n        }\\n\\n        if (!success_) {\\n            revert FluidSafeApproveError(ErrorTypes.SafeApprove__ApproveFailed);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x6112bcad9048696a483ec916d94ffe941861632839c3a7a8d18e743420bf3d7f\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/libraries/safeTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.21;\\n\\nimport { LibsErrorTypes as ErrorTypes } from \\\"./errorTypes.sol\\\";\\n\\n/// @notice provides minimalistic methods for safe transfers, e.g. ERC20 safeTransferFrom\\nlibrary SafeTransfer {\\n    uint256 internal constant MAX_NATIVE_TRANSFER_GAS = 20000; // pass max. 20k gas for native transfers\\n\\n    error FluidSafeTransferError(uint256 errorId_);\\n\\n    /// @dev Transfer `amount_` of `token_` from `from_` to `to_`, spending the approval given by `from_` to the\\n    /// calling contract. If `token_` returns no value, non-reverting calls are assumed to be successful.\\n    /// Minimally modified from Solmate SafeTransferLib (address as input param for token, Custom Error):\\n    /// https://github.com/transmissions11/solmate/blob/50e15bb566f98b7174da9b0066126a4c3e75e0fd/src/utils/SafeTransferLib.sol#L31-L63\\n    function safeTransferFrom(address token_, address from_, address to_, uint256 amount_) internal {\\n        bool success_;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(from_, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"from_\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), and(to_, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to_\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount_) // Append the \\\"amount_\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            success_ := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token_, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        if (!success_) {\\n            revert FluidSafeTransferError(ErrorTypes.SafeTransfer__TransferFromFailed);\\n        }\\n    }\\n\\n    /// @dev Transfer `amount_` of `token_` to `to_`.\\n    /// If `token_` returns no value, non-reverting calls are assumed to be successful.\\n    /// Minimally modified from Solmate SafeTransferLib (address as input param for token, Custom Error):\\n    /// https://github.com/transmissions11/solmate/blob/50e15bb566f98b7174da9b0066126a4c3e75e0fd/src/utils/SafeTransferLib.sol#L65-L95\\n    function safeTransfer(address token_, address to_, uint256 amount_) internal {\\n        bool success_;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(to_, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to_\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount_) // Append the \\\"amount_\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            success_ := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token_, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        if (!success_) {\\n            revert FluidSafeTransferError(ErrorTypes.SafeTransfer__TransferFailed);\\n        }\\n    }\\n\\n    /// @dev Transfer `amount_` of ` native token to `to_`.\\n    /// Minimally modified from Solmate SafeTransferLib (Custom Error):\\n    /// https://github.com/transmissions11/solmate/blob/50e15bb566f98b7174da9b0066126a4c3e75e0fd/src/utils/SafeTransferLib.sol#L15-L25\\n    function safeTransferNative(address to_, uint256 amount_) internal {\\n        bool success_;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not. Pass limited gas\\n            success_ := call(MAX_NATIVE_TRANSFER_GAS, to_, amount_, 0, 0, 0, 0)\\n        }\\n\\n        if (!success_) {\\n            revert FluidSafeTransferError(ErrorTypes.SafeTransfer__TransferFailed);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7f7d3a39d984c62e41c669a3d11deb899b3512ace9313263592575bf48a6e079\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/libraries/tickMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\n/// @title library that calculates number \\\"tick\\\" and \\\"ratioX96\\\" from this: ratioX96 = (1.0015^tick) * 2^96\\n/// @notice this library is used in Fluid Vault protocol for optimiziation.\\n/// @dev \\\"tick\\\" supports between -32767 and 32767. \\\"ratioX96\\\" supports between 37075072 and 169307877264527972847801929085841449095838922544595\\nlibrary TickMath {\\n    /// The minimum tick that can be passed in getRatioAtTick. 1.0015**-32767\\n    int24 internal constant MIN_TICK = -32767;\\n    /// The maximum tick that can be passed in getRatioAtTick. 1.0015**32767\\n    int24 internal constant MAX_TICK = 32767;\\n\\n    uint256 internal constant FACTOR00 = 0x100000000000000000000000000000000;\\n    uint256 internal constant FACTOR01 = 0xff9dd7de423466c20352b1246ce4856f; // 2^128/1.0015**1 = 339772707859149738855091969477551883631\\n    uint256 internal constant FACTOR02 = 0xff3bd55f4488ad277531fa1c725a66d0; // 2^128/1.0015**2 = 339263812140938331358054887146831636176\\n    uint256 internal constant FACTOR03 = 0xfe78410fd6498b73cb96a6917f853259; // 2^128/1.0015**4 = 338248306163758188337119769319392490073\\n    uint256 internal constant FACTOR04 = 0xfcf2d9987c9be178ad5bfeffaa123273; // 2^128/1.0015**8 = 336226404141693512316971918999264834163\\n    uint256 internal constant FACTOR05 = 0xf9ef02c4529258b057769680fc6601b3; // 2^128/1.0015**16 = 332218786018727629051611634067491389875\\n    uint256 internal constant FACTOR06 = 0xf402d288133a85a17784a411f7aba082; // 2^128/1.0015**32 = 324346285652234375371948336458280706178\\n    uint256 internal constant FACTOR07 = 0xe895615b5beb6386553757b0352bda90; // 2^128/1.0015**64 = 309156521885964218294057947947195947664\\n    uint256 internal constant FACTOR08 = 0xd34f17a00ffa00a8309940a15930391a; // 2^128/1.0015**128 = 280877777739312896540849703637713172762 \\n    uint256 internal constant FACTOR09 = 0xae6b7961714e20548d88ea5123f9a0ff; // 2^128/1.0015**256 = 231843708922198649176471782639349113087\\n    uint256 internal constant FACTOR10 = 0x76d6461f27082d74e0feed3b388c0ca1; // 2^128/1.0015**512 = 157961477267171621126394973980180876449\\n    uint256 internal constant FACTOR11 = 0x372a3bfe0745d8b6b19d985d9a8b85bb; // 2^128/1.0015**1024 = 73326833024599564193373530205717235131\\n    uint256 internal constant FACTOR12 = 0x0be32cbee48979763cf7247dd7bb539d; // 2^128/1.0015**2048 = 15801066890623697521348224657638773661\\n    uint256 internal constant FACTOR13 = 0x8d4f70c9ff4924dac37612d1e2921e;   // 2^128/1.0015**4096 = 733725103481409245883800626999235102\\n    uint256 internal constant FACTOR14 = 0x4e009ae5519380809a02ca7aec77;     // 2^128/1.0015**8192 = 1582075887005588088019997442108535\\n    uint256 internal constant FACTOR15 = 0x17c45e641b6e95dee056ff10;         // 2^128/1.0015**16384 = 7355550435635883087458926352\\n\\n    /// The minimum value that can be returned from getRatioAtTick. Equivalent to getRatioAtTick(MIN_TICK). ~ Equivalent to `(1 << 96) * (1.0015**-32767)`\\n    uint256 internal constant MIN_RATIOX96 = 37075072;\\n    /// The maximum value that can be returned from getRatioAtTick. Equivalent to getRatioAtTick(MAX_TICK).\\n    /// ~ Equivalent to `(1 << 96) * (1.0015**32767)`, rounding etc. leading to minor difference\\n    uint256 internal constant MAX_RATIOX96 = 169307877264527972847801929085841449095838922544595;\\n\\n    uint256 internal constant ZERO_TICK_SCALED_RATIO = 0x1000000000000000000000000; // 1 << 96 // 79228162514264337593543950336\\n    uint256 internal constant _1E26 = 1e26;\\n\\n    /// @notice ratioX96 = (1.0015^tick) * 2^96\\n    /// @dev Throws if |tick| > max tick\\n    /// @param tick The input tick for the above formula\\n    /// @return ratioX96 ratio = (debt amount/collateral amount)\\n    function getRatioAtTick(int tick) internal pure returns (uint256 ratioX96) {\\n        assembly {\\n            let absTick_ := sub(xor(tick, sar(255, tick)), sar(255, tick))\\n\\n            if gt(absTick_, MAX_TICK) {\\n                revert(0, 0)\\n            }\\n            let factor_ := FACTOR00\\n            if and(absTick_, 0x1) {\\n                factor_ := FACTOR01\\n            }\\n            if and(absTick_, 0x2) {\\n                factor_ := shr(128, mul(factor_, FACTOR02))\\n            }\\n            if and(absTick_, 0x4) {\\n                factor_ := shr(128, mul(factor_, FACTOR03))\\n            }\\n            if and(absTick_, 0x8) {\\n                factor_ := shr(128, mul(factor_, FACTOR04))\\n            }\\n            if and(absTick_, 0x10) {\\n                factor_ := shr(128, mul(factor_, FACTOR05))\\n            }\\n            if and(absTick_, 0x20) {\\n                factor_ := shr(128, mul(factor_, FACTOR06))\\n            }\\n            if and(absTick_, 0x40) {\\n                factor_ := shr(128, mul(factor_, FACTOR07))\\n            }\\n            if and(absTick_, 0x80) {\\n                factor_ := shr(128, mul(factor_, FACTOR08))\\n            }\\n            if and(absTick_, 0x100) {\\n                factor_ := shr(128, mul(factor_, FACTOR09))\\n            }\\n            if and(absTick_, 0x200) {\\n                factor_ := shr(128, mul(factor_, FACTOR10))\\n            }\\n            if and(absTick_, 0x400) {\\n                factor_ := shr(128, mul(factor_, FACTOR11))\\n            }\\n            if and(absTick_, 0x800) {\\n                factor_ := shr(128, mul(factor_, FACTOR12))\\n            }\\n            if and(absTick_, 0x1000) {\\n                factor_ := shr(128, mul(factor_, FACTOR13))\\n            }\\n            if and(absTick_, 0x2000) {\\n                factor_ := shr(128, mul(factor_, FACTOR14))\\n            }\\n            if and(absTick_, 0x4000) {\\n                factor_ := shr(128, mul(factor_, FACTOR15))\\n            }\\n\\n            let precision_ := 0\\n            if iszero(and(tick, 0x8000000000000000000000000000000000000000000000000000000000000000)) {\\n                factor_ := div(0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff, factor_)\\n                // we round up in the division so getTickAtRatio of the output price is always consistent\\n                if mod(factor_, 0x100000000) {\\n                    precision_ := 1\\n                }\\n            }\\n            ratioX96 := add(shr(32, factor_), precision_)\\n        }\\n    }\\n\\n    /// @notice ratioX96 = (1.0015^tick) * 2^96\\n    /// @dev Throws if ratioX96 > max ratio || ratioX96 < min ratio\\n    /// @param ratioX96 The input ratio; ratio = (debt amount/collateral amount)\\n    /// @return tick The output tick for the above formula. Returns in round down form. if tick is 123.23 then 123, if tick is -123.23 then returns -124\\n    /// @return perfectRatioX96 perfect ratio for the above tick\\n    function getTickAtRatio(uint256 ratioX96) internal pure returns (int tick, uint perfectRatioX96) {\\n        assembly {\\n            if or(gt(ratioX96, MAX_RATIOX96), lt(ratioX96, MIN_RATIOX96)) {\\n                revert(0, 0)\\n            }\\n\\n            let cond := lt(ratioX96, ZERO_TICK_SCALED_RATIO)\\n            let factor_\\n\\n            if iszero(cond) {\\n                // if ratioX96 >= ZERO_TICK_SCALED_RATIO\\n                factor_ := div(mul(ratioX96, _1E26), ZERO_TICK_SCALED_RATIO)\\n            }\\n            if cond {\\n                // ratioX96 < ZERO_TICK_SCALED_RATIO\\n                factor_ := div(mul(ZERO_TICK_SCALED_RATIO, _1E26), ratioX96)\\n            }\\n\\n            // put in https://www.wolframalpha.com/ whole equation: (1.0015^tick) * 2^96 * 10^26 / 79228162514264337593543950336\\n\\n            // for tick = 16384\\n            // ratioX96 = (1.0015^16384) * 2^96 = 3665252098134783297721995888537077351735\\n            // 3665252098134783297721995888537077351735 * 10^26 / 79228162514264337593543950336 =\\n            // 4626198540796508716348404308345255985.06131964639489434655721\\n            if iszero(lt(factor_, 4626198540796508716348404308345255985)) {\\n                tick := or(tick, 0x4000)\\n                factor_ := div(mul(factor_, _1E26), 4626198540796508716348404308345255985)\\n            }\\n            // for tick = 8192\\n            // ratioX96 = (1.0015^8192) * 2^96 = 17040868196391020479062776466509865\\n            // 17040868196391020479062776466509865 * 10^26 / 79228162514264337593543950336 =\\n            // 21508599537851153911767490449162.3037648642153898377655505172\\n            if iszero(lt(factor_, 21508599537851153911767490449162)) {\\n                tick := or(tick, 0x2000)\\n                factor_ := div(mul(factor_, _1E26), 21508599537851153911767490449162)\\n            }\\n            // for tick = 4096\\n            // ratioX96 = (1.0015^4096) * 2^96 = 36743933851015821532611831851150\\n            // 36743933851015821532611831851150 * 10^26 / 79228162514264337593543950336 =\\n            // 46377364670549310883002866648.9777607649742626173648716941385\\n            if iszero(lt(factor_, 46377364670549310883002866649)) {\\n                tick := or(tick, 0x1000)\\n                factor_ := div(mul(factor_, _1E26), 46377364670549310883002866649)\\n            }\\n            // for tick = 2048\\n            // ratioX96 = (1.0015^2048) * 2^96 = 1706210527034005899209104452335\\n            // 1706210527034005899209104452335 * 10^26 / 79228162514264337593543950336 =\\n            // 2153540449365864845468344760.06357108484096046743300420319322\\n            if iszero(lt(factor_, 2153540449365864845468344760)) {\\n                tick := or(tick, 0x800)\\n                factor_ := div(mul(factor_, _1E26), 2153540449365864845468344760)\\n            }\\n            // for tick = 1024\\n            // ratioX96 = (1.0015^1024) * 2^96 = 367668226692760093024536487236\\n            // 367668226692760093024536487236 * 10^26 / 79228162514264337593543950336 =\\n            // 464062544207767844008185024.950588990554136265212906454481127\\n            if iszero(lt(factor_, 464062544207767844008185025)) {\\n                tick := or(tick, 0x400)\\n                factor_ := div(mul(factor_, _1E26), 464062544207767844008185025)\\n            }\\n            // for tick = 512\\n            // ratioX96 = (1.0015^512) * 2^96 = 170674186729409605620119663668\\n            // 170674186729409605620119663668 * 10^26 / 79228162514264337593543950336 =\\n            // 215421109505955298802281577.031879604792139232258508172947569\\n            if iszero(lt(factor_, 215421109505955298802281577)) {\\n                tick := or(tick, 0x200)\\n                factor_ := div(mul(factor_, _1E26), 215421109505955298802281577)\\n            }\\n            // for tick = 256\\n            // ratioX96 = (1.0015^256) * 2^96 = 116285004205991934861656513301\\n            // 116285004205991934861656513301 * 10^26 / 79228162514264337593543950336 =\\n            // 146772309890508740607270614.667650899656438875541505058062410\\n            if iszero(lt(factor_, 146772309890508740607270615)) {\\n                tick := or(tick, 0x100)\\n                factor_ := div(mul(factor_, _1E26), 146772309890508740607270615)\\n            }\\n            // for tick = 128\\n            // ratioX96 = (1.0015^128) * 2^96 = 95984619659632141743747099590\\n            // 95984619659632141743747099590 * 10^26 / 79228162514264337593543950336 =\\n            // 121149622323187099817270416.157248837742741760456796835775887\\n            if iszero(lt(factor_, 121149622323187099817270416)) {\\n                tick := or(tick, 0x80)\\n                factor_ := div(mul(factor_, _1E26), 121149622323187099817270416)\\n            }\\n            // for tick = 64\\n            // ratioX96 = (1.0015^64) * 2^96 = 87204845308406958006717891124\\n            // 87204845308406958006717891124 * 10^26 / 79228162514264337593543950336 =\\n            // 110067989135437147685980801.568068573422377364214113968609839\\n            if iszero(lt(factor_, 110067989135437147685980801)) {\\n                tick := or(tick, 0x40)\\n                factor_ := div(mul(factor_, _1E26), 110067989135437147685980801)\\n            }\\n            // for tick = 32\\n            // ratioX96 = (1.0015^32) * 2^96 = 83120873769022354029916374475\\n            // 83120873769022354029916374475 * 10^26 / 79228162514264337593543950336 =\\n            // 104913292358707887270979599.831816586773651266562785765558183\\n            if iszero(lt(factor_, 104913292358707887270979600)) {\\n                tick := or(tick, 0x20)\\n                factor_ := div(mul(factor_, _1E26), 104913292358707887270979600)\\n            }\\n            // for tick = 16\\n            // ratioX96 = (1.0015^16) * 2^96 = 81151180492336368327184716176\\n            // 81151180492336368327184716176 * 10^26 / 79228162514264337593543950336 =\\n            // 102427189924701091191840927.762844039579442328381455567932128\\n            if iszero(lt(factor_, 102427189924701091191840928)) {\\n                tick := or(tick, 0x10)\\n                factor_ := div(mul(factor_, _1E26), 102427189924701091191840928)\\n            }\\n            // for tick = 8\\n            // ratioX96 = (1.0015^8) * 2^96 = 80183906840906820640659903620\\n            // 80183906840906820640659903620 * 10^26 / 79228162514264337593543950336 =\\n            // 101206318935480056907421312.890625\\n            if iszero(lt(factor_, 101206318935480056907421313)) {\\n                tick := or(tick, 0x8)\\n                factor_ := div(mul(factor_, _1E26), 101206318935480056907421313)\\n            }\\n            // for tick = 4\\n            // ratioX96 = (1.0015^4) * 2^96 = 79704602139525152702959747603\\n            // 79704602139525152702959747603 * 10^26 / 79228162514264337593543950336 =\\n            // 100601351350506250000000000\\n            if iszero(lt(factor_, 100601351350506250000000000)) {\\n                tick := or(tick, 0x4)\\n                factor_ := div(mul(factor_, _1E26), 100601351350506250000000000)\\n            }\\n            // for tick = 2\\n            // ratioX96 = (1.0015^2) * 2^96 = 79466025265172787701084167660\\n            // 79466025265172787701084167660 * 10^26 / 79228162514264337593543950336 =\\n            // 100300225000000000000000000\\n            if iszero(lt(factor_, 100300225000000000000000000)) {\\n                tick := or(tick, 0x2)\\n                factor_ := div(mul(factor_, _1E26), 100300225000000000000000000)\\n            }\\n            // for tick = 1\\n            // ratioX96 = (1.0015^1) * 2^96 = 79347004758035734099934266261\\n            // 79347004758035734099934266261 * 10^26 / 79228162514264337593543950336 =\\n            // 100150000000000000000000000\\n            if iszero(lt(factor_, 100150000000000000000000000)) {\\n                tick := or(tick, 0x1)\\n                factor_ := div(mul(factor_, _1E26), 100150000000000000000000000)\\n            }\\n            if iszero(cond) {\\n                // if ratioX96 >= ZERO_TICK_SCALED_RATIO\\n                perfectRatioX96 := div(mul(ratioX96, _1E26), factor_)\\n            }\\n            if cond {\\n                // ratioX96 < ZERO_TICK_SCALED_RATIO\\n                tick := not(tick)\\n                perfectRatioX96 := div(mul(ratioX96, factor_), 100150000000000000000000000)\\n            }\\n            // perfect ratio should always be <= ratioX96\\n            // not sure if it can ever be bigger but better to have extra checks\\n            if gt(perfectRatioX96, ratioX96) {\\n                revert(0, 0)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc5c13deaa16bb036a4370c0e38c33445712e8e7da1c792018dd3dc4a641ea0c0\",\"license\":\"BUSL-1.1\"},\"contracts/periphery/wethWrapper/error.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nabstract contract Error {\\n    error FluidWethWrapperError(uint256 errorId_);\\n}\\n\",\"keccak256\":\"0x3a061431ee7cd002d6ce3038149ec77e5d9a7e18ea73588a95a991851ad9d64b\",\"license\":\"MIT\"},\"contracts/periphery/wethWrapper/errorTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nlibrary ErrorTypes {\\n    /***********************************|\\n    |               WethWrapper         | \\n    |__________________________________*/\\n\\n    /// @notice thrown when amount is zero\\n    uint256 internal constant WETH__ZeroAmount = 110001;\\n\\n    /// @notice re-entracy\\n    uint256 internal constant Weth_ReEntracy = 110002;\\n\\n    /// @notice zero address check\\n    uint256 internal constant Weth_ZeroAddress = 110003;\\n\\n    /// @notice Only vault is allowed\\n    uint256 internal constant Weth_NotVaultFactory = 110004;\\n\\n    /// @notice Only user is allowed\\n    uint256 internal constant Weth_AssetNotSupported = 110005;\\n\\n    /// @notice Only one nft transfer\\n    uint256 internal constant Weth_AlreadyMinted = 110006;\\n\\n    /// @notice msg.sender is not onBehalf\\n    uint256 internal constant Weth_NotOwner = 110007;\\n\\n    /// @notice Only one nft transfer\\n    uint256 internal constant Weth_NotLiquidity = 110008;\\n\\n    /// @notice address borrow not supported\\n    uint256 internal constant Weth_BorrowNotSupported = 110009;\\n}\\n\",\"keccak256\":\"0x5819c09539cd457e167837a35b815efb853b9fbb024e1524eb08b3a7cafdb822\",\"license\":\"BUSL-1.1\"},\"contracts/periphery/wethWrapper/events.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\ncontract Events {\\n    /// @notice Emitted when user deposits collateral in WETH\\n    /// @param user   The user performing the deposit\\n    /// @param nftId  The vault NFT ID\\n    /// @param amount Amount of WETH deposited\\n    event LogDeposit(address indexed user, uint256 indexed nftId, uint256 amount);\\n\\n    /// @notice Emitted when user withdraws collateral (receives WETH)\\n    /// @param user   The user performing the withdrawal\\n    /// @param nftId  The vault NFT ID\\n    /// @param amount Amount of WETH withdrawn\\n    event LogWithdraw(address indexed user, uint256 indexed nftId, uint256 amount);\\n\\n    /// @notice Emitted when user borrows\\n    /// @param user   The user performing the borrow\\n    /// @param nftId  The vault NFT ID\\n    /// @param amount Amount borrowed\\n    event LogBorrow(address indexed user, uint256 indexed nftId, uint256 amount);\\n\\n    /// @notice Emitted when user pays back debt\\n    /// @param user   The user performing the payback\\n    /// @param nftId  The vault NFT ID\\n    /// @param amount Amount repaid\\n    event LogPayback(address indexed user, uint256 indexed nftId, uint256 amount);\\n}\\n\",\"keccak256\":\"0xefcd254d3bc0392d5724dafdae5e89f0c721c12d9cf181281459ed38c26b78dc\",\"license\":\"BUSL-1.1\"},\"contracts/periphery/wethWrapper/main.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/interfaces/IERC20.sol\\\";\\nimport { UUPSUpgradeable } from \\\"@openzeppelin/contracts/proxy/utils/UUPSUpgradeable.sol\\\";\\nimport { Initializable } from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\nimport { Error } from \\\"./error.sol\\\";\\nimport { Events } from \\\"./events.sol\\\";\\nimport { ErrorTypes } from \\\"./errorTypes.sol\\\";\\nimport { TickMath } from \\\"../../libraries/tickMath.sol\\\";\\nimport { SafeApprove } from \\\"../../libraries/safeApprove.sol\\\";\\nimport { SafeTransfer } from \\\"../../libraries/safeTransfer.sol\\\";\\nimport { IFluidVaultT1 } from \\\"../../protocols/vault/interfaces/iVaultT1.sol\\\";\\nimport { IWETH9 } from \\\"../../protocols/lending/interfaces/external/iWETH9.sol\\\";\\n\\n/// @notice OwnableUpgradeable is a modified version of OpenZeppelin's Ownable contract to allow for upgradeable implementation\\nabstract contract OwnableUpgradeable is Initializable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\\nabstract contract ReentrancyGuard is Events, Error {\\n    uint8 internal constant REENTRANCY_NOT_ENTERED = 1;\\n    uint8 internal constant REENTRANCY_ENTERED = 2;\\n\\n    uint8 internal _status;\\n\\n    function _Reentrancy_init_chained() internal {\\n        _status = REENTRANCY_NOT_ENTERED;\\n    }\\n\\n    modifier nonReentrant() {\\n        if (_status != REENTRANCY_NOT_ENTERED) revert FluidWethWrapperError(ErrorTypes.Weth_ReEntracy);\\n        _status = REENTRANCY_ENTERED;\\n        _;\\n        _status = REENTRANCY_NOT_ENTERED;\\n    }\\n}\\n\\n/// @title   WETH Wrapper for Fluid Vault T1\\n/// @notice  Allows depositing, withdrawal, borrowing and repaying of assets from vaults using WETH following aave interface\\n/// @dev wrapping/unwrapping to ETH under the hood for vault T1\\ncontract FluidWETHWrapper is Initializable, OwnableUpgradeable, UUPSUpgradeable, ReentrancyGuard {\\n    using SafeTransfer for IERC20;\\n    using SafeApprove for IERC20;\\n\\n    IWETH9 public immutable WETH;\\n\\n    IFluidVaultT1 public immutable VAULT;\\n\\n    /// @dev below variables can be derived directly or indirectly using vault address\\n    // USDC token address\\n    address public immutable BORROW_TOKEN;\\n\\n    address public immutable VAULT_FACTORY;\\n\\n    address public immutable LIQUIDITY;\\n\\n    uint256 public immutable VAULT_ID;\\n\\n    uint internal constant X8 = 0xff;\\n    uint internal constant X19 = 0x7ffff;\\n    uint internal constant X24 = 0xffffff;\\n    uint internal constant X64 = 0xffffffffffffffff;\\n\\n    // default value to be zero, so operate can mint fresh position\\n    uint64 public nftId;\\n\\n    /// @param vaultAddress_  Fluid Vault address\\n    /// @param weth_          WETH token address\\n    constructor(address vaultAddress_, address weth_) {\\n        // ensure logic contract initializer is not abused by disabling initializing\\n        // see https://forum.openzeppelin.com/t/security-advisory-initialize-uups-implementation-contracts/15301\\n        // and https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#initializing_the_implementation_contract\\n        _disableInitializers();\\n\\n        if (vaultAddress_ == address(0) || weth_ == address(0))\\n            revert FluidWethWrapperError(ErrorTypes.Weth_ZeroAddress);\\n\\n        WETH = IWETH9(weth_);\\n        VAULT = IFluidVaultT1(vaultAddress_);\\n\\n        VAULT_ID = VAULT.VAULT_ID();\\n        LIQUIDITY = VAULT.LIQUIDITY();\\n        VAULT_FACTORY = VAULT.VAULT_FACTORY();\\n        BORROW_TOKEN = VAULT.constantsView().borrowToken;\\n    }\\n\\n    function initialize() public initializer {\\n        // initialize reentracy guard\\n        _Reentrancy_init_chained();\\n\\n        // set owner as msg.sender\\n        __Ownable_init_unchained();\\n    }\\n\\n    function _calculateStorageSlotUintMapping(uint256 slot_, uint key_) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(key_, slot_));\\n    }\\n\\n    function _calculateStorageSlotIntMapping(uint256 slot_, int key_) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(key_, slot_));\\n    }\\n\\n    function _getPositionDataRaw() internal view returns (uint) {\\n        return VAULT.readFromStorage(_calculateStorageSlotUintMapping(3, nftId));\\n    }\\n\\n    function _getVaultVariables2Raw() internal view returns (uint256) {\\n        return VAULT.readFromStorage(bytes32(uint256(1)));\\n    }\\n\\n    function getTickDataRaw(int tick_) internal view returns (uint) {\\n        return VAULT.readFromStorage(_calculateStorageSlotIntMapping(5, tick_));\\n    }\\n\\n    function _getPositionBorrow() internal view returns (uint256 borrow) {\\n        uint256 positionData_ = _getPositionDataRaw();\\n\\n        uint256 supply = (positionData_ >> 45) & X64;\\n        supply = (supply >> 8) << (supply & X8);\\n\\n        // if only supply position\\n        if ((positionData_ & 1) == 1) return 0;\\n\\n        int256 tick = (positionData_ & 2) == 2 ? int((positionData_ >> 2) & X19) : -int((positionData_ >> 2) & X19);\\n        uint256 tickId = (positionData_ >> 21) & X24;\\n\\n        borrow = (TickMath.getRatioAtTick(int24(tick)) * supply) >> 96;\\n\\n        uint tickData_ = getTickDataRaw(tick);\\n\\n        if (((tickData_ & 1) == 1) || (((tickData_ >> 1) & X24) > tickId))\\n            (tick, borrow, supply, , ) = VAULT.fetchLatestPosition(tick, tickId, borrow, tickData_);\\n\\n        uint256 dustBorrow = (positionData_ >> 109) & X64;\\n        dustBorrow = (dustBorrow >> 8) << (dustBorrow & X8);\\n\\n        if (borrow > dustBorrow) borrow = borrow - dustBorrow;\\n        else {\\n            borrow = 0;\\n            dustBorrow = 0;\\n        }\\n\\n        // Retrieve the latest exchange prices\\n        (, , , uint256 vaultBorrowExchangePrice) = VAULT.updateExchangePrices(_getVaultVariables2Raw());\\n\\n        // exhange precision - 1e12, round up debt then add 1 wei for max repay case\\n        borrow = ((borrow * vaultBorrowExchangePrice + 1e12 - 1) / 1e12) + 1;\\n    }\\n\\n    function _getPositionSupply() internal view returns (uint256 supply) {\\n        uint256 positionData_ = _getPositionDataRaw();\\n\\n        supply = (positionData_ >> 45) & X64;\\n        supply = (supply >> 8) << (supply & X8);\\n\\n        // if not supply position\\n        if ((positionData_ & 1) == 0) {\\n            int256 tick = (positionData_ & 2) == 2 ? int((positionData_ >> 2) & X19) : -int((positionData_ >> 2) & X19);\\n            uint256 tickId = (positionData_ >> 21) & X24;\\n\\n            uint tickData_ = getTickDataRaw(tick);\\n\\n            if (((tickData_ & 1) == 1) || (((tickData_ >> 1) & X24) > tickId)) {\\n                uint256 borrow = (TickMath.getRatioAtTick(int24(tick)) * supply) >> 96;\\n                (tick, borrow, supply, , ) = VAULT.fetchLatestPosition(tick, tickId, borrow, tickData_);\\n            }\\n        }\\n\\n        // Retrieve the latest exchange prices\\n        (, , uint256 vaultSupplyExchangePrice, ) = VAULT.updateExchangePrices(_getVaultVariables2Raw());\\n\\n        supply = ((supply * vaultSupplyExchangePrice) / 1e12);\\n    }\\n\\n    /// @notice get the vault nft position on vault\\n    /// @return supply amount\\n    /// @return borrow amount\\n    function getPosition() external view returns (uint256, uint256) {\\n        return (_getPositionSupply(), _getPositionBorrow());\\n    }\\n\\n    /// @notice Deposit WETH as collateral to a T1 VAULT.\\n    ///         - If `nftId` == 0, new vault position gets created (NFT mint to this)\\n    /// @param asset   The asset to deposit in contract (weth)\\n    /// @param amount  Amount of asset to deposit as collateral\\n    /// @param onBehalfOf  Deposit on behalf of, should be same as msg.sender\\n    /// @param referralCode  Un-used param\\n    function supply(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external nonReentrant onlyOwner {\\n        if (amount == 0) revert FluidWethWrapperError(ErrorTypes.WETH__ZeroAmount);\\n        if (onBehalfOf != msg.sender) revert FluidWethWrapperError(ErrorTypes.Weth_NotOwner);\\n        if (asset != address(WETH)) revert FluidWethWrapperError(ErrorTypes.Weth_AssetNotSupported);\\n\\n        SafeTransfer.safeTransferFrom(address(asset), msg.sender, address(this), amount);\\n        WETH.withdraw(amount);\\n\\n        (uint256 newNftId, , ) = VAULT.operate{ value: amount }(\\n            nftId,\\n            int256(amount), // deposit amount > 0\\n            int256(0), // no borrow\\n            address(this) // NFT must be minted to this address\\n        );\\n\\n        // If it was a newly minted position, store ownership\\n        if (nftId != newNftId) nftId = uint64(newNftId);\\n\\n        emit LogDeposit(msg.sender, nftId, amount);\\n    }\\n\\n    /// @notice Withdraw WETH collateral from a T1 vault\\n    /// @dev    The vault sends us ETH, which we wrap into WETH and transfer to the user.\\n    /// @param asset   The asset to deposit in contract (weth)\\n    /// @param amount  Amount of asset to borrow as collateral\\n    /// @param to withdraw should go to this address\\n    function withdraw(address asset, uint256 amount, address to) external nonReentrant onlyOwner {\\n        if (amount == 0) revert FluidWethWrapperError(ErrorTypes.WETH__ZeroAmount);\\n        if (asset != address(WETH)) revert FluidWethWrapperError(ErrorTypes.Weth_AssetNotSupported);\\n\\n        (, int256 withdrawAmount_, ) = VAULT.operate(\\n            nftId,\\n            amount == type(uint256).max ? type(int256).min : -int256(amount), // withdraw\\n            int256(0),\\n            address(this) // withdraw amount should be firstly transferred to this, then unwrap and send to user\\n        );\\n\\n        /// @dev as operate returns negative withdraw amount\\n        WETH.deposit{ value: uint256(-withdrawAmount_) }();\\n        // transfer withdraw amount to `to`\\n        SafeTransfer.safeTransfer(address(WETH), to, uint256(-withdrawAmount_));\\n\\n        emit LogWithdraw(to, nftId, uint256(-withdrawAmount_));\\n    }\\n\\n    /// @notice Borrow in USDC from vault, the vault will send ETH to this contract.\\n    /// @param asset   The asset to borrow\\n    /// @param amount  Amount of asset to borrow\\n    /// @param interestRateMode The interest rate mode at which the user wants to borrow, Not used\\n    /// @param referralCode The code used to register the integrator originating the operation, for potential rewards.NA\\n    /// @param onBehalfOf The address of the user who will receive the debt.\\n    function borrow(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        uint16 referralCode,\\n        address onBehalfOf\\n    ) external nonReentrant onlyOwner {\\n        if (amount == 0) revert FluidWethWrapperError(ErrorTypes.WETH__ZeroAmount);\\n        if (asset != address(BORROW_TOKEN)) revert FluidWethWrapperError(ErrorTypes.Weth_AssetNotSupported);\\n        if (onBehalfOf != msg.sender) revert FluidWethWrapperError(ErrorTypes.Weth_BorrowNotSupported);\\n\\n        (, , int256 borrowAmount_) = VAULT.operate(\\n            nftId,\\n            int256(0), // supply = 0\\n            int256(amount), // borrow > 0\\n            onBehalfOf // borrow to this address\\n        );\\n\\n        emit LogBorrow(onBehalfOf, nftId, uint256(borrowAmount_));\\n    }\\n\\n    /// @notice Repay debt in USDC to VAULT.\\n    /// @param asset   The asset to repay (USDC)\\n    /// @param amount  Amount of asset to repay\\n    /// @param interestRateMode The interest rate mode at which the user wants to borrow, Not used\\n    /// @param onBehalfOf should be equal to msg.sender\\n    function repay(\\n        address asset,\\n        uint256 amount,\\n        uint256 interestRateMode,\\n        address onBehalfOf\\n    ) external nonReentrant onlyOwner {\\n        if (amount == 0) revert FluidWethWrapperError(ErrorTypes.WETH__ZeroAmount);\\n        if (asset != address(BORROW_TOKEN)) revert FluidWethWrapperError(ErrorTypes.Weth_AssetNotSupported);\\n        if (onBehalfOf != msg.sender) revert FluidWethWrapperError(ErrorTypes.Weth_NotOwner);\\n\\n        bool isMaxPayback = amount == type(uint256).max;\\n\\n        if (isMaxPayback) {\\n            uint256[] memory nftIds_ = new uint256[](1);\\n            nftIds_[0] = nftId;\\n            amount = _getPositionBorrow();\\n        }\\n\\n        SafeTransfer.safeTransferFrom(BORROW_TOKEN, onBehalfOf, address(this), uint256(amount));\\n        SafeApprove.safeApprove(BORROW_TOKEN, address(VAULT), amount);\\n\\n        VAULT.operate(\\n            nftId,\\n            int256(0), // no supply\\n            isMaxPayback ? type(int).min : -int256(amount), // payback < 0\\n            address(this)\\n        );\\n\\n        emit LogPayback(onBehalfOf, nftId, amount);\\n    }\\n\\n    /// @notice Accepts NFT transfers only from the configured VAULT.\\n    ///         Records the `from_` address as the NFT's owner in our mapping,\\n    ///         so that `from_` can have ownership for withdraw and borrow.\\n    function onERC721Received(address, address, uint256 tokenId_, bytes calldata) external returns (bytes4) {\\n        if (msg.sender != address(VAULT_FACTORY)) revert FluidWethWrapperError(ErrorTypes.Weth_NotVaultFactory);\\n\\n        // For single NFT transer only from vault\\n        if (nftId != 0) revert FluidWethWrapperError(ErrorTypes.Weth_AlreadyMinted);\\n\\n        return this.onERC721Received.selector;\\n    }\\n\\n    /// @notice                         Spell allows owner aka governance to do any arbitrary call on factory\\n    /// @param target_                  Address to which the call needs to be delegated\\n    /// @param data_                    Data to execute at the delegated address\\n    function spell(address target_, bytes memory data_) external onlyOwner returns (bytes memory response_) {\\n        assembly {\\n            let succeeded := delegatecall(gas(), target_, add(data_, 0x20), mload(data_), 0, 0)\\n            let size := returndatasize()\\n\\n            response_ := mload(0x40)\\n            mstore(0x40, add(response_, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n            mstore(response_, size)\\n            returndatacopy(add(response_, 0x20), 0, size)\\n\\n            switch iszero(succeeded)\\n            case 1 {\\n                // throw if delegatecall failed\\n                returndatacopy(0x00, 0x00, size)\\n                revert(0x00, size)\\n            }\\n        }\\n    }\\n\\n    receive() external payable {\\n        // As we receive funds directly through liquidity layer.\\n        if (msg.sender != address(LIQUIDITY) && msg.sender != address(WETH))\\n            revert FluidWethWrapperError(ErrorTypes.Weth_NotLiquidity);\\n    }\\n\\n    /// @dev onlyOwner is required as this contract is upgradable\\n    function _authorizeUpgrade(address newImplementation) internal virtual override onlyOwner {}\\n}\\n\",\"keccak256\":\"0xede0685d11bdcba68d6c1d1aca0961f05ce2c85af45bf0250db6345a73652e71\",\"license\":\"BUSL-1.1\"},\"contracts/protocols/lending/interfaces/external/iWETH9.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWETH9 is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 wad) external;\\n}\\n\",\"keccak256\":\"0x3e7e28357eb8914d51f7672a10d9ebe363e1aa36ccee6d928c17ac1ad7e4f7db\",\"license\":\"MIT\"},\"contracts/protocols/vault/interfaces/iVaultT1.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\ninterface IFluidVaultT1 {\\n    /// @notice returns the vault id\\n    function VAULT_ID() external view returns (uint256);\\n\\n    /// @notice returns the vault factory address\\n    function VAULT_FACTORY() external view returns (address);\\n\\n    /// @notice reads uint256 data `result_` from storage at a bytes32 storage `slot_` key.\\n    function readFromStorage(bytes32 slot_) external view returns (uint256 result_);\\n\\n    struct ConstantViews {\\n        address liquidity;\\n        address factory;\\n        address adminImplementation;\\n        address secondaryImplementation;\\n        address supplyToken;\\n        address borrowToken;\\n        uint8 supplyDecimals;\\n        uint8 borrowDecimals;\\n        uint vaultId;\\n        bytes32 liquiditySupplyExchangePriceSlot;\\n        bytes32 liquidityBorrowExchangePriceSlot;\\n        bytes32 liquidityUserSupplySlot;\\n        bytes32 liquidityUserBorrowSlot;\\n    }\\n\\n    /// @notice returns all Vault constants\\n    function constantsView() external view returns (ConstantViews memory constantsView_);\\n\\n    /// @notice fetches the latest user position after a liquidation\\n    function fetchLatestPosition(\\n        int256 positionTick_,\\n        uint256 positionTickId_,\\n        uint256 positionRawDebt_,\\n        uint256 tickData_\\n    )\\n        external\\n        view\\n        returns (\\n            int256, // tick\\n            uint256, // raw debt\\n            uint256, // raw collateral\\n            uint256, // branchID_\\n            uint256 // branchData_\\n        );\\n\\n    /// @notice calculates the updated vault exchange prices\\n    function updateExchangePrices(\\n        uint256 vaultVariables2_\\n    )\\n        external\\n        view\\n        returns (\\n            uint256 liqSupplyExPrice_,\\n            uint256 liqBorrowExPrice_,\\n            uint256 vaultSupplyExPrice_,\\n            uint256 vaultBorrowExPrice_\\n        );\\n\\n    /// @notice calculates the updated vault exchange prices and writes them to storage\\n    function updateExchangePricesOnStorage()\\n        external\\n        returns (\\n            uint256 liqSupplyExPrice_,\\n            uint256 liqBorrowExPrice_,\\n            uint256 vaultSupplyExPrice_,\\n            uint256 vaultBorrowExPrice_\\n        );\\n\\n    /// @notice returns the liquidity contract address\\n    function LIQUIDITY() external view returns (address);\\n\\n    function operate(\\n        uint256 nftId_, // if 0 then new position\\n        int256 newCol_, // if negative then withdraw\\n        int256 newDebt_, // if negative then payback\\n        address to_ // address at which the borrow & withdraw amount should go to. If address(0) then it'll go to msg.sender\\n    )\\n        external\\n        payable\\n        returns (\\n            uint256, // nftId_\\n            int256, // final supply amount. if - then withdraw\\n            int256 // final borrow amount. if - then payback\\n        );\\n\\n    function liquidate(\\n        uint256 debtAmt_,\\n        uint256 colPerUnitDebt_, // min collateral needed per unit of debt in 1e18\\n        address to_,\\n        bool absorb_\\n    ) external payable returns (uint actualDebtAmt_, uint actualColAmt_);\\n\\n    function absorb() payable external;\\n\\n    function rebalance() external payable returns (int supplyAmt_, int borrowAmt_);\\n\\n    error FluidLiquidateResult(uint256 colLiquidated, uint256 debtLiquidated);\\n}\\n\",\"keccak256\":\"0x1d81c36ec35f5929975a91401a3ee00d08f2a7b3d5cf3adc2a3ac1ea02facfd3\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x610160604052306080523480156200001657600080fd5b5060405162003e2e38038062003e2e833981016040819052620000399162000368565b620000436200028c565b6001600160a01b03821615806200006157506001600160a01b038116155b156200008a5760405163e375724360e01b81526201adb360048201526024015b60405180910390fd5b6001600160a01b0380821660a052821660c081905260408051631502b2af60e21b8152905163540acabc916004808201926020929091908290030181865afa158015620000db573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001019190620003a0565b610140818152505060c0516001600160a01b0316632861c7d16040518163ffffffff1660e01b8152600401602060405180830381865afa1580156200014a573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001709190620003ba565b6001600160a01b0316610120816001600160a01b03168152505060c0516001600160a01b031663103f29076040518163ffffffff1660e01b8152600401602060405180830381865afa158015620001cb573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190620001f19190620003ba565b6001600160a01b0316610100816001600160a01b03168152505060c0516001600160a01b031663b7791bf26040518163ffffffff1660e01b81526004016101a060405180830381865afa1580156200024d573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019062000273919062000429565b60a001516001600160a01b031660e05250620005199050565b600054610100900460ff1615620002f65760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840162000081565b60005460ff908116101562000349576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b80516001600160a01b03811681146200036357600080fd5b919050565b600080604083850312156200037c57600080fd5b62000387836200034b565b915062000397602084016200034b565b90509250929050565b600060208284031215620003b357600080fd5b5051919050565b600060208284031215620003cd57600080fd5b620003d8826200034b565b9392505050565b6040516101a081016001600160401b03811182821017156200041157634e487b7160e01b600052604160045260246000fd5b60405290565b805160ff811681146200036357600080fd5b60006101a082840312156200043d57600080fd5b62000447620003df565b62000452836200034b565b815262000462602084016200034b565b602082015262000475604084016200034b565b604082015262000488606084016200034b565b60608201526200049b608084016200034b565b6080820152620004ae60a084016200034b565b60a0820152620004c160c0840162000417565b60c0820152620004d460e0840162000417565b60e08201526101008381015190820152610120808401519082015261014080840151908201526101608084015190820152610180928301519281019290925250919050565b60805160a05160c05160e0516101005161012051610140516137f66200063860003960006103df01526000818161018001526102ed01526000818161023e01526105e101526000818161037501528181610c9b01528181610e1901528181610e450152611bca01526000818161034101528181610e6601528181610e8d015281816113480152818161162101528181611d28015281816122f6015281816123bc015281816127cc0152818161285f01528181612bef01528181612f300152612fe80152600081816101c101528181610503015281816111a80152818161126b015281816115930152818161178901526118000152600081816106e301528181610793015281816108e8015281816109980152610ae101526137f66000f3fe6080604052600436106101635760003560e01c8063617ba037116100c0578063a415bcad11610074578063c6bc518211610059578063c6bc518214610525578063c7acb01f1461057a578063f2fde38b146105a757600080fd5b8063a415bcad146104d1578063ad5c4648146104f157600080fd5b80637398ab18116100a55780637398ab18146104615780638129fc1c1461048b5780638da5cb5b146104a057600080fd5b8063617ba0371461042157806369328dec1461044157600080fd5b80634c90f25c1161011757806352d1902d116100fc57806352d1902d146103aa578063540acabc146103cd578063573ade811461040157600080fd5b80634c90f25c146103635780634f1ef2861461039757600080fd5b80632861c7d1116101485780632861c7d1146102db5780633659cfe61461030f578063411557d11461032f57600080fd5b8063103f29071461022c578063150b7a021461028a57600080fd5b36610227573373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016148015906101e457503373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614155b15610225576040517fe37572430000000000000000000000000000000000000000000000000000000081526201adb860048201526024015b60405180910390fd5b005b600080fd5b34801561023857600080fd5b506102607f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b34801561029657600080fd5b506102aa6102a536600461323f565b6105c7565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091168152602001610281565b3480156102e757600080fd5b506102607f000000000000000000000000000000000000000000000000000000000000000081565b34801561031b57600080fd5b5061022561032a3660046132da565b6106cc565b34801561033b57600080fd5b506102607f000000000000000000000000000000000000000000000000000000000000000081565b34801561036f57600080fd5b506102607f000000000000000000000000000000000000000000000000000000000000000081565b6102256103a5366004613324565b6108d1565b3480156103b657600080fd5b506103bf610ac7565b604051908152602001610281565b3480156103d957600080fd5b506103bf7f000000000000000000000000000000000000000000000000000000000000000081565b34801561040d57600080fd5b5061022561041c366004613404565b610bb3565b34801561042d57600080fd5b5061022561043c36600461345c565b61106c565b34801561044d57600080fd5b5061022561045c36600461349e565b6114ab565b34801561046d57600080fd5b506104766118f0565b60408051928352602083019190915201610281565b34801561049757600080fd5b5061022561190b565b3480156104ac57600080fd5b5060005462010000900473ffffffffffffffffffffffffffffffffffffffff16610260565b3480156104dd57600080fd5b506102256104ec3660046134da565b611ae2565b3480156104fd57600080fd5b506102607f000000000000000000000000000000000000000000000000000000000000000081565b34801561053157600080fd5b506000546105619077010000000000000000000000000000000000000000000000900467ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610281565b34801561058657600080fd5b5061059a610595366004613324565b611e57565b604051610281919061359f565b3480156105b357600080fd5b506102256105c23660046132da565b611eab565b60003373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461063d576040517fe37572430000000000000000000000000000000000000000000000000000000081526201adb4600482015260240161021c565b60005477010000000000000000000000000000000000000000000000900467ffffffffffffffff16156106a1576040517fe37572430000000000000000000000000000000000000000000000000000000081526201adb6600482015260240161021c565b507f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163003610791576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161021c565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166108067f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff16146108a9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161021c565b6108b281611f5f565b604080516000808252602082019092526108ce91839190611f67565b50565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163003610996576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161021c565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610a0b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1614610aae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161021c565b610ab782611f5f565b610ac382826001611f67565b5050565b60003073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610b8e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161021c565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b600054760100000000000000000000000000000000000000000000900460ff16600114610c11576040517fe37572430000000000000000000000000000000000000000000000000000000081526201adb2600482015260240161021c565b600080547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff16760200000000000000000000000000000000000000000000179055610c5a61216b565b82600003610c99576040517fe37572430000000000000000000000000000000000000000000000000000000081526201adb1600482015260240161021c565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614610d23576040517fe37572430000000000000000000000000000000000000000000000000000000081526201adb5600482015260240161021c565b73ffffffffffffffffffffffffffffffffffffffff81163314610d77576040517fe37572430000000000000000000000000000000000000000000000000000000081526201adb7600482015260240161021c565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83148015610e145760408051600180825281830190925260009160208083019080368337505060008054835193945077010000000000000000000000000000000000000000000000900467ffffffffffffffff1692849250610dfc57610dfc6135b2565b602002602001018181525050610e106121f5565b9450505b610e407f00000000000000000000000000000000000000000000000000000000000000008330876124b0565b610e8b7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000086612577565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663032d2276600060179054906101000a900467ffffffffffffffff16600084610ef357610eee88613610565b610f15565b7f80000000000000000000000000000000000000000000000000000000000000005b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815267ffffffffffffffff9093166004840152602483019190915260448201523060648201526084016060604051808303816000875af1158015610f87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fab9190613648565b50506000546040518681527701000000000000000000000000000000000000000000000090910467ffffffffffffffff16915073ffffffffffffffffffffffffffffffffffffffff8416907f078fa6b3e9efb70cad8546f6f21c6cbc4c8e8b8caf73c92a252d9be03a45ec1c906020015b60405180910390a35050600080547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff16760100000000000000000000000000000000000000000000179055505050565b600054760100000000000000000000000000000000000000000000900460ff166001146110ca576040517fe37572430000000000000000000000000000000000000000000000000000000081526201adb2600482015260240161021c565b600080547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff1676020000000000000000000000000000000000000000000017905561111361216b565b82600003611152576040517fe37572430000000000000000000000000000000000000000000000000000000081526201adb1600482015260240161021c565b73ffffffffffffffffffffffffffffffffffffffff821633146111a6576040517fe37572430000000000000000000000000000000000000000000000000000000081526201adb7600482015260240161021c565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611230576040517fe37572430000000000000000000000000000000000000000000000000000000081526201adb5600482015260240161021c565b61123c843330866124b0565b6040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018490527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690632e1a7d4d90602401600060405180830381600087803b1580156112c457600080fd5b505af11580156112d8573d6000803e3d6000fd5b5050600080546040517f032d22760000000000000000000000000000000000000000000000000000000081527701000000000000000000000000000000000000000000000090910467ffffffffffffffff16600482015260248101879052604481018290523060648201529092507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16915063032d227690869060840160606040518083038185885af11580156113a8573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906113cd9190613648565b505060005490915077010000000000000000000000000000000000000000000000900467ffffffffffffffff16811461144f57600080547fff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffff167701000000000000000000000000000000000000000000000067ffffffffffffffff8416021790555b6000546040518581527701000000000000000000000000000000000000000000000090910467ffffffffffffffff169033907f9dbb0e7dda3e09710ce75b801addc87cf9d9c6c581641b3275fca409ad086c629060200161101c565b600054760100000000000000000000000000000000000000000000900460ff16600114611509576040517fe37572430000000000000000000000000000000000000000000000000000000081526201adb2600482015260240161021c565b600080547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff1676020000000000000000000000000000000000000000000017905561155261216b565b81600003611591576040517fe37572430000000000000000000000000000000000000000000000000000000081526201adb1600482015260240161021c565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461161b576040517fe37572430000000000000000000000000000000000000000000000000000000081526201adb5600482015260240161021c565b600080547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063032d22769077010000000000000000000000000000000000000000000000900467ffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff86146116b7576116b286613610565b6116d9565b7f80000000000000000000000000000000000000000000000000000000000000005b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815267ffffffffffffffff90921660048301526024820152600060448201523060648201526084016060604051808303816000875af115801561174a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176e9190613648565b5091505073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663d0e30db06117b783613610565b6040518263ffffffff1660e01b81526004016000604051808303818588803b1580156117e257600080fd5b505af11580156117f6573d6000803e3d6000fd5b505050505061182f7f0000000000000000000000000000000000000000000000000000000000000000838361182a90613610565b61262d565b60005477010000000000000000000000000000000000000000000000900467ffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff83167fda9a10d7b992511ddadbfc7ff712c1424ce2058bbcdac8c9876d6f8de590d43f61189884613610565b60405190815260200160405180910390a35050600080547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff167601000000000000000000000000000000000000000000001790555050565b6000806118fb6126d1565b6119036121f5565b915091509091565b600054610100900460ff161580801561192b5750600054600160ff909116105b806119455750303b158015611945575060005460ff166001145b6119d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161021c565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015611a2f57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b611a75600080547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff16760100000000000000000000000000000000000000000000179055565b611a7d612928565b80156108ce57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b600054760100000000000000000000000000000000000000000000900460ff16600114611b40576040517fe37572430000000000000000000000000000000000000000000000000000000081526201adb2600482015260240161021c565b600080547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff16760200000000000000000000000000000000000000000000179055611b8961216b565b83600003611bc8576040517fe37572430000000000000000000000000000000000000000000000000000000081526201adb1600482015260240161021c565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614611c52576040517fe37572430000000000000000000000000000000000000000000000000000000081526201adb5600482015260240161021c565b73ffffffffffffffffffffffffffffffffffffffff81163314611ca6576040517fe37572430000000000000000000000000000000000000000000000000000000081526201adb9600482015260240161021c565b600080546040517f032d22760000000000000000000000000000000000000000000000000000000081527701000000000000000000000000000000000000000000000090910467ffffffffffffffff166004820152602481018290526044810186905273ffffffffffffffffffffffffffffffffffffffff83811660648301527f0000000000000000000000000000000000000000000000000000000000000000169063032d2276906084016060604051808303816000875af1158015611d71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d959190613648565b60005460405182815291945077010000000000000000000000000000000000000000000000900467ffffffffffffffff16925073ffffffffffffffffffffffffffffffffffffffff851691507fe1b17d743be0011d9bba06fe70f26f50edb5da84de0c4db5fcaf609549db70369060200160405180910390a35050600080547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff1676010000000000000000000000000000000000000000000017905550505050565b6060611e6161216b565b600080835160208501865af43d6040519250601f19601f6020830101168301604052808352806000602085013e811560018103611ea257816000803e816000fd5b50505092915050565b611eb361216b565b73ffffffffffffffffffffffffffffffffffffffff8116611f56576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161021c565b6108ce816129c4565b6108ce61216b565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611f9f57611f9a83612a42565b505050565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612024575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261202191810190613676565b60015b6120b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f742055555053000000000000000000000000000000000000606482015260840161021c565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc811461215f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c65555549440000000000000000000000000000000000000000000000606482015260840161021c565b50611f9a838383612b4c565b60005473ffffffffffffffffffffffffffffffffffffffff620100009091041633146121f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161021c565b565b600080612200612b71565b905066ffffffffffffff603582901c1660ff602d83901c161b6001808316900361222d5760009250505090565b6000826002166002146122515761224c600284901c6207ffff16613610565b61225c565b6207ffff600284901c165b9050601583901c62ffffff16606083612278600285900b612c75565b612282919061368f565b901c9450600061229183612ed7565b905080600116600114806122ad57508162ffffff600183901c16115b15612381576040517f22348cc7000000000000000000000000000000000000000000000000000000008152600481018490526024810183905260448101879052606481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906322348cc79060840160a060405180830381865afa158015612352573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237691906136a6565b509198509550909350505b66ffffffffffffff607586901c1660ff606d87901c161b808711156123b1576123aa81886136e6565b96506123b8565b5060009550855b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166309f0d8cb6123fe612fb6565b6040518263ffffffff1660e01b815260040161241c91815260200190565b608060405180830381865afa158015612439573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245d91906136f9565b935050505064e8d4a510006001828a612476919061368f565b6124859064e8d4a5100061372f565b61248f91906136e6565b6124999190613742565b6124a490600161372f565b97505050505050505090565b60006040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015273ffffffffffffffffffffffffffffffffffffffff841660248201528260448201526020600060648360008a5af13d15601f3d1160016000511416171691505080612570576040517fdee51a8a00000000000000000000000000000000000000000000000000000000815262011559600482015260240161021c565b5050505050565b60006040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152826024820152602060006044836000895af191505080601f3d11600160005114161516156125eb5750823b153d17155b80612627576040517fffd1fc0700000000000000000000000000000000000000000000000000000000815262013c69600482015260240161021c565b50505050565b60006040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080612627576040517fdee51a8a0000000000000000000000000000000000000000000000000000000081526201155a600482015260240161021c565b6000806126dc612b71565b66ffffffffffffff603582901c1660ff602d83901c161b925090506001811660000361285b5760008160021660021461272657612721600283901c6207ffff16613610565b612731565b6207ffff600283901c165b9050601582901c62ffffff16600061274883612ed7565b9050806001166001148061276457508162ffffff600183901c16115b1561285757600060608661277a8660020b612c75565b612784919061368f565b6040517f22348cc70000000000000000000000000000000000000000000000000000000081526004810187905260248101869052911c604482018190526064820184905291507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906322348cc79060840160a060405180830381865afa158015612828573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284c91906136a6565b509098509195505050505b5050505b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166309f0d8cb6128a1612fb6565b6040518263ffffffff1660e01b81526004016128bf91815260200190565b608060405180830381865afa1580156128dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061290091906136f9565b509250505064e8d4a510008184612917919061368f565b6129219190613742565b9250505090565b600054610100900460ff166129bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161021c565b6121f3335b6000805473ffffffffffffffffffffffffffffffffffffffff838116620100008181027fffffffffffffffffffff0000000000000000000000000000000000000000ffff851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b73ffffffffffffffffffffffffffffffffffffffff81163b612ae6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e747261637400000000000000000000000000000000000000606482015260840161021c565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b612b558361302c565b600082511180612b625750805b15611f9a576126278383613079565b60008054604080517701000000000000000000000000000000000000000000000090920467ffffffffffffffff16602080840191909152600383830152815180840383018152606084019283905280519101207fb5c736e40000000000000000000000000000000000000000000000000000000090915260648201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063b5c736e4906084015b602060405180830381865afa158015612c4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c709190613676565b905090565b600060ff82901d80831803617fff811115612c8f57600080fd5b7001000000000000000000000000000000006001821615612cbd57506fff9dd7de423466c20352b1246ce4856f5b6002821615612cdc576fff3bd55f4488ad277531fa1c725a66d00260801c5b6004821615612cfb576ffe78410fd6498b73cb96a6917f8532590260801c5b6008821615612d1a576ffcf2d9987c9be178ad5bfeffaa1232730260801c5b6010821615612d39576ff9ef02c4529258b057769680fc6601b30260801c5b6020821615612d58576ff402d288133a85a17784a411f7aba0820260801c5b6040821615612d77576fe895615b5beb6386553757b0352bda900260801c5b6080821615612d96576fd34f17a00ffa00a8309940a15930391a0260801c5b610100821615612db6576fae6b7961714e20548d88ea5123f9a0ff0260801c5b610200821615612dd6576f76d6461f27082d74e0feed3b388c0ca10260801c5b610400821615612df6576f372a3bfe0745d8b6b19d985d9a8b85bb0260801c5b610800821615612e16576f0be32cbee48979763cf7247dd7bb539d0260801c5b611000821615612e35576e8d4f70c9ff4924dac37612d1e2921e0260801c5b612000821615612e53576d4e009ae5519380809a02ca7aec770260801c5b614000821615612e6f576b17c45e641b6e95dee056ff100260801c5b600091507f80000000000000000000000000000000000000000000000000000000000000008416612ecd577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0463ffffffff811615612ecd57600191505b60201c0192915050565b604080516020808201849052600582840152825180830384018152606083019384905280519101207fb5c736e40000000000000000000000000000000000000000000000000000000090925260648101919091526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063b5c736e490608401602060405180830381865afa158015612f8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb09190613676565b92915050565b6040517fb5c736e4000000000000000000000000000000000000000000000000000000008152600160048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063b5c736e490602401612c2f565b61303581612a42565b60405173ffffffffffffffffffffffffffffffffffffffff8216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061309e838360405180606001604052806027815260200161379a602791396130a5565b9392505050565b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516130cf919061377d565b600060405180830381855af49150503d806000811461310a576040519150601f19603f3d011682016040523d82523d6000602084013e61310f565b606091505b50915091506131208683838761312a565b9695505050505050565b606083156131c05782516000036131b95773ffffffffffffffffffffffffffffffffffffffff85163b6131b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161021c565b50816131ca565b6131ca83836131d2565b949350505050565b8151156131e25781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021c919061359f565b803573ffffffffffffffffffffffffffffffffffffffff8116811461323a57600080fd5b919050565b60008060008060006080868803121561325757600080fd5b61326086613216565b945061326e60208701613216565b935060408601359250606086013567ffffffffffffffff8082111561329257600080fd5b818801915088601f8301126132a657600080fd5b8135818111156132b557600080fd5b8960208285010111156132c757600080fd5b9699959850939650602001949392505050565b6000602082840312156132ec57600080fd5b61309e82613216565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561333757600080fd5b61334083613216565b9150602083013567ffffffffffffffff8082111561335d57600080fd5b818501915085601f83011261337157600080fd5b813581811115613383576133836132f5565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156133c9576133c96132f5565b816040528281528860208487010111156133e257600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000806000806080858703121561341a57600080fd5b61342385613216565b9350602085013592506040850135915061343f60608601613216565b905092959194509250565b803561ffff8116811461323a57600080fd5b6000806000806080858703121561347257600080fd5b61347b85613216565b93506020850135925061349060408601613216565b915061343f6060860161344a565b6000806000606084860312156134b357600080fd5b6134bc84613216565b9250602084013591506134d160408501613216565b90509250925092565b600080600080600060a086880312156134f257600080fd5b6134fb86613216565b945060208601359350604086013592506135176060870161344a565b915061352560808701613216565b90509295509295909350565b60005b8381101561354c578181015183820152602001613534565b50506000910152565b6000815180845261356d816020860160208601613531565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061309e6020830184613555565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007f80000000000000000000000000000000000000000000000000000000000000008203613641576136416135e1565b5060000390565b60008060006060848603121561365d57600080fd5b8351925060208401519150604084015190509250925092565b60006020828403121561368857600080fd5b5051919050565b8082028115828204841417612fb057612fb06135e1565b600080600080600060a086880312156136be57600080fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b81810381811115612fb057612fb06135e1565b6000806000806080858703121561370f57600080fd5b505082516020840151604085015160609095015191969095509092509050565b80820180821115612fb057612fb06135e1565b600082613778577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000825161378f818460208701613531565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212205c8da8ca7e5abee5ee41effd71ce80e1603e7109b3047608789e290dfb71492664736f6c63430008150033",
  "deployedBytecode": "0x6080604052600436106101635760003560e01c8063617ba037116100c0578063a415bcad11610074578063c6bc518211610059578063c6bc518214610525578063c7acb01f1461057a578063f2fde38b146105a757600080fd5b8063a415bcad146104d1578063ad5c4648146104f157600080fd5b80637398ab18116100a55780637398ab18146104615780638129fc1c1461048b5780638da5cb5b146104a057600080fd5b8063617ba0371461042157806369328dec1461044157600080fd5b80634c90f25c1161011757806352d1902d116100fc57806352d1902d146103aa578063540acabc146103cd578063573ade811461040157600080fd5b80634c90f25c146103635780634f1ef2861461039757600080fd5b80632861c7d1116101485780632861c7d1146102db5780633659cfe61461030f578063411557d11461032f57600080fd5b8063103f29071461022c578063150b7a021461028a57600080fd5b36610227573373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016148015906101e457503373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614155b15610225576040517fe37572430000000000000000000000000000000000000000000000000000000081526201adb860048201526024015b60405180910390fd5b005b600080fd5b34801561023857600080fd5b506102607f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b34801561029657600080fd5b506102aa6102a536600461323f565b6105c7565b6040517fffffffff000000000000000000000000000000000000000000000000000000009091168152602001610281565b3480156102e757600080fd5b506102607f000000000000000000000000000000000000000000000000000000000000000081565b34801561031b57600080fd5b5061022561032a3660046132da565b6106cc565b34801561033b57600080fd5b506102607f000000000000000000000000000000000000000000000000000000000000000081565b34801561036f57600080fd5b506102607f000000000000000000000000000000000000000000000000000000000000000081565b6102256103a5366004613324565b6108d1565b3480156103b657600080fd5b506103bf610ac7565b604051908152602001610281565b3480156103d957600080fd5b506103bf7f000000000000000000000000000000000000000000000000000000000000000081565b34801561040d57600080fd5b5061022561041c366004613404565b610bb3565b34801561042d57600080fd5b5061022561043c36600461345c565b61106c565b34801561044d57600080fd5b5061022561045c36600461349e565b6114ab565b34801561046d57600080fd5b506104766118f0565b60408051928352602083019190915201610281565b34801561049757600080fd5b5061022561190b565b3480156104ac57600080fd5b5060005462010000900473ffffffffffffffffffffffffffffffffffffffff16610260565b3480156104dd57600080fd5b506102256104ec3660046134da565b611ae2565b3480156104fd57600080fd5b506102607f000000000000000000000000000000000000000000000000000000000000000081565b34801561053157600080fd5b506000546105619077010000000000000000000000000000000000000000000000900467ffffffffffffffff1681565b60405167ffffffffffffffff9091168152602001610281565b34801561058657600080fd5b5061059a610595366004613324565b611e57565b604051610281919061359f565b3480156105b357600080fd5b506102256105c23660046132da565b611eab565b60003373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461063d576040517fe37572430000000000000000000000000000000000000000000000000000000081526201adb4600482015260240161021c565b60005477010000000000000000000000000000000000000000000000900467ffffffffffffffff16156106a1576040517fe37572430000000000000000000000000000000000000000000000000000000081526201adb6600482015260240161021c565b507f150b7a020000000000000000000000000000000000000000000000000000000095945050505050565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163003610791576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161021c565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166108067f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff16146108a9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161021c565b6108b281611f5f565b604080516000808252602082019092526108ce91839190611f67565b50565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163003610996576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161021c565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610a0b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5473ffffffffffffffffffffffffffffffffffffffff1690565b73ffffffffffffffffffffffffffffffffffffffff1614610aae576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161021c565b610ab782611f5f565b610ac382826001611f67565b5050565b60003073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610b8e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161021c565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b600054760100000000000000000000000000000000000000000000900460ff16600114610c11576040517fe37572430000000000000000000000000000000000000000000000000000000081526201adb2600482015260240161021c565b600080547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff16760200000000000000000000000000000000000000000000179055610c5a61216b565b82600003610c99576040517fe37572430000000000000000000000000000000000000000000000000000000081526201adb1600482015260240161021c565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614610d23576040517fe37572430000000000000000000000000000000000000000000000000000000081526201adb5600482015260240161021c565b73ffffffffffffffffffffffffffffffffffffffff81163314610d77576040517fe37572430000000000000000000000000000000000000000000000000000000081526201adb7600482015260240161021c565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83148015610e145760408051600180825281830190925260009160208083019080368337505060008054835193945077010000000000000000000000000000000000000000000000900467ffffffffffffffff1692849250610dfc57610dfc6135b2565b602002602001018181525050610e106121f5565b9450505b610e407f00000000000000000000000000000000000000000000000000000000000000008330876124b0565b610e8b7f00000000000000000000000000000000000000000000000000000000000000007f000000000000000000000000000000000000000000000000000000000000000086612577565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663032d2276600060179054906101000a900467ffffffffffffffff16600084610ef357610eee88613610565b610f15565b7f80000000000000000000000000000000000000000000000000000000000000005b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815267ffffffffffffffff9093166004840152602483019190915260448201523060648201526084016060604051808303816000875af1158015610f87573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610fab9190613648565b50506000546040518681527701000000000000000000000000000000000000000000000090910467ffffffffffffffff16915073ffffffffffffffffffffffffffffffffffffffff8416907f078fa6b3e9efb70cad8546f6f21c6cbc4c8e8b8caf73c92a252d9be03a45ec1c906020015b60405180910390a35050600080547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff16760100000000000000000000000000000000000000000000179055505050565b600054760100000000000000000000000000000000000000000000900460ff166001146110ca576040517fe37572430000000000000000000000000000000000000000000000000000000081526201adb2600482015260240161021c565b600080547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff1676020000000000000000000000000000000000000000000017905561111361216b565b82600003611152576040517fe37572430000000000000000000000000000000000000000000000000000000081526201adb1600482015260240161021c565b73ffffffffffffffffffffffffffffffffffffffff821633146111a6576040517fe37572430000000000000000000000000000000000000000000000000000000081526201adb7600482015260240161021c565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1614611230576040517fe37572430000000000000000000000000000000000000000000000000000000081526201adb5600482015260240161021c565b61123c843330866124b0565b6040517f2e1a7d4d000000000000000000000000000000000000000000000000000000008152600481018490527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690632e1a7d4d90602401600060405180830381600087803b1580156112c457600080fd5b505af11580156112d8573d6000803e3d6000fd5b5050600080546040517f032d22760000000000000000000000000000000000000000000000000000000081527701000000000000000000000000000000000000000000000090910467ffffffffffffffff16600482015260248101879052604481018290523060648201529092507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16915063032d227690869060840160606040518083038185885af11580156113a8573d6000803e3d6000fd5b50505050506040513d601f19601f820116820180604052508101906113cd9190613648565b505060005490915077010000000000000000000000000000000000000000000000900467ffffffffffffffff16811461144f57600080547fff0000000000000000ffffffffffffffffffffffffffffffffffffffffffffff167701000000000000000000000000000000000000000000000067ffffffffffffffff8416021790555b6000546040518581527701000000000000000000000000000000000000000000000090910467ffffffffffffffff169033907f9dbb0e7dda3e09710ce75b801addc87cf9d9c6c581641b3275fca409ad086c629060200161101c565b600054760100000000000000000000000000000000000000000000900460ff16600114611509576040517fe37572430000000000000000000000000000000000000000000000000000000081526201adb2600482015260240161021c565b600080547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff1676020000000000000000000000000000000000000000000017905561155261216b565b81600003611591576040517fe37572430000000000000000000000000000000000000000000000000000000081526201adb1600482015260240161021c565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff161461161b576040517fe37572430000000000000000000000000000000000000000000000000000000081526201adb5600482015260240161021c565b600080547f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063032d22769077010000000000000000000000000000000000000000000000900467ffffffffffffffff167fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff86146116b7576116b286613610565b6116d9565b7f80000000000000000000000000000000000000000000000000000000000000005b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815267ffffffffffffffff90921660048301526024820152600060448201523060648201526084016060604051808303816000875af115801561174a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061176e9190613648565b5091505073ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001663d0e30db06117b783613610565b6040518263ffffffff1660e01b81526004016000604051808303818588803b1580156117e257600080fd5b505af11580156117f6573d6000803e3d6000fd5b505050505061182f7f0000000000000000000000000000000000000000000000000000000000000000838361182a90613610565b61262d565b60005477010000000000000000000000000000000000000000000000900467ffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff83167fda9a10d7b992511ddadbfc7ff712c1424ce2058bbcdac8c9876d6f8de590d43f61189884613610565b60405190815260200160405180910390a35050600080547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff167601000000000000000000000000000000000000000000001790555050565b6000806118fb6126d1565b6119036121f5565b915091509091565b600054610100900460ff161580801561192b5750600054600160ff909116105b806119455750303b158015611945575060005460ff166001145b6119d1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161021c565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015611a2f57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b611a75600080547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff16760100000000000000000000000000000000000000000000179055565b611a7d612928565b80156108ce57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150565b600054760100000000000000000000000000000000000000000000900460ff16600114611b40576040517fe37572430000000000000000000000000000000000000000000000000000000081526201adb2600482015260240161021c565b600080547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff16760200000000000000000000000000000000000000000000179055611b8961216b565b83600003611bc8576040517fe37572430000000000000000000000000000000000000000000000000000000081526201adb1600482015260240161021c565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168573ffffffffffffffffffffffffffffffffffffffff1614611c52576040517fe37572430000000000000000000000000000000000000000000000000000000081526201adb5600482015260240161021c565b73ffffffffffffffffffffffffffffffffffffffff81163314611ca6576040517fe37572430000000000000000000000000000000000000000000000000000000081526201adb9600482015260240161021c565b600080546040517f032d22760000000000000000000000000000000000000000000000000000000081527701000000000000000000000000000000000000000000000090910467ffffffffffffffff166004820152602481018290526044810186905273ffffffffffffffffffffffffffffffffffffffff83811660648301527f0000000000000000000000000000000000000000000000000000000000000000169063032d2276906084016060604051808303816000875af1158015611d71573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d959190613648565b60005460405182815291945077010000000000000000000000000000000000000000000000900467ffffffffffffffff16925073ffffffffffffffffffffffffffffffffffffffff851691507fe1b17d743be0011d9bba06fe70f26f50edb5da84de0c4db5fcaf609549db70369060200160405180910390a35050600080547fffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffffff1676010000000000000000000000000000000000000000000017905550505050565b6060611e6161216b565b600080835160208501865af43d6040519250601f19601f6020830101168301604052808352806000602085013e811560018103611ea257816000803e816000fd5b50505092915050565b611eb361216b565b73ffffffffffffffffffffffffffffffffffffffff8116611f56576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f6464726573730000000000000000000000000000000000000000000000000000606482015260840161021c565b6108ce816129c4565b6108ce61216b565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615611f9f57611f9a83612a42565b505050565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015612024575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261202191810190613676565b60015b6120b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f742055555053000000000000000000000000000000000000606482015260840161021c565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc811461215f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c65555549440000000000000000000000000000000000000000000000606482015260840161021c565b50611f9a838383612b4c565b60005473ffffffffffffffffffffffffffffffffffffffff620100009091041633146121f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604482015260640161021c565b565b600080612200612b71565b905066ffffffffffffff603582901c1660ff602d83901c161b6001808316900361222d5760009250505090565b6000826002166002146122515761224c600284901c6207ffff16613610565b61225c565b6207ffff600284901c165b9050601583901c62ffffff16606083612278600285900b612c75565b612282919061368f565b901c9450600061229183612ed7565b905080600116600114806122ad57508162ffffff600183901c16115b15612381576040517f22348cc7000000000000000000000000000000000000000000000000000000008152600481018490526024810183905260448101879052606481018290527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906322348cc79060840160a060405180830381865afa158015612352573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061237691906136a6565b509198509550909350505b66ffffffffffffff607586901c1660ff606d87901c161b808711156123b1576123aa81886136e6565b96506123b8565b5060009550855b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166309f0d8cb6123fe612fb6565b6040518263ffffffff1660e01b815260040161241c91815260200190565b608060405180830381865afa158015612439573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061245d91906136f9565b935050505064e8d4a510006001828a612476919061368f565b6124859064e8d4a5100061372f565b61248f91906136e6565b6124999190613742565b6124a490600161372f565b97505050505050505090565b60006040517f23b872dd00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8516600482015273ffffffffffffffffffffffffffffffffffffffff841660248201528260448201526020600060648360008a5af13d15601f3d1160016000511416171691505080612570576040517fdee51a8a00000000000000000000000000000000000000000000000000000000815262011559600482015260240161021c565b5050505050565b60006040517f095ea7b300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152826024820152602060006044836000895af191505080601f3d11600160005114161516156125eb5750823b153d17155b80612627576040517fffd1fc0700000000000000000000000000000000000000000000000000000000815262013c69600482015260240161021c565b50505050565b60006040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152826024820152602060006044836000895af13d15601f3d1160016000511416171691505080612627576040517fdee51a8a0000000000000000000000000000000000000000000000000000000081526201155a600482015260240161021c565b6000806126dc612b71565b66ffffffffffffff603582901c1660ff602d83901c161b925090506001811660000361285b5760008160021660021461272657612721600283901c6207ffff16613610565b612731565b6207ffff600283901c165b9050601582901c62ffffff16600061274883612ed7565b9050806001166001148061276457508162ffffff600183901c16115b1561285757600060608661277a8660020b612c75565b612784919061368f565b6040517f22348cc70000000000000000000000000000000000000000000000000000000081526004810187905260248101869052911c604482018190526064820184905291507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906322348cc79060840160a060405180830381865afa158015612828573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061284c91906136a6565b509098509195505050505b5050505b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166309f0d8cb6128a1612fb6565b6040518263ffffffff1660e01b81526004016128bf91815260200190565b608060405180830381865afa1580156128dc573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061290091906136f9565b509250505064e8d4a510008184612917919061368f565b6129219190613742565b9250505090565b600054610100900460ff166129bf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161021c565b6121f3335b6000805473ffffffffffffffffffffffffffffffffffffffff838116620100008181027fffffffffffffffffffff0000000000000000000000000000000000000000ffff851617855560405193049190911692909183917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e091a35050565b73ffffffffffffffffffffffffffffffffffffffff81163b612ae6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e747261637400000000000000000000000000000000000000606482015260840161021c565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b612b558361302c565b600082511180612b625750805b15611f9a576126278383613079565b60008054604080517701000000000000000000000000000000000000000000000090920467ffffffffffffffff16602080840191909152600383830152815180840383018152606084019283905280519101207fb5c736e40000000000000000000000000000000000000000000000000000000090915260648201527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063b5c736e4906084015b602060405180830381865afa158015612c4c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c709190613676565b905090565b600060ff82901d80831803617fff811115612c8f57600080fd5b7001000000000000000000000000000000006001821615612cbd57506fff9dd7de423466c20352b1246ce4856f5b6002821615612cdc576fff3bd55f4488ad277531fa1c725a66d00260801c5b6004821615612cfb576ffe78410fd6498b73cb96a6917f8532590260801c5b6008821615612d1a576ffcf2d9987c9be178ad5bfeffaa1232730260801c5b6010821615612d39576ff9ef02c4529258b057769680fc6601b30260801c5b6020821615612d58576ff402d288133a85a17784a411f7aba0820260801c5b6040821615612d77576fe895615b5beb6386553757b0352bda900260801c5b6080821615612d96576fd34f17a00ffa00a8309940a15930391a0260801c5b610100821615612db6576fae6b7961714e20548d88ea5123f9a0ff0260801c5b610200821615612dd6576f76d6461f27082d74e0feed3b388c0ca10260801c5b610400821615612df6576f372a3bfe0745d8b6b19d985d9a8b85bb0260801c5b610800821615612e16576f0be32cbee48979763cf7247dd7bb539d0260801c5b611000821615612e35576e8d4f70c9ff4924dac37612d1e2921e0260801c5b612000821615612e53576d4e009ae5519380809a02ca7aec770260801c5b614000821615612e6f576b17c45e641b6e95dee056ff100260801c5b600091507f80000000000000000000000000000000000000000000000000000000000000008416612ecd577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0463ffffffff811615612ecd57600191505b60201c0192915050565b604080516020808201849052600582840152825180830384018152606083019384905280519101207fb5c736e40000000000000000000000000000000000000000000000000000000090925260648101919091526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063b5c736e490608401602060405180830381865afa158015612f8c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612fb09190613676565b92915050565b6040517fb5c736e4000000000000000000000000000000000000000000000000000000008152600160048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063b5c736e490602401612c2f565b61303581612a42565b60405173ffffffffffffffffffffffffffffffffffffffff8216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606061309e838360405180606001604052806027815260200161379a602791396130a5565b9392505050565b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516130cf919061377d565b600060405180830381855af49150503d806000811461310a576040519150601f19603f3d011682016040523d82523d6000602084013e61310f565b606091505b50915091506131208683838761312a565b9695505050505050565b606083156131c05782516000036131b95773ffffffffffffffffffffffffffffffffffffffff85163b6131b9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161021c565b50816131ca565b6131ca83836131d2565b949350505050565b8151156131e25781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161021c919061359f565b803573ffffffffffffffffffffffffffffffffffffffff8116811461323a57600080fd5b919050565b60008060008060006080868803121561325757600080fd5b61326086613216565b945061326e60208701613216565b935060408601359250606086013567ffffffffffffffff8082111561329257600080fd5b818801915088601f8301126132a657600080fd5b8135818111156132b557600080fd5b8960208285010111156132c757600080fd5b9699959850939650602001949392505050565b6000602082840312156132ec57600080fd5b61309e82613216565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6000806040838503121561333757600080fd5b61334083613216565b9150602083013567ffffffffffffffff8082111561335d57600080fd5b818501915085601f83011261337157600080fd5b813581811115613383576133836132f5565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019083821181831017156133c9576133c96132f5565b816040528281528860208487010111156133e257600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b6000806000806080858703121561341a57600080fd5b61342385613216565b9350602085013592506040850135915061343f60608601613216565b905092959194509250565b803561ffff8116811461323a57600080fd5b6000806000806080858703121561347257600080fd5b61347b85613216565b93506020850135925061349060408601613216565b915061343f6060860161344a565b6000806000606084860312156134b357600080fd5b6134bc84613216565b9250602084013591506134d160408501613216565b90509250925092565b600080600080600060a086880312156134f257600080fd5b6134fb86613216565b945060208601359350604086013592506135176060870161344a565b915061352560808701613216565b90509295509295909350565b60005b8381101561354c578181015183820152602001613534565b50506000910152565b6000815180845261356d816020860160208601613531565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b60208152600061309e6020830184613555565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007f80000000000000000000000000000000000000000000000000000000000000008203613641576136416135e1565b5060000390565b60008060006060848603121561365d57600080fd5b8351925060208401519150604084015190509250925092565b60006020828403121561368857600080fd5b5051919050565b8082028115828204841417612fb057612fb06135e1565b600080600080600060a086880312156136be57600080fd5b5050835160208501516040860151606087015160809097015192989197509594509092509050565b81810381811115612fb057612fb06135e1565b6000806000806080858703121561370f57600080fd5b505082516020840151604085015160609095015191969095509092509050565b80820180821115612fb057612fb06135e1565b600082613778577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b6000825161378f818460208701613531565b919091019291505056fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212205c8da8ca7e5abee5ee41effd71ce80e1603e7109b3047608789e290dfb71492664736f6c63430008150033",
  "devdoc": {
    "details": "wrapping/unwrapping to ETH under the hood for vault T1",
    "events": {
      "AdminChanged(address,address)": {
        "details": "Emitted when the admin account has changed."
      },
      "BeaconUpgraded(address)": {
        "details": "Emitted when the beacon is upgraded."
      },
      "Initialized(uint8)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      },
      "LogBorrow(address,uint256,uint256)": {
        "params": {
          "amount": "Amount borrowed",
          "nftId": "The vault NFT ID",
          "user": "The user performing the borrow"
        }
      },
      "LogDeposit(address,uint256,uint256)": {
        "params": {
          "amount": "Amount of WETH deposited",
          "nftId": "The vault NFT ID",
          "user": "The user performing the deposit"
        }
      },
      "LogPayback(address,uint256,uint256)": {
        "params": {
          "amount": "Amount repaid",
          "nftId": "The vault NFT ID",
          "user": "The user performing the payback"
        }
      },
      "LogWithdraw(address,uint256,uint256)": {
        "params": {
          "amount": "Amount of WETH withdrawn",
          "nftId": "The vault NFT ID",
          "user": "The user performing the withdrawal"
        }
      },
      "Upgraded(address)": {
        "details": "Emitted when the implementation is upgraded."
      }
    },
    "kind": "dev",
    "methods": {
      "borrow(address,uint256,uint256,uint16,address)": {
        "params": {
          "amount": "Amount of asset to borrow",
          "asset": "The asset to borrow",
          "interestRateMode": "The interest rate mode at which the user wants to borrow, Not used",
          "onBehalfOf": "The address of the user who will receive the debt.",
          "referralCode": "The code used to register the integrator originating the operation, for potential rewards.NA"
        }
      },
      "constructor": {
        "params": {
          "vaultAddress_": "Fluid Vault address",
          "weth_": "WETH token address"
        }
      },
      "getPosition()": {
        "returns": {
          "_0": "supply amount",
          "_1": "borrow amount"
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "proxiableUUID()": {
        "details": "Implementation of the ERC1822 {proxiableUUID} function. This returns the storage slot used by the implementation. It is used to validate the implementation's compatibility when performing an upgrade. IMPORTANT: A proxy pointing at a proxiable contract should not be considered proxiable itself, because this risks bricking a proxy that upgrades to it, by delegating to itself until out of gas. Thus it is critical that this function revert if invoked through a proxy. This is guaranteed by the `notDelegated` modifier."
      },
      "repay(address,uint256,uint256,address)": {
        "params": {
          "amount": "Amount of asset to repay",
          "asset": "The asset to repay (USDC)",
          "interestRateMode": "The interest rate mode at which the user wants to borrow, Not used",
          "onBehalfOf": "should be equal to msg.sender"
        }
      },
      "spell(address,bytes)": {
        "params": {
          "data_": "Data to execute at the delegated address",
          "target_": "Address to which the call needs to be delegated"
        }
      },
      "supply(address,uint256,address,uint16)": {
        "params": {
          "amount": "Amount of asset to deposit as collateral",
          "asset": "The asset to deposit in contract (weth)",
          "onBehalfOf": "Deposit on behalf of, should be same as msg.sender",
          "referralCode": "Un-used param"
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "upgradeTo(address)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "upgradeToAndCall(address,bytes)": {
        "details": "Upgrade the implementation of the proxy to `newImplementation`, and subsequently execute the function call encoded in `data`. Calls {_authorizeUpgrade}. Emits an {Upgraded} event."
      },
      "withdraw(address,uint256,address)": {
        "details": "The vault sends us ETH, which we wrap into WETH and transfer to the user.",
        "params": {
          "amount": "Amount of asset to borrow as collateral",
          "asset": "The asset to deposit in contract (weth)",
          "to": "withdraw should go to this address"
        }
      }
    },
    "stateVariables": {
      "BORROW_TOKEN": {
        "details": "below variables can be derived directly or indirectly using vault address"
      }
    },
    "title": "WETH Wrapper for Fluid Vault T1",
    "version": 1
  },
  "userdoc": {
    "events": {
      "LogBorrow(address,uint256,uint256)": {
        "notice": "Emitted when user borrows"
      },
      "LogDeposit(address,uint256,uint256)": {
        "notice": "Emitted when user deposits collateral in WETH"
      },
      "LogPayback(address,uint256,uint256)": {
        "notice": "Emitted when user pays back debt"
      },
      "LogWithdraw(address,uint256,uint256)": {
        "notice": "Emitted when user withdraws collateral (receives WETH)"
      }
    },
    "kind": "user",
    "methods": {
      "borrow(address,uint256,uint256,uint16,address)": {
        "notice": "Borrow in USDC from vault, the vault will send ETH to this contract."
      },
      "getPosition()": {
        "notice": "get the vault nft position on vault"
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "notice": "Accepts NFT transfers only from the configured VAULT.         Records the `from_` address as the NFT's owner in our mapping,         so that `from_` can have ownership for withdraw and borrow."
      },
      "repay(address,uint256,uint256,address)": {
        "notice": "Repay debt in USDC to VAULT."
      },
      "spell(address,bytes)": {
        "notice": "Spell allows owner aka governance to do any arbitrary call on factory"
      },
      "supply(address,uint256,address,uint16)": {
        "notice": "Deposit WETH as collateral to a T1 VAULT.         - If `nftId` == 0, new vault position gets created (NFT mint to this)"
      },
      "withdraw(address,uint256,address)": {
        "notice": "Withdraw WETH collateral from a T1 vault"
      }
    },
    "notice": "Allows depositing, withdrawal, borrowing and repaying of assets from vaults using WETH following aave interface",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 138,
        "contract": "contracts/periphery/wethWrapper/main.sol:FluidWETHWrapper",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 141,
        "contract": "contracts/periphery/wethWrapper/main.sol:FluidWETHWrapper",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 69170,
        "contract": "contracts/periphery/wethWrapper/main.sol:FluidWETHWrapper",
        "label": "_owner",
        "offset": 2,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 69302,
        "contract": "contracts/periphery/wethWrapper/main.sol:FluidWETHWrapper",
        "label": "_status",
        "offset": 22,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 69378,
        "contract": "contracts/periphery/wethWrapper/main.sol:FluidWETHWrapper",
        "label": "nftId",
        "offset": 23,
        "slot": "0",
        "type": "t_uint64"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_uint64": {
        "encoding": "inplace",
        "label": "uint64",
        "numberOfBytes": "8"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}