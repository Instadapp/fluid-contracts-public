{
  "address": "0x9191b9539DD588dB81076900deFDd79Cb1115f72",
  "abi": [
    {
      "inputs": [],
      "name": "depositZircuitWeETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "depositZircuitWeETHs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawZircuitWeETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawZircuitWeETHs",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xb3cb4f93ab2e8dad3a144004face30015c49181c195e4581e5bf3c101b0be90b",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x0Ed35B1609Ec45c7079E80d11149a52717e4859A",
    "contractAddress": null,
    "transactionIndex": 125,
    "gasUsed": "789002",
    "logsBloom": "0x
    "blockHash": "0x5e12491f34a727facb5c25ba57f56e759531265c3009ae1becb8ab44533c2694",
    "transactionHash": "0xb3cb4f93ab2e8dad3a144004face30015c49181c195e4581e5bf3c101b0be90b",
    "logs": [],
    "blockNumber": 20622476,
    "cumulativeGasUsed": "12573270",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "5082da1b3913f11837947aa32410fe01",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"depositZircuitWeETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"depositZircuitWeETHs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawZircuitWeETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawZircuitWeETHs\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"depositZircuitWeETH()\":{\"details\":\"Only delegate callable on Liquidity, by Governance\"},\"depositZircuitWeETHs()\":{\"details\":\"Only delegate callable on Liquidity, by Governance\"},\"withdrawZircuitWeETH()\":{\"details\":\"Only delegate callable on Liquidity, Governance and Guardians (for emergency)\"},\"withdrawZircuitWeETHs()\":{\"details\":\"Only delegate callable on Liquidity, Governance and Guardians (for emergency)\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"depositZircuitWeETH()\":{\"notice\":\"deposit all WEETH funds to Zircuit and sets approved allowance to max uint256.\"},\"depositZircuitWeETHs()\":{\"notice\":\"deposit all WEETHS funds to Zircuit and sets approved allowance to max uint256.\"},\"withdrawZircuitWeETH()\":{\"notice\":\"withdraw all WEETH funds from Zircuit and sets approved allowance to 0.\"},\"withdrawZircuitWeETHs()\":{\"notice\":\"withdraw all WEETHS funds from Zircuit and sets approved allowance to 0.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/liquidity/zircuitTransferModule/main.sol\":\"FluidLiquidityZircuitTransferModule\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/liquidity/common/variables.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\ncontract ConstantVariables {\\n    /// @dev Storage slot with the admin of the contract. Logic from \\\"proxy.sol\\\".\\n    /// This is the keccak-256 hash of \\\"eip1967.proxy.admin\\\" subtracted by 1, and is validated in the constructor.\\n    bytes32 internal constant GOVERNANCE_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\\n\\n    uint256 internal constant EXCHANGE_PRICES_PRECISION = 1e12;\\n\\n    /// @dev address that is mapped to the chain native token\\n    address internal constant NATIVE_TOKEN_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    /// @dev decimals for native token\\n    // !! Double check compatibility with all code if this ever changes for a deployment !!\\n    uint8 internal constant NATIVE_TOKEN_DECIMALS = 18;\\n\\n    /// @dev Minimum token decimals for any token that can be listed at Liquidity (inclusive)\\n    uint8 internal constant MIN_TOKEN_DECIMALS = 6;\\n    /// @dev Maximum token decimals for any token that can be listed at Liquidity (inclusive)\\n    uint8 internal constant MAX_TOKEN_DECIMALS = 18;\\n\\n    /// @dev Ignoring leap years\\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n    /// @dev limit any total amount to be half of type(uint128).max (~3.4e38) at type(int128).max (~1.7e38) as safety\\n    /// measure for any potential overflows / unexpected outcomes. This is checked for total borrow / supply.\\n    uint256 internal constant MAX_TOKEN_AMOUNT_CAP = uint256(uint128(type(int128).max));\\n\\n    /// @dev limit for triggering a revert if sent along excess input amount diff is bigger than this percentage (in 1e2)\\n    uint256 internal constant MAX_INPUT_AMOUNT_EXCESS = 100; // 1%\\n\\n    /// @dev if this bytes32 is set in the calldata, then token transfers are skipped as long as Liquidity layer is on the winning side.\\n    bytes32 internal constant SKIP_TRANSFERS = keccak256(bytes(\\\"SKIP_TRANSFERS\\\"));\\n\\n    /// @dev time after which a write to storage of exchangePricesAndConfig will happen always.\\n    uint256 internal constant FORCE_STORAGE_WRITE_AFTER_TIME = 1 days;\\n\\n    /// @dev constants used for BigMath conversion from and to storage\\n    uint256 internal constant SMALL_COEFFICIENT_SIZE = 10;\\n    uint256 internal constant DEFAULT_COEFFICIENT_SIZE = 56;\\n    uint256 internal constant DEFAULT_EXPONENT_SIZE = 8;\\n    uint256 internal constant DEFAULT_EXPONENT_MASK = 0xFF;\\n\\n    /// @dev constants to increase readability for using bit masks\\n    uint256 internal constant FOUR_DECIMALS = 1e4;\\n    uint256 internal constant TWELVE_DECIMALS = 1e12;\\n    uint256 internal constant X8 = 0xff;\\n    uint256 internal constant X14 = 0x3fff;\\n    uint256 internal constant X15 = 0x7fff;\\n    uint256 internal constant X16 = 0xffff;\\n    uint256 internal constant X18 = 0x3ffff;\\n    uint256 internal constant X24 = 0xffffff;\\n    uint256 internal constant X33 = 0x1ffffffff;\\n    uint256 internal constant X64 = 0xffffffffffffffff;\\n}\\n\\ncontract Variables is ConstantVariables {\\n    /// @dev address of contract that gets sent the revenue. Configurable by governance\\n    address internal _revenueCollector;\\n\\n    // 12 bytes empty\\n\\n    // ----- storage slot 1 ------\\n\\n    /// @dev paused status: status = 1 -> normal. status = 2 -> paused.\\n    /// not tightly packed with revenueCollector address to allow for potential changes later that improve gas more\\n    /// (revenueCollector is only rarely used by admin methods, where optimization is not as important).\\n    /// to be replaced with transient storage once EIP-1153 Transient storage becomes available with dencun upgrade.\\n    uint256 internal _status;\\n\\n    // ----- storage slot 2 ------\\n\\n    /// @dev Auths can set most config values. E.g. contracts that automate certain flows like e.g. adding a new fToken.\\n    /// Governance can add/remove auths.\\n    /// Governance is auth by default\\n    mapping(address => uint256) internal _isAuth;\\n\\n    // ----- storage slot 3 ------\\n\\n    /// @dev Guardians can pause lower class users\\n    /// Governance can add/remove guardians\\n    /// Governance is guardian by default\\n    mapping(address => uint256) internal _isGuardian;\\n\\n    // ----- storage slot 4 ------\\n\\n    /// @dev class defines which protocols can be paused by guardians\\n    /// Currently there are 2 classes: 0 can be paused by guardians. 1 cannot be paused by guardians.\\n    /// New protocols are added as class 0 and will be upgraded to 1 over time.\\n    mapping(address => uint256) internal _userClass;\\n\\n    // ----- storage slot 5 ------\\n\\n    /// @dev exchange prices and token config per token: token -> exchange prices & config\\n    /// First 16 bits =>   0- 15 => borrow rate (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n    /// Next  14 bits =>  16- 29 => fee on interest from borrowers to lenders (in 1e2: 100% = 10_000; 1% = 100 -> max value 16_383). configurable.\\n    /// Next  14 bits =>  30- 43 => last stored utilization (in 1e2: 100% = 10_000; 1% = 100 -> max value 16_383)\\n    /// Next  14 bits =>  44- 57 => update on storage threshold (in 1e2: 100% = 10_000; 1% = 100 -> max value 16_383). configurable.\\n    /// Next  33 bits =>  58- 90 => last update timestamp (enough until 16 March 2242 -> max value 8589934591)\\n    /// Next  64 bits =>  91-154 => supply exchange price (1e12 -> max value 18_446_744,073709551615)\\n    /// Next  64 bits => 155-218 => borrow exchange price (1e12 -> max value 18_446_744,073709551615)\\n    /// Next   1 bit  => 219-219 => if 0 then ratio is supplyInterestFree / supplyWithInterest else ratio is supplyWithInterest / supplyInterestFree\\n    /// Next  14 bits => 220-233 => supplyRatio: supplyInterestFree / supplyWithInterest (in 1e2: 100% = 10_000; 1% = 100 -> max value 16_383)\\n    /// Next   1 bit  => 234-234 => if 0 then ratio is borrowInterestFree / borrowWithInterest else ratio is borrowWithInterest / borrowInterestFree\\n    /// Next  14 bits => 235-248 => borrowRatio: borrowInterestFree / borrowWithInterest (in 1e2: 100% = 10_000; 1% = 100 -> max value 16_383)\\n    /// Next   1 bit  => 249-249 => flag for token uses config storage slot 2. (signals SLOAD for additional config slot is needed during execution)\\n    /// Last   6 bits => 250-255 => empty for future use\\n    ///                             if more free bits are needed in the future, update on storage threshold bits could be reduced to 7 bits\\n    ///                             (can plan to add `MAX_TOKEN_CONFIG_UPDATE_THRESHOLD` but need to adjust more bits)\\n    ///                             if more bits absolutely needed then we can convert fee, utilization, update on storage threshold,\\n    ///                             supplyRatio & borrowRatio from 14 bits to 10bits (1023 max number) where 1000 = 100% & 1 = 0.1%\\n    mapping(address => uint256) internal _exchangePricesAndConfig;\\n\\n    // ----- storage slot 6 ------\\n\\n    /// @dev Rate related data per token: token -> rate data\\n    /// READ (SLOAD): all actions; WRITE (SSTORE): only on set config admin actions\\n    /// token => rate related data\\n    /// First 4 bits  =>     0-3 => rate version\\n    /// rest of the bits are rate dependent:\\n\\n    /// For rate v1 (one kink) ------------------------------------------------------\\n    /// Next 16  bits =>  4 - 19 => Rate at utilization 0% (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n    /// Next 16  bits =>  20- 35 => Utilization at kink1 (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n    /// Next 16  bits =>  36- 51 => Rate at utilization kink1 (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n    /// Next 16  bits =>  52- 67 => Rate at utilization 100% (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n    /// Last 188 bits =>  68-255 => empty for future use\\n\\n    /// For rate v2 (two kinks) -----------------------------------------------------\\n    /// Next 16  bits =>  4 - 19 => Rate at utilization 0% (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n    /// Next 16  bits =>  20- 35 => Utilization at kink1 (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n    /// Next 16  bits =>  36- 51 => Rate at utilization kink1 (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n    /// Next 16  bits =>  52- 67 => Utilization at kink2 (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n    /// Next 16  bits =>  68- 83 => Rate at utilization kink2 (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n    /// Next 16  bits =>  84- 99 => Rate at utilization 100% (in 1e2: 100% = 10_000; 1% = 100 -> max value 65535)\\n    /// Last 156 bits => 100-255 => empty for future use\\n    mapping(address => uint256) internal _rateData;\\n\\n    // ----- storage slot 7 ------\\n\\n    /// @dev total supply / borrow amounts for with / without interest per token: token -> amounts\\n    /// First  64 bits =>   0- 63 => total supply with interest in raw (totalSupply = totalSupplyRaw * supplyExchangePrice); BigMath: 56 | 8\\n    /// Next   64 bits =>  64-127 => total interest free supply in normal token amount (totalSupply = totalSupply); BigMath: 56 | 8\\n    /// Next   64 bits => 128-191 => total borrow with interest in raw (totalBorrow = totalBorrowRaw * borrowExchangePrice); BigMath: 56 | 8\\n    /// Next   64 bits => 192-255 => total interest free borrow in normal token amount (totalBorrow = totalBorrow); BigMath: 56 | 8\\n    mapping(address => uint256) internal _totalAmounts;\\n\\n    // ----- storage slot 8 ------\\n\\n    /// @dev user supply data per token: user -> token -> data\\n    /// First  1 bit  =>       0 => mode: user supply with or without interest\\n    ///                             0 = without, amounts are in normal (i.e. no need to multiply with exchange price)\\n    ///                             1 = with interest, amounts are in raw (i.e. must multiply with exchange price to get actual token amounts)\\n    /// Next  64 bits =>   1- 64 => user supply amount (normal or raw depends on 1st bit); BigMath: 56 | 8\\n    /// Next  64 bits =>  65-128 => previous user withdrawal limit (normal or raw depends on 1st bit); BigMath: 56 | 8\\n    /// Next  33 bits => 129-161 => last triggered process timestamp (enough until 16 March 2242 -> max value 8589934591)\\n    /// Next  14 bits => 162-175 => expand withdrawal limit percentage (in 1e2: 100% = 10_000; 1% = 100 -> max value 16_383).\\n    ///                             @dev shrinking is instant\\n    /// Next  24 bits => 176-199 => withdrawal limit expand duration in seconds.(Max value 16_777_215; ~4_660 hours, ~194 days)\\n    /// Next  18 bits => 200-217 => base withdrawal limit: below this, 100% withdrawals can be done (normal or raw depends on 1st bit); BigMath: 10 | 8\\n    /// Next  37 bits => 218-254 => empty for future use\\n    /// Last     bit  => 255-255 => is user paused (1 = paused, 0 = not paused)\\n    mapping(address => mapping(address => uint256)) internal _userSupplyData;\\n\\n    // ----- storage slot 9 ------\\n\\n    /// @dev user borrow data per token: user -> token -> data\\n    /// First  1 bit  =>       0 => mode: user borrow with or without interest\\n    ///                             0 = without, amounts are in normal (i.e. no need to multiply with exchange price)\\n    ///                             1 = with interest, amounts are in raw (i.e. must multiply with exchange price to get actual token amounts)\\n    /// Next  64 bits =>   1- 64 => user borrow amount (normal or raw depends on 1st bit); BigMath: 56 | 8\\n    /// Next  64 bits =>  65-128 => previous user debt ceiling (normal or raw depends on 1st bit); BigMath: 56 | 8\\n    /// Next  33 bits => 129-161 => last triggered process timestamp (enough until 16 March 2242 -> max value 8589934591)\\n    /// Next  14 bits => 162-175 => expand debt ceiling percentage (in 1e2: 100% = 10_000; 1% = 100 -> max value 16_383)\\n    ///                             @dev shrinking is instant\\n    /// Next  24 bits => 176-199 => debt ceiling expand duration in seconds (Max value 16_777_215; ~4_660 hours, ~194 days)\\n    /// Next  18 bits => 200-217 => base debt ceiling: below this, there's no debt ceiling limits (normal or raw depends on 1st bit); BigMath: 10 | 8\\n    /// Next  18 bits => 218-235 => max debt ceiling: absolute maximum debt ceiling can expand to (normal or raw depends on 1st bit); BigMath: 10 | 8\\n    /// Next  19 bits => 236-254 => empty for future use\\n    /// Last     bit  => 255-255 => is user paused (1 = paused, 0 = not paused)\\n    mapping(address => mapping(address => uint256)) internal _userBorrowData;\\n\\n    // ----- storage slot 10 ------\\n\\n    /// @dev list of allowed tokens at Liquidity. tokens that are once configured can never be completely removed. so this\\n    ///      array is append-only.\\n    address[] internal _listedTokens;\\n\\n    // ----- storage slot 11 ------\\n\\n    /// @dev expanded token configs per token: token -> config data slot 2.\\n    ///      Use of this is signaled by `_exchangePricesAndConfig` bit 249.\\n    /// First 14 bits =>   0- 13 => max allowed utilization (in 1e2: 100% = 10_000; 1% = 100 -> max value 16_383). configurable.\\n    /// Last 242 bits =>  14-255 => empty for future use\\n    mapping(address => uint256) internal _configs2;\\n}\\n\",\"keccak256\":\"0x6c9274dfc15bb6b734029d3931a9988c2ef5ff524b7abdb16d5850806c89bb91\",\"license\":\"BUSL-1.1\"},\"contracts/liquidity/zircuitTransferModule/main.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { Variables } from \\\"../common/variables.sol\\\";\\n\\ninterface IZtakingPool {\\n    ///@notice Stake a specified amount of a particular supported token into the Ztaking Pool\\n    ///@param _token The token to deposit/stake in the Ztaking Pool\\n    ///@param _for The user to deposit/stake on behalf of\\n    ///@param _amount The amount of token to deposit/stake into the Ztaking Pool\\n    function depositFor(address _token, address _for, uint256 _amount) external;\\n\\n    ///@notice Withdraw a specified amount of a particular supported token previously staked into the Ztaking Pool\\n    ///@param _token The token to withdraw from the Ztaking Pool\\n    ///@param _amount The amount of token to withdraw from the Ztaking Pool\\n    function withdraw(address _token, uint256 _amount) external;\\n\\n    function balance(address token_, address staker_) external view returns (uint256);\\n}\\n\\ncontract FluidLiquidityZircuitTransferModule is Variables {\\n    address internal constant LIQUIDITY = 0x52Aa899454998Be5b000Ad077a46Bbe360F4e497;\\n\\n    IERC20 internal constant WEETH = IERC20(0xCd5fE23C85820F7B72D0926FC9b05b43E359b7ee);\\n    IERC20 internal constant WEETHS = IERC20(0x917ceE801a67f933F2e6b33fC0cD1ED2d5909D88);\\n    IZtakingPool internal constant ZIRCUIT = IZtakingPool(0xF047ab4c75cebf0eB9ed34Ae2c186f3611aEAfa6);\\n\\n    /// @dev Returns the current admin (governance).\\n    function _getGovernanceAddr() internal view returns (address governance_) {\\n        assembly {\\n            governance_ := sload(GOVERNANCE_SLOT)\\n        }\\n    }\\n\\n    /// @notice deposit all WEETH funds to Zircuit and sets approved allowance to max uint256.\\n    /// @dev Only delegate callable on Liquidity, by Governance\\n    function depositZircuitWeETH() external {\\n        if (_getGovernanceAddr() != msg.sender || address(this) != LIQUIDITY) {\\n            revert();\\n        }\\n\\n        SafeERC20.safeApprove(WEETH, address(ZIRCUIT), type(uint256).max);\\n\\n        ZIRCUIT.depositFor(address(WEETH), address(this), WEETH.balanceOf(address(this)));\\n    }\\n\\n    /// @notice withdraw all WEETH funds from Zircuit and sets approved allowance to 0.\\n    /// @dev Only delegate callable on Liquidity, Governance and Guardians (for emergency)\\n    function withdrawZircuitWeETH() external {\\n        if ((_isGuardian[msg.sender] & 1 != 1 && _getGovernanceAddr() != msg.sender) || address(this) != LIQUIDITY) {\\n            revert();\\n        }\\n\\n        ZIRCUIT.withdraw(address(WEETH), ZIRCUIT.balance(address(WEETH), address(this)));\\n\\n        // remove approval\\n        SafeERC20.safeApprove(WEETH, address(ZIRCUIT), 0);\\n    }\\n\\n    /// @notice deposit all WEETHS funds to Zircuit and sets approved allowance to max uint256.\\n    /// @dev Only delegate callable on Liquidity, by Governance\\n    function depositZircuitWeETHs() external {\\n        if (_getGovernanceAddr() != msg.sender || address(this) != LIQUIDITY) {\\n            revert();\\n        }\\n\\n        SafeERC20.safeApprove(WEETHS, address(ZIRCUIT), type(uint256).max);\\n\\n        ZIRCUIT.depositFor(address(WEETHS), address(this), WEETHS.balanceOf(address(this)));\\n    }\\n\\n    /// @notice withdraw all WEETHS funds from Zircuit and sets approved allowance to 0.\\n    /// @dev Only delegate callable on Liquidity, Governance and Guardians (for emergency)\\n    function withdrawZircuitWeETHs() external {\\n        if ((_isGuardian[msg.sender] & 1 != 1 && _getGovernanceAddr() != msg.sender) || address(this) != LIQUIDITY) {\\n            revert();\\n        }\\n\\n        ZIRCUIT.withdraw(address(WEETHS), ZIRCUIT.balance(address(WEETHS), address(this)));\\n\\n        // remove approval\\n        SafeERC20.safeApprove(WEETHS, address(ZIRCUIT), 0);\\n    }\\n}\\n\",\"keccak256\":\"0x664091bb204f3f2a41d550287708ca8acea627a2aa8fe1a94b1048cdd8ce1ec6\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x608060405234801561001057600080fd5b50610d5f806100206000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806317a08fa01461005157806369b48e4e1461005b5780638147c98914610063578063b0bec8461461006b575b600080fd5b610059610073565b005b61005961026b565b610059610398565b61005961058b565b3361009c7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b73ffffffffffffffffffffffffffffffffffffffff161415806100d35750307352aa899454998be5b000ad077a46bbe360f4e49714155b156100dd57600080fd5b61013073917cee801a67f933f2e6b33fc0cd1ed2d5909d8873f047ab4c75cebf0eb9ed34ae2c186f3611aeafa67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610778565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820181905273f047ab4c75cebf0eb9ed34ae2c186f3611aeafa69163b3db428b9173917cee801a67f933f2e6b33fc0cd1ed2d5909d889182906370a08231906024015b602060405180830381865afa1580156101b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101dd9190610c56565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529290911660248301526044820152606401600060405180830381600087803b15801561025157600080fd5b505af1158015610265573d6000803e3d6000fd5b50505050565b336102947fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b73ffffffffffffffffffffffffffffffffffffffff161415806102cb5750307352aa899454998be5b000ad077a46bbe360f4e49714155b156102d557600080fd5b61032873cd5fe23c85820f7b72d0926fc9b05b43e359b7ee73f047ab4c75cebf0eb9ed34ae2c186f3611aeafa67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610778565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820181905273f047ab4c75cebf0eb9ed34ae2c186f3611aeafa69163b3db428b9173cd5fe23c85820f7b72d0926fc9b05b43e359b7ee9182906370a082319060240161019c565b336000908152600360205260409020546001908116148015906103f85750336103df7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b73ffffffffffffffffffffffffffffffffffffffff1614155b806104175750307352aa899454998be5b000ad077a46bbe360f4e49714155b1561042157600080fd5b6040517fb203bb9900000000000000000000000000000000000000000000000000000000815273917cee801a67f933f2e6b33fc0cd1ed2d5909d886004820181905230602483015273f047ab4c75cebf0eb9ed34ae2c186f3611aeafa69163f3fef3a39190839063b203bb9990604401602060405180830381865afa1580156104ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d29190610c56565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b15801561053d57600080fd5b505af1158015610551573d6000803e3d6000fd5b5050505061058973917cee801a67f933f2e6b33fc0cd1ed2d5909d8873f047ab4c75cebf0eb9ed34ae2c186f3611aeafa66000610778565b565b336000908152600360205260409020546001908116148015906105eb5750336105d27fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b73ffffffffffffffffffffffffffffffffffffffff1614155b8061060a5750307352aa899454998be5b000ad077a46bbe360f4e49714155b1561061457600080fd5b6040517fb203bb9900000000000000000000000000000000000000000000000000000000815273cd5fe23c85820f7b72d0926fc9b05b43e359b7ee6004820181905230602483015273f047ab4c75cebf0eb9ed34ae2c186f3611aeafa69163f3fef3a39190839063b203bb9990604401602060405180830381865afa1580156106a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c59190610c56565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b15801561073057600080fd5b505af1158015610744573d6000803e3d6000fd5b5050505061058973cd5fe23c85820f7b72d0926fc9b05b43e359b7ee73f047ab4c75cebf0eb9ed34ae2c186f3611aeafa660005b80158061081857506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156107f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108169190610c56565b155b6108a9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084015b60405180910390fd5b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b30000000000000000000000000000000000000000000000000000000017905261093690849061093b565b505050565b600061099d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610a479092919063ffffffff16565b80519091501561093657808060200190518101906109bb9190610c6f565b610936576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016108a0565b6060610a568484600085610a5e565b949350505050565b606082471015610af0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016108a0565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610b199190610cbc565b60006040518083038185875af1925050503d8060008114610b56576040519150601f19603f3d011682016040523d82523d6000602084013e610b5b565b606091505b5091509150610b6c87838387610b77565b979650505050505050565b60608315610c0d578251600003610c065773ffffffffffffffffffffffffffffffffffffffff85163b610c06576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108a0565b5081610a56565b610a568383815115610c225781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a09190610cd8565b600060208284031215610c6857600080fd5b5051919050565b600060208284031215610c8157600080fd5b81518015158114610c9157600080fd5b9392505050565b60005b83811015610cb3578181015183820152602001610c9b565b50506000910152565b60008251610cce818460208701610c98565b9190910192915050565b6020815260008251806020840152610cf7816040850160208701610c98565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea26469706673582212203246c895eee621fb51d2ca336805c93cbd5d0ac06cef196a875687d7e1deae2764736f6c63430008150033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061004c5760003560e01c806317a08fa01461005157806369b48e4e1461005b5780638147c98914610063578063b0bec8461461006b575b600080fd5b610059610073565b005b61005961026b565b610059610398565b61005961058b565b3361009c7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b73ffffffffffffffffffffffffffffffffffffffff161415806100d35750307352aa899454998be5b000ad077a46bbe360f4e49714155b156100dd57600080fd5b61013073917cee801a67f933f2e6b33fc0cd1ed2d5909d8873f047ab4c75cebf0eb9ed34ae2c186f3611aeafa67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610778565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820181905273f047ab4c75cebf0eb9ed34ae2c186f3611aeafa69163b3db428b9173917cee801a67f933f2e6b33fc0cd1ed2d5909d889182906370a08231906024015b602060405180830381865afa1580156101b9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101dd9190610c56565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e086901b16815273ffffffffffffffffffffffffffffffffffffffff93841660048201529290911660248301526044820152606401600060405180830381600087803b15801561025157600080fd5b505af1158015610265573d6000803e3d6000fd5b50505050565b336102947fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b73ffffffffffffffffffffffffffffffffffffffff161415806102cb5750307352aa899454998be5b000ad077a46bbe360f4e49714155b156102d557600080fd5b61032873cd5fe23c85820f7b72d0926fc9b05b43e359b7ee73f047ab4c75cebf0eb9ed34ae2c186f3611aeafa67fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff610778565b6040517f70a08231000000000000000000000000000000000000000000000000000000008152306004820181905273f047ab4c75cebf0eb9ed34ae2c186f3611aeafa69163b3db428b9173cd5fe23c85820f7b72d0926fc9b05b43e359b7ee9182906370a082319060240161019c565b336000908152600360205260409020546001908116148015906103f85750336103df7fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b73ffffffffffffffffffffffffffffffffffffffff1614155b806104175750307352aa899454998be5b000ad077a46bbe360f4e49714155b1561042157600080fd5b6040517fb203bb9900000000000000000000000000000000000000000000000000000000815273917cee801a67f933f2e6b33fc0cd1ed2d5909d886004820181905230602483015273f047ab4c75cebf0eb9ed34ae2c186f3611aeafa69163f3fef3a39190839063b203bb9990604401602060405180830381865afa1580156104ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104d29190610c56565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b15801561053d57600080fd5b505af1158015610551573d6000803e3d6000fd5b5050505061058973917cee801a67f933f2e6b33fc0cd1ed2d5909d8873f047ab4c75cebf0eb9ed34ae2c186f3611aeafa66000610778565b565b336000908152600360205260409020546001908116148015906105eb5750336105d27fb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d61035490565b73ffffffffffffffffffffffffffffffffffffffff1614155b8061060a5750307352aa899454998be5b000ad077a46bbe360f4e49714155b1561061457600080fd5b6040517fb203bb9900000000000000000000000000000000000000000000000000000000815273cd5fe23c85820f7b72d0926fc9b05b43e359b7ee6004820181905230602483015273f047ab4c75cebf0eb9ed34ae2c186f3611aeafa69163f3fef3a39190839063b203bb9990604401602060405180830381865afa1580156106a1573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106c59190610c56565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e085901b16815273ffffffffffffffffffffffffffffffffffffffff90921660048301526024820152604401600060405180830381600087803b15801561073057600080fd5b505af1158015610744573d6000803e3d6000fd5b5050505061058973cd5fe23c85820f7b72d0926fc9b05b43e359b7ee73f047ab4c75cebf0eb9ed34ae2c186f3611aeafa660005b80158061081857506040517fdd62ed3e00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff838116602483015284169063dd62ed3e90604401602060405180830381865afa1580156107f2573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906108169190610c56565b155b6108a9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603660248201527f5361666545524332303a20617070726f76652066726f6d206e6f6e2d7a65726f60448201527f20746f206e6f6e2d7a65726f20616c6c6f77616e63650000000000000000000060648201526084015b60405180910390fd5b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f095ea7b30000000000000000000000000000000000000000000000000000000017905261093690849061093b565b505050565b600061099d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16610a479092919063ffffffff16565b80519091501561093657808060200190518101906109bb9190610c6f565b610936576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084016108a0565b6060610a568484600085610a5e565b949350505050565b606082471015610af0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c000000000000000000000000000000000000000000000000000060648201526084016108a0565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051610b199190610cbc565b60006040518083038185875af1925050503d8060008114610b56576040519150601f19603f3d011682016040523d82523d6000602084013e610b5b565b606091505b5091509150610b6c87838387610b77565b979650505050505050565b60608315610c0d578251600003610c065773ffffffffffffffffffffffffffffffffffffffff85163b610c06576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016108a0565b5081610a56565b610a568383815115610c225781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016108a09190610cd8565b600060208284031215610c6857600080fd5b5051919050565b600060208284031215610c8157600080fd5b81518015158114610c9157600080fd5b9392505050565b60005b83811015610cb3578181015183820152602001610c9b565b50506000910152565b60008251610cce818460208701610c98565b9190910192915050565b6020815260008251806020840152610cf7816040850160208701610c98565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea26469706673582212203246c895eee621fb51d2ca336805c93cbd5d0ac06cef196a875687d7e1deae2764736f6c63430008150033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "depositZircuitWeETH()": {
        "details": "Only delegate callable on Liquidity, by Governance"
      },
      "depositZircuitWeETHs()": {
        "details": "Only delegate callable on Liquidity, by Governance"
      },
      "withdrawZircuitWeETH()": {
        "details": "Only delegate callable on Liquidity, Governance and Guardians (for emergency)"
      },
      "withdrawZircuitWeETHs()": {
        "details": "Only delegate callable on Liquidity, Governance and Guardians (for emergency)"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "depositZircuitWeETH()": {
        "notice": "deposit all WEETH funds to Zircuit and sets approved allowance to max uint256."
      },
      "depositZircuitWeETHs()": {
        "notice": "deposit all WEETHS funds to Zircuit and sets approved allowance to max uint256."
      },
      "withdrawZircuitWeETH()": {
        "notice": "withdraw all WEETH funds from Zircuit and sets approved allowance to 0."
      },
      "withdrawZircuitWeETHs()": {
        "notice": "withdraw all WEETHS funds from Zircuit and sets approved allowance to 0."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 17284,
        "contract": "contracts/liquidity/zircuitTransferModule/main.sol:FluidLiquidityZircuitTransferModule",
        "label": "_revenueCollector",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 17287,
        "contract": "contracts/liquidity/zircuitTransferModule/main.sol:FluidLiquidityZircuitTransferModule",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 17292,
        "contract": "contracts/liquidity/zircuitTransferModule/main.sol:FluidLiquidityZircuitTransferModule",
        "label": "_isAuth",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 17297,
        "contract": "contracts/liquidity/zircuitTransferModule/main.sol:FluidLiquidityZircuitTransferModule",
        "label": "_isGuardian",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 17302,
        "contract": "contracts/liquidity/zircuitTransferModule/main.sol:FluidLiquidityZircuitTransferModule",
        "label": "_userClass",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 17307,
        "contract": "contracts/liquidity/zircuitTransferModule/main.sol:FluidLiquidityZircuitTransferModule",
        "label": "_exchangePricesAndConfig",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 17312,
        "contract": "contracts/liquidity/zircuitTransferModule/main.sol:FluidLiquidityZircuitTransferModule",
        "label": "_rateData",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 17317,
        "contract": "contracts/liquidity/zircuitTransferModule/main.sol:FluidLiquidityZircuitTransferModule",
        "label": "_totalAmounts",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 17324,
        "contract": "contracts/liquidity/zircuitTransferModule/main.sol:FluidLiquidityZircuitTransferModule",
        "label": "_userSupplyData",
        "offset": 0,
        "slot": "8",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 17331,
        "contract": "contracts/liquidity/zircuitTransferModule/main.sol:FluidLiquidityZircuitTransferModule",
        "label": "_userBorrowData",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_address,t_mapping(t_address,t_uint256))"
      },
      {
        "astId": 17335,
        "contract": "contracts/liquidity/zircuitTransferModule/main.sol:FluidLiquidityZircuitTransferModule",
        "label": "_listedTokens",
        "offset": 0,
        "slot": "10",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 17340,
        "contract": "contracts/liquidity/zircuitTransferModule/main.sol:FluidLiquidityZircuitTransferModule",
        "label": "_configs2",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_mapping(t_address,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}