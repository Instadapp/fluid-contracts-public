{
  "address": "0x003d7b684DF033B96f6627f507E713F2A7eD9196",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "infoName_",
          "type": "string"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "source",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "invertRate",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "multiplier",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "divisor",
              "type": "uint256"
            },
            {
              "internalType": "enum GenericOracleStructs.SourceType",
              "name": "sourceType",
              "type": "uint8"
            }
          ],
          "internalType": "struct GenericOracleStructs.OracleHopSource[]",
          "name": "sources_",
          "type": "tuple[]"
        },
        {
          "internalType": "address",
          "name": "sequencerUptimeFeed_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorId_",
          "type": "uint256"
        }
      ],
      "name": "FluidOracleError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "getExchangeRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "exchangeRate_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExchangeRateLiquidate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "exchangeRate_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getExchangeRateOperate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "exchangeRate_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getHopExchangeRates",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rateSource1Operate_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rateSource1Liquidate_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rateSource2Operate_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rateSource2Liquidate_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rateSource3Operate_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rateSource3Liquidate_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rateSource4Operate_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rateSource4Liquidate_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rateSource5Operate_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "rateSource5Liquidate_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOracleHopSources",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "source",
              "type": "address"
            },
            {
              "internalType": "bool",
              "name": "invertRate",
              "type": "bool"
            },
            {
              "internalType": "uint256",
              "name": "multiplier",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "divisor",
              "type": "uint256"
            },
            {
              "internalType": "enum GenericOracleStructs.SourceType",
              "name": "sourceType",
              "type": "uint8"
            }
          ],
          "internalType": "struct GenericOracleStructs.OracleHopSource[]",
          "name": "sources_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "infoName",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "sequencerL2Data",
      "outputs": [
        {
          "internalType": "address",
          "name": "sequencerUptimeFeed_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "maxGracePeriod_",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isSequencerUp_",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "lastUptimeStartedAt_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "gracePeriod_",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "gracePeriodPassed_",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "lastOutageStartedAt_",
          "type": "uint256"
        },
        {
          "internalType": "bool",
          "name": "isSequencerUpAndValid_",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x36bc62ebf18542a6daa2f966b8aa90367608c3be9a4f8565975b599fcc737a8a",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x0Ed35B1609Ec45c7079E80d11149a52717e4859A",
    "contractAddress": null,
    "transactionIndex": 145,
    "gasUsed": "2384645",
    "logsBloom": "0x
    "blockHash": "0xd4d54e7c80ac1c8669632819d212735553d2fee6ac202c53b9a7ec009aeb9eb6",
    "transactionHash": "0x36bc62ebf18542a6daa2f966b8aa90367608c3be9a4f8565975b599fcc737a8a",
    "logs": [],
    "blockNumber": 26131555,
    "cumulativeGasUsed": "34153617",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "SUSDS per 1 ETH",
    [
      {
        "sourceType": 2,
        "source": "0x71041dddad3595F9CEd3DcCFBe3D1F4b0a16Bb70",
        "invertRate": false,
        "multiplier": "10000000000000000000",
        "divisor": 1
      },
      {
        "sourceType": 2,
        "source": "0x026a5B6114431d8F3eF2fA0E1B2EDdDccA9c540E",
        "invertRate": true,
        "multiplier": 1,
        "divisor": 1
      }
    ],
    "0xBCF85224fc0756B9Fa45aA7892530B47e10b6433"
  ],
  "numDeployments": 1,
  "solcInputHash": "3a1af9fa7fd095a04d955eaea0663983",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"infoName_\",\"type\":\"string\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"invertRate\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"},{\"internalType\":\"enum GenericOracleStructs.SourceType\",\"name\":\"sourceType\",\"type\":\"uint8\"}],\"internalType\":\"struct GenericOracleStructs.OracleHopSource[]\",\"name\":\"sources_\",\"type\":\"tuple[]\"},{\"internalType\":\"address\",\"name\":\"sequencerUptimeFeed_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorId_\",\"type\":\"uint256\"}],\"name\":\"FluidOracleError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"getExchangeRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangeRate_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExchangeRateLiquidate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangeRate_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getExchangeRateOperate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"exchangeRate_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getHopExchangeRates\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rateSource1Operate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateSource1Liquidate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateSource2Operate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateSource2Liquidate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateSource3Operate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateSource3Liquidate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateSource4Operate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateSource4Liquidate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateSource5Operate_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"rateSource5Liquidate_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOracleHopSources\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"source\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"invertRate\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"multiplier\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"divisor\",\"type\":\"uint256\"},{\"internalType\":\"enum GenericOracleStructs.SourceType\",\"name\":\"sourceType\",\"type\":\"uint8\"}],\"internalType\":\"struct GenericOracleStructs.OracleHopSource[]\",\"name\":\"sources_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"infoName\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"sequencerL2Data\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"sequencerUptimeFeed_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"maxGracePeriod_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSequencerUp_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lastUptimeStartedAt_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gracePeriod_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"gracePeriodPassed_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"lastOutageStartedAt_\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isSequencerUpAndValid_\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"getExchangeRate()\":{\"details\":\"Deprecated. Use `getExchangeRateOperate()` and `getExchangeRateLiquidate()` instead. Only implemented for      backwards compatibility.\"},\"getHopExchangeRates()\":{\"returns\":{\"rateSource1Liquidate_\":\"The exchange rate for hop 1 during liquidate.\",\"rateSource1Operate_\":\"The exchange rate for hop 1 during operate.\",\"rateSource2Liquidate_\":\"The exchange rate for hop 2 during liquidate.\",\"rateSource2Operate_\":\"The exchange rate for hop 2 during operate.\",\"rateSource3Liquidate_\":\"The exchange rate for hop 3 during liquidate.\",\"rateSource3Operate_\":\"The exchange rate for hop 3 during operate.\",\"rateSource4Liquidate_\":\"The exchange rate for hop 4 during liquidate.\",\"rateSource4Operate_\":\"The exchange rate for hop 4 during operate.\",\"rateSource5Liquidate_\":\"The exchange rate for hop 5 during liquidate.\",\"rateSource5Operate_\":\"The exchange rate for hop 5 during operate.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"getExchangeRateLiquidate()\":{\"notice\":\"Get the `exchangeRate_` between the underlying asset and the peg asset in 1e27 for liquidations\"},\"getExchangeRateOperate()\":{\"notice\":\"Get the `exchangeRate_` between the underlying asset and the peg asset in 1e27 for operates\"},\"getHopExchangeRates()\":{\"notice\":\"Returns the exchange rate for each hop.\"},\"getOracleHopSources()\":{\"notice\":\"Returns the configured OracleHopSources\"},\"infoName()\":{\"notice\":\"helper string to easily identify the oracle. E.g. token symbols\"},\"sequencerL2Data()\":{\"notice\":\"returns all sequencer uptime feed related data\"}},\"notice\":\"generic configurable Oracle for Layer 2 (with sequencer outage detection) combines up to 4 hops from sources such as  - an existing IFluidOracle (e.g. ContractRate)  - Redstone  - Chainlink\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/oracle/oraclesL2/genericOracleL2.sol\":\"FluidGenericOracleL2\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000000},\"remappings\":[]},\"sources\":{\"contracts/oracle/error.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\ncontract Error {\\n    error FluidOracleError(uint256 errorId_);\\n}\\n\",\"keccak256\":\"0xc7b7e945238168d216c480e9dd4fbaaf8780645d58c47f9abdaa4f29910568fe\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/errorTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nlibrary ErrorTypes {\\n    /***********************************|\\n    |           FluidOracleL2           | \\n    |__________________________________*/\\n\\n    /// @notice thrown when sequencer on a L2 has an outage and grace period has not yet passed.\\n    uint256 internal constant FluidOracleL2__SequencerOutage = 60000;\\n\\n    /***********************************|\\n    |     UniV3CheckCLRSOracle          | \\n    |__________________________________*/\\n\\n    /// @notice thrown when the delta between main price source and check rate source is exceeding the allowed delta\\n    uint256 internal constant UniV3CheckCLRSOracle__InvalidPrice = 60001;\\n\\n    /// @notice thrown when an invalid parameter is passed to a method\\n    uint256 internal constant UniV3CheckCLRSOracle__InvalidParams = 60002;\\n\\n    /// @notice thrown when the exchange rate is zero, even after all possible fallbacks depending on config\\n    uint256 internal constant UniV3CheckCLRSOracle__ExchangeRateZero = 60003;\\n\\n    /***********************************|\\n    |           FluidOracle             | \\n    |__________________________________*/\\n\\n    /// @notice thrown when an invalid info name is passed into a fluid oracle (e.g. not set or too long)\\n    uint256 internal constant FluidOracle__InvalidInfoName = 60010;\\n\\n    /***********************************|\\n    |            sUSDe Oracle           | \\n    |__________________________________*/\\n\\n    /// @notice thrown when an invalid parameter is passed to a method\\n    uint256 internal constant SUSDeOracle__InvalidParams = 60102;\\n\\n    /***********************************|\\n    |           Pendle Oracle           | \\n    |__________________________________*/\\n\\n    /// @notice thrown when an invalid parameter is passed to a method\\n    uint256 internal constant PendleOracle__InvalidParams = 60201;\\n\\n    /// @notice thrown when the Pendle market Oracle has not been initialized yet\\n    uint256 internal constant PendleOracle__MarketNotInitialized = 60202;\\n\\n    /// @notice thrown when the Pendle market does not have 18 decimals\\n    uint256 internal constant PendleOracle__MarketInvalidDecimals = 60203;\\n\\n    /// @notice thrown when the Pendle market returns an unexpected price\\n    uint256 internal constant PendleOracle__InvalidPrice = 60204;\\n\\n    /***********************************|\\n    |    CLRS2UniV3CheckCLRSOracleL2    | \\n    |__________________________________*/\\n\\n    /// @notice thrown when the exchange rate is zero, even after all possible fallbacks depending on config\\n    uint256 internal constant CLRS2UniV3CheckCLRSOracleL2__ExchangeRateZero = 60301;\\n\\n    /***********************************|\\n    |    Ratio2xFallbackCLRSOracleL2    | \\n    |__________________________________*/\\n\\n    /// @notice thrown when the exchange rate is zero, even after all possible fallbacks depending on config\\n    uint256 internal constant Ratio2xFallbackCLRSOracleL2__ExchangeRateZero = 60311;\\n\\n    /***********************************|\\n    |            WeETHsOracle           | \\n    |__________________________________*/\\n\\n    /// @notice thrown when an invalid parameter is passed to a method\\n    uint256 internal constant WeETHsOracle__InvalidParams = 60321;\\n\\n    /***********************************|\\n    |        DexSmartColOracle          | \\n    |__________________________________*/\\n\\n    /// @notice thrown when an invalid parameter is passed to a method\\n    uint256 internal constant DexSmartColOracle__InvalidParams = 60331;\\n\\n    /// @notice thrown when smart col is not enabled\\n    uint256 internal constant DexSmartColOracle__SmartColNotEnabled = 60332;\\n\\n    /// @notice thrown when the exchange rate is zero, even after all possible fallbacks depending on config\\n    uint256 internal constant DexSmartColOracle__ExchangeRateZero = 60333;\\n\\n    /***********************************|\\n    |        DexSmartDebtOracle         | \\n    |__________________________________*/\\n\\n    /// @notice thrown when an invalid parameter is passed to a method\\n    uint256 internal constant DexSmartDebtOracle__InvalidParams = 60341;\\n\\n    /// @notice thrown when smart debt is not enabled\\n    uint256 internal constant DexSmartDebtOracle__SmartDebtNotEnabled = 60342;\\n\\n    /// @notice thrown when the exchange rate is zero, even after all possible fallbacks depending on config\\n    uint256 internal constant DexSmartDebtOracle__ExchangeRateZero = 60343;\\n\\n    /***********************************|\\n    |            ContractRate           | \\n    |__________________________________*/\\n\\n    /// @notice thrown when an invalid parameter is passed to a method\\n    uint256 internal constant ContractRate__InvalidParams = 60351;\\n\\n    /// @notice thrown when caller is not authorized\\n    uint256 internal constant ContractRate__Unauthorized = 60352;\\n\\n    /// @notice thrown when minimum diff for triggering update on the stared rate is not reached\\n    uint256 internal constant ContractRate__MinUpdateDiffNotReached = 60353;\\n\\n    /// @notice thrown when the external rate source returns 0 for the new rate\\n    uint256 internal constant ContractRate__NewRateZero = 60354;\\n\\n    /***********************************|\\n    |            sUSDs Oracle           | \\n    |__________________________________*/\\n\\n    /// @notice thrown when an invalid parameter is passed to a method\\n    uint256 internal constant SUSDsOracle__InvalidParams = 60361;\\n\\n    /***********************************|\\n    |            Peg Oracle             | \\n    |__________________________________*/\\n\\n    /// @notice thrown when an invalid parameter is passed to a method\\n    uint256 internal constant PegOracle__InvalidParams = 60371;\\n\\n    /***********************************|\\n    |              DexOracle            | \\n    |__________________________________*/\\n\\n    /// @notice thrown when an invalid parameter is passed to a method\\n    uint256 internal constant DexOracle__InvalidParams = 60381;\\n\\n    /// @notice thrown when the exchange rate is zero, even after all possible fallbacks depending on config\\n    uint256 internal constant DexOracle__ExchangeRateZero = 60382;\\n\\n    /***********************************|\\n    |           GenericOracle           | \\n    |__________________________________*/\\n\\n    /// @notice thrown when an invalid parameter is passed to a method\\n    uint256 internal constant GenericOracle__InvalidParams = 60401;\\n\\n    /// @notice thrown when reaching an unexepcted config state\\n    uint256 internal constant GenericOracle__UnexpectedConfig = 60402;\\n\\n    /// @notice thrown when the exchange rate is zero\\n    uint256 internal constant GenericOracle__RateZero = 60403;\\n\\n    /***********************************|\\n    |          Chainlink Oracle         | \\n    |__________________________________*/\\n\\n    /// @notice thrown when an invalid parameter is passed to a method\\n    uint256 internal constant ChainlinkOracle__InvalidParams = 61001;\\n\\n    /***********************************|\\n    |          UniswapV3 Oracle         | \\n    |__________________________________*/\\n\\n    /// @notice thrown when an invalid parameter is passed to a method\\n    uint256 internal constant UniV3Oracle__InvalidParams = 62001;\\n\\n    /// @notice thrown when constructor is called with invalid ordered seconds agos values\\n    uint256 internal constant UniV3Oracle__InvalidSecondsAgos = 62002;\\n\\n    /// @notice thrown when constructor is called with invalid delta values > 100%\\n    uint256 internal constant UniV3Oracle__InvalidDeltas = 62003;\\n\\n    /***********************************|\\n    |            WstETh Oracle          | \\n    |__________________________________*/\\n\\n    /// @notice thrown when an invalid parameter is passed to a method\\n    uint256 internal constant WstETHOracle__InvalidParams = 63001;\\n\\n    /***********************************|\\n    |           Redstone Oracle         | \\n    |__________________________________*/\\n\\n    /// @notice thrown when an invalid parameter is passed to a method\\n    uint256 internal constant RedstoneOracle__InvalidParams = 64001;\\n\\n    /***********************************|\\n    |          Fallback Oracle          | \\n    |__________________________________*/\\n\\n    /// @notice thrown when an invalid parameter is passed to a method\\n    uint256 internal constant FallbackOracle__InvalidParams = 65001;\\n\\n    /***********************************|\\n    |       FallbackCLRSOracle          | \\n    |__________________________________*/\\n\\n    /// @notice thrown when the exchange rate is zero, even for the fallback oracle source (if enabled)\\n    uint256 internal constant FallbackCLRSOracle__ExchangeRateZero = 66001;\\n\\n    /***********************************|\\n    |         WstETHCLRSOracle          | \\n    |__________________________________*/\\n\\n    /// @notice thrown when the exchange rate is zero, even for the fallback oracle source (if enabled)\\n    uint256 internal constant WstETHCLRSOracle__ExchangeRateZero = 67001;\\n\\n    /***********************************|\\n    |        CLFallbackUniV3Oracle      | \\n    |__________________________________*/\\n\\n    /// @notice thrown when the exchange rate is zero, even for the uniV3 rate\\n    uint256 internal constant CLFallbackUniV3Oracle__ExchangeRateZero = 68001;\\n\\n    /***********************************|\\n    |  WstETHCLRS2UniV3CheckCLRSOracle  | \\n    |__________________________________*/\\n\\n    /// @notice thrown when the exchange rate is zero, even for the uniV3 rate\\n    uint256 internal constant WstETHCLRS2UniV3CheckCLRSOracle__ExchangeRateZero = 69001;\\n\\n    /***********************************|\\n    |             WeETh Oracle          | \\n    |__________________________________*/\\n\\n    /// @notice thrown when an invalid parameter is passed to a method\\n    uint256 internal constant WeETHOracle__InvalidParams = 70001;\\n}\\n\",\"keccak256\":\"0xde74f5932606985eac8db4296430b22a0a4fa3412b0331ef4d12cb762e77ebe7\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/fluidOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { IFluidOracle } from \\\"./interfaces/iFluidOracle.sol\\\";\\nimport { ErrorTypes } from \\\"./errorTypes.sol\\\";\\nimport { Error as OracleError } from \\\"./error.sol\\\";\\n\\n/// @title   FluidOracle\\n/// @notice  Base contract that any Fluid Oracle must implement\\nabstract contract FluidOracle is IFluidOracle, OracleError {\\n    /// @dev short helper string to easily identify the oracle. E.g. token symbols\\n    //\\n    // using a bytes32 because string can not be immutable.\\n    bytes32 private immutable _infoName;\\n\\n    constructor(string memory infoName_) {\\n        if (bytes(infoName_).length > 32 || bytes(infoName_).length == 0) {\\n            revert FluidOracleError(ErrorTypes.FluidOracle__InvalidInfoName);\\n        }\\n\\n        // convert string to bytes32\\n        bytes32 infoNameBytes32_;\\n        assembly {\\n            infoNameBytes32_ := mload(add(infoName_, 32))\\n        }\\n        _infoName = infoNameBytes32_;\\n    }\\n\\n    /// @inheritdoc IFluidOracle\\n    function infoName() external view returns (string memory) {\\n        // convert bytes32 to string\\n        uint256 length_;\\n        while (length_ < 32 && _infoName[length_] != 0) {\\n            length_++;\\n        }\\n        bytes memory infoNameBytes_ = new bytes(length_);\\n        for (uint256 i; i < length_; i++) {\\n            infoNameBytes_[i] = _infoName[i];\\n        }\\n        return string(infoNameBytes_);\\n    }\\n\\n    /// @inheritdoc IFluidOracle\\n    function getExchangeRate() external view virtual returns (uint256 exchangeRate_);\\n\\n    /// @inheritdoc IFluidOracle\\n    function getExchangeRateOperate() external view virtual returns (uint256 exchangeRate_);\\n\\n    /// @inheritdoc IFluidOracle\\n    function getExchangeRateLiquidate() external view virtual returns (uint256 exchangeRate_);\\n}\\n\",\"keccak256\":\"0x2b56537a18379b4d7f69b9d95ebdb39e302951dbcaca882c27b4405bf1ea784b\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/fluidOracleL2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { IFluidOracle } from \\\"./interfaces/iFluidOracle.sol\\\";\\nimport { ErrorTypes } from \\\"./errorTypes.sol\\\";\\nimport { IChainlinkAggregatorV3 } from \\\"./interfaces/external/IChainlinkAggregatorV3.sol\\\";\\nimport { Error as OracleError } from \\\"./error.sol\\\";\\n\\n/// @title   FluidOracleL2\\n/// @notice  Base contract that any Fluid Oracle L2 must implement\\nabstract contract FluidOracleL2 is IFluidOracle, OracleError {\\n    /// @dev Chainlink L2 Sequencer Uptime feed to detect sequencer outages\\n    IChainlinkAggregatorV3 internal _SEQUENCER_ORACLE;\\n    /// @dev max time period until oracle assumes normal behavior after a sequencer outage.\\n    uint256 internal constant _SEQUENCER_MAX_GRACE_PERIOD = 45 minutes;\\n\\n    /// @notice sets the L2 sequencer uptime Chainlink feed\\n    constructor(address sequencerUptimeFeed_) {\\n        _SEQUENCER_ORACLE = IChainlinkAggregatorV3(sequencerUptimeFeed_);\\n    }\\n\\n    /// @notice returns all sequencer uptime feed related data\\n    function sequencerL2Data()\\n        public\\n        view\\n        returns (\\n            address sequencerUptimeFeed_,\\n            uint256 maxGracePeriod_,\\n            bool isSequencerUp_,\\n            uint256 lastUptimeStartedAt_,\\n            uint256 gracePeriod_,\\n            bool gracePeriodPassed_,\\n            uint256 lastOutageStartedAt_,\\n            bool isSequencerUpAndValid_\\n        )\\n    {\\n        uint80 uptimeStartRoundId_;\\n        (isSequencerUp_, uptimeStartRoundId_, lastUptimeStartedAt_) = _sequencerUpStatus();\\n\\n        if (isSequencerUp_) {\\n            (gracePeriod_, gracePeriodPassed_, lastOutageStartedAt_) = _gracePeriod(\\n                uptimeStartRoundId_,\\n                lastUptimeStartedAt_\\n            );\\n        } else {\\n            gracePeriod_ = _SEQUENCER_MAX_GRACE_PERIOD;\\n            (uint80 roundId_, , , , ) = _SEQUENCER_ORACLE.latestRoundData();\\n            lastOutageStartedAt_ = _lastSequencerOutageStart(roundId_ + 1);\\n        }\\n\\n        return (\\n            address(_SEQUENCER_ORACLE),\\n            _SEQUENCER_MAX_GRACE_PERIOD,\\n            isSequencerUp_,\\n            lastUptimeStartedAt_,\\n            gracePeriod_,\\n            gracePeriodPassed_,\\n            lastOutageStartedAt_,\\n            isSequencerUp_ && gracePeriodPassed_\\n        );\\n    }\\n\\n    /// @dev ensures that the sequencer is up and grace period has passed\\n    function _ensureSequencerUpAndValid() internal view {\\n        (bool isSequencerUp_, uint80 uptimeStartRoundId_, uint256 uptimeStartedAt_) = _sequencerUpStatus();\\n\\n        if (!isSequencerUp_) {\\n            revert FluidOracleError(ErrorTypes.FluidOracleL2__SequencerOutage);\\n        }\\n\\n        (, bool gracePeriodPassed_, ) = _gracePeriod(uptimeStartRoundId_, uptimeStartedAt_);\\n        if (!gracePeriodPassed_) {\\n            revert FluidOracleError(ErrorTypes.FluidOracleL2__SequencerOutage);\\n        }\\n    }\\n\\n    /// @inheritdoc IFluidOracle\\n    function getExchangeRate() external view virtual returns (uint256 exchangeRate_);\\n\\n    /// @inheritdoc IFluidOracle\\n    function getExchangeRateOperate() external view virtual returns (uint256 exchangeRate_);\\n\\n    /// @inheritdoc IFluidOracle\\n    function getExchangeRateLiquidate() external view virtual returns (uint256 exchangeRate_);\\n\\n    /// @dev finds last round before `uptimeStartRoundId_` where sequencer status was down, incl. handling cases of\\n    /// consecutive rounds where status was down.\\n    function _lastSequencerOutageStart(uint80 uptimeStartRoundId_) private view returns (uint256 outageStartedAt_) {\\n        uint80 roundId_ = uptimeStartRoundId_;\\n        int256 answer_;\\n        uint256 startedAt_;\\n        do {\\n            (roundId_, answer_, startedAt_, , ) = _SEQUENCER_ORACLE.getRoundData(roundId_ - 1);\\n            if (answer_ != 0) {\\n                // sequencer was down at this round, update outage started at data\\n                outageStartedAt_ = startedAt_;\\n            } // else: while loop is going to break\\n        } while (answer_ != 0 && startedAt_ > 0);\\n    }\\n\\n    /// @dev finds last round where sequencer status was up, incl. handling cases of consecutive rounds where status was up.\\n    function _sequencerUpStatus()\\n        private\\n        view\\n        returns (bool isSequencerUp_, uint80 uptimeStartRoundId_, uint256 uptimeStartedAt_)\\n    {\\n        (uint80 roundId_, int256 answer_, uint256 startedAt_, , ) = _SEQUENCER_ORACLE.latestRoundData();\\n        if (answer_ != 0) {\\n            // sequencer is down currently.\\n            return (false, 0, 0);\\n        }\\n\\n        isSequencerUp_ = true;\\n\\n        // cover case where there were other consecutive uptime report rounds in between\\n        uptimeStartRoundId_ = roundId_;\\n        uptimeStartedAt_ = startedAt_;\\n        if (uptimeStartedAt_ > 0) {\\n            do {\\n                (roundId_, answer_, startedAt_, , ) = _SEQUENCER_ORACLE.getRoundData(roundId_ - 1);\\n                if (answer_ == 0) {\\n                    // sequencer was up at this round, consecutive uptime so update uptime start data\\n                    uptimeStartRoundId_ = roundId_;\\n                    uptimeStartedAt_ = startedAt_;\\n                } // else: while loop is going to break\\n            } while (answer_ == 0 && startedAt_ > 0);\\n        } // else if startedAt == 0, then it is the first ever round.\\n    }\\n\\n    /// @dev returns the `gracePeriod_` duration and if the grace period has `passed_` based on\\n    /// current uptime round data vs the last sequencer outage duration.\\n    function _gracePeriod(\\n        uint80 uptimeStartRoundId_,\\n        uint256 uptimeStartedAt_\\n    ) private view returns (uint256 gracePeriod_, bool passed_, uint256 outageStartedAt_) {\\n        uint256 uptimeDuration_ = block.timestamp - uptimeStartedAt_;\\n        if (uptimeStartedAt_ == 0 || uptimeDuration_ > _SEQUENCER_MAX_GRACE_PERIOD) {\\n            return (_SEQUENCER_MAX_GRACE_PERIOD, true, 0);\\n        }\\n\\n        outageStartedAt_ = _lastSequencerOutageStart(uptimeStartRoundId_);\\n\\n        // grace period is outage duration, capped at _SEQUENCER_MAX_GRACE_PERIOD\\n        gracePeriod_ = uptimeStartedAt_ - outageStartedAt_; // outage duration\\n        if (gracePeriod_ > _SEQUENCER_MAX_GRACE_PERIOD) {\\n            gracePeriod_ = _SEQUENCER_MAX_GRACE_PERIOD;\\n        }\\n\\n        return (gracePeriod_, uptimeDuration_ > gracePeriod_, outageStartedAt_);\\n    }\\n}\\n\",\"keccak256\":\"0x8e70aa5ab5574d0a32cece6a05fd8296efd527281ebc3c236ecad2fc8e310a6b\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/interfaces/external/IChainlinkAggregatorV3.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\n/// from https://github.com/smartcontractkit/chainlink/blob/master/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\n/// Copyright (c) 2018 SmartContract ChainLink, Ltd.\\n\\ninterface IChainlinkAggregatorV3 {\\n    /// @notice represents the number of decimals the aggregator responses represent.\\n    function decimals() external view returns (uint8);\\n\\n    function description() external view returns (string memory);\\n\\n    function version() external view returns (uint256);\\n\\n    function getRoundData(\\n        uint80 _roundId\\n    )\\n        external\\n        view\\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n\\n    function latestRoundData()\\n        external\\n        view\\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\\n}\\n\",\"keccak256\":\"0xaeea1f12d1c381bde8418eab05206d6472b246158584190fce0d09913912a7ef\",\"license\":\"MIT\"},\"contracts/oracle/interfaces/iFluidOracle.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\ninterface IFluidOracle {\\n    /// @dev Deprecated. Use `getExchangeRateOperate()` and `getExchangeRateLiquidate()` instead. Only implemented for\\n    ///      backwards compatibility.\\n    function getExchangeRate() external view returns (uint256 exchangeRate_);\\n\\n    /// @notice Get the `exchangeRate_` between the underlying asset and the peg asset in 1e27 for operates\\n    function getExchangeRateOperate() external view returns (uint256 exchangeRate_);\\n\\n    /// @notice Get the `exchangeRate_` between the underlying asset and the peg asset in 1e27 for liquidations\\n    function getExchangeRateLiquidate() external view returns (uint256 exchangeRate_);\\n\\n    /// @notice helper string to easily identify the oracle. E.g. token symbols\\n    function infoName() external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xeba2e991e41f8b68e2d639935931aadf39e15ea94ea7aa65b2fb3039d27dca63\",\"license\":\"MIT\"},\"contracts/oracle/libraries/oracleUtils.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\n/// @title Oracle utils library\\n/// @notice implements common utility methods for Fluid Oracles\\nlibrary OracleUtils {\\n    /// @dev The scaler for max delta point math (100%)\\n    uint256 internal constant HUNDRED_PERCENT_DELTA_SCALER = 10_000;\\n    /// @dev output precision of rates\\n    uint256 internal constant RATE_OUTPUT_DECIMALS = 27;\\n\\n    /// @dev checks if `mainSourceRate_` is within a `maxDeltaPercent_` of `checkSourceRate_`. Returns true if so.\\n    function isRateOutsideDelta(\\n        uint256 mainSourceRate_,\\n        uint256 checkSourceRate_,\\n        uint256 maxDeltaPercent_\\n    ) internal pure returns (bool) {\\n        uint256 offset_ = (checkSourceRate_ * maxDeltaPercent_) / HUNDRED_PERCENT_DELTA_SCALER;\\n        return (mainSourceRate_ > (checkSourceRate_ + offset_) || mainSourceRate_ < (checkSourceRate_ - offset_));\\n    }\\n}\\n\",\"keccak256\":\"0x968b1a0606875abd523895c5075cf6c34c296919e77b0da7dd952374398e2a4c\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/oracles/genericOracle.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { FluidOracle } from \\\"../fluidOracle.sol\\\";\\nimport { FluidGenericOracleBase } from \\\"./genericOracleBase.sol\\\";\\n\\n/// @notice generic configurable Oracle\\n/// combines up to 4 hops from sources such as\\n///  - an existing IFluidOracle (e.g. ContractRate)\\n///  - Redstone\\n///  - Chainlink\\ncontract FluidGenericOracle is FluidOracle, FluidGenericOracleBase {\\n    constructor(\\n        string memory infoName_,\\n        OracleHopSource[] memory sources_\\n    ) FluidOracle(infoName_) FluidGenericOracleBase(sources_) {}\\n\\n    /// @inheritdoc FluidOracle\\n    function getExchangeRateOperate() public view virtual override returns (uint256 exchangeRate_) {\\n        exchangeRate_ = _getHopsExchangeRate(true);\\n    }\\n\\n    /// @inheritdoc FluidOracle\\n    function getExchangeRateLiquidate() public view virtual override returns (uint256 exchangeRate_) {\\n        exchangeRate_ = _getHopsExchangeRate(false);\\n    }\\n\\n    /// @inheritdoc FluidOracle\\n    function getExchangeRate() public view virtual override returns (uint256 exchangeRate_) {\\n        exchangeRate_ = _getHopsExchangeRate(false);\\n    }\\n}\\n\",\"keccak256\":\"0xaaa346b7dc6fa5227e78c7e87065b113fee4af4947f69ceb4c1767c870ed7035\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/oracles/genericOracleBase.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { ErrorTypes } from \\\"../errorTypes.sol\\\";\\nimport { Error as OracleError } from \\\"../error.sol\\\";\\nimport { ChainlinkSourceReader } from \\\"../sourceReaders/chainlinkSourceReader.sol\\\";\\nimport { FluidSourceReader } from \\\"../sourceReaders/fluidSourceReader.sol\\\";\\nimport { OracleUtils } from \\\"../libraries/oracleUtils.sol\\\";\\n\\nabstract contract GenericOracleStructs {\\n    enum SourceType {\\n        Fluid, // 0, e.g. ContractRate or some other IFluidOracle\\n        Redstone, // 1\\n        Chainlink, // 2\\n        UniV3Checked // 3\\n    }\\n\\n    struct OracleHopSource {\\n        address source;\\n        bool invertRate;\\n        uint256 multiplier;\\n        uint256 divisor;\\n        SourceType sourceType; // e.g. FLUID, REDSTONE, UNIV3CHECKED, CHAINLINK\\n    }\\n}\\n\\n/// @notice generic configurable Oracle Base\\n/// combines up to 4 hops from sources such as\\n///  - an existing IFluidOracle (e.g. ContractRate)\\n///  - Redstone\\n///  - Chainlink\\nabstract contract FluidGenericOracleBase is\\n    OracleError,\\n    GenericOracleStructs,\\n    ChainlinkSourceReader,\\n    FluidSourceReader\\n{\\n    address internal immutable _SOURCE1;\\n    bool internal immutable _SOURCE1_INVERT;\\n    uint256 internal immutable _SOURCE1_MULTIPLIER;\\n    uint256 internal immutable _SOURCE1_DIVISOR;\\n    SourceType internal immutable _SOURCE1_TYPE;\\n\\n    address internal immutable _SOURCE2;\\n    bool internal immutable _SOURCE2_INVERT;\\n    uint256 internal immutable _SOURCE2_MULTIPLIER;\\n    uint256 internal immutable _SOURCE2_DIVISOR;\\n    SourceType internal immutable _SOURCE2_TYPE;\\n\\n    address internal immutable _SOURCE3;\\n    bool internal immutable _SOURCE3_INVERT;\\n    uint256 internal immutable _SOURCE3_MULTIPLIER;\\n    uint256 internal immutable _SOURCE3_DIVISOR;\\n    SourceType internal immutable _SOURCE3_TYPE;\\n\\n    address internal immutable _SOURCE4;\\n    bool internal immutable _SOURCE4_INVERT;\\n    uint256 internal immutable _SOURCE4_MULTIPLIER;\\n    uint256 internal immutable _SOURCE4_DIVISOR;\\n    SourceType internal immutable _SOURCE4_TYPE;\\n\\n    address internal immutable _SOURCE5;\\n    bool internal immutable _SOURCE5_INVERT;\\n    uint256 internal immutable _SOURCE5_MULTIPLIER;\\n    uint256 internal immutable _SOURCE5_DIVISOR;\\n    SourceType internal immutable _SOURCE5_TYPE;\\n\\n    constructor(OracleHopSource[] memory sources_) {\\n        if (sources_.length == 0 || sources_.length > 5) {\\n            revert FluidOracleError(ErrorTypes.GenericOracle__InvalidParams);\\n        }\\n\\n        _verifyOracleHopSource(sources_[0]);\\n        _SOURCE1 = sources_[0].source;\\n        _SOURCE1_INVERT = sources_[0].invertRate;\\n        _SOURCE1_MULTIPLIER = sources_[0].multiplier;\\n        _SOURCE1_DIVISOR = sources_[0].divisor;\\n        _SOURCE1_TYPE = sources_[0].sourceType;\\n\\n        if (sources_.length > 1) {\\n            _verifyOracleHopSource(sources_[1]);\\n            _SOURCE2 = sources_[1].source;\\n            _SOURCE2_INVERT = sources_[1].invertRate;\\n            _SOURCE2_MULTIPLIER = sources_[1].multiplier;\\n            _SOURCE2_DIVISOR = sources_[1].divisor;\\n            _SOURCE2_TYPE = sources_[1].sourceType;\\n        }\\n\\n        if (sources_.length > 2) {\\n            _verifyOracleHopSource(sources_[2]);\\n            _SOURCE3 = sources_[2].source;\\n            _SOURCE3_INVERT = sources_[2].invertRate;\\n            _SOURCE3_MULTIPLIER = sources_[2].multiplier;\\n            _SOURCE3_DIVISOR = sources_[2].divisor;\\n            _SOURCE3_TYPE = sources_[2].sourceType;\\n        }\\n\\n        if (sources_.length > 3) {\\n            _verifyOracleHopSource(sources_[3]);\\n            _SOURCE4 = sources_[3].source;\\n            _SOURCE4_INVERT = sources_[3].invertRate;\\n            _SOURCE4_MULTIPLIER = sources_[3].multiplier;\\n            _SOURCE4_DIVISOR = sources_[3].divisor;\\n            _SOURCE4_TYPE = sources_[3].sourceType;\\n        }\\n\\n        if (sources_.length > 4) {\\n            _verifyOracleHopSource(sources_[4]);\\n            _SOURCE5 = sources_[4].source;\\n            _SOURCE5_INVERT = sources_[4].invertRate;\\n            _SOURCE5_MULTIPLIER = sources_[4].multiplier;\\n            _SOURCE5_DIVISOR = sources_[4].divisor;\\n            _SOURCE5_TYPE = sources_[4].sourceType;\\n        }\\n    }\\n\\n    /// @dev verifies a hop source config\\n    function _verifyOracleHopSource(OracleHopSource memory source_) internal view virtual {\\n        if (\\n            address(source_.source) == address(0) ||\\n            source_.sourceType == SourceType.UniV3Checked ||\\n            source_.divisor == 0 ||\\n            source_.multiplier == 0 ||\\n            source_.divisor > 1e40 ||\\n            source_.multiplier > 1e40\\n        ) {\\n            revert FluidOracleError(ErrorTypes.GenericOracle__InvalidParams);\\n        }\\n    }\\n\\n    /// @dev reads the exchange rate for a hop source\\n    function _readSource(\\n        address source_,\\n        SourceType sourceType_,\\n        bool isOperate_\\n    ) internal view virtual returns (uint256 rate_) {\\n        if (sourceType_ == SourceType.Redstone || sourceType_ == SourceType.Chainlink) {\\n            rate_ = _readChainlinkSource(source_);\\n        } else if (sourceType_ == SourceType.Fluid) {\\n            rate_ = _readFluidSource(source_, isOperate_);\\n        } else {\\n            // should never happen because of config checks in constructor\\n            revert FluidOracleError(ErrorTypes.GenericOracle__UnexpectedConfig);\\n        }\\n    }\\n\\n    /// @dev gets the exchange rate for a single configured hop\\n    function _getExchangeRateForHop(\\n        uint256 curHopsRate_,\\n        bool isOperate_,\\n        OracleHopSource memory source_\\n    ) internal view virtual returns (uint256 rate_) {\\n        rate_ = _readSource(source_.source, source_.sourceType, isOperate_);\\n\\n        // scale to 1e27\\n        rate_ = (rate_ * source_.multiplier) / source_.divisor;\\n\\n        if (source_.invertRate && rate_ > 0) {\\n            rate_ = (10 ** (OracleUtils.RATE_OUTPUT_DECIMALS * 2)) / uint256(rate_);\\n        }\\n\\n        rate_ = (curHopsRate_ * rate_) / (10 ** OracleUtils.RATE_OUTPUT_DECIMALS); // combine with current hops rate\\n    }\\n\\n    /// @dev gets the exchange rate combined for all configured hops\\n    function _getHopsExchangeRate(bool isOperate_) internal view returns (uint256 rate_) {\\n        rate_ = _getExchangeRateForHop(\\n            (10 ** OracleUtils.RATE_OUTPUT_DECIMALS),\\n            isOperate_,\\n            OracleHopSource(_SOURCE1, _SOURCE1_INVERT, _SOURCE1_MULTIPLIER, _SOURCE1_DIVISOR, _SOURCE1_TYPE)\\n        );\\n        if (rate_ == 0) {\\n            revert FluidOracleError(ErrorTypes.GenericOracle__RateZero);\\n        }\\n        if (address(_SOURCE2) == address(0) && _SOURCE2_TYPE != SourceType.UniV3Checked) {\\n            return rate_;\\n        }\\n\\n        // 2 hops -> return rate of hop 1 combined with hop 2\\n        rate_ = _getExchangeRateForHop(\\n            rate_,\\n            isOperate_,\\n            OracleHopSource(_SOURCE2, _SOURCE2_INVERT, _SOURCE2_MULTIPLIER, _SOURCE2_DIVISOR, _SOURCE2_TYPE)\\n        );\\n        if (rate_ == 0) {\\n            revert FluidOracleError(ErrorTypes.GenericOracle__RateZero);\\n        }\\n        if (address(_SOURCE3) == address(0) && _SOURCE3_TYPE != SourceType.UniV3Checked) {\\n            return rate_;\\n        }\\n\\n        // 3 hops -> return rate of hop 1 combined with hop 2 & hop 3\\n        rate_ = _getExchangeRateForHop(\\n            rate_,\\n            isOperate_,\\n            OracleHopSource(_SOURCE3, _SOURCE3_INVERT, _SOURCE3_MULTIPLIER, _SOURCE3_DIVISOR, _SOURCE3_TYPE)\\n        );\\n        if (rate_ == 0) {\\n            revert FluidOracleError(ErrorTypes.GenericOracle__RateZero);\\n        }\\n        if (address(_SOURCE4) == address(0) && _SOURCE4_TYPE != SourceType.UniV3Checked) {\\n            return rate_;\\n        }\\n\\n        // 4 hops -> return rate of hop 1 combined with hop 2, hop 3 & hop 4\\n        rate_ = _getExchangeRateForHop(\\n            rate_,\\n            isOperate_,\\n            OracleHopSource(_SOURCE4, _SOURCE4_INVERT, _SOURCE4_MULTIPLIER, _SOURCE4_DIVISOR, _SOURCE4_TYPE)\\n        );\\n        if (rate_ == 0) {\\n            revert FluidOracleError(ErrorTypes.GenericOracle__RateZero);\\n        }\\n        if (address(_SOURCE5) == address(0) && _SOURCE5_TYPE != SourceType.UniV3Checked) {\\n            return rate_;\\n        }\\n\\n        // 5 hops -> return rate of hop 1 combined with hop 2, hop 3, hop 4 & hop 5\\n        rate_ = _getExchangeRateForHop(\\n            rate_,\\n            isOperate_,\\n            OracleHopSource(_SOURCE5, _SOURCE5_INVERT, _SOURCE5_MULTIPLIER, _SOURCE5_DIVISOR, _SOURCE5_TYPE)\\n        );\\n        if (rate_ == 0) {\\n            revert FluidOracleError(ErrorTypes.GenericOracle__RateZero);\\n        }\\n    }\\n\\n    /// @notice Returns the exchange rate for each hop.\\n    /// @return rateSource1Operate_ The exchange rate for hop 1 during operate.\\n    /// @return rateSource1Liquidate_ The exchange rate for hop 1 during liquidate.\\n    /// @return rateSource2Operate_ The exchange rate for hop 2 during operate.\\n    /// @return rateSource2Liquidate_ The exchange rate for hop 2 during liquidate.\\n    /// @return rateSource3Operate_ The exchange rate for hop 3 during operate.\\n    /// @return rateSource3Liquidate_ The exchange rate for hop 3 during liquidate.\\n    /// @return rateSource4Operate_ The exchange rate for hop 4 during operate.\\n    /// @return rateSource4Liquidate_ The exchange rate for hop 4 during liquidate.\\n    /// @return rateSource5Operate_ The exchange rate for hop 5 during operate.\\n    /// @return rateSource5Liquidate_ The exchange rate for hop 5 during liquidate.\\n    function getHopExchangeRates()\\n        public\\n        view\\n        returns (\\n            uint256 rateSource1Operate_,\\n            uint256 rateSource1Liquidate_,\\n            uint256 rateSource2Operate_,\\n            uint256 rateSource2Liquidate_,\\n            uint256 rateSource3Operate_,\\n            uint256 rateSource3Liquidate_,\\n            uint256 rateSource4Operate_,\\n            uint256 rateSource4Liquidate_,\\n            uint256 rateSource5Operate_,\\n            uint256 rateSource5Liquidate_\\n        )\\n    {\\n        rateSource1Operate_ = _getExchangeRateForHop(\\n            (10 ** OracleUtils.RATE_OUTPUT_DECIMALS),\\n            true,\\n            OracleHopSource(_SOURCE1, _SOURCE1_INVERT, _SOURCE1_MULTIPLIER, _SOURCE1_DIVISOR, _SOURCE1_TYPE)\\n        );\\n        rateSource1Liquidate_ = _getExchangeRateForHop(\\n            (10 ** OracleUtils.RATE_OUTPUT_DECIMALS),\\n            false,\\n            OracleHopSource(_SOURCE1, _SOURCE1_INVERT, _SOURCE1_MULTIPLIER, _SOURCE1_DIVISOR, _SOURCE1_TYPE)\\n        );\\n\\n        if (address(_SOURCE2) != address(0) || _SOURCE2_TYPE == SourceType.UniV3Checked) {\\n            rateSource2Operate_ = _getExchangeRateForHop(\\n                (10 ** OracleUtils.RATE_OUTPUT_DECIMALS),\\n                true,\\n                OracleHopSource(_SOURCE2, _SOURCE2_INVERT, _SOURCE2_MULTIPLIER, _SOURCE2_DIVISOR, _SOURCE2_TYPE)\\n            );\\n            rateSource2Liquidate_ = _getExchangeRateForHop(\\n                (10 ** OracleUtils.RATE_OUTPUT_DECIMALS),\\n                false,\\n                OracleHopSource(_SOURCE2, _SOURCE2_INVERT, _SOURCE2_MULTIPLIER, _SOURCE2_DIVISOR, _SOURCE2_TYPE)\\n            );\\n        }\\n\\n        if (address(_SOURCE3) != address(0) || _SOURCE3_TYPE == SourceType.UniV3Checked) {\\n            rateSource3Operate_ = _getExchangeRateForHop(\\n                (10 ** OracleUtils.RATE_OUTPUT_DECIMALS),\\n                true,\\n                OracleHopSource(_SOURCE3, _SOURCE3_INVERT, _SOURCE3_MULTIPLIER, _SOURCE3_DIVISOR, _SOURCE3_TYPE)\\n            );\\n            rateSource3Liquidate_ = _getExchangeRateForHop(\\n                (10 ** OracleUtils.RATE_OUTPUT_DECIMALS),\\n                false,\\n                OracleHopSource(_SOURCE3, _SOURCE3_INVERT, _SOURCE3_MULTIPLIER, _SOURCE3_DIVISOR, _SOURCE3_TYPE)\\n            );\\n        }\\n\\n        if (address(_SOURCE4) != address(0) || _SOURCE4_TYPE == SourceType.UniV3Checked) {\\n            rateSource4Operate_ = _getExchangeRateForHop(\\n                (10 ** OracleUtils.RATE_OUTPUT_DECIMALS),\\n                true,\\n                OracleHopSource(_SOURCE4, _SOURCE4_INVERT, _SOURCE4_MULTIPLIER, _SOURCE4_DIVISOR, _SOURCE4_TYPE)\\n            );\\n            rateSource4Liquidate_ = _getExchangeRateForHop(\\n                (10 ** OracleUtils.RATE_OUTPUT_DECIMALS),\\n                false,\\n                OracleHopSource(_SOURCE4, _SOURCE4_INVERT, _SOURCE4_MULTIPLIER, _SOURCE4_DIVISOR, _SOURCE4_TYPE)\\n            );\\n        }\\n\\n        if (address(_SOURCE5) != address(0) || _SOURCE5_TYPE == SourceType.UniV3Checked) {\\n            rateSource5Operate_ = _getExchangeRateForHop(\\n                (10 ** OracleUtils.RATE_OUTPUT_DECIMALS),\\n                true,\\n                OracleHopSource(_SOURCE5, _SOURCE5_INVERT, _SOURCE5_MULTIPLIER, _SOURCE5_DIVISOR, _SOURCE5_TYPE)\\n            );\\n            rateSource5Liquidate_ = _getExchangeRateForHop(\\n                (10 ** OracleUtils.RATE_OUTPUT_DECIMALS),\\n                false,\\n                OracleHopSource(_SOURCE5, _SOURCE5_INVERT, _SOURCE5_MULTIPLIER, _SOURCE5_DIVISOR, _SOURCE5_TYPE)\\n            );\\n        }\\n    }\\n\\n    /// @notice Returns the configured OracleHopSources\\n    function getOracleHopSources() public view returns (OracleHopSource[] memory sources_) {\\n        sources_ = new OracleHopSource[](5);\\n        sources_[0] = OracleHopSource(_SOURCE1, _SOURCE1_INVERT, _SOURCE1_MULTIPLIER, _SOURCE1_DIVISOR, _SOURCE1_TYPE);\\n        sources_[1] = OracleHopSource(_SOURCE2, _SOURCE2_INVERT, _SOURCE2_MULTIPLIER, _SOURCE2_DIVISOR, _SOURCE2_TYPE);\\n        sources_[2] = OracleHopSource(_SOURCE3, _SOURCE3_INVERT, _SOURCE3_MULTIPLIER, _SOURCE3_DIVISOR, _SOURCE3_TYPE);\\n        sources_[3] = OracleHopSource(_SOURCE4, _SOURCE4_INVERT, _SOURCE4_MULTIPLIER, _SOURCE4_DIVISOR, _SOURCE4_TYPE);\\n        sources_[4] = OracleHopSource(_SOURCE5, _SOURCE5_INVERT, _SOURCE5_MULTIPLIER, _SOURCE5_DIVISOR, _SOURCE5_TYPE);\\n    }\\n}\\n\",\"keccak256\":\"0x2e7d03edf43ba395f7208d08b33a8792ce9c8991998eb482f00b5cfbbf998055\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/oraclesL2/genericOracleL2.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { FluidOracleL2 } from \\\"../fluidOracleL2.sol\\\";\\nimport { FluidGenericOracle } from \\\"../oracles/genericOracle.sol\\\";\\n\\n/// @notice generic configurable Oracle for Layer 2 (with sequencer outage detection)\\n/// combines up to 4 hops from sources such as\\n///  - an existing IFluidOracle (e.g. ContractRate)\\n///  - Redstone\\n///  - Chainlink\\ncontract FluidGenericOracleL2 is FluidOracleL2, FluidGenericOracle {\\n    constructor(\\n        string memory infoName_,\\n        OracleHopSource[] memory sources_,\\n        address sequencerUptimeFeed_\\n    ) FluidGenericOracle(infoName_, sources_) FluidOracleL2(sequencerUptimeFeed_) {}\\n\\n    /// @inheritdoc FluidOracleL2\\n    function getExchangeRateOperate()\\n        public\\n        view\\n        override(FluidGenericOracle, FluidOracleL2)\\n        returns (uint256 exchangeRate_)\\n    {\\n        _ensureSequencerUpAndValid();\\n        return super.getExchangeRateOperate();\\n    }\\n\\n    /// @inheritdoc FluidOracleL2\\n    function getExchangeRateLiquidate()\\n        public\\n        view\\n        override(FluidGenericOracle, FluidOracleL2)\\n        returns (uint256 exchangeRate_)\\n    {\\n        _ensureSequencerUpAndValid();\\n        return super.getExchangeRateLiquidate();\\n    }\\n\\n    /// @inheritdoc FluidOracleL2\\n    function getExchangeRate() public view override(FluidGenericOracle, FluidOracleL2) returns (uint256 exchangeRate_) {\\n        return getExchangeRateOperate();\\n    }\\n}\\n\",\"keccak256\":\"0x919bfbe336c1a723a5306c651557407138eb9482702a7cc4806f0c5709617239\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/sourceReaders/chainlinkSourceReader.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { IChainlinkAggregatorV3 } from \\\"../interfaces/external/IChainlinkAggregatorV3.sol\\\";\\n\\nabstract contract ChainlinkSourceReader {\\n    function _readChainlinkSource(address feed_) internal view returns (uint256 rate_) {\\n        try IChainlinkAggregatorV3(feed_).latestRoundData() returns (\\n            uint80,\\n            int256 exchangeRate_,\\n            uint256,\\n            uint256,\\n            uint80\\n        ) {\\n            // Return the price in `OracleUtils.RATE_OUTPUT_DECIMALS`\\n            return uint256(exchangeRate_);\\n        } catch {}\\n    }\\n}\\n\",\"keccak256\":\"0xe62904cbea24ede7e4a68ff1702120d66c31402b58dbea024631fadbc3b720d1\",\"license\":\"BUSL-1.1\"},\"contracts/oracle/sourceReaders/fluidSourceReader.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { IFluidOracle } from \\\"../interfaces/iFluidOracle.sol\\\";\\n\\nabstract contract FluidSourceReader {\\n    function _readFluidSource(address oracle_, bool isOperate_) internal view returns (uint256 rate_) {\\n        if (isOperate_) {\\n            try IFluidOracle(oracle_).getExchangeRateOperate() returns (uint256 exchangeRate_) {\\n                return exchangeRate_;\\n            } catch {}\\n        } else {\\n            try IFluidOracle(oracle_).getExchangeRateLiquidate() returns (uint256 exchangeRate_) {\\n                return exchangeRate_;\\n            } catch {}\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf15100ac31abab3daf6980bd725ee7abaef5d0c71c426503281d4af45d8658fd\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6103c06040523480156200001257600080fd5b506040516200371f3803806200371f8339810160408190526200003591620008e6565b600080546001600160a01b0319166001600160a01b03831617905582518390839081908390602010806200006857508051155b15620000905760405163c82fc46560e01b815261ea6a60048201526024015b60405180910390fd5b6020015160805280511580620000a7575060058151115b15620000cb5760405163c82fc46560e01b815261ebf1600482015260240162000087565b620000f981600081518110620000e557620000e5620009d4565b6020026020010151620006ad60201b60201c565b806000815181106200010f576200010f620009d4565b6020908102919091010151516001600160a01b031660a052805181906000906200013d576200013d620009d4565b602002602001015160200151151560c081151581525050806000815181106200016a576200016a620009d4565b60200260200101516040015160e0818152505080600081518110620001935762000193620009d4565b602002602001015160600151610100818152505080600081518110620001bd57620001bd620009d4565b6020026020010151608001516003811115620001dd57620001dd620009ea565b610120816003811115620001f557620001f5620009ea565b8152505060018151111562000323576200021e81600181518110620000e557620000e5620009d4565b80600181518110620002345762000234620009d4565b6020908102919091010151516001600160a01b031661014052805181906001908110620002655762000265620009d4565b60200260200101516020015115156101608115158152505080600181518110620002935762000293620009d4565b602002602001015160400151610180818152505080600181518110620002bd57620002bd620009d4565b6020026020010151606001516101a0818152505080600181518110620002e757620002e7620009d4565b6020026020010151608001516003811115620003075762000307620009ea565b6101c08160038111156200031f576200031f620009ea565b9052505b6002815111156200044d576200034881600281518110620000e557620000e5620009d4565b806002815181106200035e576200035e620009d4565b6020908102919091010151516001600160a01b03166101e0528051819060029081106200038f576200038f620009d4565b60200260200101516020015115156102008115158152505080600281518110620003bd57620003bd620009d4565b602002602001015160400151610220818152505080600281518110620003e757620003e7620009d4565b602002602001015160600151610240818152505080600281518110620004115762000411620009d4565b6020026020010151608001516003811115620004315762000431620009ea565b610260816003811115620004495762000449620009ea565b9052505b60038151111562000577576200047281600381518110620000e557620000e5620009d4565b80600381518110620004885762000488620009d4565b6020908102919091010151516001600160a01b031661028052805181906003908110620004b957620004b9620009d4565b60200260200101516020015115156102a08115158152505080600381518110620004e757620004e7620009d4565b6020026020010151604001516102c0818152505080600381518110620005115762000511620009d4565b6020026020010151606001516102e08181525050806003815181106200053b576200053b620009d4565b60200260200101516080015160038111156200055b576200055b620009ea565b610300816003811115620005735762000573620009ea565b9052505b600481511115620006a1576200059c81600481518110620000e557620000e5620009d4565b80600481518110620005b257620005b2620009d4565b6020908102919091010151516001600160a01b031661032052805181906004908110620005e357620005e3620009d4565b60200260200101516020015115156103408115158152505080600481518110620006115762000611620009d4565b6020026020010151604001516103608181525050806004815181106200063b576200063b620009d4565b602002602001015160600151610380818152505080600481518110620006655762000665620009d4565b6020026020010151608001516003811115620006855762000685620009ea565b6103a08160038111156200069d576200069d620009ea565b9052505b50505050505062000a00565b80516001600160a01b03161580620006dd5750600381608001516003811115620006db57620006db620009ea565b145b80620006eb57506060810151155b80620006f957506040810151155b80620007195750701d6329f1c35ca4bfabb9f56100000000008160600151115b80620007395750701d6329f1c35ca4bfabb9f56100000000008160400151115b156200075d5760405163c82fc46560e01b815261ebf1600482015260240162000087565b50565b634e487b7160e01b600052604160045260246000fd5b60405160a081016001600160401b03811182821017156200079b576200079b62000760565b60405290565b604051601f8201601f191681016001600160401b0381118282101715620007cc57620007cc62000760565b604052919050565b80516001600160a01b0381168114620007ec57600080fd5b919050565b600082601f8301126200080357600080fd5b815160206001600160401b0382111562000821576200082162000760565b62000831818360051b01620007a1565b82815260a092830285018201928282019190878511156200085157600080fd5b8387015b85811015620008d95781818a0312156200086f5760008081fd5b6200087962000776565b6200088482620007d4565b81528582015180151581146200089a5760008081fd5b81870152604082810151908201526060808301519082015260808083015160048110620008c75760008081fd5b90820152845292840192810162000855565b5090979650505050505050565b600080600060608486031215620008fc57600080fd5b83516001600160401b03808211156200091457600080fd5b818601915086601f8301126200092957600080fd5b8151818111156200093e576200093e62000760565b602062000954601f8301601f19168201620007a1565b82815289828487010111156200096957600080fd5b60005b83811015620009895785810183015182820184015282016200096c565b506000928101820192909252870151909550915080821115620009ab57600080fd5b50620009ba86828701620007f1565b925050620009cb60408501620007d4565b90509250925092565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052602160045260246000fd5b60805160a05160c05160e05161010051610120516101405161016051610180516101a0516101c0516101e05161020051610220516102405161026051610280516102a0516102c0516102e05161030051610320516103405161036051610380516103a05161296f62000db0600039600081816106f5015281816112740152818161137901528181611479015281816120ed01526121ec0152600081816106cf015281816113530152818161145301526121c60152600081816106a90152818161132d0152818161142d01526121a00152600081816106810152818161130501528181611405015261217801526000818161064501528181611233015281816112c9015281816113c9015281816120ac015261213c0152600081816105e701528181610ff9015281816110fe015281816111fe01528181611f3b015261203a0152600081816105c1015281816110d8015281816111d8015261201401526000818161059b015281816110b2015281816111b20152611fee0152600081816105730152818161108a0152818161118a0152611fc601526000818161053701528181610fb80152818161104e0152818161114e01528181611efa0152611f8a0152600081816104d901528181610d7e01528181610e8301528181610f8301528181611d890152611e880152600081816104b301528181610e5d01528181610f5d0152611e6201526000818161048d01528181610e3701528181610f370152611e3c01526000818161046501528181610e0f01528181610f0f0152611e1401526000818161042901528181610d3d01528181610dd301528181610ed301528181611d480152611dd80152600081816103cb01528181610b0301528181610c0801528181610d0801528181611bd70152611cd60152600081816103a501528181610be201528181610ce20152611cb001526000818161037f01528181610bbc01528181610cbc0152611c8a01526000818161035701528181610b9401528181610c940152611c6201526000818161031b01528181610ac201528181610b5801528181610c5801528181611b960152611c260152600081816102bd0152818161098701528181610a8e0152611b240152600081816102970152818161096101528181610a680152611afe0152600081816102710152818161093b01528181610a420152611ad80152600081816102490152818161091301528181610a1a0152611ab001526000818161020d015281816108d7015281816109de0152611a7401526000818161075b0152610820015261296f6000f3fe608060405234801561001057600080fd5b506004361061007d5760003560e01c8063d643a8cf1161005b578063d643a8cf146100c7578063dc45951214610119578063e6aa216c1461017d578063f3190c891461018557600080fd5b80638e7bfbc01461008257806394f253ef1461009d578063abd5f95d146100b2575b600080fd5b61008a61018d565b6040519081526020015b60405180910390f35b6100a56101a4565b60405161009491906124f0565b6100ba610749565b60405161009491906125ae565b6100cf6108ae565b604080519a8b5260208b0199909952978901969096526060880194909452608087019290925260a086015260c085015260e084015261010083015261012082015261014001610094565b6101216114b8565b6040805173ffffffffffffffffffffffffffffffffffffffff909916895260208901979097529415159587019590955260608601929092526080850152151560a084015260c0830191909152151560e082015261010001610094565b61008a6115ee565b61008a6115f8565b600061019761160a565b61019f6116ae565b905090565b60408051600580825260c08201909252606091816020015b6101eb6040805160a0810182526000808252602082018190529181018290526060810182905290608082015290565b8152602001906001900390816101bc5790505090506040518060a001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f0000000000000000000000000000000000000000000000000000000000000000151581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000060038111156102ed576102ed6124c1565b8152508160008151811061030357610303612649565b60200260200101819052506040518060a001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f0000000000000000000000000000000000000000000000000000000000000000151581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000060038111156103fb576103fb6124c1565b8152508160018151811061041157610411612649565b60200260200101819052506040518060a001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f0000000000000000000000000000000000000000000000000000000000000000151581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f00000000000000000000000000000000000000000000000000000000000000006003811115610509576105096124c1565b8152508160028151811061051f5761051f612649565b60200260200101819052506040518060a001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f0000000000000000000000000000000000000000000000000000000000000000151581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f00000000000000000000000000000000000000000000000000000000000000006003811115610617576106176124c1565b8152508160038151811061062d5761062d612649565b60200260200101819052506040518060a001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f0000000000000000000000000000000000000000000000000000000000000000151581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f00000000000000000000000000000000000000000000000000000000000000006003811115610725576107256124c1565b8152508160048151811061073b5761073b612649565b602002602001018190525090565b606060005b6020811080156107b457507f0000000000000000000000000000000000000000000000000000000000000000816020811061078b5761078b612649565b1a60f81b7fff000000000000000000000000000000000000000000000000000000000000001615155b156107cb57806107c3816126a7565b91505061074e565b60008167ffffffffffffffff8111156107e6576107e661261a565b6040519080825280601f01601f191660200182016040528015610810576020820181803683370190505b50905060005b828110156108a7577f0000000000000000000000000000000000000000000000000000000000000000816020811061085057610850612649565b1a60f81b82828151811061086657610866612649565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508061089f816126a7565b915050610816565b5092915050565b60008080808080808080806109be6108c8601b600a6127ff565b60016040518060a001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f0000000000000000000000000000000000000000000000000000000000000000151581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000060038111156109b7576109b76124c1565b90526116ba565b9950610abe6109cf601b600a6127ff565b60006040518060a001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f0000000000000000000000000000000000000000000000000000000000000000151581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000060038111156109b7576109b76124c1565b98507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16151580610b35575060037f00000000000000000000000000000000000000000000000000000000000000006003811115610b3357610b336124c1565b145b15610d3b57610c38610b49601b600a6127ff565b60016040518060a001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f0000000000000000000000000000000000000000000000000000000000000000151581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000060038111156109b7576109b76124c1565b9750610d38610c49601b600a6127ff565b60006040518060a001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f0000000000000000000000000000000000000000000000000000000000000000151581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000060038111156109b7576109b76124c1565b96505b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16151580610db0575060037f00000000000000000000000000000000000000000000000000000000000000006003811115610dae57610dae6124c1565b145b15610fb657610eb3610dc4601b600a6127ff565b60016040518060a001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f0000000000000000000000000000000000000000000000000000000000000000151581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000060038111156109b7576109b76124c1565b9550610fb3610ec4601b600a6127ff565b60006040518060a001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f0000000000000000000000000000000000000000000000000000000000000000151581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000060038111156109b7576109b76124c1565b94505b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1615158061102b575060037f00000000000000000000000000000000000000000000000000000000000000006003811115611029576110296124c1565b145b156112315761112e61103f601b600a6127ff565b60016040518060a001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f0000000000000000000000000000000000000000000000000000000000000000151581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000060038111156109b7576109b76124c1565b935061122e61113f601b600a6127ff565b60006040518060a001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f0000000000000000000000000000000000000000000000000000000000000000151581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000060038111156109b7576109b76124c1565b92505b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff161515806112a6575060037f000000000000000000000000000000000000000000000000000000000000000060038111156112a4576112a46124c1565b145b156114ac576113a96112ba601b600a6127ff565b60016040518060a001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f0000000000000000000000000000000000000000000000000000000000000000151581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000060038111156109b7576109b76124c1565b91506114a96113ba601b600a6127ff565b60006040518060a001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f0000000000000000000000000000000000000000000000000000000000000000151581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000060038111156109b7576109b76124c1565b90505b90919293949596979899565b60008060008060008060008060006114ce611755565b919850909650905086156114f2576114e68187611902565b919650945092506115a8565b610a8c945060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015611565573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115899190612825565b5050505090506115a481600161159f9190612875565b61196c565b9350505b60005473ffffffffffffffffffffffffffffffffffffffff16610a8c88888888888480156115d357508a5b98509850985098509850985098509850509091929394959697565b600061019f61018d565b600061160261160a565b61019f611a4d565b6000806000611617611755565b9250925092508261165d576040517fc82fc46500000000000000000000000000000000000000000000000000000000815261ea6060048201526024015b60405180910390fd5b60006116698383611902565b50915050806116a8576040517fc82fc46500000000000000000000000000000000000000000000000000000000815261ea606004820152602401611654565b50505050565b600061019f6001611a55565b60006116cf8260000151836080015185612261565b905081606001518260400151826116e69190612898565b6116f091906128af565b9050816020015180156117035750600081115b1561172d5780611715601b6002612898565b61172090600a6127ff565b61172a91906128af565b90505b611739601b600a6127ff565b6117438286612898565b61174d91906128af565b949350505050565b60008060008060008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156117c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ed9190612825565b50509250925092508160001461180d575060009586955085945092505050565b6001955082945080935060008411156118fa575b60005473ffffffffffffffffffffffffffffffffffffffff16639a6fc8f561184a6001866128ea565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815269ffffffffffffffffffff909116600482015260240160a060405180830381865afa1580156118a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118cd9190612825565b5092955090935091505060008290036118e7578294508093505b811580156118f55750600081115b611821575b505050909192565b6000808080611911854261290d565b90508415806119215750610a8c81115b1561193957610a8c6001600093509350935050611965565b6119428661196c565b915061194e828661290d565b9350610a8c84111561196057610a8c93505b831091505b9250925092565b60008181805b60005473ffffffffffffffffffffffffffffffffffffffff16639a6fc8f561199b6001866128ea565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815269ffffffffffffffffffff909116600482015260240160a060405180830381865afa1580156119fa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1e9190612825565b509295509093509150508115611a32578093505b8115801590611a415750600081115b61197257505050919050565b600061019f60005b6000611b54611a66601b600a6127ff565b836040518060a001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f0000000000000000000000000000000000000000000000000000000000000000151581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000060038111156109b7576109b76124c1565b905080600003611b94576040517fc82fc46500000000000000000000000000000000000000000000000000000000815261ebf36004820152602401611654565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16158015611c0a575060037f00000000000000000000000000000000000000000000000000000000000000006003811115611c0757611c076124c1565b14155b15611c1457919050565b611d0681836040518060a001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f0000000000000000000000000000000000000000000000000000000000000000151581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000060038111156109b7576109b76124c1565b905080600003611d46576040517fc82fc46500000000000000000000000000000000000000000000000000000000815261ebf36004820152602401611654565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16158015611dbc575060037f00000000000000000000000000000000000000000000000000000000000000006003811115611db957611db96124c1565b14155b15611dc657919050565b611eb881836040518060a001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f0000000000000000000000000000000000000000000000000000000000000000151581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000060038111156109b7576109b76124c1565b905080600003611ef8576040517fc82fc46500000000000000000000000000000000000000000000000000000000815261ebf36004820152602401611654565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16158015611f6e575060037f00000000000000000000000000000000000000000000000000000000000000006003811115611f6b57611f6b6124c1565b14155b15611f7857919050565b61206a81836040518060a001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f0000000000000000000000000000000000000000000000000000000000000000151581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000060038111156109b7576109b76124c1565b9050806000036120aa576040517fc82fc46500000000000000000000000000000000000000000000000000000000815261ebf36004820152602401611654565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16158015612120575060037f0000000000000000000000000000000000000000000000000000000000000000600381111561211d5761211d6124c1565b14155b1561212a57919050565b61221c81836040518060a001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f0000000000000000000000000000000000000000000000000000000000000000151581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000060038111156109b7576109b76124c1565b90508060000361225c576040517fc82fc46500000000000000000000000000000000000000000000000000000000815261ebf36004820152602401611654565b919050565b60006001836003811115612277576122776124c1565b148061229457506002836003811115612292576122926124c1565b145b156122a9576122a284612309565b9050612302565b60008360038111156122bd576122bd6124c1565b036122cc576122a284836123a0565b6040517fc82fc46500000000000000000000000000000000000000000000000000000000815261ebf26004820152602401611654565b9392505050565b60008173ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa925050508015612390575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261238d91810190612825565b60015b1561225c57509195945050505050565b60008115612439578273ffffffffffffffffffffffffffffffffffffffff16638e7bfbc06040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561242d575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261242a91810190612920565b60015b156124bb5790506124bb565b8273ffffffffffffffffffffffffffffffffffffffff1663f3190c896040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561242d575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261242a91810190612920565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60208082528251828201819052600091906040908185019086840185805b838110156125a0578251805173ffffffffffffffffffffffffffffffffffffffff1686528781015115158887015286810151878701526060808201519087015260809081015190600480831061258a577f4e487b7100000000000000000000000000000000000000000000000000000000855260218152602485fd5b5086015260a0909401939186019160010161250e565b509298975050505050505050565b600060208083528351808285015260005b818110156125db578581018301518582016040015282016125bf565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036126d8576126d8612678565b5060010190565b600181815b8085111561273857817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561271e5761271e612678565b8085161561272b57918102915b93841c93908002906126e4565b509250929050565b60008261274f575060016124bb565b8161275c575060006124bb565b8160018114612772576002811461277c57612798565b60019150506124bb565b60ff84111561278d5761278d612678565b50506001821b6124bb565b5060208310610133831016604e8410600b84101617156127bb575081810a6124bb565b6127c583836126df565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156127f7576127f7612678565b029392505050565b60006123028383612740565b805169ffffffffffffffffffff8116811461225c57600080fd5b600080600080600060a0868803121561283d57600080fd5b6128468661280b565b94506020860151935060408601519250606086015191506128696080870161280b565b90509295509295909350565b69ffffffffffffffffffff8181168382160190808211156108a7576108a7612678565b80820281158282048414176124bb576124bb612678565b6000826128e5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b69ffffffffffffffffffff8281168282160390808211156108a7576108a7612678565b818103818111156124bb576124bb612678565b60006020828403121561293257600080fd5b505191905056fea264697066735822122047f35b99d4b286b6607301913e632c3955bfbfa0968103afb8f62c2b2b46725764736f6c63430008150033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061007d5760003560e01c8063d643a8cf1161005b578063d643a8cf146100c7578063dc45951214610119578063e6aa216c1461017d578063f3190c891461018557600080fd5b80638e7bfbc01461008257806394f253ef1461009d578063abd5f95d146100b2575b600080fd5b61008a61018d565b6040519081526020015b60405180910390f35b6100a56101a4565b60405161009491906124f0565b6100ba610749565b60405161009491906125ae565b6100cf6108ae565b604080519a8b5260208b0199909952978901969096526060880194909452608087019290925260a086015260c085015260e084015261010083015261012082015261014001610094565b6101216114b8565b6040805173ffffffffffffffffffffffffffffffffffffffff909916895260208901979097529415159587019590955260608601929092526080850152151560a084015260c0830191909152151560e082015261010001610094565b61008a6115ee565b61008a6115f8565b600061019761160a565b61019f6116ae565b905090565b60408051600580825260c08201909252606091816020015b6101eb6040805160a0810182526000808252602082018190529181018290526060810182905290608082015290565b8152602001906001900390816101bc5790505090506040518060a001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f0000000000000000000000000000000000000000000000000000000000000000151581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000060038111156102ed576102ed6124c1565b8152508160008151811061030357610303612649565b60200260200101819052506040518060a001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f0000000000000000000000000000000000000000000000000000000000000000151581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000060038111156103fb576103fb6124c1565b8152508160018151811061041157610411612649565b60200260200101819052506040518060a001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f0000000000000000000000000000000000000000000000000000000000000000151581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f00000000000000000000000000000000000000000000000000000000000000006003811115610509576105096124c1565b8152508160028151811061051f5761051f612649565b60200260200101819052506040518060a001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f0000000000000000000000000000000000000000000000000000000000000000151581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f00000000000000000000000000000000000000000000000000000000000000006003811115610617576106176124c1565b8152508160038151811061062d5761062d612649565b60200260200101819052506040518060a001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f0000000000000000000000000000000000000000000000000000000000000000151581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f00000000000000000000000000000000000000000000000000000000000000006003811115610725576107256124c1565b8152508160048151811061073b5761073b612649565b602002602001018190525090565b606060005b6020811080156107b457507f0000000000000000000000000000000000000000000000000000000000000000816020811061078b5761078b612649565b1a60f81b7fff000000000000000000000000000000000000000000000000000000000000001615155b156107cb57806107c3816126a7565b91505061074e565b60008167ffffffffffffffff8111156107e6576107e661261a565b6040519080825280601f01601f191660200182016040528015610810576020820181803683370190505b50905060005b828110156108a7577f0000000000000000000000000000000000000000000000000000000000000000816020811061085057610850612649565b1a60f81b82828151811061086657610866612649565b60200101907effffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff1916908160001a9053508061089f816126a7565b915050610816565b5092915050565b60008080808080808080806109be6108c8601b600a6127ff565b60016040518060a001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f0000000000000000000000000000000000000000000000000000000000000000151581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000060038111156109b7576109b76124c1565b90526116ba565b9950610abe6109cf601b600a6127ff565b60006040518060a001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f0000000000000000000000000000000000000000000000000000000000000000151581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000060038111156109b7576109b76124c1565b98507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16151580610b35575060037f00000000000000000000000000000000000000000000000000000000000000006003811115610b3357610b336124c1565b145b15610d3b57610c38610b49601b600a6127ff565b60016040518060a001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f0000000000000000000000000000000000000000000000000000000000000000151581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000060038111156109b7576109b76124c1565b9750610d38610c49601b600a6127ff565b60006040518060a001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f0000000000000000000000000000000000000000000000000000000000000000151581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000060038111156109b7576109b76124c1565b96505b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16151580610db0575060037f00000000000000000000000000000000000000000000000000000000000000006003811115610dae57610dae6124c1565b145b15610fb657610eb3610dc4601b600a6127ff565b60016040518060a001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f0000000000000000000000000000000000000000000000000000000000000000151581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000060038111156109b7576109b76124c1565b9550610fb3610ec4601b600a6127ff565b60006040518060a001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f0000000000000000000000000000000000000000000000000000000000000000151581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000060038111156109b7576109b76124c1565b94505b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1615158061102b575060037f00000000000000000000000000000000000000000000000000000000000000006003811115611029576110296124c1565b145b156112315761112e61103f601b600a6127ff565b60016040518060a001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f0000000000000000000000000000000000000000000000000000000000000000151581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000060038111156109b7576109b76124c1565b935061122e61113f601b600a6127ff565b60006040518060a001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f0000000000000000000000000000000000000000000000000000000000000000151581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000060038111156109b7576109b76124c1565b92505b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff161515806112a6575060037f000000000000000000000000000000000000000000000000000000000000000060038111156112a4576112a46124c1565b145b156114ac576113a96112ba601b600a6127ff565b60016040518060a001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f0000000000000000000000000000000000000000000000000000000000000000151581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000060038111156109b7576109b76124c1565b91506114a96113ba601b600a6127ff565b60006040518060a001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f0000000000000000000000000000000000000000000000000000000000000000151581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000060038111156109b7576109b76124c1565b90505b90919293949596979899565b60008060008060008060008060006114ce611755565b919850909650905086156114f2576114e68187611902565b919650945092506115a8565b610a8c945060008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa158015611565573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115899190612825565b5050505090506115a481600161159f9190612875565b61196c565b9350505b60005473ffffffffffffffffffffffffffffffffffffffff16610a8c88888888888480156115d357508a5b98509850985098509850985098509850509091929394959697565b600061019f61018d565b600061160261160a565b61019f611a4d565b6000806000611617611755565b9250925092508261165d576040517fc82fc46500000000000000000000000000000000000000000000000000000000815261ea6060048201526024015b60405180910390fd5b60006116698383611902565b50915050806116a8576040517fc82fc46500000000000000000000000000000000000000000000000000000000815261ea606004820152602401611654565b50505050565b600061019f6001611a55565b60006116cf8260000151836080015185612261565b905081606001518260400151826116e69190612898565b6116f091906128af565b9050816020015180156117035750600081115b1561172d5780611715601b6002612898565b61172090600a6127ff565b61172a91906128af565b90505b611739601b600a6127ff565b6117438286612898565b61174d91906128af565b949350505050565b60008060008060008060008054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa1580156117c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ed9190612825565b50509250925092508160001461180d575060009586955085945092505050565b6001955082945080935060008411156118fa575b60005473ffffffffffffffffffffffffffffffffffffffff16639a6fc8f561184a6001866128ea565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815269ffffffffffffffffffff909116600482015260240160a060405180830381865afa1580156118a9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118cd9190612825565b5092955090935091505060008290036118e7578294508093505b811580156118f55750600081115b611821575b505050909192565b6000808080611911854261290d565b90508415806119215750610a8c81115b1561193957610a8c6001600093509350935050611965565b6119428661196c565b915061194e828661290d565b9350610a8c84111561196057610a8c93505b831091505b9250925092565b60008181805b60005473ffffffffffffffffffffffffffffffffffffffff16639a6fc8f561199b6001866128ea565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b16815269ffffffffffffffffffff909116600482015260240160a060405180830381865afa1580156119fa573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a1e9190612825565b509295509093509150508115611a32578093505b8115801590611a415750600081115b61197257505050919050565b600061019f60005b6000611b54611a66601b600a6127ff565b836040518060a001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f0000000000000000000000000000000000000000000000000000000000000000151581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000060038111156109b7576109b76124c1565b905080600003611b94576040517fc82fc46500000000000000000000000000000000000000000000000000000000815261ebf36004820152602401611654565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16158015611c0a575060037f00000000000000000000000000000000000000000000000000000000000000006003811115611c0757611c076124c1565b14155b15611c1457919050565b611d0681836040518060a001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f0000000000000000000000000000000000000000000000000000000000000000151581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000060038111156109b7576109b76124c1565b905080600003611d46576040517fc82fc46500000000000000000000000000000000000000000000000000000000815261ebf36004820152602401611654565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16158015611dbc575060037f00000000000000000000000000000000000000000000000000000000000000006003811115611db957611db96124c1565b14155b15611dc657919050565b611eb881836040518060a001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f0000000000000000000000000000000000000000000000000000000000000000151581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000060038111156109b7576109b76124c1565b905080600003611ef8576040517fc82fc46500000000000000000000000000000000000000000000000000000000815261ebf36004820152602401611654565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16158015611f6e575060037f00000000000000000000000000000000000000000000000000000000000000006003811115611f6b57611f6b6124c1565b14155b15611f7857919050565b61206a81836040518060a001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f0000000000000000000000000000000000000000000000000000000000000000151581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000060038111156109b7576109b76124c1565b9050806000036120aa576040517fc82fc46500000000000000000000000000000000000000000000000000000000815261ebf36004820152602401611654565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16158015612120575060037f0000000000000000000000000000000000000000000000000000000000000000600381111561211d5761211d6124c1565b14155b1561212a57919050565b61221c81836040518060a001604052807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1681526020017f0000000000000000000000000000000000000000000000000000000000000000151581526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000081526020017f000000000000000000000000000000000000000000000000000000000000000060038111156109b7576109b76124c1565b90508060000361225c576040517fc82fc46500000000000000000000000000000000000000000000000000000000815261ebf36004820152602401611654565b919050565b60006001836003811115612277576122776124c1565b148061229457506002836003811115612292576122926124c1565b145b156122a9576122a284612309565b9050612302565b60008360038111156122bd576122bd6124c1565b036122cc576122a284836123a0565b6040517fc82fc46500000000000000000000000000000000000000000000000000000000815261ebf26004820152602401611654565b9392505050565b60008173ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a060405180830381865afa925050508015612390575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261238d91810190612825565b60015b1561225c57509195945050505050565b60008115612439578273ffffffffffffffffffffffffffffffffffffffff16638e7bfbc06040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561242d575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261242a91810190612920565b60015b156124bb5790506124bb565b8273ffffffffffffffffffffffffffffffffffffffff1663f3190c896040518163ffffffff1660e01b8152600401602060405180830381865afa92505050801561242d575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261242a91810190612920565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b60208082528251828201819052600091906040908185019086840185805b838110156125a0578251805173ffffffffffffffffffffffffffffffffffffffff1686528781015115158887015286810151878701526060808201519087015260809081015190600480831061258a577f4e487b7100000000000000000000000000000000000000000000000000000000855260218152602485fd5b5086015260a0909401939186019160010161250e565b509298975050505050505050565b600060208083528351808285015260005b818110156125db578581018301518582016040015282016125bf565b5060006040828601015260407fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f8301168501019250505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036126d8576126d8612678565b5060010190565b600181815b8085111561273857817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0482111561271e5761271e612678565b8085161561272b57918102915b93841c93908002906126e4565b509250929050565b60008261274f575060016124bb565b8161275c575060006124bb565b8160018114612772576002811461277c57612798565b60019150506124bb565b60ff84111561278d5761278d612678565b50506001821b6124bb565b5060208310610133831016604e8410600b84101617156127bb575081810a6124bb565b6127c583836126df565b807fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211156127f7576127f7612678565b029392505050565b60006123028383612740565b805169ffffffffffffffffffff8116811461225c57600080fd5b600080600080600060a0868803121561283d57600080fd5b6128468661280b565b94506020860151935060408601519250606086015191506128696080870161280b565b90509295509295909350565b69ffffffffffffffffffff8181168382160190808211156108a7576108a7612678565b80820281158282048414176124bb576124bb612678565b6000826128e5577f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b500490565b69ffffffffffffffffffff8281168282160390808211156108a7576108a7612678565b818103818111156124bb576124bb612678565b60006020828403121561293257600080fd5b505191905056fea264697066735822122047f35b99d4b286b6607301913e632c3955bfbfa0968103afb8f62c2b2b46725764736f6c63430008150033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "getExchangeRate()": {
        "details": "Deprecated. Use `getExchangeRateOperate()` and `getExchangeRateLiquidate()` instead. Only implemented for      backwards compatibility."
      },
      "getHopExchangeRates()": {
        "returns": {
          "rateSource1Liquidate_": "The exchange rate for hop 1 during liquidate.",
          "rateSource1Operate_": "The exchange rate for hop 1 during operate.",
          "rateSource2Liquidate_": "The exchange rate for hop 2 during liquidate.",
          "rateSource2Operate_": "The exchange rate for hop 2 during operate.",
          "rateSource3Liquidate_": "The exchange rate for hop 3 during liquidate.",
          "rateSource3Operate_": "The exchange rate for hop 3 during operate.",
          "rateSource4Liquidate_": "The exchange rate for hop 4 during liquidate.",
          "rateSource4Operate_": "The exchange rate for hop 4 during operate.",
          "rateSource5Liquidate_": "The exchange rate for hop 5 during liquidate.",
          "rateSource5Operate_": "The exchange rate for hop 5 during operate."
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "getExchangeRateLiquidate()": {
        "notice": "Get the `exchangeRate_` between the underlying asset and the peg asset in 1e27 for liquidations"
      },
      "getExchangeRateOperate()": {
        "notice": "Get the `exchangeRate_` between the underlying asset and the peg asset in 1e27 for operates"
      },
      "getHopExchangeRates()": {
        "notice": "Returns the exchange rate for each hop."
      },
      "getOracleHopSources()": {
        "notice": "Returns the configured OracleHopSources"
      },
      "infoName()": {
        "notice": "helper string to easily identify the oracle. E.g. token symbols"
      },
      "sequencerL2Data()": {
        "notice": "returns all sequencer uptime feed related data"
      }
    },
    "notice": "generic configurable Oracle for Layer 2 (with sequencer outage detection) combines up to 4 hops from sources such as  - an existing IFluidOracle (e.g. ContractRate)  - Redstone  - Chainlink",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2383,
        "contract": "contracts/oracle/oraclesL2/genericOracleL2.sol:FluidGenericOracleL2",
        "label": "_SEQUENCER_ORACLE",
        "offset": 0,
        "slot": "0",
        "type": "t_contract(IChainlinkAggregatorV3)6746"
      }
    ],
    "types": {
      "t_contract(IChainlinkAggregatorV3)6746": {
        "encoding": "inplace",
        "label": "contract IChainlinkAggregatorV3",
        "numberOfBytes": "20"
      }
    }
  }
}