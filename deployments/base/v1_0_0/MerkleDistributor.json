{
  "address": "0xC6083bA4082Ad703082dB272049e005424773BFe",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "proposer_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "approver_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardToken_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidCycle",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidParams",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidProof",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MsgSenderNotRecipient",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NothingToClaim",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cycle",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "positionType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "positionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "LogClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "initiator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startCycle",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endCycle",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "registrationBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "registrationTimestamp",
          "type": "uint256"
        }
      ],
      "name": "LogDistribution",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bool",
          "name": "pullFromSender",
          "type": "bool"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blocksPerDistribution",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cyclesPerDistribution",
          "type": "uint256"
        }
      ],
      "name": "LogDistributionConfigUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "cycle",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "epoch",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "startBlock",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "endBlock",
          "type": "uint256"
        }
      ],
      "name": "LogRewardCycle",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "distributor",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isDistributor",
          "type": "bool"
        }
      ],
      "name": "LogRewardsDistributorToggled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cycle",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "contentHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "LogRootProposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cycle",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "contentHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "LogRootUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "approver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isApprover",
          "type": "bool"
        }
      ],
      "name": "LogUpdateApprover",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isProposer",
          "type": "bool"
        }
      ],
      "name": "LogUpdateProposer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "root_",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "contentHash_",
          "type": "bytes32"
        },
        {
          "internalType": "uint40",
          "name": "cycle_",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "startBlock_",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "endBlock_",
          "type": "uint40"
        }
      ],
      "name": "approveRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "blocksPerDistribution",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "cumulativeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "positionType",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "positionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "cycle",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "merkleProof",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            }
          ],
          "internalType": "struct FluidMerkleDistributor.Claim[]",
          "name": "claims_",
          "type": "tuple[]"
        }
      ],
      "name": "bulkClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cumulativeAmount_",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "positionType_",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "positionId_",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "cycle_",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "merkleProof_",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes",
          "name": "metadata_",
          "type": "bytes"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentMerkleCycle",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "merkleContentHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint40",
              "name": "cycle",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "timestamp",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "publishBlock",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "startBlock",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "endBlock",
              "type": "uint40"
            }
          ],
          "internalType": "struct Structs.MerkleCycle",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cyclesPerDistribution",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "startBlock_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "blocksPerDistribution_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "cyclesPerDistribution_",
          "type": "uint256"
        }
      ],
      "name": "distributeRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount_",
          "type": "uint256"
        }
      ],
      "name": "distributeRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cumulativeAmount_",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "positionType_",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "positionId_",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "cycle_",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "metadata_",
          "type": "bytes"
        }
      ],
      "name": "encodeClaim",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "encoded_",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "hash_",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "cycle_",
          "type": "uint256"
        }
      ],
      "name": "getCycleReward",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint40",
              "name": "cycle",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "startBlock",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "endBlock",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "epoch",
              "type": "uint40"
            }
          ],
          "internalType": "struct Structs.Reward",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCycleRewards",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint40",
              "name": "cycle",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "startBlock",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "endBlock",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "epoch",
              "type": "uint40"
            }
          ],
          "internalType": "struct Structs.Reward[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "epoch_",
          "type": "uint256"
        }
      ],
      "name": "getDistributionForEpoch",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint40",
              "name": "epoch",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "startCycle",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "endCycle",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "registrationBlock",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "registrationTimestamp",
              "type": "uint40"
            }
          ],
          "internalType": "struct Structs.Distribution",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDistributions",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "amount",
              "type": "uint256"
            },
            {
              "internalType": "uint40",
              "name": "epoch",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "startCycle",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "endCycle",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "registrationBlock",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "registrationTimestamp",
              "type": "uint40"
            }
          ],
          "internalType": "struct Structs.Distribution[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasPendingRoot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver_",
          "type": "address"
        }
      ],
      "name": "isApprover",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "proposer_",
          "type": "address"
        }
      ],
      "name": "isProposer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingMerkleCycle",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "merkleContentHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint40",
              "name": "cycle",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "timestamp",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "publishBlock",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "startBlock",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "endBlock",
              "type": "uint40"
            }
          ],
          "internalType": "struct Structs.MerkleCycle",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "previousMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "root_",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "contentHash_",
          "type": "bytes32"
        },
        {
          "internalType": "uint40",
          "name": "cycle_",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "startBlock_",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "endBlock_",
          "type": "uint40"
        }
      ],
      "name": "proposeRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pullFromDistributor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewardsDistributor",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets_",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas_",
          "type": "bytes[]"
        }
      ],
      "name": "spell",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "distributor_",
          "type": "address"
        }
      ],
      "name": "toggleRewardsDistributor",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalCycleRewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalDistributions",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver_",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isApprover_",
          "type": "bool"
        }
      ],
      "name": "updateApprover",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bool",
          "name": "pullFromDistributor_",
          "type": "bool"
        },
        {
          "internalType": "uint40",
          "name": "blocksPerDistribution_",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "cyclesPerDistribution_",
          "type": "uint40"
        }
      ],
      "name": "updateDistributionConfig",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "proposer_",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isProposer_",
          "type": "bool"
        }
      ],
      "name": "updateProposer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x0b7e4c624588ffaab301404f758ade194f78d164be67f89b847bde5a34ceb457",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x910E413DBF3F6276Fe8213fF656726bDc142E08E",
    "contractAddress": null,
    "transactionIndex": 122,
    "gasUsed": "3642318",
    "logsBloom": "0x
    "blockHash": "0x3f44fea9973c695a8465bd998320457928ee3ad43e32d319b686ec25b7a570f7",
    "transactionHash": "0x0b7e4c624588ffaab301404f758ade194f78d164be67f89b847bde5a34ceb457",
    "logs": [
      {
        "transactionIndex": 122,
        "blockNumber": 26945297,
        "transactionHash": "0x0b7e4c624588ffaab301404f758ade194f78d164be67f89b847bde5a34ceb457",
        "address": "0xC6083bA4082Ad703082dB272049e005424773BFe",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009800020b610194dba52cf606e8aa142f9f256166"
        ],
        "data": "0x",
        "logIndex": 337,
        "blockHash": "0x3f44fea9973c695a8465bd998320457928ee3ad43e32d319b686ec25b7a570f7"
      },
      {
        "transactionIndex": 122,
        "blockNumber": 26945297,
        "transactionHash": "0x0b7e4c624588ffaab301404f758ade194f78d164be67f89b847bde5a34ceb457",
        "address": "0xC6083bA4082Ad703082dB272049e005424773BFe",
        "topics": [
          "0x780d738f356a91be5dfe8ffb87990c655a36b3430a233c71a209eb1e9a1a1a75"
        ],
        "data": "0x000000000000000000000000910e413dbf3f6276fe8213ff656726bdc142e08e0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 338,
        "blockHash": "0x3f44fea9973c695a8465bd998320457928ee3ad43e32d319b686ec25b7a570f7"
      },
      {
        "transactionIndex": 122,
        "blockNumber": 26945297,
        "transactionHash": "0x0b7e4c624588ffaab301404f758ade194f78d164be67f89b847bde5a34ceb457",
        "address": "0xC6083bA4082Ad703082dB272049e005424773BFe",
        "topics": [
          "0xeeeb06b5605b72367788db09c5284b141487cdc2ab0925fcf8880d30ea584376"
        ],
        "data": "0x000000000000000000000000910e413dbf3f6276fe8213ff656726bdc142e08e0000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 339,
        "blockHash": "0x3f44fea9973c695a8465bd998320457928ee3ad43e32d319b686ec25b7a570f7"
      }
    ],
    "blockNumber": 26945297,
    "cumulativeGasUsed": "42743936",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Test Deployment #1",
    "0x9800020b610194dBa52CF606E8Aa142F9F256166",
    "0x910E413DBF3F6276Fe8213fF656726bDc142E08E",
    "0x910E413DBF3F6276Fe8213fF656726bDc142E08E",
    "0x833589fcd6edb6e08f4c7c32d4f71b54bda02913"
  ],
  "numDeployments": 1,
  "solcInputHash": "40a9ec2f96e1e5ebec595dd69aab66cc",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposer_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approver_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidCycle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParams\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MsgSenderNotRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"positionType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"positionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"LogClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"initiator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startCycle\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endCycle\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"registrationBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"registrationTimestamp\",\"type\":\"uint256\"}],\"name\":\"LogDistribution\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"pullFromSender\",\"type\":\"bool\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blocksPerDistribution\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cyclesPerDistribution\",\"type\":\"uint256\"}],\"name\":\"LogDistributionConfigUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"epoch\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"startBlock\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"endBlock\",\"type\":\"uint256\"}],\"name\":\"LogRewardCycle\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"distributor\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isDistributor\",\"type\":\"bool\"}],\"name\":\"LogRewardsDistributorToggled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"LogRootProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"LogRootUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isApprover\",\"type\":\"bool\"}],\"name\":\"LogUpdateApprover\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isProposer\",\"type\":\"bool\"}],\"name\":\"LogUpdateProposer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash_\",\"type\":\"bytes32\"},{\"internalType\":\"uint40\",\"name\":\"cycle_\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"startBlock_\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"endBlock_\",\"type\":\"uint40\"}],\"name\":\"approveRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"blocksPerDistribution\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cumulativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"positionType\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"positionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct FluidMerkleDistributor.Claim[]\",\"name\":\"claims_\",\"type\":\"tuple[]\"}],\"name\":\"bulkClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cumulativeAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"positionType_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"positionId_\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cycle_\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof_\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"metadata_\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentMerkleCycle\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"merkleContentHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint40\",\"name\":\"cycle\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"timestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"publishBlock\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"startBlock\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"endBlock\",\"type\":\"uint40\"}],\"internalType\":\"struct Structs.MerkleCycle\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cyclesPerDistribution\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"startBlock_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"blocksPerDistribution_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"cyclesPerDistribution_\",\"type\":\"uint256\"}],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount_\",\"type\":\"uint256\"}],\"name\":\"distributeRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cumulativeAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"positionType_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"positionId_\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cycle_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"metadata_\",\"type\":\"bytes\"}],\"name\":\"encodeClaim\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"encoded_\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"hash_\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"cycle_\",\"type\":\"uint256\"}],\"name\":\"getCycleReward\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"cycle\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"startBlock\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"endBlock\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"epoch\",\"type\":\"uint40\"}],\"internalType\":\"struct Structs.Reward\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCycleRewards\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"cycle\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"startBlock\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"endBlock\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"epoch\",\"type\":\"uint40\"}],\"internalType\":\"struct Structs.Reward[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"epoch_\",\"type\":\"uint256\"}],\"name\":\"getDistributionForEpoch\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"epoch\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"startCycle\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"endCycle\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"registrationBlock\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"registrationTimestamp\",\"type\":\"uint40\"}],\"internalType\":\"struct Structs.Distribution\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDistributions\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"epoch\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"startCycle\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"endCycle\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"registrationBlock\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"registrationTimestamp\",\"type\":\"uint40\"}],\"internalType\":\"struct Structs.Distribution[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasPendingRoot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver_\",\"type\":\"address\"}],\"name\":\"isApprover\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposer_\",\"type\":\"address\"}],\"name\":\"isProposer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingMerkleCycle\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"merkleContentHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint40\",\"name\":\"cycle\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"timestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"publishBlock\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"startBlock\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"endBlock\",\"type\":\"uint40\"}],\"internalType\":\"struct Structs.MerkleCycle\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash_\",\"type\":\"bytes32\"},{\"internalType\":\"uint40\",\"name\":\"cycle_\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"startBlock_\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"endBlock_\",\"type\":\"uint40\"}],\"name\":\"proposeRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pullFromDistributor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewardsDistributor\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets_\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas_\",\"type\":\"bytes[]\"}],\"name\":\"spell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"distributor_\",\"type\":\"address\"}],\"name\":\"toggleRewardsDistributor\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalCycleRewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalDistributions\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isApprover_\",\"type\":\"bool\"}],\"name\":\"updateApprover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bool\",\"name\":\"pullFromDistributor_\",\"type\":\"bool\"},{\"internalType\":\"uint40\",\"name\":\"blocksPerDistribution_\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"cyclesPerDistribution_\",\"type\":\"uint40\"}],\"name\":\"updateDistributionConfig\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposer_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isProposer_\",\"type\":\"bool\"}],\"name\":\"updateProposer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"claim(address,uint256,uint8,bytes32,uint256,bytes32[],bytes)\":{\"params\":{\"cumulativeAmount_\":\"- cumulative amount of rewards to claim\",\"cycle_\":\"- cycle of the rewards\",\"merkleProof_\":\"- merkle proof of the rewards\",\"positionId_\":\"- id of the position, fToken address for lending and vaultId for vaults\",\"positionType_\":\"- type of position, 1 for lending, 2 for vaults, 3 for smart lending, etc\",\"recipient_\":\"- address of the recipient\"}},\"distributeRewards(uint256)\":{\"params\":{\"amount_\":\"- amount of tokens to distribute rewards for\"}},\"distributeRewards(uint256,uint256,uint256,uint256)\":{\"params\":{\"amount_\":\"- amount of tokens to distribute rewards for\",\"startBlock_\":\"- start block of the distribution.\"}},\"getCycleReward(uint256)\":{\"params\":{\"cycle_\":\"- cycle of the reward\"},\"returns\":{\"_0\":\"reward_ - reward\"}},\"getCycleRewards()\":{\"returns\":{\"_0\":\"rewards_ - rewards\"}},\"getDistributionForEpoch(uint256)\":{\"params\":{\"epoch_\":\"- epoch of the distribution\"},\"returns\":{\"_0\":\"distribution_ - distribution\"}},\"getDistributions()\":{\"returns\":{\"_0\":\"distributions_ - all distributions\"}},\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"spell(address[],bytes[])\":{\"details\":\"open payload method for admin to resolve emergency cases\"},\"toggleRewardsDistributor(address)\":{\"params\":{\"distributor_\":\"- address of the rewards distributor\"}},\"totalCycleRewards()\":{\"returns\":{\"_0\":\"totalCycles_ - total number of cycles\"}},\"totalDistributions()\":{\"returns\":{\"_0\":\"totalDistributions_ - total number of distributions\"}},\"updateApprover(address,bool)\":{\"params\":{\"approver_\":\"The address to update\",\"isApprover_\":\"Whether or not the address should be an allowed approver\"}},\"updateDistributionConfig(bool,uint40,uint40)\":{\"params\":{\"blocksPerDistribution_\":\"- duration of distribution in blocks\",\"cyclesPerDistribution_\":\"- number of cycles to distribute rewards, if 0 then means paused\",\"pullFromDistributor_\":\"- whether to pull rewards from distributor or not\"}},\"updateProposer(address,bool)\":{\"params\":{\"isProposer_\":\"Whether or not the address should be an allowed proposer\",\"proposer_\":\"The address to update\"}}},\"version\":1},\"userdoc\":{\"events\":{\"LogClaimed(address,uint256,uint256,uint8,bytes32,uint256,uint256)\":{\"notice\":\"Emitted when a `user` claims `amount` via a valid merkle proof\"},\"LogDistribution(uint256,address,uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted when a new distribution is created\"},\"LogDistributionConfigUpdated(bool,uint256,uint256)\":{\"notice\":\"Emitted when the distribution configuration is updated\"},\"LogRewardCycle(uint256,uint256,uint256,uint256,uint256)\":{\"notice\":\"Emitted when a new reward cycle is created\"},\"LogRewardsDistributorToggled(address,bool)\":{\"notice\":\"Emitted when a rewards distributor is toggled\"},\"LogRootProposed(uint256,bytes32,bytes32,uint256,uint256)\":{\"notice\":\"Emitted when a new cycle root hash is proposed\"},\"LogRootUpdated(uint256,bytes32,bytes32,uint256,uint256)\":{\"notice\":\"Emitted when a new cycle root hash is approved by the owner and becomes the new active root\"},\"LogUpdateApprover(address,bool)\":{\"notice\":\"Emitted when an address is added or removed from the allowed approvers\"},\"LogUpdateProposer(address,bool)\":{\"notice\":\"Emitted when an address is added or removed from the allowed proposers\"}},\"kind\":\"user\",\"methods\":{\"approveRoot(bytes32,bytes32,uint40,uint40,uint40)\":{\"notice\":\"Approve the current pending root and content hash\"},\"blocksPerDistribution()\":{\"notice\":\"Duration of each distribution in blocks\"},\"claim(address,uint256,uint8,bytes32,uint256,bytes32[],bytes)\":{\"notice\":\"Claims rewards for a given recipient\"},\"claimed(address,bytes32)\":{\"notice\":\"total claimed amount per user address and fToken. user => positionId => claimed amount\"},\"currentMerkleCycle()\":{\"notice\":\"merkle root data related to current cycle (proposed and approved).\"},\"cyclesPerDistribution()\":{\"notice\":\"Number of cycles to distribute rewards\"},\"distributeRewards(uint256)\":{\"notice\":\"Distributes rewards for a given token\"},\"distributeRewards(uint256,uint256,uint256,uint256)\":{\"notice\":\"Distributes rewards for a given token\"},\"getCycleReward(uint256)\":{\"notice\":\"Returns the cycle reward for a given cycle\"},\"getCycleRewards()\":{\"notice\":\"Returns the cycle rewards\"},\"getDistributionForEpoch(uint256)\":{\"notice\":\"Returns the distribution for a given epoch\"},\"getDistributions()\":{\"notice\":\"Returns all distributions\"},\"hasPendingRoot()\":{\"notice\":\"checks if there is a proposed root waiting to be approved\"},\"isApprover(address)\":{\"notice\":\"checks if the `approver_` is an allowed root approver\"},\"isProposer(address)\":{\"notice\":\"checks if the `proposer_` is an allowed root proposer\"},\"pause()\":{\"notice\":\"Pause contract functionality of new roots and claiming\"},\"pendingMerkleCycle()\":{\"notice\":\"merkle root data related to pending cycle (proposed but not yet approved).\"},\"previousMerkleRoot()\":{\"notice\":\"merkle root of the previous cycle\"},\"proposeRoot(bytes32,bytes32,uint40,uint40,uint40)\":{\"notice\":\"Propose a new root and content hash, which will be stored as pending until approved\"},\"pullFromDistributor()\":{\"notice\":\"Whether to pull tokens from distributor or not\"},\"rewardsDistributor(address)\":{\"notice\":\"allow list for rewards distributors\"},\"toggleRewardsDistributor(address)\":{\"notice\":\"Toggles a rewards distributor\"},\"totalCycleRewards()\":{\"notice\":\"Returns the total number of cycles\"},\"totalDistributions()\":{\"notice\":\"Returns the total number of distributions\"},\"unpause()\":{\"notice\":\"Unpause contract functionality of new roots and claiming\"},\"updateApprover(address,bool)\":{\"notice\":\"Updates an address status as a root approver\"},\"updateDistributionConfig(bool,uint40,uint40)\":{\"notice\":\"Updates the distribution configuration\"},\"updateProposer(address,bool)\":{\"notice\":\"Updates an address status as a root proposer\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocols/lending/merkleDistributor/main.sol\":\"FluidMerkleDistributor\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"},\"contracts/libraries/errorTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nlibrary LibsErrorTypes {\\n    /***********************************|\\n    |         LiquidityCalcs            | \\n    |__________________________________*/\\n\\n    /// @notice thrown when supply or borrow exchange price is zero at calc token data (token not configured yet)\\n    uint256 internal constant LiquidityCalcs__ExchangePriceZero = 70001;\\n\\n    /// @notice thrown when rate data is set to a version that is not implemented\\n    uint256 internal constant LiquidityCalcs__UnsupportedRateVersion = 70002;\\n\\n    /// @notice thrown when the calculated borrow rate turns negative. This should never happen.\\n    uint256 internal constant LiquidityCalcs__BorrowRateNegative = 70003;\\n\\n    /***********************************|\\n    |           SafeTransfer            | \\n    |__________________________________*/\\n\\n    /// @notice thrown when safe transfer from for an ERC20 fails\\n    uint256 internal constant SafeTransfer__TransferFromFailed = 71001;\\n\\n    /// @notice thrown when safe transfer for an ERC20 fails\\n    uint256 internal constant SafeTransfer__TransferFailed = 71002;\\n\\n    /***********************************|\\n    |           SafeApprove             | \\n    |__________________________________*/\\n\\n    /// @notice thrown when safe approve from for an ERC20 fails\\n    uint256 internal constant SafeApprove__ApproveFailed = 81001;\\n}\\n\",\"keccak256\":\"0x4057f500fd44ce9e89049512d06d5f72c46f91938ed37312fb044c204451009b\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/safeTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.21;\\n\\nimport { LibsErrorTypes as ErrorTypes } from \\\"./errorTypes.sol\\\";\\n\\n/// @notice provides minimalistic methods for safe transfers, e.g. ERC20 safeTransferFrom\\nlibrary SafeTransfer {\\n    uint256 internal constant MAX_NATIVE_TRANSFER_GAS = 20000; // pass max. 20k gas for native transfers\\n\\n    error FluidSafeTransferError(uint256 errorId_);\\n\\n    /// @dev Transfer `amount_` of `token_` from `from_` to `to_`, spending the approval given by `from_` to the\\n    /// calling contract. If `token_` returns no value, non-reverting calls are assumed to be successful.\\n    /// Minimally modified from Solmate SafeTransferLib (address as input param for token, Custom Error):\\n    /// https://github.com/transmissions11/solmate/blob/50e15bb566f98b7174da9b0066126a4c3e75e0fd/src/utils/SafeTransferLib.sol#L31-L63\\n    function safeTransferFrom(address token_, address from_, address to_, uint256 amount_) internal {\\n        bool success_;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(from_, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"from_\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), and(to_, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to_\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount_) // Append the \\\"amount_\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            success_ := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token_, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        if (!success_) {\\n            revert FluidSafeTransferError(ErrorTypes.SafeTransfer__TransferFromFailed);\\n        }\\n    }\\n\\n    /// @dev Transfer `amount_` of `token_` to `to_`.\\n    /// If `token_` returns no value, non-reverting calls are assumed to be successful.\\n    /// Minimally modified from Solmate SafeTransferLib (address as input param for token, Custom Error):\\n    /// https://github.com/transmissions11/solmate/blob/50e15bb566f98b7174da9b0066126a4c3e75e0fd/src/utils/SafeTransferLib.sol#L65-L95\\n    function safeTransfer(address token_, address to_, uint256 amount_) internal {\\n        bool success_;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(to_, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to_\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount_) // Append the \\\"amount_\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            success_ := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token_, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        if (!success_) {\\n            revert FluidSafeTransferError(ErrorTypes.SafeTransfer__TransferFailed);\\n        }\\n    }\\n\\n    /// @dev Transfer `amount_` of ` native token to `to_`.\\n    /// Minimally modified from Solmate SafeTransferLib (Custom Error):\\n    /// https://github.com/transmissions11/solmate/blob/50e15bb566f98b7174da9b0066126a4c3e75e0fd/src/utils/SafeTransferLib.sol#L15-L25\\n    function safeTransferNative(address to_, uint256 amount_) internal {\\n        bool success_;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not. Pass limited gas\\n            success_ := call(MAX_NATIVE_TRANSFER_GAS, to_, amount_, 0, 0, 0, 0)\\n        }\\n\\n        if (!success_) {\\n            revert FluidSafeTransferError(ErrorTypes.SafeTransfer__TransferFailed);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7f7d3a39d984c62e41c669a3d11deb899b3512ace9313263592575bf48a6e079\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/protocols/lending/merkleDistributor/errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nabstract contract Errors {\\n    error Unauthorized();\\n    error InvalidParams();\\n\\n    // claim related errors:\\n    error InvalidCycle();\\n    error InvalidProof();\\n    error NothingToClaim();\\n    error MsgSenderNotRecipient();\\n}\\n\",\"keccak256\":\"0xe1fb6bea20d76327b9cf9f77694527a9c2ac4dbd346ba865789c21e73a779a3f\",\"license\":\"BUSL-1.1\"},\"contracts/protocols/lending/merkleDistributor/events.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nabstract contract Events {\\n    /// @notice Emitted when an address is added or removed from the allowed proposers\\n    event LogUpdateProposer(address proposer, bool isProposer);\\n\\n    /// @notice Emitted when an address is added or removed from the allowed approvers\\n    event LogUpdateApprover(address approver, bool isApprover);\\n\\n    /// @notice Emitted when a new cycle root hash is proposed\\n    event LogRootProposed(uint256 cycle, bytes32 root, bytes32 contentHash, uint256 timestamp, uint256 blockNumber);\\n\\n    /// @notice Emitted when a new cycle root hash is approved by the owner and becomes the new active root\\n    event LogRootUpdated(uint256 cycle, bytes32 root, bytes32 contentHash, uint256 timestamp, uint256 blockNumber);\\n\\n    /// @notice Emitted when a `user` claims `amount` via a valid merkle proof\\n    event LogClaimed(\\n        address user,\\n        uint256 amount,\\n        uint256 cycle,\\n        uint8 positionType,\\n        bytes32 positionId,\\n        uint256 timestamp,\\n        uint256 blockNumber\\n    );\\n\\n    /// @notice Emitted when a new reward cycle is created\\n    event LogRewardCycle(\\n        uint256 indexed cycle,\\n        uint256 indexed epoch,\\n        uint256 amount,\\n        uint256 startBlock,\\n        uint256 endBlock\\n    );\\n\\n    /// @notice Emitted when a new distribution is created\\n    event LogDistribution(\\n        uint256 indexed epoch,\\n        address indexed initiator,\\n        uint256 amount,\\n        uint256 startCycle,\\n        uint256 endCycle,\\n        uint256 registrationBlock,\\n        uint256 registrationTimestamp\\n    );\\n\\n    /// @notice Emitted when the distribution configuration is updated\\n    event LogDistributionConfigUpdated(bool pullFromSender, uint256 blocksPerDistribution, uint256 cyclesPerDistribution);\\n\\n    /// @notice Emitted when a rewards distributor is toggled\\n    event LogRewardsDistributorToggled(address distributor, bool isDistributor);\\n}\\n\",\"keccak256\":\"0x98bb2829eebf6b07b4f4c4fc16789c7c3a087e6b65d35b869a06c0c68bd77a19\",\"license\":\"BUSL-1.1\"},\"contracts/protocols/lending/merkleDistributor/main.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { MerkleProof } from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\n\\nimport { Events } from \\\"./events.sol\\\";\\nimport { Errors } from \\\"./errors.sol\\\";\\nimport { Structs } from \\\"./structs.sol\\\";\\nimport { Variables } from \\\"./variables.sol\\\";\\nimport { SafeTransfer } from \\\"../../../libraries/safeTransfer.sol\\\";\\n\\n// ---------------------------------------------------------------------------------------------\\n//\\n// @dev WARNING: DO NOT USE `multiProof` related methods of `MerkleProof`.\\n// This repo uses OpenZeppelin 4.8.2 which has a vulnerability for multi proofs. See:\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-wprv-93r4-jj2p\\n//\\n// ---------------------------------------------------------------------------------------------\\n\\nabstract contract FluidMerkleDistributorCore is Structs, Variables, Events, Errors {\\n    /// @dev validates that an address is not the zero address\\n    modifier validAddress(address value_) {\\n        if (value_ == address(0)) {\\n            revert InvalidParams();\\n        }\\n        _;\\n    }\\n}\\n\\nabstract contract FluidMerkleDistributorAdmin is FluidMerkleDistributorCore {\\n    /// @notice                  Updates an address status as a root proposer\\n    /// @param proposer_         The address to update\\n    /// @param isProposer_       Whether or not the address should be an allowed proposer\\n    function updateProposer(address proposer_, bool isProposer_) public onlyOwner validAddress(proposer_) {\\n        _proposers[proposer_] = isProposer_;\\n        emit LogUpdateProposer(proposer_, isProposer_);\\n    }\\n\\n    /// @notice                  Updates an address status as a root approver\\n    /// @param approver_         The address to update\\n    /// @param isApprover_       Whether or not the address should be an allowed approver\\n    function updateApprover(address approver_, bool isApprover_) public onlyOwner validAddress(approver_) {\\n        _approvers[approver_] = isApprover_;\\n        emit LogUpdateApprover(approver_, isApprover_);\\n    }\\n\\n    /// @notice                         Spell allows owner aka governance to do any arbitrary call on factory\\n    /// @param target_                  Address to which the call needs to be delegated\\n    /// @param data_                    Data to execute at the delegated address\\n    function spell(address target_, bytes memory data_) internal returns (bytes memory response_) {\\n        assembly {\\n            let succeeded := delegatecall(gas(), target_, add(data_, 0x20), mload(data_), 0, 0)\\n            let size := returndatasize()\\n\\n            response_ := mload(0x40)\\n            mstore(0x40, add(response_, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n            mstore(response_, size)\\n            returndatacopy(add(response_, 0x20), 0, size)\\n\\n            switch iszero(succeeded)\\n            case 1 {\\n                // throw if delegatecall failed\\n                returndatacopy(0x00, 0x00, size)\\n                revert(0x00, size)\\n            }\\n        }\\n    }\\n\\n    /// @dev open payload method for admin to resolve emergency cases\\n    function spell(address[] memory targets_, bytes[] memory calldatas_) public onlyOwner {\\n        for (uint256 i = 0; i < targets_.length; i++) {\\n            spell(targets_[i], calldatas_[i]);\\n        }\\n    }\\n\\n    /// @notice Pause contract functionality of new roots and claiming\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @notice Unpause contract functionality of new roots and claiming\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n}\\n\\nabstract contract FluidMerkleDistributorApprover is FluidMerkleDistributorCore {\\n    /// @dev Checks that the sender is an approver\\n    modifier onlyApprover() {\\n        if (!isApprover(msg.sender)) {\\n            revert Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    /// @notice checks if the `approver_` is an allowed root approver\\n    function isApprover(address approver_) public view returns (bool) {\\n        return (_approvers[approver_] || owner == approver_);\\n    }\\n\\n    /// @notice Approve the current pending root and content hash\\n    function approveRoot(\\n        bytes32 root_,\\n        bytes32 contentHash_,\\n        uint40 cycle_,\\n        uint40 startBlock_,\\n        uint40 endBlock_\\n    ) external onlyApprover {\\n        MerkleCycle memory merkleCycle_ = _pendingMerkleCycle;\\n\\n        if (\\n            root_ != merkleCycle_.merkleRoot ||\\n            contentHash_ != merkleCycle_.merkleContentHash ||\\n            cycle_ != merkleCycle_.cycle ||\\n            startBlock_ != merkleCycle_.startBlock ||\\n            endBlock_ != merkleCycle_.endBlock\\n        ) {\\n            revert InvalidParams();\\n        }\\n\\n        previousMerkleRoot = _currentMerkleCycle.merkleRoot;\\n\\n        merkleCycle_.timestamp = uint40(block.timestamp);\\n        merkleCycle_.publishBlock = uint40(block.number);\\n\\n        _currentMerkleCycle = merkleCycle_;\\n\\n        emit LogRootUpdated(cycle_, root_, contentHash_, block.timestamp, block.number);\\n    }\\n}\\n\\nabstract contract FluidMerkleDistributorProposer is FluidMerkleDistributorCore {\\n    /// @dev Checks that the sender is a proposer\\n    modifier onlyProposer() {\\n        if (!isProposer(msg.sender)) {\\n            revert Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    /// @notice checks if the `proposer_` is an allowed root proposer\\n    function isProposer(address proposer_) public view returns (bool) {\\n        return (_proposers[proposer_] || owner == proposer_);\\n    }\\n\\n    /// @notice Propose a new root and content hash, which will be stored as pending until approved\\n    function proposeRoot(\\n        bytes32 root_,\\n        bytes32 contentHash_,\\n        uint40 cycle_,\\n        uint40 startBlock_,\\n        uint40 endBlock_\\n    ) external whenNotPaused onlyProposer {\\n        if (cycle_ != _currentMerkleCycle.cycle + 1 || startBlock_ > endBlock_) {\\n            revert InvalidParams();\\n        }\\n\\n        _pendingMerkleCycle = MerkleCycle({\\n            merkleRoot: root_,\\n            merkleContentHash: contentHash_,\\n            cycle: cycle_,\\n            startBlock: startBlock_,\\n            endBlock: endBlock_,\\n            timestamp: uint40(block.timestamp),\\n            publishBlock: uint40(block.number)\\n        });\\n\\n        emit LogRootProposed(cycle_, root_, contentHash_, block.timestamp, block.number);\\n    }\\n}\\n\\nabstract contract FluidMerkleDistributorRewards is FluidMerkleDistributorCore {\\n    /// @dev Modifier to check if the sender is a rewards distributor\\n    modifier onlyRewardsDistributor() {\\n        if (!rewardsDistributor[msg.sender] && owner != msg.sender) revert Unauthorized();\\n        _;\\n    }\\n\\n    /// @notice Updates the distribution configuration\\n    /// @param pullFromDistributor_ - whether to pull rewards from distributor or not\\n    /// @param blocksPerDistribution_ - duration of distribution in blocks\\n    /// @param cyclesPerDistribution_ - number of cycles to distribute rewards, if 0 then means paused\\n    function updateDistributionConfig(\\n        bool pullFromDistributor_,\\n        uint40 blocksPerDistribution_,\\n        uint40 cyclesPerDistribution_\\n    ) external onlyOwner {\\n        if (blocksPerDistribution_ == 0 || cyclesPerDistribution_ == 0) revert InvalidParams();\\n        emit LogDistributionConfigUpdated(\\n            pullFromDistributor = pullFromDistributor_,\\n            blocksPerDistribution = blocksPerDistribution_,\\n            cyclesPerDistribution = cyclesPerDistribution_\\n        );\\n    }\\n\\n    /// @notice Toggles a rewards distributor\\n    /// @param distributor_ - address of the rewards distributor\\n    function toggleRewardsDistributor(address distributor_) external onlyOwner {\\n        if (distributor_ == address(0)) revert InvalidParams();\\n        emit LogRewardsDistributorToggled(\\n            distributor_,\\n            rewardsDistributor[distributor_] = !rewardsDistributor[distributor_]\\n        );\\n    }\\n\\n    /////// Public Functions ///////\\n\\n    /// @notice Returns the cycle rewards\\n    /// @return rewards_ - rewards\\n    function getCycleRewards() external view returns (Reward[] memory) {\\n        return rewards;\\n    }\\n\\n    /// @notice Returns the cycle reward for a given cycle\\n    /// @param cycle_ - cycle of the reward\\n    /// @return reward_ - reward\\n    function getCycleReward(uint256 cycle_) external view returns (Reward memory) {\\n        if (cycle_ > rewards.length || cycle_ == 0) revert InvalidParams();\\n        return rewards[cycle_ - 1];\\n    }\\n\\n    /// @notice Returns the total number of cycles\\n    /// @return totalCycles_ - total number of cycles\\n    function totalCycleRewards() external view returns (uint256) {\\n        return rewards.length;\\n    }\\n\\n    /// @notice Returns the total number of distributions\\n    /// @return totalDistributions_ - total number of distributions\\n    function totalDistributions() external view returns (uint256) {\\n        return distributions.length;\\n    }\\n\\n    /// @notice Returns the distribution for a given epoch\\n    /// @param epoch_ - epoch of the distribution\\n    /// @return distribution_ - distribution\\n    function getDistributionForEpoch(uint256 epoch_) external view returns (Distribution memory) {\\n        if (epoch_ > distributions.length || epoch_ == 0) revert InvalidParams();\\n        return distributions[epoch_ - 1];\\n    }\\n\\n    /// @notice Returns all distributions\\n    /// @return distributions_ - all distributions\\n    function getDistributions() external view returns (Distribution[] memory) {\\n        return distributions;\\n    }\\n\\n    ////////// Distribution Function //////////\\n\\n    /// @notice Distributes rewards for a given token\\n    /// @param amount_ - amount of tokens to distribute rewards for\\n    function distributeRewards(uint256 amount_) public onlyRewardsDistributor {\\n        if (amount_ == 0) revert InvalidParams();\\n\\n        uint256 amountPerCycle_ = amount_ / cyclesPerDistribution;\\n        uint256 blocksPerCycle_ = blocksPerDistribution / cyclesPerDistribution;\\n\\n        uint256 cyclesLength_ = rewards.length;\\n        uint256 lastCycleEndBlock_ = cyclesLength_ > 0 ? rewards[cyclesLength_ - 1].endBlock + 1 : block.number;\\n        // check if last cycle was ended before next distribution, then there will be a cap between two cycles\\n        uint256 startBlock_ = lastCycleEndBlock_ > block.number ? lastCycleEndBlock_ : block.number;\\n\\n        uint256 distributionEpoch_ = distributions.length + 1;\\n\\n        distributions.push(\\n            Distribution({\\n                amount: amount_,\\n                epoch: uint40(distributionEpoch_),\\n                startCycle: uint40(cyclesLength_ + 1),\\n                endCycle: uint40(cyclesLength_ + cyclesPerDistribution),\\n                registrationBlock: uint40(block.number),\\n                registrationTimestamp: uint40(block.timestamp)\\n            })\\n        );\\n\\n        for (uint256 i = 0; i < cyclesPerDistribution; i++) {\\n            uint256 endBlock_ = startBlock_ + blocksPerCycle_ - 1;\\n            uint256 cycle_ = cyclesLength_ + 1 + i;\\n            uint256 cycleAmount_ = amountPerCycle_;\\n            if (i == cyclesPerDistribution - 1) {\\n                cycleAmount_ = amount_ - (amountPerCycle_ * i);\\n            }\\n            rewards.push(\\n                Reward({\\n                    cycle: uint40(cycle_),\\n                    amount: cycleAmount_,\\n                    startBlock: uint40(startBlock_),\\n                    endBlock: uint40(endBlock_),\\n                    epoch: uint40(distributionEpoch_)\\n                })\\n            );\\n            emit LogRewardCycle(cycle_, distributionEpoch_, cycleAmount_, startBlock_, endBlock_);\\n            startBlock_ = endBlock_ + 1;\\n        }\\n\\n        if (pullFromDistributor) SafeERC20.safeTransferFrom(TOKEN, msg.sender, address(this), amount_);\\n\\n        emit LogDistribution(\\n            distributionEpoch_,\\n            msg.sender,\\n            amount_,\\n            cyclesLength_ + 1,\\n            cyclesLength_ + cyclesPerDistribution,\\n            block.number,\\n            block.timestamp\\n        );\\n    }\\n\\n    /// @notice Distributes rewards for a given token\\n    /// @param amount_ - amount of tokens to distribute rewards for\\n    /// @param startBlock_ - start block of the distribution.\\n    function distributeRewards(uint256 amount_, uint256 startBlock_, uint256 blocksPerDistribution_, uint256 cyclesPerDistribution_) public onlyRewardsDistributor {\\n        if (amount_ == 0) revert InvalidParams();\\n\\n        uint256 amountPerCycle_ = amount_ / cyclesPerDistribution_;\\n        uint256 blocksPerCycle_ = blocksPerDistribution_ / cyclesPerDistribution_;\\n\\n        uint256 cyclesLength_ = rewards.length;\\n        // uint256 lastCycleEndBlock_ = cyclesLength_ > 0 ? rewards[cyclesLength_ - 1].endBlock + 1 : block.number;\\n        // // check if last cycle was ended before next distribution, then there will be a cap between two cycles\\n        // uint256 startBlock_ = lastCycleEndBlock_ > block.number ? lastCycleEndBlock_ : block.number;\\n        if (startBlock_ == 0) startBlock_ = block.number;\\n        uint256 distributionEpoch_ = distributions.length + 1;\\n\\n        distributions.push(\\n            Distribution({\\n                amount: amount_,\\n                epoch: uint40(distributionEpoch_),\\n                startCycle: uint40(cyclesLength_ + 1),\\n                endCycle: uint40(cyclesLength_ + cyclesPerDistribution),\\n                registrationBlock: uint40(block.number),\\n                registrationTimestamp: uint40(block.timestamp)\\n            })\\n        );\\n\\n        for (uint256 i = 0; i < cyclesPerDistribution; i++) {\\n            uint256 endBlock_ = startBlock_ + blocksPerCycle_ - 1;\\n            uint256 cycle_ = cyclesLength_ + 1 + i;\\n            uint256 cycleAmount_ = amountPerCycle_;\\n            if (i == cyclesPerDistribution - 1) {\\n                cycleAmount_ = amount_ - (amountPerCycle_ * i);\\n            }\\n            rewards.push(\\n                Reward({\\n                    cycle: uint40(cycle_),\\n                    amount: cycleAmount_,\\n                    startBlock: uint40(startBlock_),\\n                    endBlock: uint40(endBlock_),\\n                    epoch: uint40(distributionEpoch_)\\n                })\\n            );\\n            emit LogRewardCycle(cycle_, distributionEpoch_, cycleAmount_, startBlock_, endBlock_);\\n            startBlock_ = endBlock_ + 1;\\n        }\\n\\n        if (pullFromDistributor) SafeERC20.safeTransferFrom(TOKEN, msg.sender, address(this), amount_);\\n\\n        emit LogDistribution(\\n            distributionEpoch_,\\n            msg.sender,\\n            amount_,\\n            cyclesLength_ + 1,\\n            cyclesLength_ + cyclesPerDistribution,\\n            block.number,\\n            block.timestamp\\n        );\\n    }\\n}\\n\\ncontract FluidMerkleDistributor is\\n    FluidMerkleDistributorCore,\\n    FluidMerkleDistributorAdmin,\\n    FluidMerkleDistributorApprover,\\n    FluidMerkleDistributorProposer,\\n    FluidMerkleDistributorRewards\\n{\\n    constructor(\\n        string memory name_,\\n        address owner_,\\n        address proposer_,\\n        address approver_,\\n        address rewardToken_\\n    )\\n        validAddress(owner_)\\n        validAddress(proposer_)\\n        validAddress(approver_)\\n        validAddress(rewardToken_)\\n        Variables(owner_, rewardToken_)\\n    {\\n        name = name_;\\n\\n        _proposers[proposer_] = true;\\n        emit LogUpdateProposer(proposer_, true);\\n\\n        _approvers[approver_] = true;\\n        emit LogUpdateApprover(approver_, true);\\n\\n        // blocksPerDistribution = 28 days;\\n        // cyclesPerDistribution = blocksPerDistribution / 7 days;\\n\\n        blocksPerDistribution = 32 hours;\\n        cyclesPerDistribution = blocksPerDistribution / 8 hours;\\n\\n        if (block.chainid == 1) {\\n            blocksPerDistribution = blocksPerDistribution / 12 seconds;\\n        } else if (block.chainid == 42161) {\\n            blocksPerDistribution = (blocksPerDistribution * 25) / 100; // 0.25 seconds\\n        } else if (block.chainid == 8453) {\\n            blocksPerDistribution = blocksPerDistribution / 2 seconds;\\n        } else {\\n            revert(\\\"Unsupported chain\\\");\\n        }\\n    }\\n\\n    /// @notice checks if there is a proposed root waiting to be approved\\n    function hasPendingRoot() external view returns (bool) {\\n        return _pendingMerkleCycle.cycle == _currentMerkleCycle.cycle + 1;\\n    }\\n\\n    /// @notice merkle root data related to current cycle (proposed and approved).\\n    function currentMerkleCycle() public view returns (MerkleCycle memory) {\\n        return _currentMerkleCycle;\\n    }\\n\\n    /// @notice merkle root data related to pending cycle (proposed but not yet approved).\\n    function pendingMerkleCycle() public view returns (MerkleCycle memory) {\\n        return _pendingMerkleCycle;\\n    }\\n\\n    function encodeClaim(\\n        address recipient_,\\n        uint256 cumulativeAmount_,\\n        uint8 positionType_,\\n        bytes32 positionId_,\\n        uint256 cycle_,\\n        bytes memory metadata_\\n    ) public pure returns (bytes memory encoded_, bytes32 hash_) {\\n        encoded_ = abi.encode(positionType_, positionId_, recipient_, cycle_, cumulativeAmount_, metadata_);\\n        hash_ = keccak256(bytes.concat(keccak256(encoded_)));\\n    }\\n\\n    /// @notice Claims rewards for a given recipient\\n    /// @param recipient_ - address of the recipient\\n    /// @param cumulativeAmount_ - cumulative amount of rewards to claim\\n    /// @param positionType_ - type of position, 1 for lending, 2 for vaults, 3 for smart lending, etc\\n    /// @param positionId_ - id of the position, fToken address for lending and vaultId for vaults\\n    /// @param cycle_ - cycle of the rewards\\n    /// @param merkleProof_ - merkle proof of the rewards\\n    function claim(\\n        address recipient_,\\n        uint256 cumulativeAmount_,\\n        uint8 positionType_,\\n        bytes32 positionId_,\\n        uint256 cycle_,\\n        bytes32[] calldata merkleProof_,\\n        bytes memory metadata_\\n    ) public whenNotPaused {\\n        if (msg.sender != recipient_) revert MsgSenderNotRecipient();\\n        uint256 currentCycle_ = uint256(_currentMerkleCycle.cycle);\\n\\n        if (!(cycle_ == currentCycle_ || (currentCycle_ > 0 && cycle_ == currentCycle_ - 1))) {\\n            revert InvalidCycle();\\n        }\\n\\n        // Verify the merkle proof.\\n        bytes32 node_ = keccak256(\\n            bytes.concat(\\n                keccak256(abi.encode(positionType_, positionId_, recipient_, cycle_, cumulativeAmount_, metadata_))\\n            )\\n        );\\n        if (\\n            !MerkleProof.verify(\\n                merkleProof_,\\n                cycle_ == currentCycle_ ? _currentMerkleCycle.merkleRoot : previousMerkleRoot,\\n                node_\\n            )\\n        ) {\\n            revert InvalidProof();\\n        }\\n\\n        uint256 claimable_ = cumulativeAmount_ - claimed[recipient_][positionId_];\\n        if (claimable_ == 0) {\\n            revert NothingToClaim();\\n        }\\n\\n        claimed[recipient_][positionId_] = cumulativeAmount_;\\n\\n        SafeERC20.safeTransfer(TOKEN, recipient_, claimable_);\\n\\n        emit LogClaimed(recipient_, claimable_, cycle_, positionType_, positionId_, block.timestamp, block.number);\\n    }\\n\\n    struct Claim {\\n        address recipient;\\n        uint256 cumulativeAmount;\\n        uint8 positionType;\\n        bytes32 positionId;\\n        uint256 cycle;\\n        bytes32[] merkleProof;\\n        bytes metadata;\\n    }\\n\\n    function bulkClaim(Claim[] calldata claims_) external {\\n        for (uint i = 0; i < claims_.length; i++) {\\n            claim(\\n                claims_[i].recipient,\\n                claims_[i].cumulativeAmount,\\n                claims_[i].positionType,\\n                claims_[i].positionId,\\n                claims_[i].cycle,\\n                claims_[i].merkleProof,\\n                claims_[i].metadata\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7f3435e9df2f76ad0be2b6aebb86391652d7f60cb164326b645fce22d24bb23b\",\"license\":\"BUSL-1.1\"},\"contracts/protocols/lending/merkleDistributor/structs.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nabstract contract Structs {\\n    struct MerkleCycle {\\n        // slot 1\\n        bytes32 merkleRoot;\\n        // slot 2\\n        bytes32 merkleContentHash;\\n        // slot 3\\n        uint40 cycle;\\n        uint40 timestamp;\\n        uint40 publishBlock;\\n        uint40 startBlock;\\n        uint40 endBlock;\\n    }\\n\\n    struct Reward {\\n        // slot 1\\n        uint256 amount;\\n        // slot 2\\n        uint40 cycle;\\n        uint40 startBlock;\\n        uint40 endBlock;\\n        uint40 epoch;\\n    }\\n\\n    struct Distribution {\\n        // slot 1\\n        uint256 amount;\\n        // slot 2\\n        uint40 epoch;\\n        uint40 startCycle;\\n        uint40 endCycle;\\n        uint40 registrationBlock;\\n        uint40 registrationTimestamp;\\n    }\\n}\\n\",\"keccak256\":\"0x77cc7135a4c7c12d06e104dcf3f0e6e4478a2c045d1fcd12cbf913b35c5d2181\",\"license\":\"BUSL-1.1\"},\"contracts/protocols/lending/merkleDistributor/variables.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Owned } from \\\"solmate/src/auth/Owned.sol\\\";\\nimport { Pausable } from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nimport { Structs } from \\\"./structs.sol\\\";\\n\\nabstract contract Constants {\\n    IERC20 public immutable TOKEN;\\n\\n    constructor(address rewardToken_) {\\n        TOKEN = IERC20(rewardToken_);\\n    }\\n}\\n\\nabstract contract Variables is Owned, Pausable, Constants, Structs {\\n    // ------------ storage variables from inherited contracts (Owned, Pausable) come before vars here --------\\n\\n    // ----------------------- slot 0 ---------------------------\\n    // address public owner; -> from Owned\\n\\n    // bool private _paused; -> from Pausable\\n\\n    // 11 bytes empty\\n\\n    // ----------------------- slot 1 ---------------------------\\n\\n    /// @dev Name of the Merkle Distributor\\n    string public name;\\n\\n    // ----------------------- slot 2 ---------------------------\\n\\n    /// @dev allow list for allowed root proposer addresses\\n    mapping(address => bool) internal _proposers;\\n\\n    // ----------------------- slot 3 ---------------------------\\n\\n    /// @dev allow list for allowed root proposer addresses\\n    mapping(address => bool) internal _approvers;\\n\\n    // ----------------------- slot 4-6 ---------------------------\\n\\n    /// @dev merkle root data related to current cycle (proposed and approved).\\n    /// @dev timestamp & publishBlock = data from last publish.\\n    // with custom getter to return whole struct at once instead of default solidity getter splitting it into tuple\\n    MerkleCycle internal _currentMerkleCycle;\\n\\n    // ----------------------- slot 7-9 ---------------------------\\n\\n    /// @dev merkle root data related to pending cycle (proposed but not yet approved).\\n    /// @dev timestamp & publishBlock = data from last propose.\\n    // with custom getter to return whole struct at once instead of default solidity getter splitting it into tuple\\n    MerkleCycle internal _pendingMerkleCycle;\\n\\n    // ----------------------- slot 10 ---------------------------\\n\\n    /// @notice merkle root of the previous cycle\\n    bytes32 public previousMerkleRoot;\\n\\n    // ----------------------- slot 11 ---------------------------\\n\\n    /// @notice total claimed amount per user address and fToken. user => positionId => claimed amount\\n    mapping(address => mapping(bytes32 => uint256)) public claimed;\\n\\n    // ----------------------- slot 12 ---------------------------\\n\\n    /// @notice Data of cycle rewards\\n    Reward[] internal rewards;\\n\\n    // ----------------------- slot 13 ---------------------------\\n\\n    /// @notice data of distributions\\n    Distribution[] internal distributions;\\n\\n    // ----------------------- slot 14 ---------------------------\\n\\n    /// @notice allow list for rewards distributors\\n    mapping(address => bool) public rewardsDistributor;\\n\\n    // ----------------------- slot 15 ---------------------------\\n\\n    /// @notice Number of cycles to distribute rewards\\n    uint40 public cyclesPerDistribution;\\n\\n    /// @notice Duration of each distribution in blocks\\n    uint40 public blocksPerDistribution;\\n\\n    /// @notice Whether to pull tokens from distributor or not\\n    bool public pullFromDistributor;\\n\\n    constructor(address owner_, address rewardToken_) Constants(rewardToken_) Owned(owner_) {}\\n}\\n\",\"keccak256\":\"0x0b10909513edfca71c89f3d2d9e10a46c7cb2d785618b6f214a6ffa024235d65\",\"license\":\"BUSL-1.1\"},\"solmate/src/auth/Owned.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\\nabstract contract Owned {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            OWNERSHIP STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address public owner;\\n\\n    modifier onlyOwner() virtual {\\n        require(msg.sender == owner, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             OWNERSHIP LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        owner = newOwner;\\n\\n        emit OwnershipTransferred(msg.sender, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xfedb27d14c508342c33eb067c9a02eabcdb0f9dcf93b04ded1001f580d12d0ea\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620045503803806200455083398101604081905262000034916200039a565b600080546001600160a01b0319166001600160a01b03861690811782556040518692849283928592907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506000805460ff60a01b191690556001600160a01b0390811660805286925082169050620000c357604051635435b28960e11b815260040160405180910390fd5b836001600160a01b038116620000ec57604051635435b28960e11b815260040160405180910390fd5b836001600160a01b0381166200011557604051635435b28960e11b815260040160405180910390fd5b836001600160a01b0381166200013e57604051635435b28960e11b815260040160405180910390fd5b60016200014c8a8262000549565b506001600160a01b038716600081815260026020908152604091829020805460ff191660019081179091558251938452908301527f780d738f356a91be5dfe8ffb87990c655a36b3430a233c71a209eb1e9a1a1a75910160405180910390a16001600160a01b038616600081815260036020908152604091829020805460ff191660019081179091558251938452908301527feeeb06b5605b72367788db09c5284b141487cdc2ab0925fcf8880d30ea584376910160405180910390a1600f805464ffffffffff60281b19166701c2000000000000179081905562000246906170809064ffffffffff650100000000009091041662000615565b600f805464ffffffffff191664ffffffffff9290921691909117905546600103620002b457600f546200028c90600c9065010000000000900464ffffffffff1662000615565b600f60056101000a81548164ffffffffff021916908364ffffffffff16021790555062000358565b4661a4b103620002ed57600f54606490620002e19065010000000000900464ffffffffff16601962000648565b6200028c919062000615565b46612105036200031857600f546200028c9060029065010000000000900464ffffffffff1662000615565b60405162461bcd60e51b81526020600482015260116024820152702ab739bab83837b93a32b21031b430b4b760791b604482015260640160405180910390fd5b50505050505050505062000680565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200039557600080fd5b919050565b600080600080600060a08688031215620003b357600080fd5b85516001600160401b0380821115620003cb57600080fd5b818801915088601f830112620003e057600080fd5b815181811115620003f557620003f562000367565b604051601f8201601f19908116603f0116810190838211818310171562000420576200042062000367565b81604052828152602093508b848487010111156200043d57600080fd5b600091505b8282101562000461578482018401518183018501529083019062000442565b60008484830101528099505050506200047c8189016200037d565b955050506200048e604087016200037d565b92506200049e606087016200037d565b9150620004ae608087016200037d565b90509295509295909350565b600181811c90821680620004cf57607f821691505b602082108103620004f057634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200054457600081815260208120601f850160051c810160208610156200051f5750805b601f850160051c820191505b8181101562000540578281556001016200052b565b5050505b505050565b81516001600160401b0381111562000565576200056562000367565b6200057d81620005768454620004ba565b84620004f6565b602080601f831160018114620005b557600084156200059c5750858301515b600019600386901b1c1916600185901b17855562000540565b600085815260208120601f198616915b82811015620005e657888601518255948401946001909101908401620005c5565b5085821015620006055787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b600064ffffffffff808416806200063c57634e487b7160e01b600052601260045260246000fd5b92169190910492915050565b64ffffffffff8181168382160280821691908281146200067857634e487b7160e01b600052601160045260246000fd5b505092915050565b608051613e9f620006b16000396000818161058a0152818161104601528181611c7901526128330152613e9f6000f3fe608060405234801561001057600080fd5b506004361061025c5760003560e01c806370feb52a11610145578063a7e7344a116100bd578063caf3791e1161008c578063f2fde38b11610071578063f2fde38b1461075d578063f3bd53bf14610770578063fc5e231e1461079157600080fd5b8063caf3791e14610734578063dcf6de811461073d57600080fd5b8063a7e7344a14610630578063a8a9bbfd14610645578063be5013dc14610658578063c81eec661461066b57600080fd5b80638456cb59116101145780638da5cb5b116100f95780638da5cb5b146105ec5780639cfc7e831461060c5780639d01a27d1461061d57600080fd5b80638456cb59146105d15780638a1e6bba146105d957600080fd5b806370feb52a1461054c57806374ec29a01461055f57806382bc4aaf1461057257806382bfefc81461058557600080fd5b80632274c5cd116101d85780634617c06a116101a757806359974e381161018c57806359974e38146105035780635c975abb146105165780636d218e481461053957600080fd5b80634617c06a146104c057806357593651146104d357600080fd5b80632274c5cd1461036b5780632f37a7741461049d57806335c1dd99146104a55780633f4ba83a146104b857600080fd5b80630f2d940b1161022f5780631563461b116102145780631563461b1461033b578063163db71b146103505780631713e36f1461035857600080fd5b80630f2d940b146102e75780630fc1bf681461032057600080fd5b806302aa63181461026157806304585ac71461027f578063059527bf1461029f57806306fdde03146102d2575b600080fd5b610269610799565b60405161027691906132a5565b60405180910390f35b61029261028d36600461333b565b61086f565b6040516102769190613354565b6102c26102ad3660046133c7565b600e6020526000908152604090205460ff1681565b6040519015158152602001610276565b6102da610979565b6040516102769190613450565b6103126102f5366004613463565b600b60209081526000928352604080842090915290825290205481565b604051908152602001610276565b600f546102c2906a0100000000000000000000900460ff1681565b61034e61034936600461349e565b610a07565b005b600d54610312565b61034e6103663660046134d5565b610b6b565b6104346040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810191909152506040805160e0810182526007548152600854602082015260095464ffffffffff80821693830193909352650100000000008104831660608301526a01000000000000000000008104831660808301526f010000000000000000000000000000008104831660a083015274010000000000000000000000000000000000000000900490911660c082015290565b6040516102769190600060e0820190508251825260208301516020830152604083015164ffffffffff80821660408501528060608601511660608501528060808601511660808501528060a08601511660a08501528060c08601511660c0850152505092915050565b6102c26110e4565b61034e6104b336600461351c565b611110565b61034e611403565b61034e6104ce36600461351c565b61148e565b600f546104ed9065010000000000900464ffffffffff1681565b60405164ffffffffff9091168152602001610276565b61034e61051136600461333b565b6116ff565b60005474010000000000000000000000000000000000000000900460ff166102c2565b6102c26105473660046133c7565b611d16565b61034e61055a3660046133c7565b611d6a565b6102c261056d3660046133c7565b611ec8565b61034e610580366004613733565b611f19565b6105ac7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610276565b61034e611ffa565b61034e6105e736600461383f565b612083565b6000546105ac9073ffffffffffffffffffffffffffffffffffffffff1681565b600f546104ed9064ffffffffff1681565b61034e61062b36600461349e565b612220565b610638612376565b6040516102769190613881565b61034e6106533660046138ff565b612424565b61034e610666366004613955565b6125d5565b6104346040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810191909152506040805160e0810182526004548152600554602082015260065464ffffffffff80821693830193909352650100000000008104831660608301526a01000000000000000000008104831660808301526f010000000000000000000000000000008104831660a083015274010000000000000000000000000000000000000000900490911660c082015290565b610312600a5481565b61075061074b36600461333b565b6128d9565b60405161027691906139fc565b61034e61076b3660046133c7565b612a09565b61078361077e366004613a52565b612afa565b604051610276929190613acc565b600c54610312565b6060600d805480602002602001604051908101604052809291908181526020016000905b828210156108665760008481526020908190206040805160c081018252600286029092018054835260019081015464ffffffffff808216858701526501000000000082048116938501939093526a01000000000000000000008104831660608501526f0100000000000000000000000000000081048316608085015274010000000000000000000000000000000000000000900490911660a083015290835290920191016107bd565b50505050905090565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152600c548211806108a8575081155b156108df576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600c6108ec600184613b1d565b815481106108fc576108fc613b30565b60009182526020918290206040805160a0810182526002909302909101805483526001015464ffffffffff808216948401949094526501000000000081048416918301919091526a01000000000000000000008104831660608301526f010000000000000000000000000000009004909116608082015292915050565b6001805461098690613b5f565b80601f01602080910402602001604051908101604052809291908181526020018280546109b290613b5f565b80156109ff5780601f106109d4576101008083540402835291602001916109ff565b820191906000526020600020905b8154815290600101906020018083116109e257829003601f168201915b505050505081565b60005473ffffffffffffffffffffffffffffffffffffffff163314610a8d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a4544000000000000000000000000000000000000000060448201526064015b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff8116610adb576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff831660008181526003602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168615159081179091558251938452908301527feeeb06b5605b72367788db09c5284b141487cdc2ab0925fcf8880d30ea58437691015b60405180910390a1505050565b336000908152600e602052604090205460ff16158015610ba3575060005473ffffffffffffffffffffffffffffffffffffffff163314155b15610bda576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83600003610c14576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610c208286613be1565b90506000610c2e8385613be1565b600c549091506000869003610c41574395505b600d54600090610c52906001613bf5565b9050600d6040518060c001604052808a81526020018364ffffffffff168152602001846001610c819190613bf5565b64ffffffffff9081168252600f54602090920191610ca0911686613bf5565b64ffffffffff9081168252438116602080840191909152428216604093840152845460018181018755600096875282872086516002909302019182559185015191018054938501516060860151608087015160a090970151851674010000000000000000000000000000000000000000027fffffffffffffff0000000000ffffffffffffffffffffffffffffffffffffffff9786166f01000000000000000000000000000000027fffffffffffffffffffffffff0000000000ffffffffffffffffffffffffffffff9287166a010000000000000000000002929092167fffffffffffffffffffffffff00000000000000000000ffffffffffffffffffff93871665010000000000027fffffffffffffffffffffffffffffffffffffffffffff00000000000000000000909816959096169490941795909517169290921792909217929092161790555b600f5464ffffffffff168110156110275760006001610e08868b613bf5565b610e129190613b1d565b9050600082610e22866001613bf5565b610e2c9190613bf5565b600f549091508790610e479060019064ffffffffff16613c08565b64ffffffffff168403610e6b57610e5e8489613c2d565b610e68908d613b1d565b90505b6040805160a08101825282815264ffffffffff80851660208084019182528f831684860190815288841660608087019182528c861660808801908152600c8054600181018255600091909152975160029098027fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c781019890985594517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c8909701805493519251955187166f01000000000000000000000000000000027fffffffffffffffffffffffff0000000000ffffffffffffffffffffffffffffff9688166a010000000000000000000002969096167fffffffffffffffffffffffff00000000000000000000ffffffffffffffffffff93881665010000000000027fffffffffffffffffffffffffffffffffffffffffffff0000000000000000000090951698909716979097179290921716939093179190911790925582518481529182018e9052918101859052869184917f9d1578529527d7ca977e6e95da5e7302299dfa7894fea3a1992ce68741ff5a0a910160405180910390a361100f836001613bf5565b9a50505050808061101f90613c44565b915050610de9565b50600f546a0100000000000000000000900460ff161561106d5761106d7f000000000000000000000000000000000000000000000000000000000000000033308b612b7c565b33817fd3aec04e72c75d4a42792ce6fe015d1ec10b07a8a621c9df2a89bd3644cf7ca88a61109c866001613bf5565b600f546110b09064ffffffffff1688613bf5565b6040805193845260208401929092529082015243606082015242608082015260a00160405180910390a35050505050505050565b6006546000906110fc9064ffffffffff166001613c7c565b60095464ffffffffff908116911614919050565b61111933611d16565b61114f576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160e081018252600754808252600854602083015260095464ffffffffff80821694840194909452650100000000008104841660608401526a01000000000000000000008104841660808401526f010000000000000000000000000000008104841660a084015274010000000000000000000000000000000000000000900490921660c082015290861415806111ec575080602001518514155b806112095750806040015164ffffffffff168464ffffffffff1614155b8061122657508060a0015164ffffffffff168364ffffffffff1614155b8061124357508060c0015164ffffffffff168264ffffffffff1614155b1561127a576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60048054600a554264ffffffffff818116606085810182905243808416608080890182905288519097556020808901516005556040808a01516006805460a0808e015160c08f0151948c167fffffffffffffffffffffffffffffffffffffffffffff000000000000000000009093169290921765010000000000909a02999099177fffffffffffffffffffffffff00000000000000000000ffffffffffffffffffff166a01000000000000000000009096027fffffffffffffffffffffffff0000000000ffffffffffffffffffffffffffffff16959095176f01000000000000000000000000000000958a1695909502949094177fffffffffffffff0000000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000091891691909102179092558151958c16865285018d905284018b905290830193909352928101919091527fcc3c3071340d91a4fd687f9ad48d1ee5689f8083136feb3594807d0f7481f7cf910160405180910390a1505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611484576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610a84565b61148c612c5e565b565b611496612cdb565b61149f33611ec8565b6114d5576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006546114ea9064ffffffffff166001613c7c565b64ffffffffff168364ffffffffff1614158061151357508064ffffffffff168264ffffffffff16115b1561154a576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160e0810182528681526020810186905264ffffffffff8086168284018190524280831660608501819052438085166080870181905289861660a0880181905295891660c090970187905260078d905560088c905560098054740100000000000000000000000000000000000000009098027fffffffffffffff0000000000ffffffffffffffffffffffffffffffffffffffff6f010000000000000000000000000000009098027fffffffffffffffffffffffff0000000000ffffffffffffffffffffffffffffff6a0100000000000000000000909402939093167fffffffffffffffffffffffff00000000000000000000ffffffffffffffffffff650100000000009096027fffffffffffffffffffffffffffffffffffffffffffff00000000000000000000909a1690971798909817939093169490941793909317939093169390931790915591517fb38026cc978f6c2642a5108ee558571a1b01a939b056abcc065b7eabacaf2d9d926116f09287928a928a929164ffffffffff959095168552602085019390935260408401919091526060830152608082015260a00190565b60405180910390a15050505050565b336000908152600e602052604090205460ff16158015611737575060005473ffffffffffffffffffffffffffffffffffffffff163314155b1561176e576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806000036117a8576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600f546000906117bf9064ffffffffff1683613be1565b600f549091506000906117e59064ffffffffff8082169165010000000000900416613c9a565b600c5464ffffffffff9190911691506000816118015743611855565b600c61180e600184613b1d565b8154811061181e5761181e613b30565b9060005260206000209060020201600101600a9054906101000a900464ffffffffff16600161184d9190613c7c565b64ffffffffff165b905060004382116118665743611868565b815b600d5490915060009061187c906001613bf5565b9050600d6040518060c001604052808981526020018364ffffffffff1681526020018660016118ab9190613bf5565b64ffffffffff9081168252600f546020909201916118ca911688613bf5565b64ffffffffff9081168252438116602080840191909152428216604093840152845460018181018755600096875282872086516002909302019182559185015191018054938501516060860151608087015160a090970151851674010000000000000000000000000000000000000000027fffffffffffffff0000000000ffffffffffffffffffffffffffffffffffffffff9786166f01000000000000000000000000000000027fffffffffffffffffffffffff0000000000ffffffffffffffffffffffffffffff9287166a010000000000000000000002929092167fffffffffffffffffffffffff00000000000000000000ffffffffffffffffffff93871665010000000000027fffffffffffffffffffffffffffffffffffffffffffff00000000000000000000909816959096169490941795909517169290921792909217929092161790555b600f5464ffffffffff16811015611c5a5760006001611a328886613bf5565b611a3c9190613b1d565b9050600082611a4c886001613bf5565b611a569190613bf5565b600f549091508990611a719060019064ffffffffff16613c08565b64ffffffffff168403611a9557611a88848b613c2d565b611a92908c613b1d565b90505b6040805160a08101825282815264ffffffffff80851660208301908152898216838501908152878316606085019081528a841660808601908152600c8054600181018255600091909152955160029096027fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c781019690965592517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c8909501805492519151935185166f01000000000000000000000000000000027fffffffffffffffffffffffff0000000000ffffffffffffffffffffffffffffff9486166a010000000000000000000002949094167fffffffffffffffffffffffff00000000000000000000ffffffffffffffffffff92861665010000000000027fffffffffffffffffffffffffffffffffffffffffffff00000000000000000000909416969095169590951791909117169190911717905551859083907f9d1578529527d7ca977e6e95da5e7302299dfa7894fea3a1992ce68741ff5a0a90611c2f9085908b9089909283526020830191909152604082015260600190565b60405180910390a3611c42836001613bf5565b95505050508080611c5290613c44565b915050611a13565b50600f546a0100000000000000000000900460ff1615611ca057611ca07f000000000000000000000000000000000000000000000000000000000000000033308a612b7c565b33817fd3aec04e72c75d4a42792ce6fe015d1ec10b07a8a621c9df2a89bd3644cf7ca889611ccf886001613bf5565b600f54611ce39064ffffffffff168a613bf5565b6040805193845260208401929092529082015243606082015242608082015260a00160405180910390a350505050505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526003602052604081205460ff1680611d64575060005473ffffffffffffffffffffffffffffffffffffffff8381169116145b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611deb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610a84565b73ffffffffffffffffffffffffffffffffffffffff8116611e38576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff81166000818152600e6020908152604091829020805460ff8116157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090911681179091558251938452908301527f7070b1fa79059dab7359a2e5b3be557471a19c213ba384d17144bc86d1496723910160405180910390a150565b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602052604081205460ff1680611d6457505060005473ffffffffffffffffffffffffffffffffffffffff91821691161490565b60005473ffffffffffffffffffffffffffffffffffffffff163314611f9a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610a84565b60005b8251811015611ff557611fe2838281518110611fbb57611fbb613b30565b6020026020010151838381518110611fd557611fd5613b30565b6020026020010151612d60565b5080611fed81613c44565b915050611f9d565b505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461207b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610a84565b61148c612dac565b60005b81811015611ff55761220e8383838181106120a3576120a3613b30565b90506020028101906120b59190613cbe565b6120c39060208101906133c7565b8484848181106120d5576120d5613b30565b90506020028101906120e79190613cbe565b602001358585858181106120fd576120fd613b30565b905060200281019061210f9190613cbe565b612120906060810190604001613cfc565b86868681811061213257612132613b30565b90506020028101906121449190613cbe565b6060013587878781811061215a5761215a613b30565b905060200281019061216c9190613cbe565b6080013588888881811061218257612182613b30565b90506020028101906121949190613cbe565b6121a29060a0810190613d17565b8a8a8a8181106121b4576121b4613b30565b90506020028101906121c69190613cbe565b6121d49060c0810190613d7f565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506125d592505050565b8061221881613c44565b915050612086565b60005473ffffffffffffffffffffffffffffffffffffffff1633146122a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610a84565b8173ffffffffffffffffffffffffffffffffffffffff81166122ef576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff831660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168615159081179091558251938452908301527f780d738f356a91be5dfe8ffb87990c655a36b3430a233c71a209eb1e9a1a1a759101610b5e565b6060600c805480602002602001604051908101604052809291908181526020016000905b828210156108665760008481526020908190206040805160a081018252600286029092018054835260019081015464ffffffffff808216858701526501000000000082048116938501939093526a01000000000000000000008104831660608501526f0100000000000000000000000000000090049091166080830152908352909201910161239a565b60005473ffffffffffffffffffffffffffffffffffffffff1633146124a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610a84565b64ffffffffff821615806124be575064ffffffffff8116155b156124f5576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600f80547fffffffffffffffffffffffffffffffffffffffffff000000000000ffffffffff166a01000000000000000000008515159081027fffffffffffffffffffffffffffffffffffffffffffff0000000000ffffffffff16919091176501000000000064ffffffffff868116918202929092177fffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000016918516918217909355604080519283526020830193909352918101919091527f7ec0e33f381405196f961b48c778f62e8184d357d894aa02af2444db07a09fd890606001610b5e565b6125dd612cdb565b3373ffffffffffffffffffffffffffffffffffffffff89161461262c576040517fbd79de5800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60065464ffffffffff168481148061265857506000811180156126585750612655600182613b1d565b85145b61268e576040517f9b8febfe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600087878b888c876040516020016126ab96959493929190613de4565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120908301520160405160208183030381529060405280519060200120905061274e8585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505050888514905061274457600a54612748565b6004545b83612e1b565b612784576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8a166000908152600b602090815260408083208a84529091528120546127bf908b613b1d565b9050806000036127fb576040517f969bf72800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8b166000908152600b602090815260408083208b845290915290208a90556128597f00000000000000000000000000000000000000000000000000000000000000008c83612e31565b6040805173ffffffffffffffffffffffffffffffffffffffff8d1681526020810183905290810188905260ff8a166060820152608081018990524260a08201524360c08201527f309cb1c0dc6ce0f02c0c35cc1f46bbe61ec9deb311d101b87e7d25bd0b647fd79060e00160405180910390a15050505050505050505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810191909152600d54821180612919575081155b15612950576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600d61295d600184613b1d565b8154811061296d5761296d613b30565b60009182526020918290206040805160c0810182526002909302909101805483526001015464ffffffffff808216948401949094526501000000000081048416918301919091526a01000000000000000000008104831660608301526f0100000000000000000000000000000081048316608083015274010000000000000000000000000000000000000000900490911660a082015292915050565b60005473ffffffffffffffffffffffffffffffffffffffff163314612a8a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610a84565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081178255604051909133917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b60606000858589868a87604051602001612b1996959493929190613de4565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152828252805160208083019190912090840152935001604051602081830303815290604052805190602001209050965096945050505050565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052612c589085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612e87565b50505050565b612c66612f93565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b60005474010000000000000000000000000000000000000000900460ff161561148c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610a84565b6060600080835160208501865af43d6040519250601f19601f6020830101168301604052808352806000602085013e811560018103612da357816000803e816000fd5b50505092915050565b612db4612cdb565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612cb13390565b600082612e288584613017565b14949350505050565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052611ff59084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401612bd6565b6000612ee9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166130649092919063ffffffff16565b805190915015611ff55780806020019051810190612f079190613e3a565b611ff5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610a84565b60005474010000000000000000000000000000000000000000900460ff1661148c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610a84565b600081815b845181101561305c576130488286838151811061303b5761303b613b30565b602002602001015161307b565b91508061305481613c44565b91505061301c565b509392505050565b606061307384846000856130ad565b949350505050565b60008183106130975760008281526020849052604090206130a6565b60008381526020839052604090205b9392505050565b60608247101561313f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610a84565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516131689190613e57565b60006040518083038185875af1925050503d80600081146131a5576040519150601f19603f3d011682016040523d82523d6000602084013e6131aa565b606091505b50915091506131bb878383876131c6565b979650505050505050565b6060831561325c5782516000036132555773ffffffffffffffffffffffffffffffffffffffff85163b613255576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a84565b5081613073565b61307383838151156132715781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a849190613450565b6020808252825182820181905260009190848201906040850190845b8181101561332f5761331c83855180518252602081015164ffffffffff80821660208501528060408401511660408501528060608401511660608501528060808401511660808501528060a08401511660a085015250505050565b9284019260c092909201916001016132c1565b50909695505050505050565b60006020828403121561334d57600080fd5b5035919050565b60a08101611d64828480518252602081015164ffffffffff808216602085015280604084015116604085015280606084015116606085015280608084015116608085015250505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146133c257600080fd5b919050565b6000602082840312156133d957600080fd5b6130a68261339e565b60005b838110156133fd5781810151838201526020016133e5565b50506000910152565b6000815180845261341e8160208601602086016133e2565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006130a66020830184613406565b6000806040838503121561347657600080fd5b61347f8361339e565b946020939093013593505050565b801515811461349b57600080fd5b50565b600080604083850312156134b157600080fd5b6134ba8361339e565b915060208301356134ca8161348d565b809150509250929050565b600080600080608085870312156134eb57600080fd5b5050823594602084013594506040840135936060013592509050565b803564ffffffffff811681146133c257600080fd5b600080600080600060a0868803121561353457600080fd5b853594506020860135935061354b60408701613507565b925061355960608701613507565b915061356760808701613507565b90509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156135e9576135e9613573565b604052919050565b600067ffffffffffffffff82111561360b5761360b613573565b5060051b60200190565b600082601f83011261362657600080fd5b813567ffffffffffffffff81111561364057613640613573565b61367160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016135a2565b81815284602083860101111561368657600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f8301126136b457600080fd5b813560206136c96136c4836135f1565b6135a2565b82815260059290921b840181019181810190868411156136e857600080fd5b8286015b8481101561372857803567ffffffffffffffff81111561370c5760008081fd5b61371a8986838b0101613615565b8452509183019183016136ec565b509695505050505050565b6000806040838503121561374657600080fd5b823567ffffffffffffffff8082111561375e57600080fd5b818501915085601f83011261377257600080fd5b813560206137826136c4836135f1565b82815260059290921b840181019181810190898411156137a157600080fd5b948201945b838610156137c6576137b78661339e565b825294820194908201906137a6565b965050860135925050808211156137dc57600080fd5b506137e9858286016136a3565b9150509250929050565b60008083601f84011261380557600080fd5b50813567ffffffffffffffff81111561381d57600080fd5b6020830191508360208260051b850101111561383857600080fd5b9250929050565b6000806020838503121561385257600080fd5b823567ffffffffffffffff81111561386957600080fd5b613875858286016137f3565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b8181101561332f576138ec83855180518252602081015164ffffffffff808216602085015280604084015116604085015280606084015116606085015280608084015116608085015250505050565b9284019260a0929092019160010161389d565b60008060006060848603121561391457600080fd5b833561391f8161348d565b925061392d60208501613507565b915061393b60408501613507565b90509250925092565b803560ff811681146133c257600080fd5b60008060008060008060008060e0898b03121561397157600080fd5b61397a8961339e565b97506020890135965061398f60408a01613944565b9550606089013594506080890135935060a089013567ffffffffffffffff808211156139ba57600080fd5b6139c68c838d016137f3565b909550935060c08b01359150808211156139df57600080fd5b506139ec8b828c01613615565b9150509295985092959890939650565b60c08101611d64828480518252602081015164ffffffffff80821660208501528060408401511660408501528060608401511660608501528060808401511660808501528060a08401511660a085015250505050565b60008060008060008060c08789031215613a6b57600080fd5b613a748761339e565b955060208701359450613a8960408801613944565b9350606087013592506080870135915060a087013567ffffffffffffffff811115613ab357600080fd5b613abf89828a01613615565b9150509295509295509295565b604081526000613adf6040830185613406565b90508260208301529392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81810381811115611d6457611d64613aee565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600181811c90821680613b7357607f821691505b602082108103613bac577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082613bf057613bf0613bb2565b500490565b80820180821115611d6457611d64613aee565b64ffffffffff828116828216039080821115613c2657613c26613aee565b5092915050565b8082028115828204841417611d6457611d64613aee565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613c7557613c75613aee565b5060010190565b64ffffffffff818116838216019080821115613c2657613c26613aee565b600064ffffffffff80841680613cb257613cb2613bb2565b92169190910492915050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff21833603018112613cf257600080fd5b9190910192915050565b600060208284031215613d0e57600080fd5b6130a682613944565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112613d4c57600080fd5b83018035915067ffffffffffffffff821115613d6757600080fd5b6020019150600581901b360382131561383857600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112613db457600080fd5b83018035915067ffffffffffffffff821115613dcf57600080fd5b60200191503681900382131561383857600080fd5b60ff8716815285602082015273ffffffffffffffffffffffffffffffffffffffff8516604082015283606082015282608082015260c060a08201526000613e2e60c0830184613406565b98975050505050505050565b600060208284031215613e4c57600080fd5b81516130a68161348d565b60008251613cf28184602087016133e256fea2646970667358221220d5e49ab6fa2fad6aa23e5683e9e0d3a5c97b41f126b72f84e26929bbc958a38164736f6c63430008150033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b506004361061025c5760003560e01c806370feb52a11610145578063a7e7344a116100bd578063caf3791e1161008c578063f2fde38b11610071578063f2fde38b1461075d578063f3bd53bf14610770578063fc5e231e1461079157600080fd5b8063caf3791e14610734578063dcf6de811461073d57600080fd5b8063a7e7344a14610630578063a8a9bbfd14610645578063be5013dc14610658578063c81eec661461066b57600080fd5b80638456cb59116101145780638da5cb5b116100f95780638da5cb5b146105ec5780639cfc7e831461060c5780639d01a27d1461061d57600080fd5b80638456cb59146105d15780638a1e6bba146105d957600080fd5b806370feb52a1461054c57806374ec29a01461055f57806382bc4aaf1461057257806382bfefc81461058557600080fd5b80632274c5cd116101d85780634617c06a116101a757806359974e381161018c57806359974e38146105035780635c975abb146105165780636d218e481461053957600080fd5b80634617c06a146104c057806357593651146104d357600080fd5b80632274c5cd1461036b5780632f37a7741461049d57806335c1dd99146104a55780633f4ba83a146104b857600080fd5b80630f2d940b1161022f5780631563461b116102145780631563461b1461033b578063163db71b146103505780631713e36f1461035857600080fd5b80630f2d940b146102e75780630fc1bf681461032057600080fd5b806302aa63181461026157806304585ac71461027f578063059527bf1461029f57806306fdde03146102d2575b600080fd5b610269610799565b60405161027691906132a5565b60405180910390f35b61029261028d36600461333b565b61086f565b6040516102769190613354565b6102c26102ad3660046133c7565b600e6020526000908152604090205460ff1681565b6040519015158152602001610276565b6102da610979565b6040516102769190613450565b6103126102f5366004613463565b600b60209081526000928352604080842090915290825290205481565b604051908152602001610276565b600f546102c2906a0100000000000000000000900460ff1681565b61034e61034936600461349e565b610a07565b005b600d54610312565b61034e6103663660046134d5565b610b6b565b6104346040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810191909152506040805160e0810182526007548152600854602082015260095464ffffffffff80821693830193909352650100000000008104831660608301526a01000000000000000000008104831660808301526f010000000000000000000000000000008104831660a083015274010000000000000000000000000000000000000000900490911660c082015290565b6040516102769190600060e0820190508251825260208301516020830152604083015164ffffffffff80821660408501528060608601511660608501528060808601511660808501528060a08601511660a08501528060c08601511660c0850152505092915050565b6102c26110e4565b61034e6104b336600461351c565b611110565b61034e611403565b61034e6104ce36600461351c565b61148e565b600f546104ed9065010000000000900464ffffffffff1681565b60405164ffffffffff9091168152602001610276565b61034e61051136600461333b565b6116ff565b60005474010000000000000000000000000000000000000000900460ff166102c2565b6102c26105473660046133c7565b611d16565b61034e61055a3660046133c7565b611d6a565b6102c261056d3660046133c7565b611ec8565b61034e610580366004613733565b611f19565b6105ac7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610276565b61034e611ffa565b61034e6105e736600461383f565b612083565b6000546105ac9073ffffffffffffffffffffffffffffffffffffffff1681565b600f546104ed9064ffffffffff1681565b61034e61062b36600461349e565b612220565b610638612376565b6040516102769190613881565b61034e6106533660046138ff565b612424565b61034e610666366004613955565b6125d5565b6104346040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810191909152506040805160e0810182526004548152600554602082015260065464ffffffffff80821693830193909352650100000000008104831660608301526a01000000000000000000008104831660808301526f010000000000000000000000000000008104831660a083015274010000000000000000000000000000000000000000900490911660c082015290565b610312600a5481565b61075061074b36600461333b565b6128d9565b60405161027691906139fc565b61034e61076b3660046133c7565b612a09565b61078361077e366004613a52565b612afa565b604051610276929190613acc565b600c54610312565b6060600d805480602002602001604051908101604052809291908181526020016000905b828210156108665760008481526020908190206040805160c081018252600286029092018054835260019081015464ffffffffff808216858701526501000000000082048116938501939093526a01000000000000000000008104831660608501526f0100000000000000000000000000000081048316608085015274010000000000000000000000000000000000000000900490911660a083015290835290920191016107bd565b50505050905090565b6040805160a081018252600080825260208201819052918101829052606081018290526080810191909152600c548211806108a8575081155b156108df576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600c6108ec600184613b1d565b815481106108fc576108fc613b30565b60009182526020918290206040805160a0810182526002909302909101805483526001015464ffffffffff808216948401949094526501000000000081048416918301919091526a01000000000000000000008104831660608301526f010000000000000000000000000000009004909116608082015292915050565b6001805461098690613b5f565b80601f01602080910402602001604051908101604052809291908181526020018280546109b290613b5f565b80156109ff5780601f106109d4576101008083540402835291602001916109ff565b820191906000526020600020905b8154815290600101906020018083116109e257829003601f168201915b505050505081565b60005473ffffffffffffffffffffffffffffffffffffffff163314610a8d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a4544000000000000000000000000000000000000000060448201526064015b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff8116610adb576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff831660008181526003602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168615159081179091558251938452908301527feeeb06b5605b72367788db09c5284b141487cdc2ab0925fcf8880d30ea58437691015b60405180910390a1505050565b336000908152600e602052604090205460ff16158015610ba3575060005473ffffffffffffffffffffffffffffffffffffffff163314155b15610bda576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b83600003610c14576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6000610c208286613be1565b90506000610c2e8385613be1565b600c549091506000869003610c41574395505b600d54600090610c52906001613bf5565b9050600d6040518060c001604052808a81526020018364ffffffffff168152602001846001610c819190613bf5565b64ffffffffff9081168252600f54602090920191610ca0911686613bf5565b64ffffffffff9081168252438116602080840191909152428216604093840152845460018181018755600096875282872086516002909302019182559185015191018054938501516060860151608087015160a090970151851674010000000000000000000000000000000000000000027fffffffffffffff0000000000ffffffffffffffffffffffffffffffffffffffff9786166f01000000000000000000000000000000027fffffffffffffffffffffffff0000000000ffffffffffffffffffffffffffffff9287166a010000000000000000000002929092167fffffffffffffffffffffffff00000000000000000000ffffffffffffffffffff93871665010000000000027fffffffffffffffffffffffffffffffffffffffffffff00000000000000000000909816959096169490941795909517169290921792909217929092161790555b600f5464ffffffffff168110156110275760006001610e08868b613bf5565b610e129190613b1d565b9050600082610e22866001613bf5565b610e2c9190613bf5565b600f549091508790610e479060019064ffffffffff16613c08565b64ffffffffff168403610e6b57610e5e8489613c2d565b610e68908d613b1d565b90505b6040805160a08101825282815264ffffffffff80851660208084019182528f831684860190815288841660608087019182528c861660808801908152600c8054600181018255600091909152975160029098027fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c781019890985594517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c8909701805493519251955187166f01000000000000000000000000000000027fffffffffffffffffffffffff0000000000ffffffffffffffffffffffffffffff9688166a010000000000000000000002969096167fffffffffffffffffffffffff00000000000000000000ffffffffffffffffffff93881665010000000000027fffffffffffffffffffffffffffffffffffffffffffff0000000000000000000090951698909716979097179290921716939093179190911790925582518481529182018e9052918101859052869184917f9d1578529527d7ca977e6e95da5e7302299dfa7894fea3a1992ce68741ff5a0a910160405180910390a361100f836001613bf5565b9a50505050808061101f90613c44565b915050610de9565b50600f546a0100000000000000000000900460ff161561106d5761106d7f000000000000000000000000000000000000000000000000000000000000000033308b612b7c565b33817fd3aec04e72c75d4a42792ce6fe015d1ec10b07a8a621c9df2a89bd3644cf7ca88a61109c866001613bf5565b600f546110b09064ffffffffff1688613bf5565b6040805193845260208401929092529082015243606082015242608082015260a00160405180910390a35050505050505050565b6006546000906110fc9064ffffffffff166001613c7c565b60095464ffffffffff908116911614919050565b61111933611d16565b61114f576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160e081018252600754808252600854602083015260095464ffffffffff80821694840194909452650100000000008104841660608401526a01000000000000000000008104841660808401526f010000000000000000000000000000008104841660a084015274010000000000000000000000000000000000000000900490921660c082015290861415806111ec575080602001518514155b806112095750806040015164ffffffffff168464ffffffffff1614155b8061122657508060a0015164ffffffffff168364ffffffffff1614155b8061124357508060c0015164ffffffffff168264ffffffffff1614155b1561127a576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60048054600a554264ffffffffff818116606085810182905243808416608080890182905288519097556020808901516005556040808a01516006805460a0808e015160c08f0151948c167fffffffffffffffffffffffffffffffffffffffffffff000000000000000000009093169290921765010000000000909a02999099177fffffffffffffffffffffffff00000000000000000000ffffffffffffffffffff166a01000000000000000000009096027fffffffffffffffffffffffff0000000000ffffffffffffffffffffffffffffff16959095176f01000000000000000000000000000000958a1695909502949094177fffffffffffffff0000000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000091891691909102179092558151958c16865285018d905284018b905290830193909352928101919091527fcc3c3071340d91a4fd687f9ad48d1ee5689f8083136feb3594807d0f7481f7cf910160405180910390a1505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611484576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610a84565b61148c612c5e565b565b611496612cdb565b61149f33611ec8565b6114d5576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6006546114ea9064ffffffffff166001613c7c565b64ffffffffff168364ffffffffff1614158061151357508064ffffffffff168264ffffffffff16115b1561154a576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160e0810182528681526020810186905264ffffffffff8086168284018190524280831660608501819052438085166080870181905289861660a0880181905295891660c090970187905260078d905560088c905560098054740100000000000000000000000000000000000000009098027fffffffffffffff0000000000ffffffffffffffffffffffffffffffffffffffff6f010000000000000000000000000000009098027fffffffffffffffffffffffff0000000000ffffffffffffffffffffffffffffff6a0100000000000000000000909402939093167fffffffffffffffffffffffff00000000000000000000ffffffffffffffffffff650100000000009096027fffffffffffffffffffffffffffffffffffffffffffff00000000000000000000909a1690971798909817939093169490941793909317939093169390931790915591517fb38026cc978f6c2642a5108ee558571a1b01a939b056abcc065b7eabacaf2d9d926116f09287928a928a929164ffffffffff959095168552602085019390935260408401919091526060830152608082015260a00190565b60405180910390a15050505050565b336000908152600e602052604090205460ff16158015611737575060005473ffffffffffffffffffffffffffffffffffffffff163314155b1561176e576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b806000036117a8576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600f546000906117bf9064ffffffffff1683613be1565b600f549091506000906117e59064ffffffffff8082169165010000000000900416613c9a565b600c5464ffffffffff9190911691506000816118015743611855565b600c61180e600184613b1d565b8154811061181e5761181e613b30565b9060005260206000209060020201600101600a9054906101000a900464ffffffffff16600161184d9190613c7c565b64ffffffffff165b905060004382116118665743611868565b815b600d5490915060009061187c906001613bf5565b9050600d6040518060c001604052808981526020018364ffffffffff1681526020018660016118ab9190613bf5565b64ffffffffff9081168252600f546020909201916118ca911688613bf5565b64ffffffffff9081168252438116602080840191909152428216604093840152845460018181018755600096875282872086516002909302019182559185015191018054938501516060860151608087015160a090970151851674010000000000000000000000000000000000000000027fffffffffffffff0000000000ffffffffffffffffffffffffffffffffffffffff9786166f01000000000000000000000000000000027fffffffffffffffffffffffff0000000000ffffffffffffffffffffffffffffff9287166a010000000000000000000002929092167fffffffffffffffffffffffff00000000000000000000ffffffffffffffffffff93871665010000000000027fffffffffffffffffffffffffffffffffffffffffffff00000000000000000000909816959096169490941795909517169290921792909217929092161790555b600f5464ffffffffff16811015611c5a5760006001611a328886613bf5565b611a3c9190613b1d565b9050600082611a4c886001613bf5565b611a569190613bf5565b600f549091508990611a719060019064ffffffffff16613c08565b64ffffffffff168403611a9557611a88848b613c2d565b611a92908c613b1d565b90505b6040805160a08101825282815264ffffffffff80851660208301908152898216838501908152878316606085019081528a841660808601908152600c8054600181018255600091909152955160029096027fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c781019690965592517fdf6966c971051c3d54ec59162606531493a51404a002842f56009d7e5cf4a8c8909501805492519151935185166f01000000000000000000000000000000027fffffffffffffffffffffffff0000000000ffffffffffffffffffffffffffffff9486166a010000000000000000000002949094167fffffffffffffffffffffffff00000000000000000000ffffffffffffffffffff92861665010000000000027fffffffffffffffffffffffffffffffffffffffffffff00000000000000000000909416969095169590951791909117169190911717905551859083907f9d1578529527d7ca977e6e95da5e7302299dfa7894fea3a1992ce68741ff5a0a90611c2f9085908b9089909283526020830191909152604082015260600190565b60405180910390a3611c42836001613bf5565b95505050508080611c5290613c44565b915050611a13565b50600f546a0100000000000000000000900460ff1615611ca057611ca07f000000000000000000000000000000000000000000000000000000000000000033308a612b7c565b33817fd3aec04e72c75d4a42792ce6fe015d1ec10b07a8a621c9df2a89bd3644cf7ca889611ccf886001613bf5565b600f54611ce39064ffffffffff168a613bf5565b6040805193845260208401929092529082015243606082015242608082015260a00160405180910390a350505050505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526003602052604081205460ff1680611d64575060005473ffffffffffffffffffffffffffffffffffffffff8381169116145b92915050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611deb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610a84565b73ffffffffffffffffffffffffffffffffffffffff8116611e38576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff81166000818152600e6020908152604091829020805460ff8116157fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0090911681179091558251938452908301527f7070b1fa79059dab7359a2e5b3be557471a19c213ba384d17144bc86d1496723910160405180910390a150565b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602052604081205460ff1680611d6457505060005473ffffffffffffffffffffffffffffffffffffffff91821691161490565b60005473ffffffffffffffffffffffffffffffffffffffff163314611f9a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610a84565b60005b8251811015611ff557611fe2838281518110611fbb57611fbb613b30565b6020026020010151838381518110611fd557611fd5613b30565b6020026020010151612d60565b5080611fed81613c44565b915050611f9d565b505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461207b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610a84565b61148c612dac565b60005b81811015611ff55761220e8383838181106120a3576120a3613b30565b90506020028101906120b59190613cbe565b6120c39060208101906133c7565b8484848181106120d5576120d5613b30565b90506020028101906120e79190613cbe565b602001358585858181106120fd576120fd613b30565b905060200281019061210f9190613cbe565b612120906060810190604001613cfc565b86868681811061213257612132613b30565b90506020028101906121449190613cbe565b6060013587878781811061215a5761215a613b30565b905060200281019061216c9190613cbe565b6080013588888881811061218257612182613b30565b90506020028101906121949190613cbe565b6121a29060a0810190613d17565b8a8a8a8181106121b4576121b4613b30565b90506020028101906121c69190613cbe565b6121d49060c0810190613d7f565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506125d592505050565b8061221881613c44565b915050612086565b60005473ffffffffffffffffffffffffffffffffffffffff1633146122a1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610a84565b8173ffffffffffffffffffffffffffffffffffffffff81166122ef576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff831660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168615159081179091558251938452908301527f780d738f356a91be5dfe8ffb87990c655a36b3430a233c71a209eb1e9a1a1a759101610b5e565b6060600c805480602002602001604051908101604052809291908181526020016000905b828210156108665760008481526020908190206040805160a081018252600286029092018054835260019081015464ffffffffff808216858701526501000000000082048116938501939093526a01000000000000000000008104831660608501526f0100000000000000000000000000000090049091166080830152908352909201910161239a565b60005473ffffffffffffffffffffffffffffffffffffffff1633146124a5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610a84565b64ffffffffff821615806124be575064ffffffffff8116155b156124f5576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600f80547fffffffffffffffffffffffffffffffffffffffffff000000000000ffffffffff166a01000000000000000000008515159081027fffffffffffffffffffffffffffffffffffffffffffff0000000000ffffffffff16919091176501000000000064ffffffffff868116918202929092177fffffffffffffffffffffffffffffffffffffffffffffffffffffff000000000016918516918217909355604080519283526020830193909352918101919091527f7ec0e33f381405196f961b48c778f62e8184d357d894aa02af2444db07a09fd890606001610b5e565b6125dd612cdb565b3373ffffffffffffffffffffffffffffffffffffffff89161461262c576040517fbd79de5800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60065464ffffffffff168481148061265857506000811180156126585750612655600182613b1d565b85145b61268e576040517f9b8febfe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600087878b888c876040516020016126ab96959493929190613de4565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181528282528051602091820120908301520160405160208183030381529060405280519060200120905061274e8585808060200260200160405190810160405280939291908181526020018383602002808284376000920191909152505050888514905061274457600a54612748565b6004545b83612e1b565b612784576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8a166000908152600b602090815260408083208a84529091528120546127bf908b613b1d565b9050806000036127fb576040517f969bf72800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8b166000908152600b602090815260408083208b845290915290208a90556128597f00000000000000000000000000000000000000000000000000000000000000008c83612e31565b6040805173ffffffffffffffffffffffffffffffffffffffff8d1681526020810183905290810188905260ff8a166060820152608081018990524260a08201524360c08201527f309cb1c0dc6ce0f02c0c35cc1f46bbe61ec9deb311d101b87e7d25bd0b647fd79060e00160405180910390a15050505050505050505050565b6040805160c081018252600080825260208201819052918101829052606081018290526080810182905260a0810191909152600d54821180612919575081155b15612950576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600d61295d600184613b1d565b8154811061296d5761296d613b30565b60009182526020918290206040805160c0810182526002909302909101805483526001015464ffffffffff808216948401949094526501000000000081048416918301919091526a01000000000000000000008104831660608301526f0100000000000000000000000000000081048316608083015274010000000000000000000000000000000000000000900490911660a082015292915050565b60005473ffffffffffffffffffffffffffffffffffffffff163314612a8a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610a84565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081178255604051909133917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b60606000858589868a87604051602001612b1996959493929190613de4565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152828252805160208083019190912090840152935001604051602081830303815290604052805190602001209050965096945050505050565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052612c589085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152612e87565b50505050565b612c66612f93565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b60005474010000000000000000000000000000000000000000900460ff161561148c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610a84565b6060600080835160208501865af43d6040519250601f19601f6020830101168301604052808352806000602085013e811560018103612da357816000803e816000fd5b50505092915050565b612db4612cdb565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a258612cb13390565b600082612e288584613017565b14949350505050565b60405173ffffffffffffffffffffffffffffffffffffffff8316602482015260448101829052611ff59084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401612bd6565b6000612ee9826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166130649092919063ffffffff16565b805190915015611ff55780806020019051810190612f079190613e3a565b611ff5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610a84565b60005474010000000000000000000000000000000000000000900460ff1661148c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610a84565b600081815b845181101561305c576130488286838151811061303b5761303b613b30565b602002602001015161307b565b91508061305481613c44565b91505061301c565b509392505050565b606061307384846000856130ad565b949350505050565b60008183106130975760008281526020849052604090206130a6565b60008381526020839052604090205b9392505050565b60608247101561313f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610a84565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516131689190613e57565b60006040518083038185875af1925050503d80600081146131a5576040519150601f19603f3d011682016040523d82523d6000602084013e6131aa565b606091505b50915091506131bb878383876131c6565b979650505050505050565b6060831561325c5782516000036132555773ffffffffffffffffffffffffffffffffffffffff85163b613255576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a84565b5081613073565b61307383838151156132715781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a849190613450565b6020808252825182820181905260009190848201906040850190845b8181101561332f5761331c83855180518252602081015164ffffffffff80821660208501528060408401511660408501528060608401511660608501528060808401511660808501528060a08401511660a085015250505050565b9284019260c092909201916001016132c1565b50909695505050505050565b60006020828403121561334d57600080fd5b5035919050565b60a08101611d64828480518252602081015164ffffffffff808216602085015280604084015116604085015280606084015116606085015280608084015116608085015250505050565b803573ffffffffffffffffffffffffffffffffffffffff811681146133c257600080fd5b919050565b6000602082840312156133d957600080fd5b6130a68261339e565b60005b838110156133fd5781810151838201526020016133e5565b50506000910152565b6000815180845261341e8160208601602086016133e2565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006130a66020830184613406565b6000806040838503121561347657600080fd5b61347f8361339e565b946020939093013593505050565b801515811461349b57600080fd5b50565b600080604083850312156134b157600080fd5b6134ba8361339e565b915060208301356134ca8161348d565b809150509250929050565b600080600080608085870312156134eb57600080fd5b5050823594602084013594506040840135936060013592509050565b803564ffffffffff811681146133c257600080fd5b600080600080600060a0868803121561353457600080fd5b853594506020860135935061354b60408701613507565b925061355960608701613507565b915061356760808701613507565b90509295509295909350565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff811182821017156135e9576135e9613573565b604052919050565b600067ffffffffffffffff82111561360b5761360b613573565b5060051b60200190565b600082601f83011261362657600080fd5b813567ffffffffffffffff81111561364057613640613573565b61367160207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016135a2565b81815284602083860101111561368657600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f8301126136b457600080fd5b813560206136c96136c4836135f1565b6135a2565b82815260059290921b840181019181810190868411156136e857600080fd5b8286015b8481101561372857803567ffffffffffffffff81111561370c5760008081fd5b61371a8986838b0101613615565b8452509183019183016136ec565b509695505050505050565b6000806040838503121561374657600080fd5b823567ffffffffffffffff8082111561375e57600080fd5b818501915085601f83011261377257600080fd5b813560206137826136c4836135f1565b82815260059290921b840181019181810190898411156137a157600080fd5b948201945b838610156137c6576137b78661339e565b825294820194908201906137a6565b965050860135925050808211156137dc57600080fd5b506137e9858286016136a3565b9150509250929050565b60008083601f84011261380557600080fd5b50813567ffffffffffffffff81111561381d57600080fd5b6020830191508360208260051b850101111561383857600080fd5b9250929050565b6000806020838503121561385257600080fd5b823567ffffffffffffffff81111561386957600080fd5b613875858286016137f3565b90969095509350505050565b6020808252825182820181905260009190848201906040850190845b8181101561332f576138ec83855180518252602081015164ffffffffff808216602085015280604084015116604085015280606084015116606085015280608084015116608085015250505050565b9284019260a0929092019160010161389d565b60008060006060848603121561391457600080fd5b833561391f8161348d565b925061392d60208501613507565b915061393b60408501613507565b90509250925092565b803560ff811681146133c257600080fd5b60008060008060008060008060e0898b03121561397157600080fd5b61397a8961339e565b97506020890135965061398f60408a01613944565b9550606089013594506080890135935060a089013567ffffffffffffffff808211156139ba57600080fd5b6139c68c838d016137f3565b909550935060c08b01359150808211156139df57600080fd5b506139ec8b828c01613615565b9150509295985092959890939650565b60c08101611d64828480518252602081015164ffffffffff80821660208501528060408401511660408501528060608401511660608501528060808401511660808501528060a08401511660a085015250505050565b60008060008060008060c08789031215613a6b57600080fd5b613a748761339e565b955060208701359450613a8960408801613944565b9350606087013592506080870135915060a087013567ffffffffffffffff811115613ab357600080fd5b613abf89828a01613615565b9150509295509295509295565b604081526000613adf6040830185613406565b90508260208301529392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b81810381811115611d6457611d64613aee565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600181811c90821680613b7357607f821691505b602082108103613bac577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600082613bf057613bf0613bb2565b500490565b80820180821115611d6457611d64613aee565b64ffffffffff828116828216039080821115613c2657613c26613aee565b5092915050565b8082028115828204841417611d6457611d64613aee565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203613c7557613c75613aee565b5060010190565b64ffffffffff818116838216019080821115613c2657613c26613aee565b600064ffffffffff80841680613cb257613cb2613bb2565b92169190910492915050565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff21833603018112613cf257600080fd5b9190910192915050565b600060208284031215613d0e57600080fd5b6130a682613944565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112613d4c57600080fd5b83018035915067ffffffffffffffff821115613d6757600080fd5b6020019150600581901b360382131561383857600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112613db457600080fd5b83018035915067ffffffffffffffff821115613dcf57600080fd5b60200191503681900382131561383857600080fd5b60ff8716815285602082015273ffffffffffffffffffffffffffffffffffffffff8516604082015283606082015282608082015260c060a08201526000613e2e60c0830184613406565b98975050505050505050565b600060208284031215613e4c57600080fd5b81516130a68161348d565b60008251613cf28184602087016133e256fea2646970667358221220d5e49ab6fa2fad6aa23e5683e9e0d3a5c97b41f126b72f84e26929bbc958a38164736f6c63430008150033",
  "devdoc": {
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "claim(address,uint256,uint8,bytes32,uint256,bytes32[],bytes)": {
        "params": {
          "cumulativeAmount_": "- cumulative amount of rewards to claim",
          "cycle_": "- cycle of the rewards",
          "merkleProof_": "- merkle proof of the rewards",
          "positionId_": "- id of the position, fToken address for lending and vaultId for vaults",
          "positionType_": "- type of position, 1 for lending, 2 for vaults, 3 for smart lending, etc",
          "recipient_": "- address of the recipient"
        }
      },
      "distributeRewards(uint256)": {
        "params": {
          "amount_": "- amount of tokens to distribute rewards for"
        }
      },
      "distributeRewards(uint256,uint256,uint256,uint256)": {
        "params": {
          "amount_": "- amount of tokens to distribute rewards for",
          "startBlock_": "- start block of the distribution."
        }
      },
      "getCycleReward(uint256)": {
        "params": {
          "cycle_": "- cycle of the reward"
        },
        "returns": {
          "_0": "reward_ - reward"
        }
      },
      "getCycleRewards()": {
        "returns": {
          "_0": "rewards_ - rewards"
        }
      },
      "getDistributionForEpoch(uint256)": {
        "params": {
          "epoch_": "- epoch of the distribution"
        },
        "returns": {
          "_0": "distribution_ - distribution"
        }
      },
      "getDistributions()": {
        "returns": {
          "_0": "distributions_ - all distributions"
        }
      },
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "spell(address[],bytes[])": {
        "details": "open payload method for admin to resolve emergency cases"
      },
      "toggleRewardsDistributor(address)": {
        "params": {
          "distributor_": "- address of the rewards distributor"
        }
      },
      "totalCycleRewards()": {
        "returns": {
          "_0": "totalCycles_ - total number of cycles"
        }
      },
      "totalDistributions()": {
        "returns": {
          "_0": "totalDistributions_ - total number of distributions"
        }
      },
      "updateApprover(address,bool)": {
        "params": {
          "approver_": "The address to update",
          "isApprover_": "Whether or not the address should be an allowed approver"
        }
      },
      "updateDistributionConfig(bool,uint40,uint40)": {
        "params": {
          "blocksPerDistribution_": "- duration of distribution in blocks",
          "cyclesPerDistribution_": "- number of cycles to distribute rewards, if 0 then means paused",
          "pullFromDistributor_": "- whether to pull rewards from distributor or not"
        }
      },
      "updateProposer(address,bool)": {
        "params": {
          "isProposer_": "Whether or not the address should be an allowed proposer",
          "proposer_": "The address to update"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "LogClaimed(address,uint256,uint256,uint8,bytes32,uint256,uint256)": {
        "notice": "Emitted when a `user` claims `amount` via a valid merkle proof"
      },
      "LogDistribution(uint256,address,uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Emitted when a new distribution is created"
      },
      "LogDistributionConfigUpdated(bool,uint256,uint256)": {
        "notice": "Emitted when the distribution configuration is updated"
      },
      "LogRewardCycle(uint256,uint256,uint256,uint256,uint256)": {
        "notice": "Emitted when a new reward cycle is created"
      },
      "LogRewardsDistributorToggled(address,bool)": {
        "notice": "Emitted when a rewards distributor is toggled"
      },
      "LogRootProposed(uint256,bytes32,bytes32,uint256,uint256)": {
        "notice": "Emitted when a new cycle root hash is proposed"
      },
      "LogRootUpdated(uint256,bytes32,bytes32,uint256,uint256)": {
        "notice": "Emitted when a new cycle root hash is approved by the owner and becomes the new active root"
      },
      "LogUpdateApprover(address,bool)": {
        "notice": "Emitted when an address is added or removed from the allowed approvers"
      },
      "LogUpdateProposer(address,bool)": {
        "notice": "Emitted when an address is added or removed from the allowed proposers"
      }
    },
    "kind": "user",
    "methods": {
      "approveRoot(bytes32,bytes32,uint40,uint40,uint40)": {
        "notice": "Approve the current pending root and content hash"
      },
      "blocksPerDistribution()": {
        "notice": "Duration of each distribution in blocks"
      },
      "claim(address,uint256,uint8,bytes32,uint256,bytes32[],bytes)": {
        "notice": "Claims rewards for a given recipient"
      },
      "claimed(address,bytes32)": {
        "notice": "total claimed amount per user address and fToken. user => positionId => claimed amount"
      },
      "currentMerkleCycle()": {
        "notice": "merkle root data related to current cycle (proposed and approved)."
      },
      "cyclesPerDistribution()": {
        "notice": "Number of cycles to distribute rewards"
      },
      "distributeRewards(uint256)": {
        "notice": "Distributes rewards for a given token"
      },
      "distributeRewards(uint256,uint256,uint256,uint256)": {
        "notice": "Distributes rewards for a given token"
      },
      "getCycleReward(uint256)": {
        "notice": "Returns the cycle reward for a given cycle"
      },
      "getCycleRewards()": {
        "notice": "Returns the cycle rewards"
      },
      "getDistributionForEpoch(uint256)": {
        "notice": "Returns the distribution for a given epoch"
      },
      "getDistributions()": {
        "notice": "Returns all distributions"
      },
      "hasPendingRoot()": {
        "notice": "checks if there is a proposed root waiting to be approved"
      },
      "isApprover(address)": {
        "notice": "checks if the `approver_` is an allowed root approver"
      },
      "isProposer(address)": {
        "notice": "checks if the `proposer_` is an allowed root proposer"
      },
      "pause()": {
        "notice": "Pause contract functionality of new roots and claiming"
      },
      "pendingMerkleCycle()": {
        "notice": "merkle root data related to pending cycle (proposed but not yet approved)."
      },
      "previousMerkleRoot()": {
        "notice": "merkle root of the previous cycle"
      },
      "proposeRoot(bytes32,bytes32,uint40,uint40,uint40)": {
        "notice": "Propose a new root and content hash, which will be stored as pending until approved"
      },
      "pullFromDistributor()": {
        "notice": "Whether to pull tokens from distributor or not"
      },
      "rewardsDistributor(address)": {
        "notice": "allow list for rewards distributors"
      },
      "toggleRewardsDistributor(address)": {
        "notice": "Toggles a rewards distributor"
      },
      "totalCycleRewards()": {
        "notice": "Returns the total number of cycles"
      },
      "totalDistributions()": {
        "notice": "Returns the total number of distributions"
      },
      "unpause()": {
        "notice": "Unpause contract functionality of new roots and claiming"
      },
      "updateApprover(address,bool)": {
        "notice": "Updates an address status as a root approver"
      },
      "updateDistributionConfig(bool,uint40,uint40)": {
        "notice": "Updates the distribution configuration"
      },
      "updateProposer(address,bool)": {
        "notice": "Updates an address status as a root proposer"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 3162,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 17,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 3084,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 3089,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "_proposers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3094,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "_approvers",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3098,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "_currentMerkleCycle",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(MerkleCycle)3022_storage"
      },
      {
        "astId": 3102,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "_pendingMerkleCycle",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(MerkleCycle)3022_storage"
      },
      {
        "astId": 3105,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "previousMerkleRoot",
        "offset": 0,
        "slot": "10",
        "type": "t_bytes32"
      },
      {
        "astId": 3112,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "claimed",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))"
      },
      {
        "astId": 3117,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "rewards",
        "offset": 0,
        "slot": "12",
        "type": "t_array(t_struct(Reward)3033_storage)dyn_storage"
      },
      {
        "astId": 3122,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "distributions",
        "offset": 0,
        "slot": "13",
        "type": "t_array(t_struct(Distribution)3046_storage)dyn_storage"
      },
      {
        "astId": 3127,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "rewardsDistributor",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 3130,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "cyclesPerDistribution",
        "offset": 0,
        "slot": "15",
        "type": "t_uint40"
      },
      {
        "astId": 3133,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "blocksPerDistribution",
        "offset": 5,
        "slot": "15",
        "type": "t_uint40"
      },
      {
        "astId": 3136,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "pullFromDistributor",
        "offset": 10,
        "slot": "15",
        "type": "t_bool"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_struct(Distribution)3046_storage)dyn_storage": {
        "base": "t_struct(Distribution)3046_storage",
        "encoding": "dynamic_array",
        "label": "struct Structs.Distribution[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(Reward)3033_storage)dyn_storage": {
        "base": "t_struct(Reward)3033_storage",
        "encoding": "dynamic_array",
        "label": "struct Structs.Reward[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_uint256)"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(Distribution)3046_storage": {
        "encoding": "inplace",
        "label": "struct Structs.Distribution",
        "members": [
          {
            "astId": 3035,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3037,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "epoch",
            "offset": 0,
            "slot": "1",
            "type": "t_uint40"
          },
          {
            "astId": 3039,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "startCycle",
            "offset": 5,
            "slot": "1",
            "type": "t_uint40"
          },
          {
            "astId": 3041,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "endCycle",
            "offset": 10,
            "slot": "1",
            "type": "t_uint40"
          },
          {
            "astId": 3043,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "registrationBlock",
            "offset": 15,
            "slot": "1",
            "type": "t_uint40"
          },
          {
            "astId": 3045,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "registrationTimestamp",
            "offset": 20,
            "slot": "1",
            "type": "t_uint40"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(MerkleCycle)3022_storage": {
        "encoding": "inplace",
        "label": "struct Structs.MerkleCycle",
        "members": [
          {
            "astId": 3009,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "merkleRoot",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 3011,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "merkleContentHash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 3013,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "cycle",
            "offset": 0,
            "slot": "2",
            "type": "t_uint40"
          },
          {
            "astId": 3015,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "timestamp",
            "offset": 5,
            "slot": "2",
            "type": "t_uint40"
          },
          {
            "astId": 3017,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "publishBlock",
            "offset": 10,
            "slot": "2",
            "type": "t_uint40"
          },
          {
            "astId": 3019,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "startBlock",
            "offset": 15,
            "slot": "2",
            "type": "t_uint40"
          },
          {
            "astId": 3021,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "endBlock",
            "offset": 20,
            "slot": "2",
            "type": "t_uint40"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Reward)3033_storage": {
        "encoding": "inplace",
        "label": "struct Structs.Reward",
        "members": [
          {
            "astId": 3024,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 3026,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "cycle",
            "offset": 0,
            "slot": "1",
            "type": "t_uint40"
          },
          {
            "astId": 3028,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "startBlock",
            "offset": 5,
            "slot": "1",
            "type": "t_uint40"
          },
          {
            "astId": 3030,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "endBlock",
            "offset": 10,
            "slot": "1",
            "type": "t_uint40"
          },
          {
            "astId": 3032,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "epoch",
            "offset": 15,
            "slot": "1",
            "type": "t_uint40"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      }
    }
  }
}