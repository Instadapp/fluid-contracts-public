{
  "address": "0xb8f526718FF58758E256D9aD86bC194a9ff5986D",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "factory_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidity_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "liquidityResolver_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "FACTORY",
      "outputs": [
        {
          "internalType": "contract IFluidDexFactory",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDITY",
      "outputs": [
        {
          "internalType": "contract IFluidLiquidity",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "LIQUIDITY_RESOLVER",
      "outputs": [
        {
          "internalType": "contract IFluidLiquidityResolver",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dex_",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "swap0to1_",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountOutMin_",
          "type": "uint256"
        }
      ],
      "name": "estimateSwapIn",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountOut_",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dex_",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "swap0to1_",
          "type": "bool"
        },
        {
          "internalType": "uint256",
          "name": "amountOut_",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amountInMax_",
          "type": "uint256"
        }
      ],
      "name": "estimateSwapOut",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amountIn_",
          "type": "uint256"
        }
      ],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPoolAddresses",
      "outputs": [
        {
          "internalType": "address[]",
          "name": "pools_",
          "type": "address[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPools",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            }
          ],
          "internalType": "struct Structs.Pool[]",
          "name": "pools_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPoolsReserves",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "token0RealReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1RealReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token0ImaginaryReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1ImaginaryReserves",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IFluidDexT1.CollateralReserves",
              "name": "collateralReserves",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "token0Debt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1Debt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token0RealReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1RealReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token0ImaginaryReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1ImaginaryReserves",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IFluidDexT1.DebtReserves",
              "name": "debtReserves",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "available",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandsTo",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandDuration",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structs.TokenLimit",
                  "name": "withdrawableToken0",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "available",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandsTo",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandDuration",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structs.TokenLimit",
                  "name": "withdrawableToken1",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "available",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandsTo",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandDuration",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structs.TokenLimit",
                  "name": "borrowableToken0",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "available",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandsTo",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandDuration",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structs.TokenLimit",
                  "name": "borrowableToken1",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Structs.DexLimits",
              "name": "limits",
              "type": "tuple"
            }
          ],
          "internalType": "struct Structs.PoolWithReserves[]",
          "name": "poolsReserves_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAllPoolsReservesAdjusted",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "token0RealReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1RealReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token0ImaginaryReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1ImaginaryReserves",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IFluidDexT1.CollateralReserves",
              "name": "collateralReserves",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "token0Debt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1Debt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token0RealReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1RealReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token0ImaginaryReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1ImaginaryReserves",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IFluidDexT1.DebtReserves",
              "name": "debtReserves",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "available",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandsTo",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandDuration",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structs.TokenLimit",
                  "name": "withdrawableToken0",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "available",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandsTo",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandDuration",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structs.TokenLimit",
                  "name": "withdrawableToken1",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "available",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandsTo",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandDuration",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structs.TokenLimit",
                  "name": "borrowableToken0",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "available",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandsTo",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandDuration",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structs.TokenLimit",
                  "name": "borrowableToken1",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Structs.DexLimits",
              "name": "limits",
              "type": "tuple"
            }
          ],
          "internalType": "struct Structs.PoolWithReserves[]",
          "name": "poolsReserves_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dex_",
          "type": "address"
        }
      ],
      "name": "getDexCollateralReserves",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "token0RealReserves",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token1RealReserves",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token0ImaginaryReserves",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token1ImaginaryReserves",
              "type": "uint256"
            }
          ],
          "internalType": "struct IFluidDexT1.CollateralReserves",
          "name": "reserves_",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dex_",
          "type": "address"
        }
      ],
      "name": "getDexCollateralReservesAdjusted",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "token0RealReserves",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token1RealReserves",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token0ImaginaryReserves",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token1ImaginaryReserves",
              "type": "uint256"
            }
          ],
          "internalType": "struct IFluidDexT1.CollateralReserves",
          "name": "reserves_",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dex_",
          "type": "address"
        }
      ],
      "name": "getDexDebtReserves",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "token0Debt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token1Debt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token0RealReserves",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token1RealReserves",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token0ImaginaryReserves",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token1ImaginaryReserves",
              "type": "uint256"
            }
          ],
          "internalType": "struct IFluidDexT1.DebtReserves",
          "name": "reserves_",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dex_",
          "type": "address"
        }
      ],
      "name": "getDexDebtReservesAdjusted",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "token0Debt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token1Debt",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token0RealReserves",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token1RealReserves",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token0ImaginaryReserves",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token1ImaginaryReserves",
              "type": "uint256"
            }
          ],
          "internalType": "struct IFluidDexT1.DebtReserves",
          "name": "reserves_",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dex_",
          "type": "address"
        }
      ],
      "name": "getDexLimits",
      "outputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "available",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "expandsTo",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "expandDuration",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Structs.TokenLimit",
              "name": "withdrawableToken0",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "available",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "expandsTo",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "expandDuration",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Structs.TokenLimit",
              "name": "withdrawableToken1",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "available",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "expandsTo",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "expandDuration",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Structs.TokenLimit",
              "name": "borrowableToken0",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "available",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "expandsTo",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "expandDuration",
                  "type": "uint256"
                }
              ],
              "internalType": "struct Structs.TokenLimit",
              "name": "borrowableToken1",
              "type": "tuple"
            }
          ],
          "internalType": "struct Structs.DexLimits",
          "name": "limits_",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "dex_",
          "type": "address"
        }
      ],
      "name": "getDexPricesAndExchangePrices",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "lastStoredPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "centerPrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "upperRange",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lowerRange",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "geometricMean",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyToken0ExchangePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowToken0ExchangePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "supplyToken1ExchangePrice",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "borrowToken1ExchangePrice",
              "type": "uint256"
            }
          ],
          "internalType": "struct IFluidDexT1.PricesAndExchangePrice",
          "name": "pex_",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId_",
          "type": "uint256"
        }
      ],
      "name": "getPool",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            }
          ],
          "internalType": "struct Structs.Pool",
          "name": "pool_",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "poolId_",
          "type": "uint256"
        }
      ],
      "name": "getPoolAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "pool_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool_",
          "type": "address"
        }
      ],
      "name": "getPoolConstantsView",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "dexId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "liquidity",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "factory",
              "type": "address"
            },
            {
              "components": [
                {
                  "internalType": "address",
                  "name": "shift",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "admin",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "colOperations",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "debtOperations",
                  "type": "address"
                },
                {
                  "internalType": "address",
                  "name": "perfectOperationsAndOracle",
                  "type": "address"
                }
              ],
              "internalType": "struct IFluidDexT1.Implementations",
              "name": "implementations",
              "type": "tuple"
            },
            {
              "internalType": "address",
              "name": "deployerContract",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "bytes32",
              "name": "supplyToken0Slot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "borrowToken0Slot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "supplyToken1Slot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "borrowToken1Slot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "exchangePriceToken0Slot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "exchangePriceToken1Slot",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "oracleMapping",
              "type": "uint256"
            }
          ],
          "internalType": "struct IFluidDexT1.ConstantViews",
          "name": "constantsView_",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool_",
          "type": "address"
        }
      ],
      "name": "getPoolConstantsView2",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "token0NumeratorPrecision",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token0DenominatorPrecision",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token1NumeratorPrecision",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "token1DenominatorPrecision",
              "type": "uint256"
            }
          ],
          "internalType": "struct IFluidDexT1.ConstantViews2",
          "name": "constantsView2_",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool_",
          "type": "address"
        }
      ],
      "name": "getPoolFee",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "fee_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool_",
          "type": "address"
        }
      ],
      "name": "getPoolReserves",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "token0RealReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1RealReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token0ImaginaryReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1ImaginaryReserves",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IFluidDexT1.CollateralReserves",
              "name": "collateralReserves",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "token0Debt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1Debt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token0RealReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1RealReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token0ImaginaryReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1ImaginaryReserves",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IFluidDexT1.DebtReserves",
              "name": "debtReserves",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "available",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandsTo",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandDuration",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structs.TokenLimit",
                  "name": "withdrawableToken0",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "available",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandsTo",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandDuration",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structs.TokenLimit",
                  "name": "withdrawableToken1",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "available",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandsTo",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandDuration",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structs.TokenLimit",
                  "name": "borrowableToken0",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "available",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandsTo",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandDuration",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structs.TokenLimit",
                  "name": "borrowableToken1",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Structs.DexLimits",
              "name": "limits",
              "type": "tuple"
            }
          ],
          "internalType": "struct Structs.PoolWithReserves",
          "name": "poolReserves_",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool_",
          "type": "address"
        }
      ],
      "name": "getPoolReservesAdjusted",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "token0RealReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1RealReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token0ImaginaryReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1ImaginaryReserves",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IFluidDexT1.CollateralReserves",
              "name": "collateralReserves",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "token0Debt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1Debt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token0RealReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1RealReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token0ImaginaryReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1ImaginaryReserves",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IFluidDexT1.DebtReserves",
              "name": "debtReserves",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "available",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandsTo",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandDuration",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structs.TokenLimit",
                  "name": "withdrawableToken0",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "available",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandsTo",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandDuration",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structs.TokenLimit",
                  "name": "withdrawableToken1",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "available",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandsTo",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandDuration",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structs.TokenLimit",
                  "name": "borrowableToken0",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "available",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandsTo",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandDuration",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structs.TokenLimit",
                  "name": "borrowableToken1",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Structs.DexLimits",
              "name": "limits",
              "type": "tuple"
            }
          ],
          "internalType": "struct Structs.PoolWithReserves",
          "name": "poolReserves_",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool_",
          "type": "address"
        }
      ],
      "name": "getPoolTokens",
      "outputs": [
        {
          "internalType": "address",
          "name": "token0_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "token1_",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "pools_",
          "type": "address[]"
        }
      ],
      "name": "getPoolsReserves",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "token0RealReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1RealReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token0ImaginaryReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1ImaginaryReserves",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IFluidDexT1.CollateralReserves",
              "name": "collateralReserves",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "token0Debt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1Debt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token0RealReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1RealReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token0ImaginaryReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1ImaginaryReserves",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IFluidDexT1.DebtReserves",
              "name": "debtReserves",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "available",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandsTo",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandDuration",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structs.TokenLimit",
                  "name": "withdrawableToken0",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "available",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandsTo",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandDuration",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structs.TokenLimit",
                  "name": "withdrawableToken1",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "available",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandsTo",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandDuration",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structs.TokenLimit",
                  "name": "borrowableToken0",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "available",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandsTo",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandDuration",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structs.TokenLimit",
                  "name": "borrowableToken1",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Structs.DexLimits",
              "name": "limits",
              "type": "tuple"
            }
          ],
          "internalType": "struct Structs.PoolWithReserves[]",
          "name": "poolsReserves_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "pools_",
          "type": "address[]"
        }
      ],
      "name": "getPoolsReservesAdjusted",
      "outputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "pool",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token0",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "token1",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "fee",
              "type": "uint256"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "token0RealReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1RealReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token0ImaginaryReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1ImaginaryReserves",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IFluidDexT1.CollateralReserves",
              "name": "collateralReserves",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "token0Debt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1Debt",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token0RealReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1RealReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token0ImaginaryReserves",
                  "type": "uint256"
                },
                {
                  "internalType": "uint256",
                  "name": "token1ImaginaryReserves",
                  "type": "uint256"
                }
              ],
              "internalType": "struct IFluidDexT1.DebtReserves",
              "name": "debtReserves",
              "type": "tuple"
            },
            {
              "components": [
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "available",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandsTo",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandDuration",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structs.TokenLimit",
                  "name": "withdrawableToken0",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "available",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandsTo",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandDuration",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structs.TokenLimit",
                  "name": "withdrawableToken1",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "available",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandsTo",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandDuration",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structs.TokenLimit",
                  "name": "borrowableToken0",
                  "type": "tuple"
                },
                {
                  "components": [
                    {
                      "internalType": "uint256",
                      "name": "available",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandsTo",
                      "type": "uint256"
                    },
                    {
                      "internalType": "uint256",
                      "name": "expandDuration",
                      "type": "uint256"
                    }
                  ],
                  "internalType": "struct Structs.TokenLimit",
                  "name": "borrowableToken1",
                  "type": "tuple"
                }
              ],
              "internalType": "struct Structs.DexLimits",
              "name": "limits",
              "type": "tuple"
            }
          ],
          "internalType": "struct Structs.PoolWithReserves[]",
          "name": "poolsReserves_",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getTotalPools",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xb2fcea3a6372339ed0dc6da88be43127128c2ff05de40b3e200940b8d408dce4",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x0Ed35B1609Ec45c7079E80d11149a52717e4859A",
    "contractAddress": null,
    "transactionIndex": 9,
    "gasUsed": "17654448",
    "logsBloom": "0x
    "blockHash": "0x82b8aed847f64bfba8fec862ec3d899f3d7f09e671d89659dca87a2f8304aab8",
    "transactionHash": "0xb2fcea3a6372339ed0dc6da88be43127128c2ff05de40b3e200940b8d408dce4",
    "logs": [],
    "blockNumber": 285143366,
    "cumulativeGasUsed": "23396681",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x91716C4EDA1Fb55e84Bf8b4c7085f84285c19085",
    "0x52Aa899454998Be5b000Ad077a46Bbe360F4e497",
    "0x46859d33E662d4bF18eEED88f74C36256E606e44"
  ],
  "numDeployments": 2,
  "solcInputHash": "6c39fb1e38aa412950395abacde4fd8b",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"factory_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidity_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"liquidityResolver_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"FACTORY\",\"outputs\":[{\"internalType\":\"contract IFluidDexFactory\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDITY\",\"outputs\":[{\"internalType\":\"contract IFluidLiquidity\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"LIQUIDITY_RESOLVER\",\"outputs\":[{\"internalType\":\"contract IFluidLiquidityResolver\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dex_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"swap0to1_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountOutMin_\",\"type\":\"uint256\"}],\"name\":\"estimateSwapIn\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountOut_\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dex_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"swap0to1_\",\"type\":\"bool\"},{\"internalType\":\"uint256\",\"name\":\"amountOut_\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amountInMax_\",\"type\":\"uint256\"}],\"name\":\"estimateSwapOut\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amountIn_\",\"type\":\"uint256\"}],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPoolAddresses\",\"outputs\":[{\"internalType\":\"address[]\",\"name\":\"pools_\",\"type\":\"address[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPools\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"internalType\":\"struct Structs.Pool[]\",\"name\":\"pools_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPoolsReserves\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"token0RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0ImaginaryReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1ImaginaryReserves\",\"type\":\"uint256\"}],\"internalType\":\"struct IFluidDexT1.CollateralReserves\",\"name\":\"collateralReserves\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"token0Debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0ImaginaryReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1ImaginaryReserves\",\"type\":\"uint256\"}],\"internalType\":\"struct IFluidDexT1.DebtReserves\",\"name\":\"debtReserves\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandsTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Structs.TokenLimit\",\"name\":\"withdrawableToken0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandsTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Structs.TokenLimit\",\"name\":\"withdrawableToken1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandsTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Structs.TokenLimit\",\"name\":\"borrowableToken0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandsTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Structs.TokenLimit\",\"name\":\"borrowableToken1\",\"type\":\"tuple\"}],\"internalType\":\"struct Structs.DexLimits\",\"name\":\"limits\",\"type\":\"tuple\"}],\"internalType\":\"struct Structs.PoolWithReserves[]\",\"name\":\"poolsReserves_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAllPoolsReservesAdjusted\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"token0RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0ImaginaryReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1ImaginaryReserves\",\"type\":\"uint256\"}],\"internalType\":\"struct IFluidDexT1.CollateralReserves\",\"name\":\"collateralReserves\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"token0Debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0ImaginaryReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1ImaginaryReserves\",\"type\":\"uint256\"}],\"internalType\":\"struct IFluidDexT1.DebtReserves\",\"name\":\"debtReserves\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandsTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Structs.TokenLimit\",\"name\":\"withdrawableToken0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandsTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Structs.TokenLimit\",\"name\":\"withdrawableToken1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandsTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Structs.TokenLimit\",\"name\":\"borrowableToken0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandsTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Structs.TokenLimit\",\"name\":\"borrowableToken1\",\"type\":\"tuple\"}],\"internalType\":\"struct Structs.DexLimits\",\"name\":\"limits\",\"type\":\"tuple\"}],\"internalType\":\"struct Structs.PoolWithReserves[]\",\"name\":\"poolsReserves_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dex_\",\"type\":\"address\"}],\"name\":\"getDexCollateralReserves\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"token0RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0ImaginaryReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1ImaginaryReserves\",\"type\":\"uint256\"}],\"internalType\":\"struct IFluidDexT1.CollateralReserves\",\"name\":\"reserves_\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dex_\",\"type\":\"address\"}],\"name\":\"getDexCollateralReservesAdjusted\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"token0RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0ImaginaryReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1ImaginaryReserves\",\"type\":\"uint256\"}],\"internalType\":\"struct IFluidDexT1.CollateralReserves\",\"name\":\"reserves_\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dex_\",\"type\":\"address\"}],\"name\":\"getDexDebtReserves\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"token0Debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0ImaginaryReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1ImaginaryReserves\",\"type\":\"uint256\"}],\"internalType\":\"struct IFluidDexT1.DebtReserves\",\"name\":\"reserves_\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dex_\",\"type\":\"address\"}],\"name\":\"getDexDebtReservesAdjusted\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"token0Debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0ImaginaryReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1ImaginaryReserves\",\"type\":\"uint256\"}],\"internalType\":\"struct IFluidDexT1.DebtReserves\",\"name\":\"reserves_\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dex_\",\"type\":\"address\"}],\"name\":\"getDexLimits\",\"outputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandsTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Structs.TokenLimit\",\"name\":\"withdrawableToken0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandsTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Structs.TokenLimit\",\"name\":\"withdrawableToken1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandsTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Structs.TokenLimit\",\"name\":\"borrowableToken0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandsTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Structs.TokenLimit\",\"name\":\"borrowableToken1\",\"type\":\"tuple\"}],\"internalType\":\"struct Structs.DexLimits\",\"name\":\"limits_\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"dex_\",\"type\":\"address\"}],\"name\":\"getDexPricesAndExchangePrices\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"lastStoredPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"centerPrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"upperRange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lowerRange\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"geometricMean\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyToken0ExchangePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowToken0ExchangePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"supplyToken1ExchangePrice\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"borrowToken1ExchangePrice\",\"type\":\"uint256\"}],\"internalType\":\"struct IFluidDexT1.PricesAndExchangePrice\",\"name\":\"pex_\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId_\",\"type\":\"uint256\"}],\"name\":\"getPool\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"internalType\":\"struct Structs.Pool\",\"name\":\"pool_\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"poolId_\",\"type\":\"uint256\"}],\"name\":\"getPoolAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"name\":\"getPoolConstantsView\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"dexId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"liquidity\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"factory\",\"type\":\"address\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"shift\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"colOperations\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"debtOperations\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"perfectOperationsAndOracle\",\"type\":\"address\"}],\"internalType\":\"struct IFluidDexT1.Implementations\",\"name\":\"implementations\",\"type\":\"tuple\"},{\"internalType\":\"address\",\"name\":\"deployerContract\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"supplyToken0Slot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"borrowToken0Slot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"supplyToken1Slot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"borrowToken1Slot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"exchangePriceToken0Slot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"exchangePriceToken1Slot\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"oracleMapping\",\"type\":\"uint256\"}],\"internalType\":\"struct IFluidDexT1.ConstantViews\",\"name\":\"constantsView_\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"name\":\"getPoolConstantsView2\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"token0NumeratorPrecision\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0DenominatorPrecision\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1NumeratorPrecision\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1DenominatorPrecision\",\"type\":\"uint256\"}],\"internalType\":\"struct IFluidDexT1.ConstantViews2\",\"name\":\"constantsView2_\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"name\":\"getPoolFee\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"fee_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"name\":\"getPoolReserves\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"token0RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0ImaginaryReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1ImaginaryReserves\",\"type\":\"uint256\"}],\"internalType\":\"struct IFluidDexT1.CollateralReserves\",\"name\":\"collateralReserves\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"token0Debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0ImaginaryReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1ImaginaryReserves\",\"type\":\"uint256\"}],\"internalType\":\"struct IFluidDexT1.DebtReserves\",\"name\":\"debtReserves\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandsTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Structs.TokenLimit\",\"name\":\"withdrawableToken0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandsTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Structs.TokenLimit\",\"name\":\"withdrawableToken1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandsTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Structs.TokenLimit\",\"name\":\"borrowableToken0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandsTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Structs.TokenLimit\",\"name\":\"borrowableToken1\",\"type\":\"tuple\"}],\"internalType\":\"struct Structs.DexLimits\",\"name\":\"limits\",\"type\":\"tuple\"}],\"internalType\":\"struct Structs.PoolWithReserves\",\"name\":\"poolReserves_\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"name\":\"getPoolReservesAdjusted\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"token0RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0ImaginaryReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1ImaginaryReserves\",\"type\":\"uint256\"}],\"internalType\":\"struct IFluidDexT1.CollateralReserves\",\"name\":\"collateralReserves\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"token0Debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0ImaginaryReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1ImaginaryReserves\",\"type\":\"uint256\"}],\"internalType\":\"struct IFluidDexT1.DebtReserves\",\"name\":\"debtReserves\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandsTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Structs.TokenLimit\",\"name\":\"withdrawableToken0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandsTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Structs.TokenLimit\",\"name\":\"withdrawableToken1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandsTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Structs.TokenLimit\",\"name\":\"borrowableToken0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandsTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Structs.TokenLimit\",\"name\":\"borrowableToken1\",\"type\":\"tuple\"}],\"internalType\":\"struct Structs.DexLimits\",\"name\":\"limits\",\"type\":\"tuple\"}],\"internalType\":\"struct Structs.PoolWithReserves\",\"name\":\"poolReserves_\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool_\",\"type\":\"address\"}],\"name\":\"getPoolTokens\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"token0_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1_\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pools_\",\"type\":\"address[]\"}],\"name\":\"getPoolsReserves\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"token0RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0ImaginaryReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1ImaginaryReserves\",\"type\":\"uint256\"}],\"internalType\":\"struct IFluidDexT1.CollateralReserves\",\"name\":\"collateralReserves\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"token0Debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0ImaginaryReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1ImaginaryReserves\",\"type\":\"uint256\"}],\"internalType\":\"struct IFluidDexT1.DebtReserves\",\"name\":\"debtReserves\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandsTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Structs.TokenLimit\",\"name\":\"withdrawableToken0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandsTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Structs.TokenLimit\",\"name\":\"withdrawableToken1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandsTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Structs.TokenLimit\",\"name\":\"borrowableToken0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandsTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Structs.TokenLimit\",\"name\":\"borrowableToken1\",\"type\":\"tuple\"}],\"internalType\":\"struct Structs.DexLimits\",\"name\":\"limits\",\"type\":\"tuple\"}],\"internalType\":\"struct Structs.PoolWithReserves[]\",\"name\":\"poolsReserves_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"pools_\",\"type\":\"address[]\"}],\"name\":\"getPoolsReservesAdjusted\",\"outputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token0\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"token1\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"token0RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0ImaginaryReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1ImaginaryReserves\",\"type\":\"uint256\"}],\"internalType\":\"struct IFluidDexT1.CollateralReserves\",\"name\":\"collateralReserves\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"token0Debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1Debt\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1RealReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token0ImaginaryReserves\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"token1ImaginaryReserves\",\"type\":\"uint256\"}],\"internalType\":\"struct IFluidDexT1.DebtReserves\",\"name\":\"debtReserves\",\"type\":\"tuple\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandsTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Structs.TokenLimit\",\"name\":\"withdrawableToken0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandsTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Structs.TokenLimit\",\"name\":\"withdrawableToken1\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandsTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Structs.TokenLimit\",\"name\":\"borrowableToken0\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"uint256\",\"name\":\"available\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandsTo\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"expandDuration\",\"type\":\"uint256\"}],\"internalType\":\"struct Structs.TokenLimit\",\"name\":\"borrowableToken1\",\"type\":\"tuple\"}],\"internalType\":\"struct Structs.DexLimits\",\"name\":\"limits\",\"type\":\"tuple\"}],\"internalType\":\"struct Structs.PoolWithReserves[]\",\"name\":\"poolsReserves_\",\"type\":\"tuple[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getTotalPools\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"estimateSwapIn(address,bool,uint256,uint256)\":{\"params\":{\"amountIn_\":\"The exact amount of input tokens to swap\",\"amountOutMin_\":\"The minimum amount of output tokens the user is willing to accept\",\"dex_\":\"Dex pool\",\"swap0to1_\":\"Direction of swap. If true, swaps token0 for token1; if false, swaps token1 for token0\"},\"returns\":{\"amountOut_\":\"The amount of output tokens received from the swap\"}},\"estimateSwapOut(address,bool,uint256,uint256)\":{\"params\":{\"amountInMax_\":\"Maximum amount of tokens to swap in\",\"amountOut_\":\"The exact amount of tokens to receive after swap\",\"dex_\":\"Dex pool\",\"swap0to1_\":\"Direction of swap. If true, swaps token0 for token1; if false, swaps token1 for token0\"},\"returns\":{\"amountIn_\":\"The amount of input tokens used for the swap\"}},\"getAllPoolAddresses()\":{\"returns\":{\"pools_\":\"An array containing all Pool addresses\"}},\"getAllPools()\":{\"returns\":{\"pools_\":\"An array containing all Pool data\"}},\"getAllPoolsReserves()\":{\"details\":\"expected to be called via callStatic\",\"returns\":{\"poolsReserves_\":\"An array containing all Pool data with reserves\"}},\"getAllPoolsReservesAdjusted()\":{\"details\":\"expected to be called via callStatic\",\"returns\":{\"poolsReserves_\":\"An array containing all Pool data with adjusted reserves scaled to 1e12\"}},\"getDexCollateralReserves(address)\":{\"details\":\"expected to be called via callStatic\",\"params\":{\"dex_\":\"The address of the DEX\"},\"returns\":{\"reserves_\":\"A struct containing collateral reserve information\"}},\"getDexCollateralReservesAdjusted(address)\":{\"details\":\"expected to be called via callStatic\",\"params\":{\"dex_\":\"The address of the DEX\"},\"returns\":{\"reserves_\":\"A struct containing collateral reserve information\"}},\"getDexDebtReserves(address)\":{\"details\":\"expected to be called via callStatic\",\"params\":{\"dex_\":\"The address of the DEX\"},\"returns\":{\"reserves_\":\"A struct containing debt reserve information\"}},\"getDexDebtReservesAdjusted(address)\":{\"details\":\"expected to be called via callStatic\",\"params\":{\"dex_\":\"The address of the DEX\"},\"returns\":{\"reserves_\":\"A struct containing debt reserve information\"}},\"getDexLimits(address)\":{\"params\":{\"dex_\":\"The address of the DEX\"},\"returns\":{\"limits_\":\"A struct containing the swap limits for the DEX\"}},\"getDexPricesAndExchangePrices(address)\":{\"details\":\"expected to be called via callStatic\",\"params\":{\"dex_\":\"The address of the DEX\"},\"returns\":{\"pex_\":\"A struct containing prices and exchange prices\"}},\"getPool(uint256)\":{\"params\":{\"poolId_\":\"The ID of the Pool\"},\"returns\":{\"pool_\":\"The Pool data\"}},\"getPoolAddress(uint256)\":{\"params\":{\"poolId_\":\"The ID of the Pool\"},\"returns\":{\"pool_\":\"The address of the Pool\"}},\"getPoolFee(address)\":{\"params\":{\"pool_\":\"The Pool address\"},\"returns\":{\"fee_\":\"The Pool fee as 1% = 10000\"}},\"getPoolReserves(address)\":{\"details\":\"expected to be called via callStatic\",\"params\":{\"pool_\":\"The Pool address\"},\"returns\":{\"poolReserves_\":\"The Pool data with reserves.\"}},\"getPoolReservesAdjusted(address)\":{\"details\":\"expected to be called via callStatic\",\"params\":{\"pool_\":\"The Pool address\"},\"returns\":{\"poolReserves_\":\"The Pool data with adjusted reserves scaled to 1e12. balanceTokens are in token decimals.\"}},\"getPoolTokens(address)\":{\"params\":{\"pool_\":\"The address of the Pool\"},\"returns\":{\"token0_\":\"The address of token0 in the Pool\",\"token1_\":\"The address of token1 in the Pool\"}},\"getPoolsReserves(address[])\":{\"details\":\"expected to be called via callStatic\",\"params\":{\"pools_\":\"The array of Pool addresses\"},\"returns\":{\"poolsReserves_\":\"An array containing all Pool data with reserves\"}},\"getPoolsReservesAdjusted(address[])\":{\"details\":\"expected to be called via callStatic\",\"params\":{\"pools_\":\"The array of Pool addresses\"},\"returns\":{\"poolsReserves_\":\"An array containing all Pool data with adjusted reserves scaled to 1e12\"}},\"getTotalPools()\":{\"returns\":{\"_0\":\"The total number of Pools\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"estimateSwapIn(address,bool,uint256,uint256)\":{\"notice\":\"estimates swap IN tokens execution\"},\"estimateSwapOut(address,bool,uint256,uint256)\":{\"notice\":\"estimates swap OUT tokens execution\"},\"getAllPoolAddresses()\":{\"notice\":\"Get an array of all Pool addresses\"},\"getAllPools()\":{\"notice\":\"Get an array of all Pool addresses and their token addresses\"},\"getAllPoolsReserves()\":{\"notice\":\"Get an array of all Pool addresses, their token addresses, collateral reserves, and debt reserves\"},\"getAllPoolsReservesAdjusted()\":{\"notice\":\"Get an array of all Pool addresses, their token addresses, adjusted collateral reserves, and adjusted debt reserves\"},\"getDexCollateralReserves(address)\":{\"notice\":\"Get the collateral reserves for a DEX in token decimals amounts\"},\"getDexCollateralReservesAdjusted(address)\":{\"notice\":\"Get the collateral reserves for a DEX scaled to 1e12\"},\"getDexDebtReserves(address)\":{\"notice\":\"Get the debt reserves for a DEX in token decimals amounts\"},\"getDexDebtReservesAdjusted(address)\":{\"notice\":\"Get the debt reserves for a DEX scaled to 1e12\"},\"getDexLimits(address)\":{\"notice\":\"get the swap limits for a DEX\"},\"getDexPricesAndExchangePrices(address)\":{\"notice\":\"Get the prices and exchange prices for a DEX\"},\"getPool(uint256)\":{\"notice\":\"Get a Pool's address and its token addresses\"},\"getPoolAddress(uint256)\":{\"notice\":\"Get the address of a Pool given its ID\"},\"getPoolConstantsView(address)\":{\"notice\":\"returns all Pool constants\"},\"getPoolConstantsView2(address)\":{\"notice\":\"returns all Pool constants 2\"},\"getPoolFee(address)\":{\"notice\":\"Get a Pool's fee\"},\"getPoolReserves(address)\":{\"notice\":\"Get the token addresses, collateral reserves, and debt reserves for a given Pool address\"},\"getPoolReservesAdjusted(address)\":{\"notice\":\"Get the token addresses, adjusted collateral reserves, and adjusted debt reserves for a given Pool address\"},\"getPoolTokens(address)\":{\"notice\":\"Get the addresses of the tokens in a Pool\"},\"getPoolsReserves(address[])\":{\"notice\":\"Get an array of Pool addresses, their token addresses, collateral reserves, and debt reserves for a given array of Pool addresses\"},\"getPoolsReservesAdjusted(address[])\":{\"notice\":\"Get an array of Pool addresses, their token addresses, adjusted collateral reserves, and adjusted debt reserves for a given array of Pool addresses\"},\"getTotalPools()\":{\"notice\":\"Get the total number of Pools\"}},\"notice\":\"Fluid Dex Reserves resolver Implements various view-only methods to give easy access to Dex protocol reserves data.\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/resolvers/dexReserves/main.sol\":\"FluidDexReservesResolver\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000000},\"remappings\":[]},\"sources\":{\"contracts/libraries/addressCalcs.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\n/// @notice implements calculation of address for contracts deployed through CREATE.\\n/// Accepts contract deployed from which address & nonce\\nlibrary AddressCalcs {\\n\\n    /// @notice                         Computes the address of a contract based\\n    /// @param deployedFrom_            Address from which the contract was deployed\\n    /// @param nonce_                   Nonce at which the contract was deployed\\n    /// @return contract_               Address of deployed contract\\n    function addressCalc(address deployedFrom_, uint nonce_) internal pure returns (address contract_) {\\n        // @dev based on https://ethereum.stackexchange.com/a/61413\\n\\n        // nonce of smart contract always starts with 1. so, with nonce 0 there won't be any deployment\\n        // hence, nonce of vault deployment starts with 1.\\n        bytes memory data;\\n        if (nonce_ == 0x00) {\\n            return address(0);\\n        } else if (nonce_ <= 0x7f) {\\n            data = abi.encodePacked(bytes1(0xd6), bytes1(0x94), deployedFrom_, uint8(nonce_));\\n        } else if (nonce_ <= 0xff) {\\n            data = abi.encodePacked(bytes1(0xd7), bytes1(0x94), deployedFrom_, bytes1(0x81), uint8(nonce_));\\n        } else if (nonce_ <= 0xffff) {\\n            data = abi.encodePacked(bytes1(0xd8), bytes1(0x94), deployedFrom_, bytes1(0x82), uint16(nonce_));\\n        } else if (nonce_ <= 0xffffff) {\\n            data = abi.encodePacked(bytes1(0xd9), bytes1(0x94), deployedFrom_, bytes1(0x83), uint24(nonce_));\\n        } else {\\n            data = abi.encodePacked(bytes1(0xda), bytes1(0x94), deployedFrom_, bytes1(0x84), uint32(nonce_));\\n        }\\n\\n        return address(uint160(uint256(keccak256(data))));\\n    }\\n\\n}\",\"keccak256\":\"0xca389bcfef035463ff43939ac5eccab07ab74cbb053e201541f9bcd846b3105a\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/bytesSliceAndConcat.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nlibrary BytesSliceAndConcat {\\n    // @dev taken from https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol\\n    function bytesConcat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    ) internal pure returns (bytes memory tempBytes) {\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(\\n                0x40,\\n                and(\\n                    add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n                    not(31) // Round down to the nearest 32 bytes.\\n                )\\n            )\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    // @dev taken from https://github.com/GNSPS/solidity-bytes-utils/blob/master/contracts/BytesLib.sol\\n    function bytesSlice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    ) internal pure returns (bytes memory tempBytes) {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n}\\n\",\"keccak256\":\"0x42966896926a24dc7645ebf4679e6d701cb991144ef4d710d87738165d4024c7\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/dexSlotsLink.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\n/// @notice library that helps in reading / working with storage slot data of Fluid Dex.\\n/// @dev as all data for Fluid Dex is internal, any data must be fetched directly through manual\\n/// slot reading through this library or, if gas usage is less important, through the FluidDexResolver.\\nlibrary DexSlotsLink {\\n    /// @dev storage slot for variables at Dex\\n    uint256 internal constant DEX_VARIABLES_SLOT = 0;\\n    /// @dev storage slot for variables2 at Dex\\n    uint256 internal constant DEX_VARIABLES2_SLOT = 1;\\n    /// @dev storage slot for total supply shares at Dex\\n    uint256 internal constant DEX_TOTAL_SUPPLY_SHARES_SLOT = 2;\\n    /// @dev storage slot for user supply mapping at Dex\\n    uint256 internal constant DEX_USER_SUPPLY_MAPPING_SLOT = 3;\\n    /// @dev storage slot for total borrow shares at Dex\\n    uint256 internal constant DEX_TOTAL_BORROW_SHARES_SLOT = 4;\\n    /// @dev storage slot for user borrow mapping at Dex\\n    uint256 internal constant DEX_USER_BORROW_MAPPING_SLOT = 5;\\n    /// @dev storage slot for oracle mapping at Dex\\n    uint256 internal constant DEX_ORACLE_MAPPING_SLOT = 6;\\n    /// @dev storage slot for range and threshold shifts at Dex\\n    uint256 internal constant DEX_RANGE_THRESHOLD_SHIFTS_SLOT = 7;\\n    /// @dev storage slot for center price shift at Dex\\n    uint256 internal constant DEX_CENTER_PRICE_SHIFT_SLOT = 8;\\n\\n    // --------------------------------\\n    // @dev stacked uint256 storage slots bits position data for each:\\n\\n    // UserSupplyData\\n    uint256 internal constant BITS_USER_SUPPLY_ALLOWED = 0;\\n    uint256 internal constant BITS_USER_SUPPLY_AMOUNT = 1;\\n    uint256 internal constant BITS_USER_SUPPLY_PREVIOUS_WITHDRAWAL_LIMIT = 65;\\n    uint256 internal constant BITS_USER_SUPPLY_LAST_UPDATE_TIMESTAMP = 129;\\n    uint256 internal constant BITS_USER_SUPPLY_EXPAND_PERCENT = 162;\\n    uint256 internal constant BITS_USER_SUPPLY_EXPAND_DURATION = 176;\\n    uint256 internal constant BITS_USER_SUPPLY_BASE_WITHDRAWAL_LIMIT = 200;\\n\\n    // UserBorrowData\\n    uint256 internal constant BITS_USER_BORROW_ALLOWED = 0;\\n    uint256 internal constant BITS_USER_BORROW_AMOUNT = 1;\\n    uint256 internal constant BITS_USER_BORROW_PREVIOUS_BORROW_LIMIT = 65;\\n    uint256 internal constant BITS_USER_BORROW_LAST_UPDATE_TIMESTAMP = 129;\\n    uint256 internal constant BITS_USER_BORROW_EXPAND_PERCENT = 162;\\n    uint256 internal constant BITS_USER_BORROW_EXPAND_DURATION = 176;\\n    uint256 internal constant BITS_USER_BORROW_BASE_BORROW_LIMIT = 200;\\n    uint256 internal constant BITS_USER_BORROW_MAX_BORROW_LIMIT = 218;\\n\\n    // --------------------------------\\n\\n    /// @notice Calculating the slot ID for Dex contract for single mapping at `slot_` for `key_`\\n    function calculateMappingStorageSlot(uint256 slot_, address key_) internal pure returns (bytes32) {\\n        return keccak256(abi.encode(key_, slot_));\\n    }\\n\\n    /// @notice Calculating the slot ID for Dex contract for double mapping at `slot_` for `key1_` and `key2_`\\n    function calculateDoubleMappingStorageSlot(\\n        uint256 slot_,\\n        address key1_,\\n        address key2_\\n    ) internal pure returns (bytes32) {\\n        bytes32 intermediateSlot_ = keccak256(abi.encode(key1_, slot_));\\n        return keccak256(abi.encode(key2_, intermediateSlot_));\\n    }\\n}\\n\",\"keccak256\":\"0xf1d6550d83fb0155a26655234922c9bdf4a1bbcf7a3ca767e9123d367a795307\",\"license\":\"BUSL-1.1\"},\"contracts/liquidity/adminModule/structs.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nabstract contract Structs {\\n    struct AddressBool {\\n        address addr;\\n        bool value;\\n    }\\n\\n    struct AddressUint256 {\\n        address addr;\\n        uint256 value;\\n    }\\n\\n    /// @notice struct to set borrow rate data for version 1\\n    struct RateDataV1Params {\\n        ///\\n        /// @param token for rate data\\n        address token;\\n        ///\\n        /// @param kink in borrow rate. in 1e2: 100% = 10_000; 1% = 100\\n        /// utilization below kink usually means slow increase in rate, once utilization is above kink borrow rate increases fast\\n        uint256 kink;\\n        ///\\n        /// @param rateAtUtilizationZero desired borrow rate when utilization is zero. in 1e2: 100% = 10_000; 1% = 100\\n        /// i.e. constant minimum borrow rate\\n        /// e.g. at utilization = 0.01% rate could still be at least 4% (rateAtUtilizationZero would be 400 then)\\n        uint256 rateAtUtilizationZero;\\n        ///\\n        /// @param rateAtUtilizationKink borrow rate when utilization is at kink. in 1e2: 100% = 10_000; 1% = 100\\n        /// e.g. when rate should be 7% at kink then rateAtUtilizationKink would be 700\\n        uint256 rateAtUtilizationKink;\\n        ///\\n        /// @param rateAtUtilizationMax borrow rate when utilization is maximum at 100%. in 1e2: 100% = 10_000; 1% = 100\\n        /// e.g. when rate should be 125% at 100% then rateAtUtilizationMax would be 12_500\\n        uint256 rateAtUtilizationMax;\\n    }\\n\\n    /// @notice struct to set borrow rate data for version 2\\n    struct RateDataV2Params {\\n        ///\\n        /// @param token for rate data\\n        address token;\\n        ///\\n        /// @param kink1 first kink in borrow rate. in 1e2: 100% = 10_000; 1% = 100\\n        /// utilization below kink 1 usually means slow increase in rate, once utilization is above kink 1 borrow rate increases faster\\n        uint256 kink1;\\n        ///\\n        /// @param kink2 second kink in borrow rate. in 1e2: 100% = 10_000; 1% = 100\\n        /// utilization below kink 2 usually means slow / medium increase in rate, once utilization is above kink 2 borrow rate increases fast\\n        uint256 kink2;\\n        ///\\n        /// @param rateAtUtilizationZero desired borrow rate when utilization is zero. in 1e2: 100% = 10_000; 1% = 100\\n        /// i.e. constant minimum borrow rate\\n        /// e.g. at utilization = 0.01% rate could still be at least 4% (rateAtUtilizationZero would be 400 then)\\n        uint256 rateAtUtilizationZero;\\n        ///\\n        /// @param rateAtUtilizationKink1 desired borrow rate when utilization is at first kink. in 1e2: 100% = 10_000; 1% = 100\\n        /// e.g. when rate should be 7% at first kink then rateAtUtilizationKink would be 700\\n        uint256 rateAtUtilizationKink1;\\n        ///\\n        /// @param rateAtUtilizationKink2 desired borrow rate when utilization is at second kink. in 1e2: 100% = 10_000; 1% = 100\\n        /// e.g. when rate should be 7% at second kink then rateAtUtilizationKink would be 1_200\\n        uint256 rateAtUtilizationKink2;\\n        ///\\n        /// @param rateAtUtilizationMax desired borrow rate when utilization is maximum at 100%. in 1e2: 100% = 10_000; 1% = 100\\n        /// e.g. when rate should be 125% at 100% then rateAtUtilizationMax would be 12_500\\n        uint256 rateAtUtilizationMax;\\n    }\\n\\n    /// @notice struct to set token config\\n    struct TokenConfig {\\n        ///\\n        /// @param token address\\n        address token;\\n        ///\\n        /// @param fee charges on borrower's interest. in 1e2: 100% = 10_000; 1% = 100\\n        uint256 fee;\\n        ///\\n        /// @param threshold on when to update the storage slot. in 1e2: 100% = 10_000; 1% = 100\\n        uint256 threshold;\\n        ///\\n        /// @param maxUtilization maximum allowed utilization. in 1e2: 100% = 10_000; 1% = 100\\n        ///                       set to 100% to disable and have default limit of 100% (avoiding SLOAD).\\n        uint256 maxUtilization;\\n    }\\n\\n    /// @notice struct to set user supply & withdrawal config\\n    struct UserSupplyConfig {\\n        ///\\n        /// @param user address\\n        address user;\\n        ///\\n        /// @param token address\\n        address token;\\n        ///\\n        /// @param mode: 0 = without interest. 1 = with interest\\n        uint8 mode;\\n        ///\\n        /// @param expandPercent withdrawal limit expand percent. in 1e2: 100% = 10_000; 1% = 100\\n        /// Also used to calculate rate at which withdrawal limit should decrease (instant).\\n        uint256 expandPercent;\\n        ///\\n        /// @param expandDuration withdrawal limit expand duration in seconds.\\n        /// used to calculate rate together with expandPercent\\n        uint256 expandDuration;\\n        ///\\n        /// @param baseWithdrawalLimit base limit, below this, user can withdraw the entire amount.\\n        /// amount in raw (to be multiplied with exchange price) or normal depends on configured mode in user config for the token:\\n        /// with interest -> raw, without interest -> normal\\n        uint256 baseWithdrawalLimit;\\n    }\\n\\n    /// @notice struct to set user borrow & payback config\\n    struct UserBorrowConfig {\\n        ///\\n        /// @param user address\\n        address user;\\n        ///\\n        /// @param token address\\n        address token;\\n        ///\\n        /// @param mode: 0 = without interest. 1 = with interest\\n        uint8 mode;\\n        ///\\n        /// @param expandPercent debt limit expand percent. in 1e2: 100% = 10_000; 1% = 100\\n        /// Also used to calculate rate at which debt limit should decrease (instant).\\n        uint256 expandPercent;\\n        ///\\n        /// @param expandDuration debt limit expand duration in seconds.\\n        /// used to calculate rate together with expandPercent\\n        uint256 expandDuration;\\n        ///\\n        /// @param baseDebtCeiling base borrow limit. until here, borrow limit remains as baseDebtCeiling\\n        /// (user can borrow until this point at once without stepped expansion). Above this, automated limit comes in place.\\n        /// amount in raw (to be multiplied with exchange price) or normal depends on configured mode in user config for the token:\\n        /// with interest -> raw, without interest -> normal\\n        uint256 baseDebtCeiling;\\n        ///\\n        /// @param maxDebtCeiling max borrow ceiling, maximum amount the user can borrow.\\n        /// amount in raw (to be multiplied with exchange price) or normal depends on configured mode in user config for the token:\\n        /// with interest -> raw, without interest -> normal\\n        uint256 maxDebtCeiling;\\n    }\\n}\\n\",\"keccak256\":\"0x10353c70015f27b880125cefab806dbed24a4458f187da66964f3ef60488f757\",\"license\":\"BUSL-1.1\"},\"contracts/periphery/resolvers/dexReserves/main.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { AddressCalcs } from \\\"../../../libraries/addressCalcs.sol\\\";\\nimport { DexSlotsLink } from \\\"../../../libraries/dexSlotsLink.sol\\\";\\nimport { BytesSliceAndConcat } from \\\"../../../libraries/bytesSliceAndConcat.sol\\\";\\nimport { Structs as FluidLiquidityResolverStructs } from \\\"../liquidity/structs.sol\\\";\\nimport { IFluidDexT1 } from \\\"../../../protocols/dex/interfaces/iDexT1.sol\\\";\\nimport { Variables } from \\\"./variables.sol\\\";\\nimport { Structs } from \\\"./structs.sol\\\";\\nimport { FixedPointMathLib } from \\\"solmate/src/utils/FixedPointMathLib.sol\\\";\\n\\ninterface TokenInterface {\\n    function balanceOf(address) external view returns (uint);\\n}\\n\\n/// @title DexFactoryViews\\n/// @notice Abstract contract providing view functions for DEX factory-related operations\\nabstract contract DexFactoryViews is Variables {\\n    /// @notice Get the address of a Pool given its ID\\n    /// @param poolId_ The ID of the Pool\\n    /// @return pool_ The address of the Pool\\n    function getPoolAddress(uint256 poolId_) public view returns (address pool_) {\\n        return AddressCalcs.addressCalc(address(FACTORY), poolId_);\\n    }\\n\\n    /// @notice Get the total number of Pools\\n    /// @return The total number of Pools\\n    function getTotalPools() public view returns (uint) {\\n        return FACTORY.totalDexes();\\n    }\\n\\n    /// @notice Get an array of all Pool addresses\\n    /// @return pools_ An array containing all Pool addresses\\n    function getAllPoolAddresses() public view returns (address[] memory pools_) {\\n        uint totalPools_ = getTotalPools();\\n        pools_ = new address[](totalPools_);\\n        for (uint i = 0; i < totalPools_; i++) {\\n            pools_[i] = getPoolAddress((i + 1));\\n        }\\n    }\\n}\\n\\n/// @title DexPublicViews\\n/// @notice Abstract contract providing view functions for DEX public data\\nabstract contract DexPublicViews {\\n    /// @notice Get the prices and exchange prices for a DEX\\n    /// @param dex_ The address of the DEX\\n    /// @return pex_ A struct containing prices and exchange prices\\n    /// @dev expected to be called via callStatic\\n    function getDexPricesAndExchangePrices(\\n        address dex_\\n    ) public returns (IFluidDexT1.PricesAndExchangePrice memory pex_) {\\n        try IFluidDexT1(dex_).getPricesAndExchangePrices() {} catch (bytes memory lowLevelData_) {\\n            bytes4 errorSelector_;\\n            assembly {\\n                // Extract the selector from the error data\\n                errorSelector_ := mload(add(lowLevelData_, 0x20))\\n            }\\n            if (errorSelector_ == IFluidDexT1.FluidDexPricesAndExchangeRates.selector) {\\n                pex_ = abi.decode(\\n                    BytesSliceAndConcat.bytesSlice(lowLevelData_, 4, lowLevelData_.length - 4),\\n                    (IFluidDexT1.PricesAndExchangePrice)\\n                );\\n            }\\n        }\\n    }\\n\\n    /// @notice Get the collateral reserves for a DEX in token decimals amounts\\n    /// @param dex_ The address of the DEX\\n    /// @return reserves_ A struct containing collateral reserve information\\n    /// @dev expected to be called via callStatic\\n    function getDexCollateralReserves(address dex_) public returns (IFluidDexT1.CollateralReserves memory reserves_) {\\n        reserves_ = getDexCollateralReservesAdjusted(dex_);\\n\\n        IFluidDexT1.ConstantViews2 memory constantsView2_ = IFluidDexT1(dex_).constantsView2();\\n\\n        // returned reserves are in 1e12 decimals -> normalize to token decimals\\n        reserves_.token0RealReserves =\\n            (reserves_.token0RealReserves * constantsView2_.token0DenominatorPrecision) /\\n            constantsView2_.token0NumeratorPrecision;\\n        reserves_.token0ImaginaryReserves =\\n            (reserves_.token0ImaginaryReserves * constantsView2_.token0DenominatorPrecision) /\\n            constantsView2_.token0NumeratorPrecision;\\n        reserves_.token1RealReserves =\\n            (reserves_.token1RealReserves * constantsView2_.token1DenominatorPrecision) /\\n            constantsView2_.token1NumeratorPrecision;\\n        reserves_.token1ImaginaryReserves =\\n            (reserves_.token1ImaginaryReserves * constantsView2_.token1DenominatorPrecision) /\\n            constantsView2_.token1NumeratorPrecision;\\n    }\\n\\n    /// @notice Get the collateral reserves for a DEX scaled to 1e12\\n    /// @param dex_ The address of the DEX\\n    /// @return reserves_ A struct containing collateral reserve information\\n    /// @dev expected to be called via callStatic\\n    function getDexCollateralReservesAdjusted(\\n        address dex_\\n    ) public returns (IFluidDexT1.CollateralReserves memory reserves_) {\\n        uint256 dexVariables2_ = IFluidDexT1(dex_).readFromStorage(bytes32(DexSlotsLink.DEX_VARIABLES2_SLOT));\\n        if ((dexVariables2_ & 1) != 1) {\\n            // smart col not enabled\\n            return IFluidDexT1.CollateralReserves(0, 0, 0, 0);\\n        }\\n\\n        try this.getDexPricesAndExchangePrices(dex_) returns (IFluidDexT1.PricesAndExchangePrice memory pex_) {\\n            try\\n                IFluidDexT1(dex_).getCollateralReserves(\\n                    pex_.geometricMean,\\n                    pex_.upperRange,\\n                    pex_.lowerRange,\\n                    pex_.supplyToken0ExchangePrice,\\n                    pex_.supplyToken1ExchangePrice\\n                )\\n            returns (IFluidDexT1.CollateralReserves memory colReserves_) {\\n                // returned reserves are in 1e12 decimals -> normalize to token decimals\\n                reserves_ = colReserves_;\\n            } catch {\\n                reserves_ = IFluidDexT1.CollateralReserves(0, 0, 0, 0);\\n            }\\n        } catch {\\n            reserves_ = IFluidDexT1.CollateralReserves(0, 0, 0, 0);\\n        }\\n    }\\n\\n    /// @notice Get the debt reserves for a DEX in token decimals amounts\\n    /// @param dex_ The address of the DEX\\n    /// @return reserves_ A struct containing debt reserve information\\n    /// @dev expected to be called via callStatic\\n    function getDexDebtReserves(address dex_) public returns (IFluidDexT1.DebtReserves memory reserves_) {\\n        reserves_ = getDexDebtReservesAdjusted(dex_);\\n\\n        IFluidDexT1.ConstantViews2 memory constantsView2_ = IFluidDexT1(dex_).constantsView2();\\n\\n        // returned reserves are in 1e12 decimals -> normalize to token decimals\\n        reserves_.token0Debt =\\n            (reserves_.token0Debt * constantsView2_.token0DenominatorPrecision) /\\n            constantsView2_.token0NumeratorPrecision;\\n        reserves_.token0RealReserves =\\n            (reserves_.token0RealReserves * constantsView2_.token0DenominatorPrecision) /\\n            constantsView2_.token0NumeratorPrecision;\\n        reserves_.token0ImaginaryReserves =\\n            (reserves_.token0ImaginaryReserves * constantsView2_.token0DenominatorPrecision) /\\n            constantsView2_.token0NumeratorPrecision;\\n        reserves_.token1Debt =\\n            (reserves_.token1Debt * constantsView2_.token1DenominatorPrecision) /\\n            constantsView2_.token1NumeratorPrecision;\\n        reserves_.token1RealReserves =\\n            (reserves_.token1RealReserves * constantsView2_.token1DenominatorPrecision) /\\n            constantsView2_.token1NumeratorPrecision;\\n        reserves_.token1ImaginaryReserves =\\n            (reserves_.token1ImaginaryReserves * constantsView2_.token1DenominatorPrecision) /\\n            constantsView2_.token1NumeratorPrecision;\\n    }\\n\\n    /// @notice Get the debt reserves for a DEX scaled to 1e12\\n    /// @param dex_ The address of the DEX\\n    /// @return reserves_ A struct containing debt reserve information\\n    /// @dev expected to be called via callStatic\\n    function getDexDebtReservesAdjusted(address dex_) public returns (IFluidDexT1.DebtReserves memory reserves_) {\\n        uint256 dexVariables2_ = IFluidDexT1(dex_).readFromStorage(bytes32(DexSlotsLink.DEX_VARIABLES2_SLOT));\\n        if ((dexVariables2_ & 2) != 2) {\\n            // smart debt not enabled\\n            return IFluidDexT1.DebtReserves(0, 0, 0, 0, 0, 0);\\n        }\\n\\n        try this.getDexPricesAndExchangePrices(dex_) returns (IFluidDexT1.PricesAndExchangePrice memory pex_) {\\n            try\\n                IFluidDexT1(dex_).getDebtReserves(\\n                    pex_.geometricMean,\\n                    pex_.upperRange,\\n                    pex_.lowerRange,\\n                    pex_.borrowToken0ExchangePrice,\\n                    pex_.borrowToken1ExchangePrice\\n                )\\n            returns (IFluidDexT1.DebtReserves memory debtReserves_) {\\n                // returned reserves are in 1e12 decimals -> normalize to token decimals\\n                reserves_ = debtReserves_;\\n            } catch {\\n                reserves_ = IFluidDexT1.DebtReserves(0, 0, 0, 0, 0, 0);\\n            }\\n        } catch {\\n            reserves_ = IFluidDexT1.DebtReserves(0, 0, 0, 0, 0, 0);\\n        }\\n    }\\n}\\n\\n/// @title DexConstantsViews\\n/// @notice Abstract contract providing view functions for DEX constants\\nabstract contract DexConstantsViews {\\n    /// @notice returns all Pool constants\\n    function getPoolConstantsView(address pool_) public view returns (IFluidDexT1.ConstantViews memory constantsView_) {\\n        return IFluidDexT1(pool_).constantsView();\\n    }\\n\\n    /// @notice returns all Pool constants 2\\n    function getPoolConstantsView2(\\n        address pool_\\n    ) public view returns (IFluidDexT1.ConstantViews2 memory constantsView2_) {\\n        return IFluidDexT1(pool_).constantsView2();\\n    }\\n\\n    /// @notice Get the addresses of the tokens in a Pool\\n    /// @param pool_ The address of the Pool\\n    /// @return token0_ The address of token0 in the Pool\\n    /// @return token1_ The address of token1 in the Pool\\n    function getPoolTokens(address pool_) public view returns (address token0_, address token1_) {\\n        IFluidDexT1.ConstantViews memory constantsView_ = IFluidDexT1(pool_).constantsView();\\n        return (constantsView_.token0, constantsView_.token1);\\n    }\\n}\\n\\nabstract contract DexSwapLimits is Variables, Structs, DexConstantsViews {\\n    /// @notice get the swap limits for a DEX\\n    /// @param dex_ The address of the DEX\\n    /// @return limits_ A struct containing the swap limits for the DEX\\n    function getDexLimits(address dex_) public view returns (DexLimits memory limits_) {\\n        // additional liquidity related data such as supply amount, limits, expansion etc.\\n        FluidLiquidityResolverStructs.UserSupplyData memory liquidityUserSupplyDataToken0_;\\n        FluidLiquidityResolverStructs.UserSupplyData memory liquidityUserSupplyDataToken1_;\\n        // liquidity token related data\\n        FluidLiquidityResolverStructs.OverallTokenData memory liquidityTokenData0_;\\n        FluidLiquidityResolverStructs.OverallTokenData memory liquidityTokenData1_;\\n        // additional liquidity related data such as borrow amount, limits, expansion etc.\\n        FluidLiquidityResolverStructs.UserBorrowData memory liquidityUserBorrowDataToken0_;\\n        FluidLiquidityResolverStructs.UserBorrowData memory liquidityUserBorrowDataToken1_;\\n\\n        {\\n            (address token0_, address token1_) = getPoolTokens(dex_);\\n            (liquidityUserSupplyDataToken0_, liquidityTokenData0_) = LIQUIDITY_RESOLVER.getUserSupplyData(\\n                dex_,\\n                token0_\\n            );\\n            (liquidityUserSupplyDataToken1_, liquidityTokenData1_) = LIQUIDITY_RESOLVER.getUserSupplyData(\\n                dex_,\\n                token1_\\n            );\\n            (liquidityUserBorrowDataToken0_, ) = LIQUIDITY_RESOLVER.getUserBorrowData(dex_, token0_);\\n            (liquidityUserBorrowDataToken1_, ) = LIQUIDITY_RESOLVER.getUserBorrowData(dex_, token1_);\\n\\n            // ----------------------- 1. UTILIZATION LIMITS (include liquidity layer balances) -----------------------\\n            // for dex, utilization limit check is not just after borrow but also after withdraw (after any swap).\\n            // for liquidity, utilization limit check is only after borrow.\\n            // so for borrow, use utilization config of either liquidity or dex, whatever is smaller. for withdraw, use dex.\\n\\n            uint256 dexVariables2_ = IFluidDexT1(dex_).readFromStorage(bytes32(DexSlotsLink.DEX_VARIABLES2_SLOT));\\n            /// Next 10 bits => 228-237 => utilization limit of token0. Max value 1000 = 100%, if 100% then no need to check the utilization.\\n            /// Next 10 bits => 238-247 => utilization limit of token1. Max value 1000 = 100%, if 100% then no need to check the utilization.\\n            {\\n                // TOKEN 0\\n                uint256 maxUtilizationToken0Dex_ = ((dexVariables2_ >> 228) & X10) * 10; // bring to 1e2 same as liquidity layer\\n                // check if max utilization at liquidity layer is smaller for combined config\\n                uint256 maxUtilizationToken0Combined_ = maxUtilizationToken0Dex_;\\n                if (liquidityTokenData0_.maxUtilization < maxUtilizationToken0Combined_) {\\n                    maxUtilizationToken0Combined_ = liquidityTokenData0_.maxUtilization;\\n                }\\n\\n                // calculate utilization limit amount % of total supply (with combined config for borrow)\\n                uint256 maxUtilizationToken0_ = (liquidityTokenData0_.totalSupply * maxUtilizationToken0Combined_) /\\n                    1e4;\\n\\n                if (liquidityTokenData0_.totalBorrow < maxUtilizationToken0_) {\\n                    // expands to & available: amount until utilization max\\n                    // get amount where currently borrowed = utilization limit of total supply. for withdraw only dex config counts.\\n                    limits_.withdrawableToken0.available = maxUtilizationToken0Dex_ == 0\\n                        ? 0\\n                        : (1e4 * liquidityTokenData0_.totalBorrow) / maxUtilizationToken0Dex_;\\n                    limits_.withdrawableToken0.available = liquidityTokenData0_.totalSupply >\\n                        limits_.withdrawableToken0.available\\n                        ? liquidityTokenData0_.totalSupply - limits_.withdrawableToken0.available\\n                        : 0;\\n                    // no expansion on utilization\\n                    limits_.withdrawableToken0.expandsTo = limits_.withdrawableToken0.available;\\n\\n                    limits_.borrowableToken0.available = maxUtilizationToken0_ - liquidityTokenData0_.totalBorrow;\\n                    // no expansion on utilization\\n                    limits_.borrowableToken0.expandsTo = limits_.borrowableToken0.available;\\n\\n                    // balance at liquidity layer is a hard limit that can not be expanded beyond\\n                    uint balanceLiquidity_ = token0_ == NATIVE_TOKEN_ADDRESS\\n                        ? address(LIQUIDITY).balance\\n                        : TokenInterface(token0_).balanceOf(address(LIQUIDITY));\\n                    if (limits_.withdrawableToken0.expandsTo > balanceLiquidity_) {\\n                        limits_.withdrawableToken0.expandsTo = balanceLiquidity_;\\n                    }\\n                    if (limits_.borrowableToken0.expandsTo > balanceLiquidity_) {\\n                        limits_.borrowableToken0.expandsTo = balanceLiquidity_;\\n                    }\\n                }\\n            }\\n\\n            {\\n                // TOKEN 1\\n                uint256 maxUtilizationToken1Dex_ = ((dexVariables2_ >> 238) & X10) * 10;\\n                uint256 maxUtilizationToken1Combined_ = maxUtilizationToken1Dex_;\\n                if (liquidityTokenData1_.maxUtilization < maxUtilizationToken1Combined_) {\\n                    maxUtilizationToken1Combined_ = liquidityTokenData1_.maxUtilization;\\n                }\\n                uint256 maxUtilizationToken1_ = (liquidityTokenData1_.totalSupply * maxUtilizationToken1Combined_) /\\n                    1e4;\\n                if (liquidityTokenData1_.totalBorrow < maxUtilizationToken1_) {\\n                    // expands to & available: amount until utilization max\\n                    // get amount where currently borrowed = utilization limit of total supply. for withdraw only dex config counts.\\n                    limits_.withdrawableToken1.available = maxUtilizationToken1Dex_ == 0\\n                        ? 0\\n                        : (1e4 * liquidityTokenData1_.totalBorrow) / maxUtilizationToken1Dex_;\\n                    limits_.withdrawableToken1.available = liquidityTokenData1_.totalSupply >\\n                        limits_.withdrawableToken1.available\\n                        ? liquidityTokenData1_.totalSupply - limits_.withdrawableToken1.available\\n                        : 0;\\n                    // no expansion on utilization\\n                    limits_.withdrawableToken1.expandsTo = limits_.withdrawableToken1.available;\\n\\n                    limits_.borrowableToken1.available = maxUtilizationToken1_ - liquidityTokenData1_.totalBorrow;\\n                    // no expansion on utilization\\n                    limits_.borrowableToken1.expandsTo = limits_.borrowableToken1.available;\\n\\n                    // balance at liquidity layer is a hard limit that can not be expanded beyond\\n                    uint balanceLiquidity_ = token1_ == NATIVE_TOKEN_ADDRESS\\n                        ? address(LIQUIDITY).balance\\n                        : TokenInterface(token1_).balanceOf(address(LIQUIDITY));\\n                    if (limits_.withdrawableToken1.expandsTo > balanceLiquidity_) {\\n                        limits_.withdrawableToken1.expandsTo = balanceLiquidity_;\\n                    }\\n                    if (limits_.borrowableToken1.expandsTo > balanceLiquidity_) {\\n                        limits_.borrowableToken1.expandsTo = balanceLiquidity_;\\n                    }\\n                }\\n            }\\n        }\\n\\n        // ----------------------- 2. WITHDRAW AND BORROW LIMITS (include liquidity layer balances) -----------------------\\n\\n        // expandsTo = max possible amount at full expansion\\n        // expandDuration = time of expandDuration config left until maxExpansion is reached\\n\\n        // TOKEN 0 WITHDRAWABLE\\n        {\\n            uint256 expandTimeLeft_ = liquidityUserSupplyDataToken0_.lastUpdateTimestamp +\\n                liquidityUserSupplyDataToken0_.expandDuration;\\n            expandTimeLeft_ = block.timestamp > expandTimeLeft_ ? 0 : expandTimeLeft_ - block.timestamp;\\n\\n            uint256 maxWithdrawable_ = (liquidityUserSupplyDataToken0_.expandPercent *\\n                liquidityUserSupplyDataToken0_.supply) / 1e4;\\n            if (liquidityUserSupplyDataToken0_.withdrawable > maxWithdrawable_) {\\n                // max expansion already reached or below base limit\\n                maxWithdrawable_ = liquidityUserSupplyDataToken0_.withdrawable;\\n                expandTimeLeft_ = 0;\\n            }\\n\\n            if (maxWithdrawable_ <= limits_.withdrawableToken0.expandsTo) {\\n                // if max withdrawable until limit is less than utilization limit, then set max withdrawable until limit as expansion limit.\\n                limits_.withdrawableToken0.expandsTo = maxWithdrawable_;\\n\\n                expandTimeLeft_ = maxWithdrawable_ == 0\\n                    ? 0\\n                    : ((limits_.withdrawableToken0.expandsTo - liquidityUserSupplyDataToken0_.withdrawable) *\\n                        liquidityUserSupplyDataToken0_.expandDuration) / maxWithdrawable_;\\n            } else {\\n                // max withdrawable expansion is limited by utilization or liquidity layer balance.\\n                // recalculate the duration until that earlier limit is hit.\\n                if (liquidityUserSupplyDataToken0_.withdrawable > limits_.withdrawableToken0.expandsTo) {\\n                    // withdrawable amount at LiquidityResolver does not have dex utilization limit included\\n                    // so this case could actually happen. if so, then adjust withdrawable and expansion is already\\n                    // max reached so duration left is 0.\\n                    expandTimeLeft_ = 0;\\n                    liquidityUserSupplyDataToken0_.withdrawable = limits_.withdrawableToken0.expandsTo;\\n                } else {\\n                    // expansionPerSecond_ = maxWithdrawable_ / expandDuration;\\n                    // withdrawable + expansionPerSecond_ * x = expandsTo;\\n                    // so x = (expandsTo - withdrawable) / expansionPerSecond_;\\n                    // so x = (expandsTo - withdrawable) / (maxWithdrawable_ / expandDuration);\\n                    // so x = (expandsTo - withdrawable) * expandDuration / maxWithdrawable_;\\n                    expandTimeLeft_ = maxWithdrawable_ == 0\\n                        ? 0\\n                        : ((limits_.withdrawableToken0.expandsTo - liquidityUserSupplyDataToken0_.withdrawable) *\\n                            liquidityUserSupplyDataToken0_.expandDuration) / maxWithdrawable_;\\n                }\\n            }\\n            limits_.withdrawableToken0.expandDuration = expandTimeLeft_;\\n        }\\n\\n        // TOKEN 1 WITHDRAWABLE\\n        {\\n            uint256 expandTimeLeft_ = liquidityUserSupplyDataToken1_.lastUpdateTimestamp +\\n                liquidityUserSupplyDataToken1_.expandDuration;\\n            expandTimeLeft_ = block.timestamp > expandTimeLeft_ ? 0 : expandTimeLeft_ - block.timestamp;\\n\\n            uint256 maxWithdrawable_ = (liquidityUserSupplyDataToken1_.expandPercent *\\n                liquidityUserSupplyDataToken1_.supply) / 1e4;\\n            if (liquidityUserSupplyDataToken1_.withdrawable > maxWithdrawable_) {\\n                // max expansion already reached or below base limit\\n                maxWithdrawable_ = liquidityUserSupplyDataToken1_.withdrawable;\\n                expandTimeLeft_ = 0;\\n            }\\n\\n            if (maxWithdrawable_ <= limits_.withdrawableToken1.expandsTo) {\\n                // if max withdrawable until limit is less than utilization limit, then set max withdrawable until limit as expansion limit.\\n                limits_.withdrawableToken1.expandsTo = maxWithdrawable_;\\n\\n                expandTimeLeft_ = maxWithdrawable_ == 0\\n                    ? 0\\n                    : ((limits_.withdrawableToken1.expandsTo - liquidityUserSupplyDataToken1_.withdrawable) *\\n                        liquidityUserSupplyDataToken1_.expandDuration) / maxWithdrawable_;\\n            } else {\\n                // max withdrawable expansion is limited by utilization or liquidity layer balance.\\n                // recalculate the duration until that earlier limit is hit.\\n                if (liquidityUserSupplyDataToken1_.withdrawable > limits_.withdrawableToken1.expandsTo) {\\n                    // withdrawable amount at LiquidityResolver does not have dex utilization limit included\\n                    // so this case could actually happen. if so, then adjust withdrawable and expansion is already\\n                    // max reached so duration left is 0.\\n                    expandTimeLeft_ = 0;\\n                    liquidityUserSupplyDataToken1_.withdrawable = limits_.withdrawableToken1.expandsTo;\\n                } else {\\n                    expandTimeLeft_ = maxWithdrawable_ == 0\\n                        ? 0\\n                        : ((limits_.withdrawableToken1.expandsTo - liquidityUserSupplyDataToken1_.withdrawable) *\\n                            liquidityUserSupplyDataToken1_.expandDuration) / maxWithdrawable_;\\n                }\\n            }\\n            limits_.withdrawableToken1.expandDuration = expandTimeLeft_;\\n        }\\n\\n        // TOKEN 0 BORROWABLE\\n        {\\n            uint256 expandTimeLeft_ = liquidityUserBorrowDataToken0_.lastUpdateTimestamp +\\n                liquidityUserBorrowDataToken0_.expandDuration;\\n            expandTimeLeft_ = block.timestamp > expandTimeLeft_ ? 0 : expandTimeLeft_ - block.timestamp;\\n\\n            uint256 maxBorrowable_ = (liquidityUserBorrowDataToken0_.expandPercent *\\n                liquidityUserBorrowDataToken0_.borrow) / 1e4;\\n            {\\n                // consider max hard borrow limit\\n                uint256 maxBorrowableUntilHardLimit_ = liquidityUserBorrowDataToken0_.maxBorrowLimit -\\n                    liquidityUserBorrowDataToken0_.borrow;\\n                if (limits_.borrowableToken0.expandsTo > maxBorrowableUntilHardLimit_) {\\n                    limits_.borrowableToken0.expandsTo = maxBorrowableUntilHardLimit_;\\n                }\\n            }\\n            if (liquidityUserBorrowDataToken0_.borrowable > maxBorrowable_) {\\n                // max expansion already reached or below base limit\\n                maxBorrowable_ = liquidityUserBorrowDataToken0_.borrowable;\\n                expandTimeLeft_ = 0;\\n            }\\n\\n            if (maxBorrowable_ <= limits_.borrowableToken0.expandsTo) {\\n                // if max borrowable until limit is less than utilization limit, then set max borrowable until limit as expansion limit.\\n                limits_.borrowableToken0.expandsTo = maxBorrowable_;\\n\\n                // expansionPerSecond_ = maxBorrowable_ / expandDuration;\\n                // borrowable + expansionPerSecond_ * x = expandsTo;\\n                expandTimeLeft_ = maxBorrowable_ == 0\\n                    ? 0\\n                    : ((limits_.borrowableToken0.expandsTo - liquidityUserBorrowDataToken0_.borrowable) *\\n                        liquidityUserBorrowDataToken0_.expandDuration) / maxBorrowable_;\\n            } else {\\n                // max borrowable expansion is limited by utilization or liquidity layer balance.\\n                // recalculate the duration until that earlier limit is hit.\\n                if (liquidityUserBorrowDataToken0_.borrowable > limits_.borrowableToken0.expandsTo) {\\n                    // borrowable amount at LiquidityResolver does not have dex utilization limit included\\n                    // so this case could actually happen. if so, then adjust borrowable and expansion is already\\n                    // max reached so duration left is 0.\\n                    expandTimeLeft_ = 0;\\n                    liquidityUserBorrowDataToken0_.borrowable = limits_.borrowableToken0.expandsTo;\\n                } else {\\n                    expandTimeLeft_ = maxBorrowable_ == 0\\n                        ? 0\\n                        : ((limits_.borrowableToken0.expandsTo - liquidityUserBorrowDataToken0_.borrowable) *\\n                            liquidityUserBorrowDataToken0_.expandDuration) / maxBorrowable_;\\n                }\\n            }\\n            limits_.borrowableToken0.expandDuration = expandTimeLeft_;\\n        }\\n\\n        // TOKEN 1 BORROWABLE\\n        {\\n            uint256 expandTimeLeft_ = liquidityUserBorrowDataToken1_.lastUpdateTimestamp +\\n                liquidityUserBorrowDataToken1_.expandDuration;\\n            expandTimeLeft_ = block.timestamp > expandTimeLeft_ ? 0 : expandTimeLeft_ - block.timestamp;\\n\\n            uint256 maxBorrowable_ = (liquidityUserBorrowDataToken1_.expandPercent *\\n                liquidityUserBorrowDataToken1_.borrow) / 1e4;\\n            {\\n                // consider max hard borrow limit\\n                uint256 maxBorrowableUntilHardLimit_ = liquidityUserBorrowDataToken1_.maxBorrowLimit -\\n                    liquidityUserBorrowDataToken1_.borrow;\\n                if (limits_.borrowableToken1.expandsTo > maxBorrowableUntilHardLimit_) {\\n                    limits_.borrowableToken1.expandsTo = maxBorrowableUntilHardLimit_;\\n                }\\n            }\\n            if (liquidityUserBorrowDataToken1_.borrowable > maxBorrowable_) {\\n                // max expansion already reached or below base limit\\n                maxBorrowable_ = liquidityUserBorrowDataToken1_.borrowable;\\n                expandTimeLeft_ = 0;\\n            }\\n\\n            if (maxBorrowable_ <= limits_.borrowableToken1.expandsTo) {\\n                // if max borrowable until limit is less than utilization limit, then set max borrowable until limit as expansion limit.\\n                limits_.borrowableToken1.expandsTo = maxBorrowable_;\\n\\n                // expansionPerSecond_ = maxBorrowable_ / expandDuration;\\n                // borrowable + expansionPerSecond_ * x = expandsTo;\\n                expandTimeLeft_ = maxBorrowable_ == 0\\n                    ? 0\\n                    : ((limits_.borrowableToken1.expandsTo - liquidityUserBorrowDataToken1_.borrowable) *\\n                        liquidityUserBorrowDataToken1_.expandDuration) / maxBorrowable_;\\n            } else {\\n                // max borrowable expansion is limited by utilization or liquidity layer balance.\\n                // recalculate the duration until that earlier limit is hit.\\n                if (liquidityUserBorrowDataToken1_.borrowable > limits_.borrowableToken1.expandsTo) {\\n                    // borrowable amount at LiquidityResolver does not have dex utilization limit included\\n                    // so this case could actually happen. if so, then adjust borrowable and expansion is already\\n                    // max reached so duration left is 0.\\n                    expandTimeLeft_ = 0;\\n                    liquidityUserBorrowDataToken1_.borrowable = limits_.borrowableToken1.expandsTo;\\n                } else {\\n                    expandTimeLeft_ = maxBorrowable_ == 0\\n                        ? 0\\n                        : ((limits_.borrowableToken1.expandsTo - liquidityUserBorrowDataToken1_.borrowable) *\\n                            liquidityUserBorrowDataToken1_.expandDuration) / maxBorrowable_;\\n                }\\n            }\\n            limits_.borrowableToken1.expandDuration = expandTimeLeft_;\\n        }\\n\\n        // for available amounts, set withdrawable / borrowable (incl. liquidity balances) if less than available until utilization\\n        if (liquidityUserSupplyDataToken1_.withdrawable < limits_.withdrawableToken0.available) {\\n            limits_.withdrawableToken0.available = liquidityUserSupplyDataToken0_.withdrawable;\\n        }\\n        if (liquidityUserSupplyDataToken1_.withdrawable < limits_.withdrawableToken1.available) {\\n            limits_.withdrawableToken1.available = liquidityUserSupplyDataToken1_.withdrawable;\\n        }\\n        if (liquidityUserBorrowDataToken0_.borrowable < limits_.borrowableToken0.available) {\\n            limits_.borrowableToken0.available = liquidityUserBorrowDataToken0_.borrowable;\\n        }\\n        if (liquidityUserBorrowDataToken1_.borrowable < limits_.borrowableToken1.available) {\\n            limits_.borrowableToken1.available = liquidityUserBorrowDataToken1_.borrowable;\\n        }\\n    }\\n}\\n\\nabstract contract DexActionEstimates is DexPublicViews, DexSwapLimits {\\n    address private constant ADDRESS_DEAD = 0x000000000000000000000000000000000000dEaD;\\n\\n    /// @param t total amount in\\n    /// @param x imaginary reserves of token out of collateral\\n    /// @param y imaginary reserves of token in of collateral\\n    /// @param x2 imaginary reserves of token out of debt\\n    /// @param y2 imaginary reserves of token in of debt\\n    /// @return a_ how much swap should go through collateral pool. Remaining will go from debt\\n    /// note if a < 0 then entire trade route through debt pool and debt pool arbitrage with col pool\\n    /// note if a > t then entire trade route through col pool and col pool arbitrage with debt pool\\n    /// note if a > 0 & a < t then swap will route through both pools\\n    function _swapRoutingIn(uint t, uint x, uint y, uint x2, uint y2) private pure returns (int a_) {\\n        // Main equations:\\n        // 1. out = x * a / (y + a)\\n        // 2. out2 = x2 * (t - a) / (y2 + (t - a))\\n        // final price should be same\\n        // 3. (y + a) / (x - out) = (y2 + (t - a)) / (x2 - out2)\\n        // derivation: https://chatgpt.com/share/dce6f381-ee5f-4d5f-b6ea-5996e84d5b57\\n\\n        // adding 1e18 precision\\n        uint xyRoot_ = FixedPointMathLib.sqrt(x * y * 1e18);\\n        uint x2y2Root_ = FixedPointMathLib.sqrt(x2 * y2 * 1e18);\\n\\n        a_ = (int(y2 * xyRoot_ + t * xyRoot_) - int(y * x2y2Root_)) / int(xyRoot_ + x2y2Root_);\\n    }\\n\\n    /// @param t total amount out\\n    /// @param x imaginary reserves of token in of collateral\\n    /// @param y imaginary reserves of token out of collateral\\n    /// @param x2 imaginary reserves of token in of debt\\n    /// @param y2 imaginary reserves of token out of debt\\n    /// @return a_ how much swap should go through collateral pool. Remaining will go from debt\\n    /// note if a < 0 then entire trade route through debt pool and debt pool arbitrage with col pool\\n    /// note if a > t then entire trade route through col pool and col pool arbitrage with debt pool\\n    /// note if a > 0 & a < t then swap will route through both pools\\n    function _swapRoutingOut(uint t, uint x, uint y, uint x2, uint y2) private pure returns (int a_) {\\n        // Main equations:\\n        // 1. in = (x * a) / (y - a)\\n        // 2. in2 = (x2 * (t - a)) / (y2 - (t - a))\\n        // final price should be same\\n        // 3. (y - a) / (x + in) = (y2 - (t - a)) / (x2 + in2)\\n        // derivation: https://chatgpt.com/share/6585bc28-841f-49ec-aea2-1e5c5b7f4fa9\\n\\n        // adding 1e18 precision\\n        uint xyRoot_ = FixedPointMathLib.sqrt(x * y * 1e18);\\n        uint x2y2Root_ = FixedPointMathLib.sqrt(x2 * y2 * 1e18);\\n\\n        // 1e18 precision gets cancelled out in division\\n        a_ = (int(t * xyRoot_ + y * x2y2Root_) - int(y2 * xyRoot_)) / int(xyRoot_ + x2y2Root_);\\n    }\\n\\n    /// @dev Given an input amount of asset and pair reserves, returns the maximum output amount of the other asset\\n    /// @param amountIn_ The amount of input asset.\\n    /// @param iReserveIn_ Imaginary token reserve with input amount.\\n    /// @param iReserveOut_ Imaginary token reserve of output amount.\\n    function _getAmountOut(\\n        uint256 amountIn_,\\n        uint iReserveIn_,\\n        uint iReserveOut_\\n    ) private pure returns (uint256 amountOut_) {\\n        unchecked {\\n            // Both numerator and denominator are scaled to 1e6 to factor in fee scaling.\\n            uint256 numerator_ = amountIn_ * iReserveOut_;\\n            uint256 denominator_ = iReserveIn_ + amountIn_;\\n\\n            // Using the swap formula: (AmountIn * iReserveY) / (iReserveX + AmountIn)\\n            amountOut_ = numerator_ / denominator_;\\n        }\\n    }\\n\\n    /// @dev Given an output amount of asset and pair reserves, returns the input amount of the other asset\\n    /// @param amountOut_ Desired output amount of the asset.\\n    /// @param iReserveIn_ Imaginary token reserve of input amount.\\n    /// @param iReserveOut_ Imaginary token reserve of output amount.\\n    function _getAmountIn(\\n        uint256 amountOut_,\\n        uint iReserveIn_,\\n        uint iReserveOut_\\n    ) private pure returns (uint256 amountIn_) {\\n        // Both numerator and denominator are scaled to 1e6 to factor in fee scaling.\\n        uint256 numerator_ = amountOut_ * iReserveIn_;\\n        uint256 denominator_ = iReserveOut_ - amountOut_;\\n\\n        // Using the swap formula: (AmountOut * iReserveX) / (iReserveY - AmountOut)\\n        amountIn_ = numerator_ / denominator_;\\n    }\\n\\n    struct EstimateMemoryVars {\\n        uint256 colTokenInImaginaryReserves;\\n        uint256 colTokenOutImaginaryReserves;\\n        uint256 debtTokenInImaginaryReserves;\\n        uint256 debtTokenOutImaginaryReserves;\\n        uint256 amountOutCollateralAdjusted;\\n        uint256 amountOutDebtAdjusted;\\n        uint256 amountInCollateralAdjusted;\\n        uint256 amountInDebtAdjusted;\\n    }\\n\\n    /// @notice estimates swap IN tokens execution\\n    /// @param dex_ Dex pool\\n    /// @param swap0to1_ Direction of swap. If true, swaps token0 for token1; if false, swaps token1 for token0\\n    /// @param amountIn_ The exact amount of input tokens to swap\\n    /// @param amountOutMin_ The minimum amount of output tokens the user is willing to accept\\n    /// @return amountOut_ The amount of output tokens received from the swap\\n    function estimateSwapIn(\\n        address dex_,\\n        bool swap0to1_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_\\n    ) public payable returns (uint256 amountOut_) {\\n        try IFluidDexT1(dex_).swapIn{ value: msg.value }(swap0to1_, amountIn_, amountOutMin_, ADDRESS_DEAD) {} catch (\\n            bytes memory lowLevelData_\\n        ) {\\n            (amountOut_) = _decodeLowLevelUint1x(lowLevelData_, IFluidDexT1.FluidDexSwapResult.selector);\\n        }\\n\\n        EstimateMemoryVars memory e_;\\n        {\\n            IFluidDexT1.CollateralReserves memory colReserves_ = getDexCollateralReservesAdjusted(dex_);\\n            IFluidDexT1.DebtReserves memory debtReserves_ = getDexDebtReservesAdjusted(dex_);\\n            if (swap0to1_) {\\n                e_.colTokenInImaginaryReserves = colReserves_.token0ImaginaryReserves;\\n                e_.colTokenOutImaginaryReserves = colReserves_.token1ImaginaryReserves;\\n                e_.debtTokenInImaginaryReserves = debtReserves_.token0ImaginaryReserves;\\n                e_.debtTokenOutImaginaryReserves = debtReserves_.token1ImaginaryReserves;\\n            } else {\\n                e_.colTokenInImaginaryReserves = colReserves_.token1ImaginaryReserves;\\n                e_.colTokenOutImaginaryReserves = colReserves_.token0ImaginaryReserves;\\n                e_.debtTokenInImaginaryReserves = debtReserves_.token1ImaginaryReserves;\\n                e_.debtTokenOutImaginaryReserves = debtReserves_.token0ImaginaryReserves;\\n            }\\n        }\\n\\n        IFluidDexT1.ConstantViews2 memory constantsView2_ = IFluidDexT1(dex_).constantsView2();\\n\\n        {\\n            int256 swapRoutingAmt_;\\n            uint256 poolFee_;\\n            uint256 amountInAdjusted_;\\n            // bring amount in to 1e12 decimals adjusted\\n            if (swap0to1_) {\\n                amountInAdjusted_ =\\n                    (amountIn_ * constantsView2_.token0NumeratorPrecision) /\\n                    constantsView2_.token0DenominatorPrecision;\\n            } else {\\n                amountInAdjusted_ =\\n                    (amountIn_ * constantsView2_.token1NumeratorPrecision) /\\n                    constantsView2_.token1DenominatorPrecision;\\n            }\\n\\n            {\\n                uint256 dexVariables2_ = IFluidDexT1(dex_).readFromStorage(bytes32(DexSlotsLink.DEX_VARIABLES2_SLOT));\\n                poolFee_ = (dexVariables2_ >> 2) & X17;\\n                bool colPoolEnabled_ = (dexVariables2_ & 1) == 1;\\n                bool debtPoolEnabled_ = (dexVariables2_ & 2) == 2;\\n                if (colPoolEnabled_ && debtPoolEnabled_) {\\n                    swapRoutingAmt_ = _swapRoutingIn(\\n                        amountInAdjusted_,\\n                        e_.colTokenOutImaginaryReserves,\\n                        e_.colTokenInImaginaryReserves,\\n                        e_.debtTokenOutImaginaryReserves,\\n                        e_.debtTokenInImaginaryReserves\\n                    );\\n                } else if (debtPoolEnabled_) {\\n                    swapRoutingAmt_ = -1; // Route from debt pool\\n                } else if (colPoolEnabled_) {\\n                    swapRoutingAmt_ = int256(amountInAdjusted_) + 1; // Route from collateral pool\\n                } else {\\n                    revert(\\\"No pools are enabled\\\");\\n                }\\n            }\\n\\n            if (swapRoutingAmt_ <= 0) {\\n                // Entire trade routes through debt pool\\n                e_.amountInDebtAdjusted = amountInAdjusted_;\\n                e_.amountOutDebtAdjusted = _getAmountOut(\\n                    ((amountInAdjusted_ * (1e6 - poolFee_)) / 1e6),\\n                    e_.debtTokenInImaginaryReserves,\\n                    e_.debtTokenOutImaginaryReserves\\n                );\\n            } else if (swapRoutingAmt_ >= int256(amountInAdjusted_)) {\\n                // Entire trade routes through collateral pool\\n                e_.amountInCollateralAdjusted = amountInAdjusted_;\\n                e_.amountOutCollateralAdjusted = _getAmountOut(\\n                    ((amountInAdjusted_ * (1e6 - poolFee_)) / 1e6),\\n                    e_.colTokenInImaginaryReserves,\\n                    e_.colTokenOutImaginaryReserves\\n                );\\n            } else {\\n                // Trade routes through both pools\\n                e_.amountInCollateralAdjusted = uint(swapRoutingAmt_);\\n                e_.amountInDebtAdjusted = amountInAdjusted_ - e_.amountInCollateralAdjusted;\\n\\n                e_.amountOutCollateralAdjusted = _getAmountOut(\\n                    ((e_.amountInCollateralAdjusted * (1e6 - poolFee_)) / 1e6),\\n                    e_.colTokenInImaginaryReserves,\\n                    e_.colTokenOutImaginaryReserves\\n                );\\n\\n                e_.amountOutDebtAdjusted = _getAmountOut(\\n                    ((e_.amountInDebtAdjusted * (1e6 - poolFee_)) / 1e6),\\n                    e_.debtTokenInImaginaryReserves,\\n                    e_.debtTokenOutImaginaryReserves\\n                );\\n            }\\n        }\\n\\n        {\\n            uint256 borrowableAdjusted_;\\n            uint256 withdrawableAdjusted_;\\n            DexLimits memory limits_ = getDexLimits(dex_);\\n\\n            // bring amount to 1e12 decimals adjusted\\n            if (swap0to1_) {\\n                borrowableAdjusted_ =\\n                    (limits_.borrowableToken1.available * constantsView2_.token1NumeratorPrecision) /\\n                    constantsView2_.token1DenominatorPrecision;\\n                withdrawableAdjusted_ =\\n                    (limits_.withdrawableToken1.available * constantsView2_.token1NumeratorPrecision) /\\n                    constantsView2_.token1DenominatorPrecision;\\n            } else {\\n                borrowableAdjusted_ =\\n                    (limits_.borrowableToken0.available * constantsView2_.token0NumeratorPrecision) /\\n                    constantsView2_.token0DenominatorPrecision;\\n                withdrawableAdjusted_ =\\n                    (limits_.withdrawableToken0.available * constantsView2_.token0NumeratorPrecision) /\\n                    constantsView2_.token0DenominatorPrecision;\\n            }\\n\\n            if (e_.amountOutDebtAdjusted > borrowableAdjusted_) {\\n                return 0;\\n            }\\n            if (e_.amountOutCollateralAdjusted > withdrawableAdjusted_) {\\n                return 0;\\n            }\\n        }\\n\\n        uint256 oldPrice_;\\n        uint256 newPrice_;\\n        // from whatever pool higher amount of swap is routing we are taking that as final price, does not matter much because both pools final price should be same\\n        if (e_.amountInCollateralAdjusted > e_.amountInDebtAdjusted) {\\n            // new pool price from col pool\\n            oldPrice_ = swap0to1_\\n                ? (e_.colTokenOutImaginaryReserves * 1e27) / (e_.colTokenInImaginaryReserves)\\n                : (e_.colTokenInImaginaryReserves * 1e27) / (e_.colTokenOutImaginaryReserves);\\n            newPrice_ = swap0to1_\\n                ? ((e_.colTokenOutImaginaryReserves - e_.amountOutCollateralAdjusted) * 1e27) /\\n                    (e_.colTokenInImaginaryReserves + e_.amountInCollateralAdjusted)\\n                : ((e_.colTokenInImaginaryReserves + e_.amountInCollateralAdjusted) * 1e27) /\\n                    (e_.colTokenOutImaginaryReserves - e_.amountOutCollateralAdjusted);\\n        } else {\\n            // new pool price from debt pool\\n            oldPrice_ = swap0to1_\\n                ? (e_.debtTokenOutImaginaryReserves * 1e27) / (e_.debtTokenInImaginaryReserves)\\n                : (e_.debtTokenInImaginaryReserves * 1e27) / (e_.debtTokenOutImaginaryReserves);\\n            newPrice_ = swap0to1_\\n                ? ((e_.debtTokenOutImaginaryReserves - e_.amountOutDebtAdjusted) * 1e27) /\\n                    (e_.debtTokenInImaginaryReserves + e_.amountInDebtAdjusted)\\n                : ((e_.debtTokenInImaginaryReserves + e_.amountInDebtAdjusted) * 1e27) /\\n                    (e_.debtTokenOutImaginaryReserves - e_.amountOutDebtAdjusted);\\n        }\\n\\n        uint256 priceDiff_ = oldPrice_ > newPrice_ ? oldPrice_ - newPrice_ : newPrice_ - oldPrice_;\\n        if (priceDiff_ > ((oldPrice_ * ORACLE_LIMIT) / 1e18)) {\\n            // if price diff is > 5% then swap would revert.\\n            return 0;\\n        }\\n\\n        return amountOut_;\\n    }\\n\\n    /// @notice estimates swap OUT tokens execution\\n    /// @param dex_ Dex pool\\n    /// @param swap0to1_ Direction of swap. If true, swaps token0 for token1; if false, swaps token1 for token0\\n    /// @param amountOut_ The exact amount of tokens to receive after swap\\n    /// @param amountInMax_ Maximum amount of tokens to swap in\\n    /// @return amountIn_ The amount of input tokens used for the swap\\n    function estimateSwapOut(\\n        address dex_,\\n        bool swap0to1_,\\n        uint256 amountOut_,\\n        uint256 amountInMax_\\n    ) public payable returns (uint256 amountIn_) {\\n        try IFluidDexT1(dex_).swapOut{ value: msg.value }(swap0to1_, amountOut_, amountInMax_, ADDRESS_DEAD) {} catch (\\n            bytes memory lowLevelData_\\n        ) {\\n            (amountIn_) = _decodeLowLevelUint1x(lowLevelData_, IFluidDexT1.FluidDexSwapResult.selector);\\n        }\\n\\n        EstimateMemoryVars memory e_;\\n        {\\n            IFluidDexT1.CollateralReserves memory colReserves_ = getDexCollateralReservesAdjusted(dex_);\\n            IFluidDexT1.DebtReserves memory debtReserves_ = getDexDebtReservesAdjusted(dex_);\\n            if (swap0to1_) {\\n                e_.colTokenInImaginaryReserves = colReserves_.token0ImaginaryReserves;\\n                e_.colTokenOutImaginaryReserves = colReserves_.token1ImaginaryReserves;\\n                e_.debtTokenInImaginaryReserves = debtReserves_.token0ImaginaryReserves;\\n                e_.debtTokenOutImaginaryReserves = debtReserves_.token1ImaginaryReserves;\\n            } else {\\n                e_.colTokenInImaginaryReserves = colReserves_.token1ImaginaryReserves;\\n                e_.colTokenOutImaginaryReserves = colReserves_.token0ImaginaryReserves;\\n                e_.debtTokenInImaginaryReserves = debtReserves_.token1ImaginaryReserves;\\n                e_.debtTokenOutImaginaryReserves = debtReserves_.token0ImaginaryReserves;\\n            }\\n        }\\n\\n        IFluidDexT1.ConstantViews2 memory constantsView2_ = IFluidDexT1(dex_).constantsView2();\\n\\n        {\\n            int256 swapRoutingAmt_;\\n            uint256 poolFee_;\\n            uint256 amountOutAdjusted_;\\n            // bring amount in to 1e12 decimals adjusted\\n            if (swap0to1_) {\\n                amountOutAdjusted_ =\\n                    (amountOut_ * constantsView2_.token1NumeratorPrecision) /\\n                    constantsView2_.token1DenominatorPrecision;\\n            } else {\\n                amountOutAdjusted_ =\\n                    (amountOut_ * constantsView2_.token0NumeratorPrecision) /\\n                    constantsView2_.token0DenominatorPrecision;\\n            }\\n\\n            {\\n                uint256 dexVariables2_ = IFluidDexT1(dex_).readFromStorage(bytes32(DexSlotsLink.DEX_VARIABLES2_SLOT));\\n                poolFee_ = (dexVariables2_ >> 2) & X17;\\n                bool colPoolEnabled_ = (dexVariables2_ & 1) == 1;\\n                bool debtPoolEnabled_ = (dexVariables2_ & 2) == 2;\\n                if (colPoolEnabled_ && debtPoolEnabled_) {\\n                    swapRoutingAmt_ = _swapRoutingOut(\\n                        amountOutAdjusted_,\\n                        e_.colTokenInImaginaryReserves,\\n                        e_.colTokenOutImaginaryReserves,\\n                        e_.debtTokenInImaginaryReserves,\\n                        e_.debtTokenOutImaginaryReserves\\n                    );\\n                } else if (debtPoolEnabled_) {\\n                    swapRoutingAmt_ = -1; // Route from debt pool\\n                } else if (colPoolEnabled_) {\\n                    swapRoutingAmt_ = int256(amountOutAdjusted_) + 1; // Route from collateral pool\\n                } else {\\n                    revert(\\\"No pools are enabled\\\");\\n                }\\n            }\\n\\n            if (swapRoutingAmt_ <= 0) {\\n                // Entire trade routes through debt pool\\n                e_.amountOutDebtAdjusted = amountOutAdjusted_;\\n                e_.amountInDebtAdjusted = _getAmountIn(\\n                    e_.amountOutDebtAdjusted,\\n                    e_.debtTokenInImaginaryReserves,\\n                    e_.debtTokenOutImaginaryReserves\\n                );\\n                e_.amountInDebtAdjusted = (e_.amountInDebtAdjusted * 1e6) / (1e6 - poolFee_);\\n            } else if (swapRoutingAmt_ >= int256(amountOutAdjusted_)) {\\n                // Entire trade routes through collateral pool\\n                e_.amountOutCollateralAdjusted = amountOutAdjusted_;\\n                e_.amountInCollateralAdjusted = _getAmountIn(\\n                    e_.amountOutCollateralAdjusted,\\n                    e_.colTokenInImaginaryReserves,\\n                    e_.colTokenOutImaginaryReserves\\n                );\\n                e_.amountInCollateralAdjusted = (e_.amountInCollateralAdjusted * 1e6) / (1e6 - poolFee_);\\n            } else {\\n                // Trade routes through both pools\\n                e_.amountOutCollateralAdjusted = uint(swapRoutingAmt_);\\n                e_.amountOutDebtAdjusted = amountOutAdjusted_ - e_.amountOutCollateralAdjusted;\\n\\n                e_.amountInCollateralAdjusted = _getAmountIn(\\n                    e_.amountOutCollateralAdjusted,\\n                    e_.colTokenInImaginaryReserves,\\n                    e_.colTokenOutImaginaryReserves\\n                );\\n                e_.amountInCollateralAdjusted = (e_.amountInCollateralAdjusted * 1e6) / (1e6 - poolFee_);\\n\\n                e_.amountInDebtAdjusted = _getAmountIn(\\n                    e_.amountOutDebtAdjusted,\\n                    e_.debtTokenInImaginaryReserves,\\n                    e_.debtTokenOutImaginaryReserves\\n                );\\n                e_.amountInDebtAdjusted = (e_.amountInDebtAdjusted * 1e6) / (1e6 - poolFee_);\\n            }\\n        }\\n\\n        {\\n            uint256 borrowableAdjusted_;\\n            uint256 withdrawableAdjusted_;\\n            DexLimits memory limits_ = getDexLimits(dex_);\\n\\n            // bring amount to 1e12 decimals adjusted\\n            if (swap0to1_) {\\n                borrowableAdjusted_ =\\n                    (limits_.borrowableToken1.available * constantsView2_.token1NumeratorPrecision) /\\n                    constantsView2_.token1DenominatorPrecision;\\n                withdrawableAdjusted_ =\\n                    (limits_.withdrawableToken1.available * constantsView2_.token1NumeratorPrecision) /\\n                    constantsView2_.token1DenominatorPrecision;\\n            } else {\\n                borrowableAdjusted_ =\\n                    (limits_.borrowableToken0.available * constantsView2_.token0NumeratorPrecision) /\\n                    constantsView2_.token0DenominatorPrecision;\\n                withdrawableAdjusted_ =\\n                    (limits_.withdrawableToken0.available * constantsView2_.token0NumeratorPrecision) /\\n                    constantsView2_.token0DenominatorPrecision;\\n            }\\n\\n            if (e_.amountOutDebtAdjusted > borrowableAdjusted_) {\\n                return type(uint256).max;\\n            }\\n            if (e_.amountOutCollateralAdjusted > withdrawableAdjusted_) {\\n                return type(uint256).max;\\n            }\\n        }\\n\\n        uint256 oldPrice_;\\n        uint256 newPrice_;\\n        // from whatever pool higher amount of swap is routing we are taking that as final price, does not matter much because both pools final price should be same\\n        if (e_.amountOutCollateralAdjusted > e_.amountOutDebtAdjusted) {\\n            // new pool price from col pool\\n            oldPrice_ = swap0to1_\\n                ? (e_.colTokenOutImaginaryReserves * 1e27) / (e_.colTokenInImaginaryReserves)\\n                : (e_.colTokenInImaginaryReserves * 1e27) / (e_.colTokenOutImaginaryReserves);\\n            newPrice_ = swap0to1_\\n                ? ((e_.colTokenOutImaginaryReserves - e_.amountOutCollateralAdjusted) * 1e27) /\\n                    (e_.colTokenInImaginaryReserves + e_.amountInCollateralAdjusted)\\n                : ((e_.colTokenInImaginaryReserves + e_.amountInCollateralAdjusted) * 1e27) /\\n                    (e_.colTokenOutImaginaryReserves - e_.amountOutCollateralAdjusted);\\n        } else {\\n            // new pool price from debt pool\\n            oldPrice_ = swap0to1_\\n                ? (e_.debtTokenOutImaginaryReserves * 1e27) / (e_.debtTokenInImaginaryReserves)\\n                : (e_.debtTokenInImaginaryReserves * 1e27) / (e_.debtTokenOutImaginaryReserves);\\n            newPrice_ = swap0to1_\\n                ? ((e_.debtTokenOutImaginaryReserves - e_.amountOutDebtAdjusted) * 1e27) /\\n                    (e_.debtTokenInImaginaryReserves + e_.amountInDebtAdjusted)\\n                : ((e_.debtTokenInImaginaryReserves + e_.amountInDebtAdjusted) * 1e27) /\\n                    (e_.debtTokenOutImaginaryReserves - e_.amountOutDebtAdjusted);\\n        }\\n\\n        uint256 priceDiff_ = oldPrice_ > newPrice_ ? oldPrice_ - newPrice_ : newPrice_ - oldPrice_;\\n        if (priceDiff_ > ((oldPrice_ * ORACLE_LIMIT) / 1e18)) {\\n            // if price diff is > 5% then swap would revert.\\n            return type(uint256).max;\\n        }\\n\\n        return amountIn_;\\n    }\\n\\n    function _decodeLowLevelUint1x(\\n        bytes memory lowLevelData_,\\n        bytes4 targetErrorSelector_\\n    ) internal pure returns (uint value1_) {\\n        if (lowLevelData_.length < 36) {\\n            return 0;\\n        }\\n\\n        bytes4 errorSelector_;\\n        assembly {\\n            // Extract the selector from the error data\\n            errorSelector_ := mload(add(lowLevelData_, 0x20))\\n        }\\n        if (errorSelector_ == targetErrorSelector_) {\\n            assembly {\\n                value1_ := mload(add(lowLevelData_, 36))\\n            }\\n        }\\n        // else => values remain 0\\n    }\\n}\\n\\n/// @notice Fluid Dex Reserves resolver\\n/// Implements various view-only methods to give easy access to Dex protocol reserves data.\\ncontract FluidDexReservesResolver is DexFactoryViews, DexActionEstimates {\\n    constructor(\\n        address factory_,\\n        address liquidity_,\\n        address liquidityResolver_\\n    ) Variables(factory_, liquidity_, liquidityResolver_) {}\\n\\n    /// @notice Get a Pool's address and its token addresses\\n    /// @param poolId_ The ID of the Pool\\n    /// @return pool_ The Pool data\\n    function getPool(uint256 poolId_) public view returns (Pool memory pool_) {\\n        address poolAddress_ = getPoolAddress(poolId_);\\n        (address token0_, address token1_) = getPoolTokens(poolAddress_);\\n        return Pool(poolAddress_, token0_, token1_, getPoolFee(poolAddress_));\\n    }\\n\\n    /// @notice Get a Pool's fee\\n    /// @param pool_ The Pool address\\n    /// @return fee_ The Pool fee as 1% = 10000\\n    function getPoolFee(address pool_) public view returns (uint256 fee_) {\\n        uint256 dexVariables2_ = IFluidDexT1(pool_).readFromStorage(bytes32(DexSlotsLink.DEX_VARIABLES2_SLOT));\\n        return (dexVariables2_ >> 2) & X17;\\n    }\\n\\n    /// @notice Get an array of all Pool addresses and their token addresses\\n    /// @return pools_ An array containing all Pool data\\n    function getAllPools() public view returns (Pool[] memory pools_) {\\n        uint256 totalPools_ = getTotalPools();\\n        pools_ = new Pool[](totalPools_);\\n        for (uint256 i; i < totalPools_; i++) {\\n            pools_[i] = getPool(i + 1);\\n        }\\n    }\\n\\n    /// @notice Get the token addresses, collateral reserves, and debt reserves for a given Pool address\\n    /// @param pool_ The Pool address\\n    /// @return poolReserves_ The Pool data with reserves.\\n    /// @dev expected to be called via callStatic\\n    function getPoolReserves(address pool_) public returns (PoolWithReserves memory poolReserves_) {\\n        (poolReserves_.token0, poolReserves_.token1) = getPoolTokens(pool_);\\n        poolReserves_.collateralReserves = getDexCollateralReserves(pool_);\\n        poolReserves_.debtReserves = getDexDebtReserves(pool_);\\n\\n        poolReserves_.pool = pool_;\\n        poolReserves_.fee = getPoolFee(pool_);\\n\\n        poolReserves_.limits = getDexLimits(pool_);\\n    }\\n\\n    /// @notice Get an array of Pool addresses, their token addresses, collateral reserves, and debt reserves for a given array of Pool addresses\\n    /// @param pools_ The array of Pool addresses\\n    /// @return poolsReserves_ An array containing all Pool data with reserves\\n    /// @dev expected to be called via callStatic\\n    function getPoolsReserves(address[] memory pools_) public returns (PoolWithReserves[] memory poolsReserves_) {\\n        poolsReserves_ = new PoolWithReserves[](pools_.length);\\n        for (uint256 i; i < pools_.length; i++) {\\n            poolsReserves_[i] = getPoolReserves(pools_[i]);\\n        }\\n    }\\n\\n    /// @notice Get an array of all Pool addresses, their token addresses, collateral reserves, and debt reserves\\n    /// @return poolsReserves_ An array containing all Pool data with reserves\\n    /// @dev expected to be called via callStatic\\n    function getAllPoolsReserves() public returns (PoolWithReserves[] memory poolsReserves_) {\\n        return getPoolsReserves(getAllPoolAddresses());\\n    }\\n\\n    /// @notice Get the token addresses, adjusted collateral reserves, and adjusted debt reserves for a given Pool address\\n    /// @param pool_ The Pool address\\n    /// @return poolReserves_ The Pool data with adjusted reserves scaled to 1e12. balanceTokens are in token decimals.\\n    /// @dev expected to be called via callStatic\\n    function getPoolReservesAdjusted(address pool_) public returns (PoolWithReserves memory poolReserves_) {\\n        (poolReserves_.token0, poolReserves_.token1) = getPoolTokens(pool_);\\n        poolReserves_.collateralReserves = getDexCollateralReservesAdjusted(pool_);\\n        poolReserves_.debtReserves = getDexDebtReservesAdjusted(pool_);\\n\\n        poolReserves_.pool = pool_;\\n        poolReserves_.fee = getPoolFee(pool_);\\n\\n        poolReserves_.limits = getDexLimits(pool_);\\n    }\\n\\n    /// @notice Get an array of Pool addresses, their token addresses, adjusted collateral reserves, and adjusted debt reserves for a given array of Pool addresses\\n    /// @param pools_ The array of Pool addresses\\n    /// @return poolsReserves_ An array containing all Pool data with adjusted reserves scaled to 1e12\\n    /// @dev expected to be called via callStatic\\n    function getPoolsReservesAdjusted(\\n        address[] memory pools_\\n    ) public returns (PoolWithReserves[] memory poolsReserves_) {\\n        poolsReserves_ = new PoolWithReserves[](pools_.length);\\n        for (uint256 i; i < pools_.length; i++) {\\n            poolsReserves_[i] = getPoolReservesAdjusted(pools_[i]);\\n        }\\n    }\\n\\n    /// @notice Get an array of all Pool addresses, their token addresses, adjusted collateral reserves, and adjusted debt reserves\\n    /// @return poolsReserves_ An array containing all Pool data with adjusted reserves scaled to 1e12\\n    /// @dev expected to be called via callStatic\\n    function getAllPoolsReservesAdjusted() public returns (PoolWithReserves[] memory poolsReserves_) {\\n        return getPoolsReservesAdjusted(getAllPoolAddresses());\\n    }\\n}\\n\",\"keccak256\":\"0x3114eb825afc743a9259983e685a7cb61252bf7a85d5d164a0bd7e01252b5d43\",\"license\":\"BUSL-1.1\"},\"contracts/periphery/resolvers/dexReserves/structs.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { IFluidDexT1 } from \\\"../../../protocols/dex/interfaces/iDexT1.sol\\\";\\n\\nabstract contract Structs {\\n    struct Pool {\\n        address pool;\\n        address token0;\\n        address token1;\\n        uint256 fee;\\n    }\\n\\n    struct PoolWithReserves {\\n        address pool;\\n        address token0;\\n        address token1;\\n        uint256 fee;\\n        IFluidDexT1.CollateralReserves collateralReserves;\\n        IFluidDexT1.DebtReserves debtReserves;\\n        DexLimits limits;\\n    }\\n\\n    struct TokenLimit {\\n        // both `available` and `expandsTo` limits consider:\\n        // - max utilization (at Liquidity layer and at Dex, for withdrawable only dex)\\n        // - withdraw limits / borrow limits\\n        // - balances at liquidity layer\\n        uint256 available; // maximum available swap amount\\n        uint256 expandsTo; // maximum amount the available swap amount expands to\\n        uint256 expandDuration; // duration for `available` to grow to `expandsTo`\\n    }\\n\\n    struct DexLimits {\\n        TokenLimit withdrawableToken0;\\n        TokenLimit withdrawableToken1;\\n        TokenLimit borrowableToken0;\\n        TokenLimit borrowableToken1;\\n    }\\n}\\n\",\"keccak256\":\"0x87dd7e6390277a034485c42d91a4788200d1034397572cb4c7c4904577d31615\",\"license\":\"BUSL-1.1\"},\"contracts/periphery/resolvers/dexReserves/variables.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { IFluidDexFactory } from \\\"../../../protocols/dex/interfaces/iDexFactory.sol\\\";\\nimport { IFluidLiquidityResolver } from \\\"../liquidity/iLiquidityResolver.sol\\\";\\n\\ninterface IFluidLiquidity {\\n    function readFromStorage(bytes32 slot_) external view returns (uint256 result_);\\n}\\n\\nabstract contract Variables {\\n    uint256 internal constant X10 = 0x3ff;\\n    uint256 internal constant X17 = 0x1ffff;\\n\\n    uint256 internal constant ORACLE_LIMIT = 5 * 1e16; // 5%\\n\\n    /// @dev address that is mapped to the chain native token\\n    address internal constant NATIVE_TOKEN_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\\n    IFluidDexFactory public immutable FACTORY;\\n    IFluidLiquidity public immutable LIQUIDITY;\\n    IFluidLiquidityResolver public immutable LIQUIDITY_RESOLVER;\\n\\n    constructor(address factory_, address liquidity_, address liquidityResolver_) {\\n        FACTORY = IFluidDexFactory(factory_);\\n        LIQUIDITY = IFluidLiquidity(liquidity_);\\n        LIQUIDITY_RESOLVER = IFluidLiquidityResolver(liquidityResolver_);\\n    }\\n}\\n\",\"keccak256\":\"0x766e526c1f5c332e398602fc26a8adec74fcf02e1bc7df9af495bd3f85057e09\",\"license\":\"BUSL-1.1\"},\"contracts/periphery/resolvers/liquidity/iLiquidityResolver.sol\":{\"content\":\"//SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nimport { Structs as LiquidityStructs } from \\\"../../../periphery/resolvers/liquidity/structs.sol\\\";\\n\\ninterface IFluidLiquidityResolver {\\n    /// @notice gets the `revenueAmount_` for a `token_`.\\n    function getRevenue(address token_) external view returns (uint256 revenueAmount_);\\n\\n    /// @notice address of contract that gets sent the revenue. Configurable by governance\\n    function getRevenueCollector() external view returns (address);\\n\\n    /// @notice Liquidity contract paused status: status = 1 -> normal. status = 2 -> paused.\\n    function getStatus() external view returns (uint256);\\n\\n    /// @notice checks if `auth_` is an allowed auth on Liquidity.\\n    /// Auths can set most config values. E.g. contracts that automate certain flows like e.g. adding a new fToken.\\n    /// Governance can add/remove auths. Governance is auth by default.\\n    function isAuth(address auth_) external view returns (uint256);\\n\\n    /// @notice checks if `guardian_` is an allowed Guardian on Liquidity.\\n    /// Guardians can pause lower class users.\\n    /// Governance can add/remove guardians. Governance is guardian by default.\\n    function isGuardian(address guardian_) external view returns (uint256);\\n\\n    /// @notice gets user class for `user_`. Class defines which protocols can be paused by guardians.\\n    /// Currently there are 2 classes: 0 can be paused by guardians. 1 cannot be paused by guardians.\\n    /// New protocols are added as class 0 and will be upgraded to 1 over time.\\n    function getUserClass(address user_) external view returns (uint256);\\n\\n    /// @notice gets exchangePricesAndConfig packed uint256 storage slot for `token_`.\\n    function getExchangePricesAndConfig(address token_) external view returns (uint256);\\n\\n    /// @notice gets rateConfig packed uint256 storage slot for `token_`.\\n    function getRateConfig(address token_) external view returns (uint256);\\n\\n    /// @notice gets totalAmounts packed uint256 storage slot for `token_`.\\n    function getTotalAmounts(address token_) external view returns (uint256);\\n\\n    /// @notice gets configs2 packed uint256 storage slot for `token_`.\\n    function getConfigs2(address token_) external view returns (uint256);\\n\\n    /// @notice gets userSupply data packed uint256 storage slot for `user_` and `token_`.\\n    function getUserSupply(address user_, address token_) external view returns (uint256);\\n\\n    /// @notice gets userBorrow data packed uint256 storage slot for `user_` and `token_`.\\n    function getUserBorrow(address user_, address token_) external view returns (uint256);\\n\\n    /// @notice returns all `listedTokens_` at the Liquidity contract. Once configured, a token can never be removed.\\n    function listedTokens() external view returns (address[] memory listedTokens_);\\n\\n    /// @notice get the Rate config data `rateData_` for a `token_` compiled from the packed uint256 rateConfig storage slot\\n    function getTokenRateData(address token_) external view returns (LiquidityStructs.RateData memory rateData_);\\n\\n    /// @notice get the Rate config datas `rateDatas_` for multiple `tokens_` compiled from the packed uint256 rateConfig storage slot\\n    function getTokensRateData(\\n        address[] calldata tokens_\\n    ) external view returns (LiquidityStructs.RateData[] memory rateDatas_);\\n\\n    /// @notice returns general data for `token_` such as rates, exchange prices, utilization, fee, total amounts etc.\\n    function getOverallTokenData(\\n        address token_\\n    ) external view returns (LiquidityStructs.OverallTokenData memory overallTokenData_);\\n\\n    /// @notice returns general data for multiple `tokens_` such as rates, exchange prices, utilization, fee, total amounts etc.\\n    function getOverallTokensData(\\n        address[] calldata tokens_\\n    ) external view returns (LiquidityStructs.OverallTokenData[] memory overallTokensData_);\\n\\n    /// @notice returns general data for all `listedTokens()` such as rates, exchange prices, utilization, fee, total amounts etc.\\n    function getAllOverallTokensData()\\n        external\\n        view\\n        returns (LiquidityStructs.OverallTokenData[] memory overallTokensData_);\\n\\n    /// @notice returns `user_` supply data and general data (such as rates, exchange prices, utilization, fee, total amounts etc.) for `token_`\\n    function getUserSupplyData(\\n        address user_,\\n        address token_\\n    )\\n        external\\n        view\\n        returns (\\n            LiquidityStructs.UserSupplyData memory userSupplyData_,\\n            LiquidityStructs.OverallTokenData memory overallTokenData_\\n        );\\n\\n    /// @notice returns `user_` supply data and general data (such as rates, exchange prices, utilization, fee, total amounts etc.) for multiple `tokens_`\\n    function getUserMultipleSupplyData(\\n        address user_,\\n        address[] calldata tokens_\\n    )\\n        external\\n        view\\n        returns (\\n            LiquidityStructs.UserSupplyData[] memory userSuppliesData_,\\n            LiquidityStructs.OverallTokenData[] memory overallTokensData_\\n        );\\n\\n    /// @notice returns `user_` borrow data and general data (such as rates, exchange prices, utilization, fee, total amounts etc.) for `token_`\\n    function getUserBorrowData(\\n        address user_,\\n        address token_\\n    )\\n        external\\n        view\\n        returns (\\n            LiquidityStructs.UserBorrowData memory userBorrowData_,\\n            LiquidityStructs.OverallTokenData memory overallTokenData_\\n        );\\n\\n    /// @notice returns `user_` borrow data and general data (such as rates, exchange prices, utilization, fee, total amounts etc.) for multiple `tokens_`\\n    function getUserMultipleBorrowData(\\n        address user_,\\n        address[] calldata tokens_\\n    )\\n        external\\n        view\\n        returns (\\n            LiquidityStructs.UserBorrowData[] memory userBorrowingsData_,\\n            LiquidityStructs.OverallTokenData[] memory overallTokensData_\\n        );\\n\\n    /// @notice returns `user_` supply data and general data (such as rates, exchange prices, utilization, fee, total amounts etc.) for multiple `supplyTokens_`\\n    ///     and returns `user_` borrow data and general data (such as rates, exchange prices, utilization, fee, total amounts etc.) for multiple `borrowTokens_`\\n    function getUserMultipleBorrowSupplyData(\\n        address user_,\\n        address[] calldata supplyTokens_,\\n        address[] calldata borrowTokens_\\n    )\\n        external\\n        view\\n        returns (\\n            LiquidityStructs.UserSupplyData[] memory userSuppliesData_,\\n            LiquidityStructs.OverallTokenData[] memory overallSupplyTokensData_,\\n            LiquidityStructs.UserBorrowData[] memory userBorrowingsData_,\\n            LiquidityStructs.OverallTokenData[] memory overallBorrowTokensData_\\n        );\\n}\\n\",\"keccak256\":\"0x241d94b63793c9fb2111bb4ec04035e1fa14ee7e0551683ea05460baa6000189\",\"license\":\"MIT\"},\"contracts/periphery/resolvers/liquidity/structs.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { Structs as AdminModuleStructs } from \\\"../../../liquidity/adminModule/structs.sol\\\";\\n\\nabstract contract Structs {\\n    struct RateData {\\n        uint256 version;\\n        AdminModuleStructs.RateDataV1Params rateDataV1;\\n        AdminModuleStructs.RateDataV2Params rateDataV2;\\n    }\\n\\n    struct OverallTokenData {\\n        uint256 borrowRate;\\n        uint256 supplyRate;\\n        uint256 fee; // revenue fee\\n        uint256 lastStoredUtilization;\\n        uint256 storageUpdateThreshold;\\n        uint256 lastUpdateTimestamp;\\n        uint256 supplyExchangePrice;\\n        uint256 borrowExchangePrice;\\n        uint256 supplyRawInterest;\\n        uint256 supplyInterestFree;\\n        uint256 borrowRawInterest;\\n        uint256 borrowInterestFree;\\n        uint256 totalSupply;\\n        uint256 totalBorrow;\\n        uint256 revenue;\\n        uint256 maxUtilization; // maximum allowed utilization\\n        RateData rateData;\\n    }\\n\\n    // amounts are always in normal (for withInterest already multiplied with exchange price)\\n    struct UserSupplyData {\\n        bool modeWithInterest; // true if mode = with interest, false = without interest\\n        uint256 supply; // user supply amount\\n        // the withdrawal limit (e.g. if 10% is the limit, and 100M is supplied, it would be 90M)\\n        uint256 withdrawalLimit;\\n        uint256 lastUpdateTimestamp;\\n        uint256 expandPercent; // withdrawal limit expand percent in 1e2\\n        uint256 expandDuration; // withdrawal limit expand duration in seconds\\n        uint256 baseWithdrawalLimit;\\n        // the current actual max withdrawable amount (e.g. if 10% is the limit, and 100M is supplied, it would be 10M)\\n        uint256 withdrawableUntilLimit;\\n        uint256 withdrawable; // actual currently withdrawable amount (supply - withdrawal Limit) & considering balance\\n    }\\n\\n    // amounts are always in normal (for withInterest already multiplied with exchange price)\\n    struct UserBorrowData {\\n        bool modeWithInterest; // true if mode = with interest, false = without interest\\n        uint256 borrow; // user borrow amount\\n        uint256 borrowLimit;\\n        uint256 lastUpdateTimestamp;\\n        uint256 expandPercent;\\n        uint256 expandDuration;\\n        uint256 baseBorrowLimit;\\n        uint256 maxBorrowLimit;\\n        uint256 borrowableUntilLimit; // borrowable amount until any borrow limit (incl. max utilization limit)\\n        uint256 borrowable; // actual currently borrowable amount (borrow limit - already borrowed) & considering balance, max utilization\\n        uint256 borrowLimitUtilization; // borrow limit for `maxUtilization`\\n    }\\n}\\n\",\"keccak256\":\"0xf8a59b6c7963d0bd43be07db0c594e278f97e6dfa498dee8436e3707dd9f574e\",\"license\":\"BUSL-1.1\"},\"contracts/protocols/dex/interfaces/iDexFactory.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\ninterface IFluidDexFactory {\\n    /// @notice Global auth is auth for all dexes\\n    function isGlobalAuth(address auth_) external view returns (bool);\\n\\n    /// @notice Dex auth is auth for a specific dex\\n    function isDexAuth(address vault_, address auth_) external view returns (bool);\\n\\n    /// @notice Total dexes deployed.\\n    function totalDexes() external view returns (uint256);\\n\\n    /// @notice Compute dexAddress\\n    function getDexAddress(uint256 dexId_) external view returns (address);\\n\\n    /// @notice read uint256 `result_` for a storage `slot_` key\\n    function readFromStorage(bytes32 slot_) external view returns (uint256 result_);\\n}\\n\",\"keccak256\":\"0xfc81e2f8de72dcf84022b69495996f59fe560cac430767f504de1064c32f550e\",\"license\":\"MIT\"},\"contracts/protocols/dex/interfaces/iDexT1.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\ninterface IFluidDexT1 {\\n    error FluidDexError(uint256 errorId);\\n\\n    /// @notice used to simulate swap to find the output amount\\n    error FluidDexSwapResult(uint256 amountOut);\\n\\n    error FluidDexPerfectLiquidityOutput(uint256 token0Amt, uint token1Amt);\\n\\n    error FluidDexSingleTokenOutput(uint256 tokenAmt);\\n\\n    error FluidDexLiquidityOutput(uint256 shares);\\n\\n    error FluidDexPricesAndExchangeRates(PricesAndExchangePrice pex_);\\n\\n    /// @notice returns the dex id\\n    function DEX_ID() external view returns (uint256);\\n\\n    /// @notice reads uint256 data `result_` from storage at a bytes32 storage `slot_` key.\\n    function readFromStorage(bytes32 slot_) external view returns (uint256 result_);\\n\\n    struct Implementations {\\n        address shift;\\n        address admin;\\n        address colOperations;\\n        address debtOperations;\\n        address perfectOperationsAndOracle;\\n    }\\n\\n    struct ConstantViews {\\n        uint256 dexId;\\n        address liquidity;\\n        address factory;\\n        Implementations implementations;\\n        address deployerContract;\\n        address token0;\\n        address token1;\\n        bytes32 supplyToken0Slot;\\n        bytes32 borrowToken0Slot;\\n        bytes32 supplyToken1Slot;\\n        bytes32 borrowToken1Slot;\\n        bytes32 exchangePriceToken0Slot;\\n        bytes32 exchangePriceToken1Slot;\\n        uint256 oracleMapping;\\n    }\\n\\n    struct ConstantViews2 {\\n        uint token0NumeratorPrecision;\\n        uint token0DenominatorPrecision;\\n        uint token1NumeratorPrecision;\\n        uint token1DenominatorPrecision;\\n    }\\n\\n    struct PricesAndExchangePrice {\\n        uint lastStoredPrice; // last stored price in 1e27 decimals\\n        uint centerPrice; // last stored price in 1e27 decimals\\n        uint upperRange; // price at upper range in 1e27 decimals\\n        uint lowerRange; // price at lower range in 1e27 decimals\\n        uint geometricMean; // geometric mean of upper range & lower range in 1e27 decimals\\n        uint supplyToken0ExchangePrice;\\n        uint borrowToken0ExchangePrice;\\n        uint supplyToken1ExchangePrice;\\n        uint borrowToken1ExchangePrice;\\n    }\\n\\n    struct CollateralReserves {\\n        uint token0RealReserves;\\n        uint token1RealReserves;\\n        uint token0ImaginaryReserves;\\n        uint token1ImaginaryReserves;\\n    }\\n\\n    struct DebtReserves {\\n        uint token0Debt;\\n        uint token1Debt;\\n        uint token0RealReserves;\\n        uint token1RealReserves;\\n        uint token0ImaginaryReserves;\\n        uint token1ImaginaryReserves;\\n    }\\n\\n    function getCollateralReserves(\\n        uint geometricMean_,\\n        uint upperRange_,\\n        uint lowerRange_,\\n        uint token0SupplyExchangePrice_,\\n        uint token1SupplyExchangePrice_\\n    ) external view returns (CollateralReserves memory c_);\\n\\n    function getDebtReserves(\\n        uint geometricMean_,\\n        uint upperRange_,\\n        uint lowerRange_,\\n        uint token0BorrowExchangePrice_,\\n        uint token1BorrowExchangePrice_\\n    ) external view returns (DebtReserves memory d_);\\n\\n    // reverts with FluidDexPricesAndExchangeRates(pex_);\\n    function getPricesAndExchangePrices() external;\\n\\n    function constantsView() external view returns (ConstantViews memory constantsView_);\\n\\n    function constantsView2() external view returns (ConstantViews2 memory constantsView2_);\\n\\n    struct Oracle {\\n        uint twap1by0; // TWAP price\\n        uint lowestPrice1by0; // lowest price point\\n        uint highestPrice1by0; // highest price point\\n        uint twap0by1; // TWAP price\\n        uint lowestPrice0by1; // lowest price point\\n        uint highestPrice0by1; // highest price point\\n    }\\n\\n    /// @dev This function allows users to swap a specific amount of input tokens for output tokens\\n    /// @param swap0to1_ Direction of swap. If true, swaps token0 for token1; if false, swaps token1 for token0\\n    /// @param amountIn_ The exact amount of input tokens to swap\\n    /// @param amountOutMin_ The minimum amount of output tokens the user is willing to accept\\n    /// @param to_ Recipient of swapped tokens. If to_ == address(0) then out tokens will be sent to msg.sender. If to_ == ADDRESS_DEAD then function will revert with amountOut_\\n    /// @return amountOut_ The amount of output tokens received from the swap\\n    function swapIn(\\n        bool swap0to1_,\\n        uint256 amountIn_,\\n        uint256 amountOutMin_,\\n        address to_\\n    ) external payable returns (uint256 amountOut_);\\n\\n    /// @dev Swap tokens with perfect amount out\\n    /// @param swap0to1_ Direction of swap. If true, swaps token0 for token1; if false, swaps token1 for token0\\n    /// @param amountOut_ The exact amount of tokens to receive after swap\\n    /// @param amountInMax_ Maximum amount of tokens to swap in\\n    /// @param to_ Recipient of swapped tokens. If to_ == address(0) then out tokens will be sent to msg.sender. If to_ == ADDRESS_DEAD then function will revert with amountIn_\\n    /// @return amountIn_ The amount of input tokens used for the swap\\n    function swapOut(\\n        bool swap0to1_,\\n        uint256 amountOut_,\\n        uint256 amountInMax_,\\n        address to_\\n    ) external payable returns (uint256 amountIn_);\\n\\n    /// @dev Deposit tokens in equal proportion to the current pool ratio\\n    /// @param shares_ The number of shares to mint\\n    /// @param maxToken0Deposit_ Maximum amount of token0 to deposit\\n    /// @param maxToken1Deposit_ Maximum amount of token1 to deposit\\n    /// @param estimate_ If true, function will revert with estimated deposit amounts without executing the deposit\\n    /// @return token0Amt_ Amount of token0 deposited\\n    /// @return token1Amt_ Amount of token1 deposited\\n    function depositPerfect(\\n        uint shares_,\\n        uint maxToken0Deposit_,\\n        uint maxToken1Deposit_,\\n        bool estimate_\\n    ) external payable returns (uint token0Amt_, uint token1Amt_);\\n\\n    /// @dev This function allows users to withdraw a perfect amount of collateral liquidity\\n    /// @param shares_ The number of shares to withdraw\\n    /// @param minToken0Withdraw_ The minimum amount of token0 the user is willing to accept\\n    /// @param minToken1Withdraw_ The minimum amount of token1 the user is willing to accept\\n    /// @param to_ Recipient of swapped tokens. If to_ == address(0) then out tokens will be sent to msg.sender. If to_ == ADDRESS_DEAD then function will revert with token0Amt_ & token1Amt_\\n    /// @return token0Amt_ The amount of token0 withdrawn\\n    /// @return token1Amt_ The amount of token1 withdrawn\\n    function withdrawPerfect(\\n        uint shares_,\\n        uint minToken0Withdraw_,\\n        uint minToken1Withdraw_,\\n        address to_\\n    ) external returns (uint token0Amt_, uint token1Amt_);\\n\\n    /// @dev This function allows users to borrow tokens in equal proportion to the current debt pool ratio\\n    /// @param shares_ The number of shares to borrow\\n    /// @param minToken0Borrow_ Minimum amount of token0 to borrow\\n    /// @param minToken1Borrow_ Minimum amount of token1 to borrow\\n    /// @param to_ Recipient of swapped tokens. If to_ == address(0) then out tokens will be sent to msg.sender. If to_ == ADDRESS_DEAD then function will revert with token0Amt_ & token1Amt_\\n    /// @return token0Amt_ Amount of token0 borrowed\\n    /// @return token1Amt_ Amount of token1 borrowed\\n    function borrowPerfect(\\n        uint shares_,\\n        uint minToken0Borrow_,\\n        uint minToken1Borrow_,\\n        address to_\\n    ) external returns (uint token0Amt_, uint token1Amt_);\\n\\n    /// @dev This function allows users to pay back borrowed tokens in equal proportion to the current debt pool ratio\\n    /// @param shares_ The number of shares to pay back\\n    /// @param maxToken0Payback_ Maximum amount of token0 to pay back\\n    /// @param maxToken1Payback_ Maximum amount of token1 to pay back\\n    /// @param estimate_ If true, function will revert with estimated payback amounts without executing the payback\\n    /// @return token0Amt_ Amount of token0 paid back\\n    /// @return token1Amt_ Amount of token1 paid back\\n    function paybackPerfect(\\n        uint shares_,\\n        uint maxToken0Payback_,\\n        uint maxToken1Payback_,\\n        bool estimate_\\n    ) external payable returns (uint token0Amt_, uint token1Amt_);\\n\\n    /// @dev This function allows users to deposit tokens in any proportion into the col pool\\n    /// @param token0Amt_ The amount of token0 to deposit\\n    /// @param token1Amt_ The amount of token1 to deposit\\n    /// @param minSharesAmt_ The minimum amount of shares the user expects to receive\\n    /// @param estimate_ If true, function will revert with estimated shares without executing the deposit\\n    /// @return shares_ The amount of shares minted for the deposit\\n    function deposit(\\n        uint token0Amt_,\\n        uint token1Amt_,\\n        uint minSharesAmt_,\\n        bool estimate_\\n    ) external payable returns (uint shares_);\\n\\n    /// @dev This function allows users to withdraw tokens in any proportion from the col pool\\n    /// @param token0Amt_ The amount of token0 to withdraw\\n    /// @param token1Amt_ The amount of token1 to withdraw\\n    /// @param maxSharesAmt_ The maximum number of shares the user is willing to burn\\n    /// @param to_ Recipient of swapped tokens. If to_ == address(0) then out tokens will be sent to msg.sender. If to_ == ADDRESS_DEAD then function will revert with shares_\\n    /// @return shares_ The number of shares burned for the withdrawal\\n    function withdraw(\\n        uint token0Amt_,\\n        uint token1Amt_,\\n        uint maxSharesAmt_,\\n        address to_\\n    ) external returns (uint shares_);\\n\\n    /// @dev This function allows users to borrow tokens in any proportion from the debt pool\\n    /// @param token0Amt_ The amount of token0 to borrow\\n    /// @param token1Amt_ The amount of token1 to borrow\\n    /// @param maxSharesAmt_ The maximum amount of shares the user is willing to receive\\n    /// @param to_ Recipient of swapped tokens. If to_ == address(0) then out tokens will be sent to msg.sender. If to_ == ADDRESS_DEAD then function will revert with shares_\\n    /// @return shares_ The amount of borrow shares minted to represent the borrowed amount\\n    function borrow(\\n        uint token0Amt_,\\n        uint token1Amt_,\\n        uint maxSharesAmt_,\\n        address to_\\n    ) external returns (uint shares_);\\n\\n    /// @dev This function allows users to payback tokens in any proportion to the debt pool\\n    /// @param token0Amt_ The amount of token0 to payback\\n    /// @param token1Amt_ The amount of token1 to payback\\n    /// @param minSharesAmt_ The minimum amount of shares the user expects to burn\\n    /// @param estimate_ If true, function will revert with estimated shares without executing the payback\\n    /// @return shares_ The amount of borrow shares burned for the payback\\n    function payback(\\n        uint token0Amt_,\\n        uint token1Amt_,\\n        uint minSharesAmt_,\\n        bool estimate_\\n    ) external payable returns (uint shares_);\\n\\n    /// @dev This function allows users to withdraw their collateral with perfect shares in one token\\n    /// @param shares_ The number of shares to burn for withdrawal\\n    /// @param minToken0_ The minimum amount of token0 the user expects to receive (set to 0 if withdrawing in token1)\\n    /// @param minToken1_ The minimum amount of token1 the user expects to receive (set to 0 if withdrawing in token0)\\n    /// @param to_ Recipient of swapped tokens. If to_ == address(0) then out tokens will be sent to msg.sender. If to_ == ADDRESS_DEAD then function will revert with withdrawAmt_\\n    /// @return withdrawAmt_ The amount of tokens withdrawn in the chosen token\\n    function withdrawPerfectInOneToken(\\n        uint shares_,\\n        uint minToken0_,\\n        uint minToken1_,\\n        address to_\\n    ) external returns (\\n        uint withdrawAmt_\\n    );\\n\\n    /// @dev This function allows users to payback their debt with perfect shares in one token\\n    /// @param shares_ The number of shares to burn for payback\\n    /// @param maxToken0_ The maximum amount of token0 the user is willing to pay (set to 0 if paying back in token1)\\n    /// @param maxToken1_ The maximum amount of token1 the user is willing to pay (set to 0 if paying back in token0)\\n    /// @param estimate_ If true, the function will revert with the estimated payback amount without executing the payback\\n    /// @return paybackAmt_ The amount of tokens paid back in the chosen token\\n    function paybackPerfectInOneToken(\\n        uint shares_,\\n        uint maxToken0_,\\n        uint maxToken1_,\\n        bool estimate_\\n    ) external payable returns (\\n        uint paybackAmt_\\n    );\\n\\n    /// @dev the oracle assumes last set price of pool till the next swap happens.\\n    /// There's a possibility that during that time some interest is generated hence the last stored price is not the 100% correct price for the whole duration\\n    /// but the difference due to interest will be super low so this difference is ignored\\n    /// For example 2 swaps happened 10min (600 seconds) apart and 1 token has 10% higher interest than other.\\n    /// then that token will accrue about 10% * 600 / secondsInAYear = ~0.0002%\\n    /// @param secondsAgos_ array of seconds ago for which TWAP is needed. If user sends [10, 30, 60] then twaps_ will return [10-0, 30-10, 60-30]\\n    /// @return twaps_ twap price, lowest price (aka minima) & highest price (aka maxima) between secondsAgo checkpoints\\n    /// @return currentPrice_ price of pool after the most recent swap\\n    function oraclePrice(\\n        uint[] memory secondsAgos_\\n    ) external view returns (\\n        Oracle[] memory twaps_,\\n        uint currentPrice_\\n    );\\n}\\n\",\"keccak256\":\"0xa405007cdd45409412ce0fe02a991cadbae17760bc15402c839375505f69d7b2\",\"license\":\"MIT\"},\"solmate/src/utils/FixedPointMathLib.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Arithmetic library with operations for fixed-point numbers.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/utils/FixedPointMathLib.sol)\\n/// @author Inspired by USM (https://github.com/usmfum/USM/blob/master/contracts/WadMath.sol)\\nlibrary FixedPointMathLib {\\n    /*//////////////////////////////////////////////////////////////\\n                    SIMPLIFIED FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    uint256 internal constant MAX_UINT256 = 2**256 - 1;\\n\\n    uint256 internal constant WAD = 1e18; // The scalar of ETH and most ERC20s.\\n\\n    function mulWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, y, WAD); // Equivalent to (x * y) / WAD rounded down.\\n    }\\n\\n    function mulWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, y, WAD); // Equivalent to (x * y) / WAD rounded up.\\n    }\\n\\n    function divWadDown(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivDown(x, WAD, y); // Equivalent to (x * WAD) / y rounded down.\\n    }\\n\\n    function divWadUp(uint256 x, uint256 y) internal pure returns (uint256) {\\n        return mulDivUp(x, WAD, y); // Equivalent to (x * WAD) / y rounded up.\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                    LOW LEVEL FIXED POINT OPERATIONS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function mulDivDown(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\\n            if iszero(mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))) {\\n                revert(0, 0)\\n            }\\n\\n            // Divide x * y by the denominator.\\n            z := div(mul(x, y), denominator)\\n        }\\n    }\\n\\n    function mulDivUp(\\n        uint256 x,\\n        uint256 y,\\n        uint256 denominator\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Equivalent to require(denominator != 0 && (y == 0 || x <= type(uint256).max / y))\\n            if iszero(mul(denominator, iszero(mul(y, gt(x, div(MAX_UINT256, y)))))) {\\n                revert(0, 0)\\n            }\\n\\n            // If x * y modulo the denominator is strictly greater than 0,\\n            // 1 is added to round up the division of x * y by the denominator.\\n            z := add(gt(mod(mul(x, y), denominator), 0), div(mul(x, y), denominator))\\n        }\\n    }\\n\\n    function rpow(\\n        uint256 x,\\n        uint256 n,\\n        uint256 scalar\\n    ) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            switch x\\n            case 0 {\\n                switch n\\n                case 0 {\\n                    // 0 ** 0 = 1\\n                    z := scalar\\n                }\\n                default {\\n                    // 0 ** n = 0\\n                    z := 0\\n                }\\n            }\\n            default {\\n                switch mod(n, 2)\\n                case 0 {\\n                    // If n is even, store scalar in z for now.\\n                    z := scalar\\n                }\\n                default {\\n                    // If n is odd, store x in z for now.\\n                    z := x\\n                }\\n\\n                // Shifting right by 1 is like dividing by 2.\\n                let half := shr(1, scalar)\\n\\n                for {\\n                    // Shift n right by 1 before looping to halve it.\\n                    n := shr(1, n)\\n                } n {\\n                    // Shift n right by 1 each iteration to halve it.\\n                    n := shr(1, n)\\n                } {\\n                    // Revert immediately if x ** 2 would overflow.\\n                    // Equivalent to iszero(eq(div(xx, x), x)) here.\\n                    if shr(128, x) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Store x squared.\\n                    let xx := mul(x, x)\\n\\n                    // Round to the nearest number.\\n                    let xxRound := add(xx, half)\\n\\n                    // Revert if xx + half overflowed.\\n                    if lt(xxRound, xx) {\\n                        revert(0, 0)\\n                    }\\n\\n                    // Set x to scaled xxRound.\\n                    x := div(xxRound, scalar)\\n\\n                    // If n is even:\\n                    if mod(n, 2) {\\n                        // Compute z * x.\\n                        let zx := mul(z, x)\\n\\n                        // If z * x overflowed:\\n                        if iszero(eq(div(zx, x), z)) {\\n                            // Revert if x is non-zero.\\n                            if iszero(iszero(x)) {\\n                                revert(0, 0)\\n                            }\\n                        }\\n\\n                        // Round to the nearest number.\\n                        let zxRound := add(zx, half)\\n\\n                        // Revert if zx + half overflowed.\\n                        if lt(zxRound, zx) {\\n                            revert(0, 0)\\n                        }\\n\\n                        // Return properly scaled zxRound.\\n                        z := div(zxRound, scalar)\\n                    }\\n                }\\n            }\\n        }\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                        GENERAL NUMBER UTILITIES\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function sqrt(uint256 x) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            let y := x // We start y at x, which will help us make our initial estimate.\\n\\n            z := 181 // The \\\"correct\\\" value is 1, but this saves a multiplication later.\\n\\n            // This segment is to get a reasonable initial estimate for the Babylonian method. With a bad\\n            // start, the correct # of bits increases ~linearly each iteration instead of ~quadratically.\\n\\n            // We check y >= 2^(k + 8) but shift right by k bits\\n            // each branch to ensure that if x >= 256, then y >= 256.\\n            if iszero(lt(y, 0x10000000000000000000000000000000000)) {\\n                y := shr(128, y)\\n                z := shl(64, z)\\n            }\\n            if iszero(lt(y, 0x1000000000000000000)) {\\n                y := shr(64, y)\\n                z := shl(32, z)\\n            }\\n            if iszero(lt(y, 0x10000000000)) {\\n                y := shr(32, y)\\n                z := shl(16, z)\\n            }\\n            if iszero(lt(y, 0x1000000)) {\\n                y := shr(16, y)\\n                z := shl(8, z)\\n            }\\n\\n            // Goal was to get z*z*y within a small factor of x. More iterations could\\n            // get y in a tighter range. Currently, we will have y in [256, 256*2^16).\\n            // We ensured y >= 256 so that the relative difference between y and y+1 is small.\\n            // That's not possible if x < 256 but we can just verify those cases exhaustively.\\n\\n            // Now, z*z*y <= x < z*z*(y+1), and y <= 2^(16+8), and either y >= 256, or x < 256.\\n            // Correctness can be checked exhaustively for x < 256, so we assume y >= 256.\\n            // Then z*sqrt(y) is within sqrt(257)/sqrt(256) of sqrt(x), or about 20bps.\\n\\n            // For s in the range [1/256, 256], the estimate f(s) = (181/1024) * (s+1) is in the range\\n            // (1/2.84 * sqrt(s), 2.84 * sqrt(s)), with largest error when s = 1 and when s = 256 or 1/256.\\n\\n            // Since y is in [256, 256*2^16), let a = y/65536, so that a is in [1/256, 256). Then we can estimate\\n            // sqrt(y) using sqrt(65536) * 181/1024 * (a + 1) = 181/4 * (y + 65536)/65536 = 181 * (y + 65536)/2^18.\\n\\n            // There is no overflow risk here since y < 2^136 after the first branch above.\\n            z := shr(18, mul(z, add(y, 65536))) // A mul() is saved from starting z at 181.\\n\\n            // Given the worst case multiplicative error of 2.84 above, 7 iterations should be enough.\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n            z := shr(1, add(z, div(x, z)))\\n\\n            // If x+1 is a perfect square, the Babylonian method cycles between\\n            // floor(sqrt(x)) and ceil(sqrt(x)). This statement ensures we return floor.\\n            // See: https://en.wikipedia.org/wiki/Integer_square_root#Using_only_integer_division\\n            // Since the ceil is rare, we save gas on the assignment and repeat division in the rare case.\\n            // If you don't care whether the floor or ceil square root is returned, you can remove this statement.\\n            z := sub(z, lt(div(x, z), z))\\n        }\\n    }\\n\\n    function unsafeMod(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Mod x by y. Note this will return\\n            // 0 instead of reverting if y is zero.\\n            z := mod(x, y)\\n        }\\n    }\\n\\n    function unsafeDiv(uint256 x, uint256 y) internal pure returns (uint256 r) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Divide x by y. Note this will return\\n            // 0 instead of reverting if y is zero.\\n            r := div(x, y)\\n        }\\n    }\\n\\n    function unsafeDivUp(uint256 x, uint256 y) internal pure returns (uint256 z) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Add 1 to x * y if x % y > 0. Note this will\\n            // return 0 instead of reverting if y is zero.\\n            z := add(gt(mod(x, y), 0), div(x, y))\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x1b62af9baf5b8e991ed7531bc87f45550ba9d61e8dbff5caf237ccaf3a3fd843\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x6080604052600436106101a05760003560e01c80636902f79f116100e1578063c0eec0e81161008a578063d3ffe67a11610064578063d3ffe67a146105a0578063d88ff1f4146105b5578063dde04706146105d7578063fccca03c146105f757600080fd5b8063c0eec0e814610511578063c56f1b4414610531578063ca4f28031461055357600080fd5b8063a5973763116100bb578063a5973763146104be578063bb39e3a1146104de578063bd964d38146104f157600080fd5b80636902f79f146104555780636e38c02314610489578063957755e61461049e57600080fd5b8063333d01a91161014e578063425711371161012857806342571137146103ba57806342fcc6fb146103db5780634bee9395146103fb57806355181f111461042857600080fd5b8063333d01a91461033e5780633973a11b146103605780633ec841e41461038d57600080fd5b8063180f4c651161017f578063180f4c65146102a95780632861c7d1146102d65780632dd310001461030a57600080fd5b8062a5ae21146101a5578063015f6cfa146101ef578063068bcd8d1461027c575b600080fd5b3480156101b157600080fd5b506101c56101c0366004614491565b610617565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b3480156101fb57600080fd5b5061020f61020a3660046144cf565b610649565b6040516101e69190600061012082019050825182526020830151602083015260408301516040830152606083015160608301526080830151608083015260a083015160a083015260c083015160c083015260e083015160e083015261010080840151818401525092915050565b34801561028857600080fd5b5061029c610297366004614491565b6107a9565b6040516101e691906144f3565b3480156102b557600080fd5b506102c96102c43660046144cf565b61085b565b6040516101e691906145c9565b3480156102e257600080fd5b506101c57f000000000000000000000000000000000000000000000000000000000000000081565b34801561031657600080fd5b506101c57f000000000000000000000000000000000000000000000000000000000000000081565b34801561034a57600080fd5b50610353611823565b6040516101e6919061469f565b34801561036c57600080fd5b5061038061037b3660046144cf565b611835565b6040516101e691906146ee565b34801561039957600080fd5b506103ad6103a83660046144cf565b611942565b6040516101e69190614880565b6103cd6103c83660046148b9565b6119dc565b6040519081526020016101e6565b3480156103e757600080fd5b506103cd6103f63660046144cf565b61232a565b34801561040757600080fd5b5061041b6104163660046144cf565b6123cd565b6040516101e691906148ff565b34801561043457600080fd5b506104486104433660046144cf565b612457565b6040516101e6919061490e565b34801561046157600080fd5b506101c57f000000000000000000000000000000000000000000000000000000000000000081565b34801561049557600080fd5b506103536125fc565b3480156104aa57600080fd5b506103ad6104b93660046144cf565b612609565b3480156104ca57600080fd5b506103536104d9366004614aab565b612751565b6103cd6104ec3660046148b9565b61280d565b3480156104fd57600080fd5b5061041b61050c3660046144cf565b61301e565b34801561051d57600080fd5b506103ad61052c3660046144cf565b613069565b34801561053d57600080fd5b5061054661333d565b6040516101e69190614b51565b34801561055f57600080fd5b5061057361056e3660046144cf565b6133f7565b6040805173ffffffffffffffffffffffffffffffffffffffff9384168152929091166020830152016101e6565b3480156105ac57600080fd5b506103cd613482565b3480156105c157600080fd5b506105ca613513565b6040516101e69190614b9f565b3480156105e357600080fd5b506104486105f23660046144cf565b6135f6565b34801561060357600080fd5b50610353610612366004614aab565b613903565b60006106437f0000000000000000000000000000000000000000000000000000000000000000836139b9565b92915050565b6106986040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b8173ffffffffffffffffffffffffffffffffffffffff1663916cef4e6040518163ffffffff1660e01b8152600401600060405180830381600087803b1580156106e057600080fd5b505af19250505080156106f1575060015b6107a4573d80801561071f576040519150601f19603f3d011682016040523d82523d6000602084013e610724565b606091505b5060208101517fdc4022c5000000000000000000000000000000000000000000000000000000007fffffffff000000000000000000000000000000000000000000000000000000008216016107a15761078b8260048085516107869190614c4d565b613e23565b80602001905181019061079e9190614c60565b92505b50505b919050565b6040805160808101825260008082526020820181905291810182905260608101829052906107d683610617565b90506000806107e4836133f7565b9150915060405180608001604052808473ffffffffffffffffffffffffffffffffffffffff1681526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018273ffffffffffffffffffffffffffffffffffffffff1681526020016108508561232a565b905295945050505050565b6108636141ca565b6108b460405180610120016040528060001515815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b61090560405180610120016040528060001515815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b61090d614279565b610915614279565b610974604051806101600160405280600015158152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6109d3604051806101600160405280600015158152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000806109df8a6133f7565b6040517fe72ef91b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d8116600483015280841660248301529294509092507f00000000000000000000000000000000000000000000000000000000000000009091169063e72ef91b906044016104c060405180830381865afa158015610a7c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610aa09190614f0c565b6040517fe72ef91b00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d811660048301528481166024830152929a509097507f00000000000000000000000000000000000000000000000000000000000000009091169063e72ef91b906044016104c060405180830381865afa158015610b3d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b619190614f0c565b6040517f967915d600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8d8116600483015285811660248301529299509096507f00000000000000000000000000000000000000000000000000000000000000009091169063967915d69060440161050060405180830381865afa158015610bfe573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c229190614fb2565b506040517f967915d600000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8c8116600483015283811660248301529195507f00000000000000000000000000000000000000000000000000000000000000009091169063967915d69060440161050060405180830381865afa158015610cbd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610ce19190614fb2565b506040517fb5c736e40000000000000000000000000000000000000000000000000000000081526001600482015290935060009073ffffffffffffffffffffffffffffffffffffffff8c169063b5c736e490602401602060405180830381865afa158015610d53573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d779190615065565b90506000610d8e60e483901c6103ff16600a61507e565b9050600081905080896101e001511015610daa57506101e08801515b6000612710828b6101800151610dc0919061507e565b610dca91906150c4565b9050808a6101a001511015610fba578215610e0257828a6101a00151612710610df3919061507e565b610dfd91906150c4565b610e05565b60005b8d51528c51516101808b015111610e1d576000610e30565b8c51516101808b0151610e309190614c4d565b8d51528c5180516020909101526101a08a0151610e4d9082614c4d565b60408e01805191909152518051602090910152600073ffffffffffffffffffffffffffffffffffffffff871673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee14610f48576040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301528816906370a0823190602401602060405180830381865afa158015610f1f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f439190615065565b610f81565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16315b9050808e60000151602001511115610f9c578d516020018190525b808e60400151602001511115610fb85760408e01516020018190525b505b50505060006103ff60ee83901c16600a610fd4919061507e565b9050600081905080886101e001511015610ff057506101e08701515b6000612710828a6101800151611006919061507e565b61101091906150c4565b905080896101a0015110156112105782156110485782896101a00151612710611039919061507e565b61104391906150c4565b61104b565b60005b60208e0180519190915251516101808a01511161106957600061107f565b60208d0151516101808a015161107f9190614c4d565b6020808f01805192909252905180519101526101a08901516110a19082614c4d565b60608e01805191909152518051602090910152600073ffffffffffffffffffffffffffffffffffffffff861673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee1461119c576040517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000811660048301528716906370a0823190602401602060405180830381865afa158015611173573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906111979190615065565b6111d5565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16315b9050808e602001516020015111156111f2576020808f0151018190525b808e6060015160200151111561120e5760608e01516020018190525b505b50505050505060008660a00151876060015161122c91906150d8565b90508042116112445761123f4282614c4d565b611247565b60005b9050600061271088602001518960800151611262919061507e565b61126c91906150c4565b90508088610100015111156112875750506101008601516000905b88516020015181116112e157885160200181905280156112d75760a08801516101008901518a51602001518392916112be91614c4d565b6112c8919061507e565b6112d291906150c4565b6112da565b60005b915061134a565b8851602001516101008901511115611308578851602001516101008901526000915061134a565b80156113445760a08801516101008901518a516020015183929161132b91614c4d565b611335919061507e565b61133f91906150c4565b611347565b60005b91505b5087516040015260a08501516060860151600091611367916150d8565b905080421161137f5761137a4282614c4d565b611382565b60005b905060006127108760200151886080015161139d919061507e565b6113a791906150c4565b90508087610100015111156113c25750506101008501516000905b8860200151602001518111611423576020808a015101819052801561141957808760a001518861010001518b60200151602001516114009190614c4d565b61140a919061507e565b61141491906150c4565b61141c565b60005b9150611493565b886020015160200151876101000151111561144f576020808a0151015161010088015260009150611493565b801561148d57808760a001518861010001518b60200151602001516114749190614c4d565b61147e919061507e565b61148891906150c4565b611490565b60005b91505b5060208801516040015260a082015160608301516000916114b3916150d8565b90508042116114cb576114c64282614c4d565b6114ce565b60005b90506000612710846020015185608001516114e9919061507e565b6114f391906150c4565b9050600084602001518560e0015161150b9190614c4d565b9050808a604001516020015111156115295760408a01516020018190525b508084610120015111156115435750506101208201516000905b88604001516020015181116115a5576040890151602001819052801561159b57808460a001518561012001518b60400151602001516115829190614c4d565b61158c919061507e565b61159691906150c4565b61159e565b60005b9150611616565b88604001516020015184610120015111156115d25760408901516020015161012085015260009150611616565b801561161057808460a001518561012001518b60400151602001516115f79190614c4d565b611601919061507e565b61160b91906150c4565b611613565b60005b91505b50604080890151015260a08101516060820151600091611635916150d8565b905080421161164d576116484282614c4d565b611650565b60005b905060006127108360200151846080015161166b919061507e565b61167591906150c4565b9050600083602001518460e0015161168d9190614c4d565b9050808a606001516020015111156116ab5760608a01516020018190525b508083610120015111156116c55750506101208101516000905b8860600151602001518111611727576060890151602001819052801561171d57808360a001518461012001518b60600151602001516117049190614c4d565b61170e919061507e565b61171891906150c4565b611720565b60005b9150611798565b88606001516020015183610120015111156117545760608901516020015161012084015260009150611798565b801561179257808360a001518461012001518b60600151602001516117799190614c4d565b611783919061507e565b61178d91906150c4565b611795565b60005b91505b5060608801516040015286515161010086015110156117bb576101008601518751525b60208701515161010086015110156117da576101008501516020880151525b60408701515161012083015110156117f9576101208201516040880151525b6060870151516101208201511015611818576101208101516060880151525b505050505050919050565b606061183061061261333d565b905090565b6118d2604080516101c08101825260008082526020808301829052828401829052835160a08101855282815290810182905292830181905260608381018290526080840191909152909190820190815260006020820181905260408201819052606082018190526080820181905260a0820181905260c0820181905260e08201819052610100820181905261012082018190526101409091015290565b8173ffffffffffffffffffffffffffffffffffffffff1663b7791bf26040518163ffffffff1660e01b815260040161024060405180830381865afa15801561191e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906106439190615166565b61196d6040518060800160405280600081526020016000815260200160008152602001600081525090565b8173ffffffffffffffffffffffffffffffffffffffff16631595cbd36040518163ffffffff1660e01b8152600401608060405180830381865afa1580156119b8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061064391906152b3565b6040517f286f0e610000000000000000000000000000000000000000000000000000000081528315156004820152602481018390526044810182905261dead606482015260009073ffffffffffffffffffffffffffffffffffffffff86169063286f0e6190349060840160206040518083038185885af193505050508015611a9f575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252611a9c91810190615065565b60015b611b05573d808015611acd576040519150601f19603f3d011682016040523d82523d6000602084013e611ad2565b606091505b50611afd817fb3bfda9900000000000000000000000000000000000000000000000000000000613f9a565b915050611b07565b505b611b4f60405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000611b5a87613069565b90506000611b67886135f6565b90508615611b9c576040808301518452606080840151602086015260808301519185019190915260a082015190840152611bc2565b6060808301518452604080840151602086015260a0830151908501526080820151908401525b505060008673ffffffffffffffffffffffffffffffffffffffff16631595cbd36040518163ffffffff1660e01b8152600401608060405180830381865afa158015611c11573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3591906152b3565b905060008060008815611c675760608401516040850151611c56908a61507e565b611c6091906150c4565b9050611c85565b60208401518451611c78908a61507e565b611c8291906150c4565b90505b6040517fb5c736e40000000000000000000000000000000000000000000000000000000081526001600482015260009073ffffffffffffffffffffffffffffffffffffffff8c169063b5c736e490602401602060405180830381865afa158015611cf3573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d179190615065565b600281811c6201ffff1694509091506001808316149080831614818015611d3b5750805b15611d6457611d5d8489600001518a602001518b604001518c60600151613fee565b9550611e0a565b8015611d92577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9550611e0a565b8115611da357611d5d8460016152cf565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f4e6f20706f6f6c732061726520656e61626c656400000000000000000000000060448201526064015b60405180910390fd5b50505060008313611e695760a0850181905260408501516060860151611e3191839161407a565b60e0860152611e4382620f4240614c4d565b60e0860151611e5590620f424061507e565b611e5f91906150c4565b60e0860152611f6f565b808312611ec1576080850181905284516020860151611e8991839161407a565b60c0860152611e9b82620f4240614c4d565b60c0860151611ead90620f424061507e565b611eb791906150c4565b60c0860152611f6f565b60808501839052611ed28382614c4d565b60a0860152608085015185516020870151611eee92919061407a565b60c0860152611f0082620f4240614c4d565b60c0860151611f1290620f424061507e565b611f1c91906150c4565b60c086015260a085015160408601516060870151611f3b92919061407a565b60e0860152611f4d82620f4240614c4d565b60e0860151611f5f90620f424061507e565b611f6991906150c4565b60e08601525b5050506000806000611f808a61085b565b90508815611fdf5783606001518460400151826060015160000151611fa5919061507e565b611faf91906150c4565b925083606001518460400151826020015160000151611fce919061507e565b611fd891906150c4565b9150612026565b60208401518451604083015151611ff6919061507e565b61200091906150c4565b602085015185518351519295509091612019919061507e565b61202391906150c4565b91505b828560a00151111561205f577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff95505050505050612322565b8185608001511115612098577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff95505050505050612322565b5050506000808360a00151846080015111156121a357876120df57602084015184516120d0906b033b2e3c9fd0803ce800000061507e565b6120da91906150c4565b612106565b835160208501516120fc906b033b2e3c9fd0803ce800000061507e565b61210691906150c4565b91508761215757836080015184602001516121219190614c4d565b60c0850151855161213291906150d8565b612148906b033b2e3c9fd0803ce800000061507e565b61215291906150c4565b61219c565b60c0840151845161216891906150d8565b8460800151856020015161217c9190614c4d565b612192906b033b2e3c9fd0803ce800000061507e565b61219c91906150c4565b90506122a0565b876121d757606084015160408501516121c8906b033b2e3c9fd0803ce800000061507e565b6121d291906150c4565b612201565b604084015160608501516121f7906b033b2e3c9fd0803ce800000061507e565b61220191906150c4565b915087612255578360a00151846060015161221c9190614c4d565b8460e00151856040015161223091906150d8565b612246906b033b2e3c9fd0803ce800000061507e565b61225091906150c4565b61229d565b8360e00151846040015161226991906150d8565b8460a00151856060015161227d9190614c4d565b612293906b033b2e3c9fd0803ce800000061507e565b61229d91906150c4565b90505b60008183116122b8576122b38383614c4d565b6122c2565b6122c28284614c4d565b9050670de0b6b3a76400006122de66b1a2bc2ec500008561507e565b6122e891906150c4565b81111561231c577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff95505050505050612322565b50505050505b949350505050565b6040517fb5c736e400000000000000000000000000000000000000000000000000000000815260016004820152600090819073ffffffffffffffffffffffffffffffffffffffff84169063b5c736e490602401602060405180830381865afa15801561239a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906123be9190615065565b60021c6201ffff169392505050565b6123d56142fd565b6123de826133f7565b73ffffffffffffffffffffffffffffffffffffffff908116604084015216602082015261240a82612609565b608082015261241882612457565b60a082015273ffffffffffffffffffffffffffffffffffffffff8216815261243f8261232a565b606082015261244d8261085b565b60c0820152919050565b6124906040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b612499826135f6565b905060008273ffffffffffffffffffffffffffffffffffffffff16631595cbd36040518163ffffffff1660e01b8152600401608060405180830381865afa1580156124e8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061250c91906152b3565b8051602082015184519293509091612524919061507e565b61252e91906150c4565b8252805160208201516040840151612546919061507e565b61255091906150c4565b604083015280516020820151608084015161256b919061507e565b61257591906150c4565b6080830152604081015160608201516020840151612593919061507e565b61259d91906150c4565b60208301526040810151606080830151908401516125bb919061507e565b6125c591906150c4565b826060018181525050806040015181606001518360a001516125e7919061507e565b6125f191906150c4565b60a083015250919050565b60606118306104d961333d565b6126346040518060800160405280600081526020016000815260200160008152602001600081525090565b61263d82613069565b905060008273ffffffffffffffffffffffffffffffffffffffff16631595cbd36040518163ffffffff1660e01b8152600401608060405180830381865afa15801561268c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906126b091906152b3565b80516020820151845192935090916126c8919061507e565b6126d291906150c4565b82528051602082015160408401516126ea919061507e565b6126f491906150c4565b60408084019190915281015160608201516020840151612714919061507e565b61271e91906150c4565b602083015260408101516060808301519084015161273c919061507e565b61274691906150c4565b606083015250919050565b6060815167ffffffffffffffff81111561276d5761276d614951565b6040519080825280602002602001820160405280156127a657816020015b6127936142fd565b81526020019060019003908161278b5790505b50905060005b8251811015612807576127d78382815181106127ca576127ca6152f7565b60200260200101516123cd565b8282815181106127e9576127e96152f7565b602002602001018190525080806127ff90615326565b9150506127ac565b50919050565b6040517f2668dfaa0000000000000000000000000000000000000000000000000000000081528315156004820152602481018390526044810182905261dead606482015260009073ffffffffffffffffffffffffffffffffffffffff861690632668dfaa90349060840160206040518083038185885af1935050505080156128d0575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526128cd91810190615065565b60015b612936573d8080156128fe576040519150601f19603f3d011682016040523d82523d6000602084013e612903565b606091505b5061292e817fb3bfda9900000000000000000000000000000000000000000000000000000000613f9a565b915050612938565b505b61298060405180610100016040528060008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b600061298b87613069565b90506000612998886135f6565b905086156129cd576040808301518452606080840151602086015260808301519185019190915260a0820151908401526129f3565b6060808301518452604080840151602086015260a0830151908501526080820151908401525b505060008673ffffffffffffffffffffffffffffffffffffffff16631595cbd36040518163ffffffff1660e01b8152600401608060405180830381865afa158015612a42573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612a6691906152b3565b905060008060008815612a955760208401518451612a84908a61507e565b612a8e91906150c4565b9050612ab6565b60608401516040850151612aa9908a61507e565b612ab391906150c4565b90505b6040517fb5c736e40000000000000000000000000000000000000000000000000000000081526001600482015260009073ffffffffffffffffffffffffffffffffffffffff8c169063b5c736e490602401602060405180830381865afa158015612b24573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612b489190615065565b600281811c6201ffff1694509091506001808316149080831614818015612b6c5750805b15612b9557612b8e8489602001518a600001518b606001518c604001516140ab565b9550612bd4565b8015612bc3577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9550612bd4565b8115611da357612b8e8460016152cf565b50505060008313612c245760e08501819052612c1a620f4240612bf78482614c4d565b612c01908461507e565b612c0b91906150c4565b866040015187606001516140f6565b60a0860152612cce565b808312612c6d5760c08501819052612c63620f4240612c438482614c4d565b612c4d908461507e565b612c5791906150c4565b865160208801516140f6565b6080860152612cce565b60c08501839052612c7e8382614c4d565b60e0860152612ca3620f4240612c948482614c4d565b8760c00151612c4d919061507e565b6080860152612cc8620f4240612cb98482614c4d565b8760e00151612c01919061507e565b60a08601525b5050506000806000612cdf8a61085b565b90508815612d3e5783606001518460400151826060015160000151612d04919061507e565b612d0e91906150c4565b925083606001518460400151826020015160000151612d2d919061507e565b612d3791906150c4565b9150612d85565b60208401518451604083015151612d55919061507e565b612d5f91906150c4565b602085015185518351519295509091612d78919061507e565b612d8291906150c4565b91505b828560a001511115612d9f57600095505050505050612322565b8185608001511115612db957600095505050505050612322565b5050506000808360e001518460c001511115612ec45787612e005760208401518451612df1906b033b2e3c9fd0803ce800000061507e565b612dfb91906150c4565b612e27565b83516020850151612e1d906b033b2e3c9fd0803ce800000061507e565b612e2791906150c4565b915087612e785783608001518460200151612e429190614c4d565b60c08501518551612e5391906150d8565b612e69906b033b2e3c9fd0803ce800000061507e565b612e7391906150c4565b612ebd565b60c08401518451612e8991906150d8565b84608001518560200151612e9d9190614c4d565b612eb3906b033b2e3c9fd0803ce800000061507e565b612ebd91906150c4565b9050612fc1565b87612ef85760608401516040850151612ee9906b033b2e3c9fd0803ce800000061507e565b612ef391906150c4565b612f22565b60408401516060850151612f18906b033b2e3c9fd0803ce800000061507e565b612f2291906150c4565b915087612f76578360a001518460600151612f3d9190614c4d565b8460e001518560400151612f5191906150d8565b612f67906b033b2e3c9fd0803ce800000061507e565b612f7191906150c4565b612fbe565b8360e001518460400151612f8a91906150d8565b8460a001518560600151612f9e9190614c4d565b612fb4906b033b2e3c9fd0803ce800000061507e565b612fbe91906150c4565b90505b6000818311612fd957612fd48383614c4d565b612fe3565b612fe38284614c4d565b9050670de0b6b3a7640000612fff66b1a2bc2ec500008561507e565b61300991906150c4565b81111561231c57600095505050505050612322565b6130266142fd565b61302f826133f7565b73ffffffffffffffffffffffffffffffffffffffff908116604084015216602082015261305b82613069565b6080820152612418826135f6565b6130946040518060800160405280600081526020016000815260200160008152602001600081525090565b6040517fb5c736e40000000000000000000000000000000000000000000000000000000081526001600482015260009073ffffffffffffffffffffffffffffffffffffffff84169063b5c736e490602401602060405180830381865afa158015613102573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906131269190615065565b9050806001166001146131605760405180608001604052806000815260200160008152602001600081526020016000815250915050919050565b6040517f015f6cfa00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152309063015f6cfa90602401610120604051808303816000875af1925050508015613207575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261320491810190614c60565b60015b61323757604051806080016040528060008152602001600081526020016000815260200160008152509150612807565b6080810151604080830151606084015160a085015160e086015193517f6560abaa0000000000000000000000000000000000000000000000000000000081526004810195909552602485019290925260448401526064830152608482015273ffffffffffffffffffffffffffffffffffffffff851690636560abaa9060a401608060405180830381865afa92505050801561330d575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016820190925261330a918101906152b3565b60015b61079e576040518060800160405280600081526020016000815260200160008152602001600081525092506107a1565b60606000613349613482565b90508067ffffffffffffffff81111561336457613364614951565b60405190808252806020026020018201604052801561338d578160200160208202803683370190505b50915060005b818110156133f2576133a96101c08260016150d8565b8382815181106133bb576133bb6152f7565b73ffffffffffffffffffffffffffffffffffffffff90921660209283029190910190910152806133ea81615326565b915050613393565b505090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1663b7791bf26040518163ffffffff1660e01b815260040161024060405180830381865afa158015613448573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061346c9190615166565b90508060a001518160c001519250925050915091565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166393656c176040518163ffffffff1660e01b8152600401602060405180830381865afa1580156134ef573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118309190615065565b6060600061351f613482565b90508067ffffffffffffffff81111561353a5761353a614951565b6040519080825280602002602001820160405280156135aa57816020015b6040805160808101825260008082526020808301829052928201819052606082015282527fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff9092019101816135585790505b50915060005b818110156133f2576135c66102978260016150d8565b8382815181106135d8576135d86152f7565b602002602001018190525080806135ee90615326565b9150506135b0565b61362f6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6040517fb5c736e40000000000000000000000000000000000000000000000000000000081526001600482015260009073ffffffffffffffffffffffffffffffffffffffff84169063b5c736e490602401602060405180830381865afa15801561369d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906136c19190615065565b905080600216600214613709576040518060c0016040528060008152602001600081526020016000815260200160008152602001600081526020016000815250915050919050565b6040517f015f6cfa00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152309063015f6cfa90602401610120604051808303816000875af19250505080156137b0575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526137ad91810190614c60565b60015b6137ee576040518060c00160405280600081526020016000815260200160008152602001600081526020016000815260200160008152509150612807565b6080810151604080830151606084015160c085015161010086015193517f05d455a90000000000000000000000000000000000000000000000000000000081526004810195909552602485019290925260448401526064830152608482015273ffffffffffffffffffffffffffffffffffffffff8516906305d455a99060a40160c060405180830381865afa9250505080156138c5575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01682019092526138c29181019061535e565b60015b61079e576040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525092506107a1565b6060815167ffffffffffffffff81111561391f5761391f614951565b60405190808252806020026020018201604052801561395857816020015b6139456142fd565b81526020019060019003908161393d5790505b50905060005b82518110156128075761398983828151811061397c5761397c6152f7565b602002602001015161301e565b82828151811061399b5761399b6152f7565b602002602001018190525080806139b190615326565b91505061395e565b60006060826000036139cf576000915050610643565b607f8311613a98576040517fd60000000000000000000000000000000000000000000000000000000000000060208201527f940000000000000000000000000000000000000000000000000000000000000060218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b16602282015260f884901b7fff000000000000000000000000000000000000000000000000000000000000001660368201526037015b6040516020818303038152906040529050613e14565b60ff8311613b75576040517fd70000000000000000000000000000000000000000000000000000000000000060208201527f940000000000000000000000000000000000000000000000000000000000000060218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b1660228201527f8100000000000000000000000000000000000000000000000000000000000000603682015260f884901b7fff00000000000000000000000000000000000000000000000000000000000000166037820152603801613a82565b61ffff8311613c53576040517fd80000000000000000000000000000000000000000000000000000000000000060208201527f940000000000000000000000000000000000000000000000000000000000000060218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b1660228201527f820000000000000000000000000000000000000000000000000000000000000060368201527fffff00000000000000000000000000000000000000000000000000000000000060f085901b166037820152603901613a82565b62ffffff8311613d32576040517fd90000000000000000000000000000000000000000000000000000000000000060208201527f940000000000000000000000000000000000000000000000000000000000000060218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b1660228201527f830000000000000000000000000000000000000000000000000000000000000060368201527fffffff000000000000000000000000000000000000000000000000000000000060e885901b166037820152603a01613a82565b6040517fda0000000000000000000000000000000000000000000000000000000000000060208201527f940000000000000000000000000000000000000000000000000000000000000060218201527fffffffffffffffffffffffffffffffffffffffff000000000000000000000000606086901b1660228201527f840000000000000000000000000000000000000000000000000000000000000060368201527fffffffff0000000000000000000000000000000000000000000000000000000060e085901b166037820152603b0160405160208183030381529060405290505b80516020909101209392505050565b606081613e3181601f6150d8565b1015613e99576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f736c6963655f6f766572666c6f770000000000000000000000000000000000006044820152606401611e01565b613ea382846150d8565b84511015613f0d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f736c6963655f6f75744f66426f756e64730000000000000000000000000000006044820152606401611e01565b81158015613f2a5760405191506000825260208201604052613f92565b6040519150601f8316801560200281840101848101868315602002848a0101015b81831015613f63578051835260209283019201613f4b565b5050848452601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016604052505b509392505050565b6000602483511015613fae57506000610643565b60208301517fffffffff0000000000000000000000000000000000000000000000000000000080841690821603613fe757602484015191505b5092915050565b600080614015613ffe868861507e565b61401090670de0b6b3a764000061507e565b614118565b90506000614026613ffe858761507e565b905061403281836150d8565b61403c838661507e565b614046838961507e565b614050858c61507e565b61405a91906150d8565b61406491906153d8565b61406e91906153f8565b98975050505050505050565b600080614087848661507e565b905060006140958685614c4d565b90506140a181836150c4565b9695505050505050565b6000806140bb613ffe868861507e565b905060006140cc613ffe858761507e565b90506140d881836150d8565b6140e2828861507e565b6140ec848b61507e565b614050858861507e565b600083820283850180828161410d5761410d615095565b049695505050505050565b60b58171010000000000000000000000000000000000811061413f5760409190911b9060801c5b6901000000000000000000811061415b5760209190911b9060401c5b6501000000000081106141735760109190911b9060201c5b630100000081106141895760089190911b9060101c5b62010000010260121c80820401600190811c80830401811c80830401811c80830401811c80830401811c80830401811c80830401901c908190048111900390565b60405180608001604052806141f960405180606001604052806000815260200160008152602001600081525090565b815260200161422260405180606001604052806000815260200160008152602001600081525090565b815260200161424b60405180606001604052806000815260200160008152602001600081525090565b815260200161427460405180606001604052806000815260200160008152602001600081525090565b905290565b604051806102200160405280600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016000815260200160008152602001600081526020016142746143dc565b6040518060e00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016143916040518060800160405280600081526020016000815260200160008152602001600081525090565b81526020016143cf6040518060c001604052806000815260200160008152602001600081526020016000815260200160008152602001600081525090565b81526020016142746141ca565b6040518060600160405280600081526020016144366040518060a00160405280600073ffffffffffffffffffffffffffffffffffffffff168152602001600081526020016000815260200160008152602001600081525090565b81526020016142746040518060e00160405280600073ffffffffffffffffffffffffffffffffffffffff1681526020016000815260200160008152602001600081526020016000815260200160008152602001600081525090565b6000602082840312156144a357600080fd5b5035919050565b73ffffffffffffffffffffffffffffffffffffffff811681146144cc57600080fd5b50565b6000602082840312156144e157600080fd5b81356144ec816144aa565b9392505050565b60808101610643828473ffffffffffffffffffffffffffffffffffffffff80825116835280602083015116602084015280604083015116604084015250606081015160608301525050565b61455d8282518051825260208082015190830152604090810151910152565b60208181015180516060850152908101516080840152604081015160a084015250604081810151805160c0850152602081015160e0850152908101516101008401525060600151805161012083015260208101516101408301526040015161016090910152565b505050565b6101808101610643828461453e565b73ffffffffffffffffffffffffffffffffffffffff808251168352806020830151166020840152806040830151166040840152506060810151606083015260808101516146496080840182805182526020810151602083015260408101516040830152606081015160608301525050565b5060a0818101518051610100850152602081015161012085015260408101516101408501526060810151610160850152608081015161018085015201516101a083015260c08101516145c46101c084018261453e565b6020808252825182820181905260009190848201906040850190845b818110156146e2576146ce8385516145d8565b9284019261034092909201916001016146bb565b50909695505050505050565b8151815260208083015161024083019161471f9084018273ffffffffffffffffffffffffffffffffffffffff169052565b506040830151614747604084018273ffffffffffffffffffffffffffffffffffffffff169052565b5060608301516147a5606084018273ffffffffffffffffffffffffffffffffffffffff808251168352806020830151166020840152806040830151166040840152806060830151166060840152806080830151166080840152505050565b5060808301516101006147cf8185018373ffffffffffffffffffffffffffffffffffffffff169052565b60a085015191506101206147fa8186018473ffffffffffffffffffffffffffffffffffffffff169052565b60c086015192506101406148258187018573ffffffffffffffffffffffffffffffffffffffff169052565b60e0870151610160878101919091529287015161018080880191909152918701516101a080880191909152908701516101c0870152918601516101e08601528501516102008501529093015161022090920191909152919050565b8151815260208083015190820152604080830151908201526060808301519082015260808101610643565b80151581146144cc57600080fd5b600080600080608085870312156148cf57600080fd5b84356148da816144aa565b935060208501356148ea816148ab565b93969395505050506040820135916060013590565b610340810161064382846145d8565b60c081016106438284805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a08301525050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051610120810167ffffffffffffffff811182821017156149a4576149a4614951565b60405290565b6040516060810167ffffffffffffffff811182821017156149a4576149a4614951565b60405160a0810167ffffffffffffffff811182821017156149a4576149a4614951565b604051610220810167ffffffffffffffff811182821017156149a4576149a4614951565b604051610160810167ffffffffffffffff811182821017156149a4576149a4614951565b6040516101c0810167ffffffffffffffff811182821017156149a4576149a4614951565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715614aa357614aa3614951565b604052919050565b60006020808385031215614abe57600080fd5b823567ffffffffffffffff80821115614ad657600080fd5b818501915085601f830112614aea57600080fd5b813581811115614afc57614afc614951565b8060051b9150614b0d848301614a5c565b8181529183018401918481019088841115614b2757600080fd5b938501935b8385101561406e5784359250614b41836144aa565b8282529385019390850190614b2c565b6020808252825182820181905260009190848201906040850190845b818110156146e257835173ffffffffffffffffffffffffffffffffffffffff1683529284019291840191600101614b6d565b6020808252825182820181905260009190848201906040850190845b818110156146e257614c0b83855173ffffffffffffffffffffffffffffffffffffffff80825116835280602083015116602084015280604083015116604084015250606081015160608301525050565b9284019260809290920191600101614bbb565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b8181038181111561064357610643614c1e565b60006101208284031215614c7357600080fd5b614c7b614980565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015260e083015160e08201526101008084015181830152508091505092915050565b80516107a4816148ab565b80516107a4816144aa565b600060e08284031215614d0357600080fd5b60405160e0810181811067ffffffffffffffff82111715614d2657614d26614951565b80604052508091508251614d39816144aa565b808252506020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c08201525092915050565b60008183036101a0811215614d9457600080fd5b614d9c6149aa565b91508251825260a07fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe082011215614dd257600080fd5b50614ddb6149cd565b6020830151614de9816144aa565b8082525060408301516020820152606083015160408201526080830151606082015260a0830151608082015280602083015250614e298360c08401614cf1565b604082015292915050565b60006103a08284031215614e4757600080fd5b614e4f6149f0565b825181526020808401519082015260408084015190820152606080840151908201526080808401519082015260a0808401519082015260c0808401519082015260e08084015190820152610100808401519082015261012080840151908201526101408084015190820152610160808401519082015261018080840151908201526101a080840151908201526101c080840151908201526101e080840151908201529050610200614f0284828501614d80565b9082015292915050565b6000808284036104c0811215614f2157600080fd5b61012080821215614f3157600080fd5b614f39614980565b9150614f4485614cdb565b82526020850151602083015260408501516040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e0830152610100808601518184015250819350614fa786828701614e34565b925050509250929050565b600080828403610500811215614fc757600080fd5b61016080821215614fd757600080fd5b614fdf614a14565b9150614fea85614cdb565b82526020850151602083015260408501516040830152606085015160608301526080850151608083015260a085015160a083015260c085015160c083015260e085015160e0830152610100808601518184015250610120808601518184015250610140808601518184015250819350614fa786828701614e34565b60006020828403121561507757600080fd5b5051919050565b808202811582820484141761064357610643614c1e565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826150d3576150d3615095565b500490565b8082018082111561064357610643614c1e565b600060a082840312156150fd57600080fd5b6151056149cd565b90508151615112816144aa565b81526020820151615122816144aa565b60208201526040820151615135816144aa565b60408201526060820151615148816144aa565b6060820152608082015161515b816144aa565b608082015292915050565b6000610240828403121561517957600080fd5b615181614a38565b8251815261519160208401614ce6565b60208201526151a260408401614ce6565b60408201526151b484606085016150eb565b60608201526101006151c7818501614ce6565b60808301526101206151da818601614ce6565b60a08401526101406151ed818701614ce6565b60c08501526101608087015160e086015261018080880151858701526101a0945084880151848701526101c0880151838701526101e088015182870152610200880151818701525050505061022084015181830152508091505092915050565b60006080828403121561525f57600080fd5b6040516080810181811067ffffffffffffffff8211171561528257615282614951565b8060405250809150825181526020830151602082015260408301516040820152606083015160608201525092915050565b6000608082840312156152c557600080fd5b6144ec838361524d565b80820182811260008312801582168215821617156152ef576152ef614c1e565b505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361535757615357614c1e565b5060010190565b600060c0828403121561537057600080fd5b60405160c0810181811067ffffffffffffffff8211171561539357615393614951565b8060405250825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a08201528091505092915050565b8181036000831280158383131683831282161715613fe757613fe7614c1e565b60008261540757615407615095565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83147f80000000000000000000000000000000000000000000000000000000000000008314161561545b5761545b614c1e565b50059056fea264697066735822122003e65f809aa88cf44254fce064248a464c6434a0f362bffbbe6d3026f92f5ed064736f6c63430008150033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "estimateSwapIn(address,bool,uint256,uint256)": {
        "params": {
          "amountIn_": "The exact amount of input tokens to swap",
          "amountOutMin_": "The minimum amount of output tokens the user is willing to accept",
          "dex_": "Dex pool",
          "swap0to1_": "Direction of swap. If true, swaps token0 for token1; if false, swaps token1 for token0"
        },
        "returns": {
          "amountOut_": "The amount of output tokens received from the swap"
        }
      },
      "estimateSwapOut(address,bool,uint256,uint256)": {
        "params": {
          "amountInMax_": "Maximum amount of tokens to swap in",
          "amountOut_": "The exact amount of tokens to receive after swap",
          "dex_": "Dex pool",
          "swap0to1_": "Direction of swap. If true, swaps token0 for token1; if false, swaps token1 for token0"
        },
        "returns": {
          "amountIn_": "The amount of input tokens used for the swap"
        }
      },
      "getAllPoolAddresses()": {
        "returns": {
          "pools_": "An array containing all Pool addresses"
        }
      },
      "getAllPools()": {
        "returns": {
          "pools_": "An array containing all Pool data"
        }
      },
      "getAllPoolsReserves()": {
        "details": "expected to be called via callStatic",
        "returns": {
          "poolsReserves_": "An array containing all Pool data with reserves"
        }
      },
      "getAllPoolsReservesAdjusted()": {
        "details": "expected to be called via callStatic",
        "returns": {
          "poolsReserves_": "An array containing all Pool data with adjusted reserves scaled to 1e12"
        }
      },
      "getDexCollateralReserves(address)": {
        "details": "expected to be called via callStatic",
        "params": {
          "dex_": "The address of the DEX"
        },
        "returns": {
          "reserves_": "A struct containing collateral reserve information"
        }
      },
      "getDexCollateralReservesAdjusted(address)": {
        "details": "expected to be called via callStatic",
        "params": {
          "dex_": "The address of the DEX"
        },
        "returns": {
          "reserves_": "A struct containing collateral reserve information"
        }
      },
      "getDexDebtReserves(address)": {
        "details": "expected to be called via callStatic",
        "params": {
          "dex_": "The address of the DEX"
        },
        "returns": {
          "reserves_": "A struct containing debt reserve information"
        }
      },
      "getDexDebtReservesAdjusted(address)": {
        "details": "expected to be called via callStatic",
        "params": {
          "dex_": "The address of the DEX"
        },
        "returns": {
          "reserves_": "A struct containing debt reserve information"
        }
      },
      "getDexLimits(address)": {
        "params": {
          "dex_": "The address of the DEX"
        },
        "returns": {
          "limits_": "A struct containing the swap limits for the DEX"
        }
      },
      "getDexPricesAndExchangePrices(address)": {
        "details": "expected to be called via callStatic",
        "params": {
          "dex_": "The address of the DEX"
        },
        "returns": {
          "pex_": "A struct containing prices and exchange prices"
        }
      },
      "getPool(uint256)": {
        "params": {
          "poolId_": "The ID of the Pool"
        },
        "returns": {
          "pool_": "The Pool data"
        }
      },
      "getPoolAddress(uint256)": {
        "params": {
          "poolId_": "The ID of the Pool"
        },
        "returns": {
          "pool_": "The address of the Pool"
        }
      },
      "getPoolFee(address)": {
        "params": {
          "pool_": "The Pool address"
        },
        "returns": {
          "fee_": "The Pool fee as 1% = 10000"
        }
      },
      "getPoolReserves(address)": {
        "details": "expected to be called via callStatic",
        "params": {
          "pool_": "The Pool address"
        },
        "returns": {
          "poolReserves_": "The Pool data with reserves."
        }
      },
      "getPoolReservesAdjusted(address)": {
        "details": "expected to be called via callStatic",
        "params": {
          "pool_": "The Pool address"
        },
        "returns": {
          "poolReserves_": "The Pool data with adjusted reserves scaled to 1e12. balanceTokens are in token decimals."
        }
      },
      "getPoolTokens(address)": {
        "params": {
          "pool_": "The address of the Pool"
        },
        "returns": {
          "token0_": "The address of token0 in the Pool",
          "token1_": "The address of token1 in the Pool"
        }
      },
      "getPoolsReserves(address[])": {
        "details": "expected to be called via callStatic",
        "params": {
          "pools_": "The array of Pool addresses"
        },
        "returns": {
          "poolsReserves_": "An array containing all Pool data with reserves"
        }
      },
      "getPoolsReservesAdjusted(address[])": {
        "details": "expected to be called via callStatic",
        "params": {
          "pools_": "The array of Pool addresses"
        },
        "returns": {
          "poolsReserves_": "An array containing all Pool data with adjusted reserves scaled to 1e12"
        }
      },
      "getTotalPools()": {
        "returns": {
          "_0": "The total number of Pools"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "estimateSwapIn(address,bool,uint256,uint256)": {
        "notice": "estimates swap IN tokens execution"
      },
      "estimateSwapOut(address,bool,uint256,uint256)": {
        "notice": "estimates swap OUT tokens execution"
      },
      "getAllPoolAddresses()": {
        "notice": "Get an array of all Pool addresses"
      },
      "getAllPools()": {
        "notice": "Get an array of all Pool addresses and their token addresses"
      },
      "getAllPoolsReserves()": {
        "notice": "Get an array of all Pool addresses, their token addresses, collateral reserves, and debt reserves"
      },
      "getAllPoolsReservesAdjusted()": {
        "notice": "Get an array of all Pool addresses, their token addresses, adjusted collateral reserves, and adjusted debt reserves"
      },
      "getDexCollateralReserves(address)": {
        "notice": "Get the collateral reserves for a DEX in token decimals amounts"
      },
      "getDexCollateralReservesAdjusted(address)": {
        "notice": "Get the collateral reserves for a DEX scaled to 1e12"
      },
      "getDexDebtReserves(address)": {
        "notice": "Get the debt reserves for a DEX in token decimals amounts"
      },
      "getDexDebtReservesAdjusted(address)": {
        "notice": "Get the debt reserves for a DEX scaled to 1e12"
      },
      "getDexLimits(address)": {
        "notice": "get the swap limits for a DEX"
      },
      "getDexPricesAndExchangePrices(address)": {
        "notice": "Get the prices and exchange prices for a DEX"
      },
      "getPool(uint256)": {
        "notice": "Get a Pool's address and its token addresses"
      },
      "getPoolAddress(uint256)": {
        "notice": "Get the address of a Pool given its ID"
      },
      "getPoolConstantsView(address)": {
        "notice": "returns all Pool constants"
      },
      "getPoolConstantsView2(address)": {
        "notice": "returns all Pool constants 2"
      },
      "getPoolFee(address)": {
        "notice": "Get a Pool's fee"
      },
      "getPoolReserves(address)": {
        "notice": "Get the token addresses, collateral reserves, and debt reserves for a given Pool address"
      },
      "getPoolReservesAdjusted(address)": {
        "notice": "Get the token addresses, adjusted collateral reserves, and adjusted debt reserves for a given Pool address"
      },
      "getPoolTokens(address)": {
        "notice": "Get the addresses of the tokens in a Pool"
      },
      "getPoolsReserves(address[])": {
        "notice": "Get an array of Pool addresses, their token addresses, collateral reserves, and debt reserves for a given array of Pool addresses"
      },
      "getPoolsReservesAdjusted(address[])": {
        "notice": "Get an array of Pool addresses, their token addresses, adjusted collateral reserves, and adjusted debt reserves for a given array of Pool addresses"
      },
      "getTotalPools()": {
        "notice": "Get the total number of Pools"
      }
    },
    "notice": "Fluid Dex Reserves resolver Implements various view-only methods to give easy access to Dex protocol reserves data.",
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}