{
  "address": "0x48f89d731C5e3b5BeE8235162FC2C639Ba62DB7d",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "rewardsToken_",
          "type": "address"
        },
        {
          "internalType": "contract IERC20",
          "name": "stakingToken_",
          "type": "address"
        },
        {
          "internalType": "uint40",
          "name": "rewardsDuration_",
          "type": "uint40"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "duration",
          "type": "uint256"
        }
      ],
      "name": "NextRewardQueued",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardAdded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reward",
          "type": "uint256"
        }
      ],
      "name": "RewardPaid",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Staked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdrawn",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "earned",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "exit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getReward",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRewardForDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastTimeRewardApplicable",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "lastUpdateTime",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextPeriodFinish",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextRewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextRewards",
      "outputs": [
        {
          "internalType": "uint216",
          "name": "",
          "type": "uint216"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextRewardsDuration",
      "outputs": [
        {
          "internalType": "uint40",
          "name": "",
          "type": "uint40"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reward_",
          "type": "uint256"
        }
      ],
      "name": "notifyRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reward_",
          "type": "uint256"
        },
        {
          "internalType": "uint40",
          "name": "newDuration_",
          "type": "uint40"
        }
      ],
      "name": "notifyRewardAmountWithDuration",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "periodFinish",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint216",
          "name": "nextReward_",
          "type": "uint216"
        },
        {
          "internalType": "uint40",
          "name": "nextDuration_",
          "type": "uint40"
        }
      ],
      "name": "queueNextRewardAmount",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerToken",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "rewardPerToken_",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerTokenStored",
      "outputs": [
        {
          "internalType": "uint128",
          "name": "",
          "type": "uint128"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardRate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rewards",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsDuration",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardsToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "target_",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data_",
          "type": "bytes"
        }
      ],
      "name": "spell",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "response_",
          "type": "bytes"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "stake",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deadline",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "v",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "r",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "s",
          "type": "bytes32"
        }
      ],
      "name": "stakeWithPermit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "stakingToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "updateRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userRewardPerTokenPaid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x1a64430a29f662158b4dcf200700550d56ec936c0fe52f267b5fe2ea27caaa7e",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x0Ed35B1609Ec45c7079E80d11149a52717e4859A",
    "contractAddress": null,
    "transactionIndex": 7,
    "gasUsed": "6600166",
    "logsBloom": "0x
    "blockHash": "0xc5d64488cf3a6f715167b44b9255d0ad64beb30bd1822b3f167e9d19cc5b2278",
    "transactionHash": "0x1a64430a29f662158b4dcf200700550d56ec936c0fe52f267b5fe2ea27caaa7e",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 228709698,
        "transactionHash": "0x1a64430a29f662158b4dcf200700550d56ec936c0fe52f267b5fe2ea27caaa7e",
        "address": "0x48f89d731C5e3b5BeE8235162FC2C639Ba62DB7d",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000004f6f977acdd1177dcd81ab83074855ecb9c2d49e"
        ],
        "data": "0x",
        "logIndex": 14,
        "blockHash": "0xc5d64488cf3a6f715167b44b9255d0ad64beb30bd1822b3f167e9d19cc5b2278"
      }
    ],
    "blockNumber": 228709698,
    "cumulativeGasUsed": "8055632",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4F6F977aCDD1177DCD81aB83074855EcB9C2D49e",
    "0x912ce59144191c1204e64559fe8253a0e49e6548",
    "0x1A996cb54bb95462040408C06122D45D6Cdb6096",
    172800
  ],
  "numDeployments": 1,
  "solcInputHash": "5f1e5ad50d3c36955a625e91271f5da7",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"rewardsToken_\",\"type\":\"address\"},{\"internalType\":\"contract IERC20\",\"name\":\"stakingToken_\",\"type\":\"address\"},{\"internalType\":\"uint40\",\"name\":\"rewardsDuration_\",\"type\":\"uint40\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"duration\",\"type\":\"uint256\"}],\"name\":\"NextRewardQueued\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reward\",\"type\":\"uint256\"}],\"name\":\"RewardPaid\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Staked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdrawn\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"earned\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"exit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getReward\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRewardForDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastTimeRewardApplicable\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"lastUpdateTime\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextPeriodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRewards\",\"outputs\":[{\"internalType\":\"uint216\",\"name\":\"\",\"type\":\"uint216\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextRewardsDuration\",\"outputs\":[{\"internalType\":\"uint40\",\"name\":\"\",\"type\":\"uint40\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward_\",\"type\":\"uint256\"}],\"name\":\"notifyRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reward_\",\"type\":\"uint256\"},{\"internalType\":\"uint40\",\"name\":\"newDuration_\",\"type\":\"uint40\"}],\"name\":\"notifyRewardAmountWithDuration\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"periodFinish\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint216\",\"name\":\"nextReward_\",\"type\":\"uint216\"},{\"internalType\":\"uint40\",\"name\":\"nextDuration_\",\"type\":\"uint40\"}],\"name\":\"queueNextRewardAmount\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerToken\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"rewardPerToken_\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerTokenStored\",\"outputs\":[{\"internalType\":\"uint128\",\"name\":\"\",\"type\":\"uint128\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardRate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rewards\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsDuration\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardsToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"target_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"spell\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"response_\",\"type\":\"bytes\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"stake\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"v\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"r\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"s\",\"type\":\"bytes32\"}],\"name\":\"stakeWithPermit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"stakingToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"updateRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userRewardPerTokenPaid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"spell(address,bytes)\":{\"params\":{\"data_\":\"Data to execute at the delegated address\",\"target_\":\"Address to which the call needs to be delegated\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"earned(address)\":{\"notice\":\"gets earned reward amount for an `account`, also considering automatic transition to queued next rewards\"},\"getRewardForDuration()\":{\"notice\":\"gets reward amount for current duration, also considering automatic transition to queued next rewards\"},\"lastTimeRewardApplicable()\":{\"notice\":\"gets last time where rewards accrue, also considering already queued next rewards\"},\"notifyRewardAmount(uint256)\":{\"notice\":\"add new rewards or top-up adding to current rewards, adjusting rewardRate going forward for leftover + newReward until block.timestamp + duration\"},\"notifyRewardAmountWithDuration(uint256,uint40)\":{\"notice\":\"add new rewards and update reward duration AFTER a reward period has ended.\"},\"queueNextRewardAmount(uint216,uint40)\":{\"notice\":\"queues next rewards that will be transitioned to automatically after current rewards reach `periodFinish`.\"},\"rewardPerToken()\":{\"notice\":\"gets reward amount per token, also considering automatic transition to queued next rewards\"},\"spell(address,bytes)\":{\"notice\":\"Spell allows owner aka governance to do any arbitrary call\"},\"updateRewards()\":{\"notice\":\"updates rewards until current block.timestamp or `periodFinish`. Transitions to next rewards if previous rewards ended and next ones were queued.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocols/lending/stakingRewards/main.sol\":\"FluidLendingStakingRewards\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/protocols/lending/stakingRewards/main.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { IERC20Permit } from \\\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\\\";\\nimport { Owned } from \\\"solmate/src/auth/Owned.sol\\\";\\n\\n// Adapted from https://github.com/Uniswap/liquidity-staker/blob/master/contracts/StakingRewards.sol\\ncontract FluidLendingStakingRewards is Owned, ReentrancyGuard {\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public immutable rewardsToken; // should be INST or any ERC20\\n    IERC20 public immutable stakingToken; // should be fToken\\n\\n    /* ========== STATE VARIABLES ========== */\\n\\n    // Owned and ReentranyGuard storage variables before\\n\\n    uint40 internal _periodFinish;\\n    uint40 public lastUpdateTime;\\n    uint40 internal _rewardsDuration; // e.g. 60 days\\n    uint136 internal _rewardRate;\\n\\n    // ------------------------------ next slot\\n\\n    uint128 public rewardPerTokenStored;\\n    uint128 internal _totalSupply;\\n\\n    // ------------------------------ next slot\\n\\n    uint40 public nextRewardsDuration; // e.g. 60 days\\n    uint216 public nextRewards;\\n\\n    // ------------------------------ next slot\\n\\n    mapping(address => uint256) public userRewardPerTokenPaid;\\n    mapping(address => uint256) public rewards;\\n\\n    mapping(address => uint256) internal _balances;\\n\\n    /* ========== CONSTRUCTOR ========== */\\n\\n    constructor(address owner_, IERC20 rewardsToken_, IERC20 stakingToken_, uint40 rewardsDuration_) Owned(owner_) {\\n        require(address(rewardsToken_) != address(0), \\\"Invalid params\\\");\\n        require(address(stakingToken_) != address(0), \\\"Invalid params\\\");\\n        require(owner_ != address(0), \\\"Invalid params\\\"); // Owned does not have a zero check for owner_\\n        require(rewardsDuration_ > 0, \\\"Invalid params\\\");\\n\\n        rewardsToken = rewardsToken_;\\n        stakingToken = stakingToken_;\\n        _rewardsDuration = rewardsDuration_;\\n    }\\n\\n    /* ========== VIEWS ========== */\\n\\n    function nextPeriodFinish() public view returns (uint256) {\\n        if (nextRewardsDuration == 0) {\\n            return 0;\\n        }\\n        return _periodFinish + nextRewardsDuration;\\n    }\\n\\n    function nextRewardRate() public view returns (uint256) {\\n        if (nextRewards == 0) {\\n            return 0;\\n        }\\n        return nextRewards / nextRewardsDuration;\\n    }\\n\\n    function periodFinish() public view returns (uint256) {\\n        if (block.timestamp <= _periodFinish || nextRewardsDuration == 0) {\\n            return _periodFinish;\\n        }\\n        return nextPeriodFinish();\\n    }\\n\\n    function rewardRate() public view returns (uint256) {\\n        if (block.timestamp <= _periodFinish || nextRewardsDuration == 0) {\\n            return _rewardRate;\\n        }\\n        return nextRewardRate();\\n    }\\n\\n    function rewardsDuration() public view returns (uint256) {\\n        if (block.timestamp <= _periodFinish || nextRewardsDuration == 0) {\\n            return _rewardsDuration;\\n        }\\n        return nextRewardsDuration;\\n    }\\n\\n    function totalSupply() public view returns (uint256) {\\n        return _totalSupply;\\n    }\\n\\n    function balanceOf(address account) public view returns (uint256) {\\n        return _balances[account];\\n    }\\n\\n    /// @notice gets last time where rewards accrue, also considering already queued next rewards\\n    function lastTimeRewardApplicable() public view returns (uint256) {\\n        if (block.timestamp <= _periodFinish) {\\n            return block.timestamp;\\n        }\\n\\n        if (nextRewardsDuration == 0) {\\n            return _periodFinish;\\n        }\\n\\n        // check if block.timestamp is within next rewards duration\\n        uint256 nextPeriodFinish_ = nextPeriodFinish();\\n        if (block.timestamp <= nextPeriodFinish_) {\\n            return block.timestamp;\\n        }\\n        return nextPeriodFinish_;\\n    }\\n\\n    /// @notice gets reward amount per token, also considering automatic transition to queued next rewards\\n    function rewardPerToken() public view returns (uint256 rewardPerToken_) {\\n        if (_totalSupply == 0) {\\n            return rewardPerTokenStored;\\n        }\\n\\n        // reward per token for current rewards\\n        // get lastTimeRewardApplicable for storage vars (without next queued rewards as returned by view methods)\\n        uint256 lastTimeRewardApplicable_ = block.timestamp < _periodFinish ? block.timestamp : _periodFinish;\\n\\n        rewardPerToken_ = (((lastTimeRewardApplicable_ - lastUpdateTime) * _rewardRate * 1e18) / _totalSupply);\\n\\n        if (block.timestamp > _periodFinish && nextRewardsDuration > 0) {\\n            // previous rewards ended and next rewards queued, take into account accrued rewards:\\n\\n            // check if block.timestamp is within next rewards duration\\n            rewardPerToken_ += (((lastTimeRewardApplicable() - _periodFinish) * nextRewardRate() * 1e18) /\\n                _totalSupply);\\n        }\\n\\n        rewardPerToken_ += rewardPerTokenStored;\\n    }\\n\\n    /// @notice gets earned reward amount for an `account`, also considering automatic transition to queued next rewards\\n    function earned(address account) public view returns (uint256) {\\n        return (_balances[account] * (rewardPerToken() - userRewardPerTokenPaid[account])) / 1e18 + rewards[account];\\n    }\\n\\n    /// @notice gets reward amount for current duration, also considering automatic transition to queued next rewards\\n    function getRewardForDuration() public view returns (uint256) {\\n        return rewardRate() * rewardsDuration();\\n    }\\n\\n    /* ========== MUTATIVE FUNCTIONS ========== */\\n\\n    function stakeWithPermit(\\n        uint256 amount,\\n        uint deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external nonReentrant updateReward(msg.sender) {\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\n\\n        // permit\\n        IERC20Permit(address(stakingToken)).permit(msg.sender, address(this), amount, deadline, v, r, s);\\n\\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        _totalSupply = _totalSupply + uint128(amount);\\n        _balances[msg.sender] = _balances[msg.sender] + amount;\\n\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function stake(uint256 amount) external nonReentrant updateReward(msg.sender) {\\n        require(amount > 0, \\\"Cannot stake 0\\\");\\n\\n        stakingToken.safeTransferFrom(msg.sender, address(this), amount);\\n\\n        _totalSupply = _totalSupply + uint128(amount);\\n        _balances[msg.sender] = _balances[msg.sender] + amount;\\n\\n        emit Staked(msg.sender, amount);\\n    }\\n\\n    function withdraw(uint256 amount) public nonReentrant updateReward(msg.sender) {\\n        require(amount > 0, \\\"Cannot withdraw 0\\\");\\n\\n        _totalSupply = _totalSupply - uint128(amount);\\n        _balances[msg.sender] = _balances[msg.sender] - amount;\\n\\n        stakingToken.safeTransfer(msg.sender, amount);\\n\\n        emit Withdrawn(msg.sender, amount);\\n    }\\n\\n    function getReward() public nonReentrant updateReward(msg.sender) {\\n        uint256 reward = rewards[msg.sender];\\n        if (reward > 0) {\\n            rewards[msg.sender] = 0;\\n            rewardsToken.safeTransfer(msg.sender, reward);\\n            emit RewardPaid(msg.sender, reward);\\n        }\\n    }\\n\\n    function exit() external {\\n        withdraw(_balances[msg.sender]);\\n        getReward();\\n    }\\n\\n    /// @notice updates rewards until current block.timestamp or `periodFinish`. Transitions to next rewards\\n    /// if previous rewards ended and next ones were queued.\\n    function updateRewards() public nonReentrant updateReward(address(0)) {}\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    /// @notice queues next rewards that will be transitioned to automatically after current rewards reach `periodFinish`.\\n    function queueNextRewardAmount(uint216 nextReward_, uint40 nextDuration_) external onlyOwner {\\n        require(block.timestamp < _periodFinish, \\\"Previous duration already ended\\\");\\n        require(nextDuration_ > 0 && nextReward_ > 0, \\\"Invalid params\\\");\\n        // must not already be queued\\n        require(nextRewardsDuration == 0, \\\"Already queued next rewards\\\");\\n\\n        // Ensure the provided reward amount is not more than the balance in the contract.\\n        // This keeps the reward rate in the right range, preventing overflows due to\\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\\n        // Reward + nextReward must be less than 2^256 / 10^18 to avoid overflow.\\n        uint256 balance_ = rewardsToken.balanceOf(address(this));\\n        uint256 remainingCurrentReward_ = (_periodFinish - block.timestamp) * _rewardRate;\\n        uint256 requiredBalance_ = remainingCurrentReward_ + nextReward_;\\n        require(requiredBalance_ <= balance_, \\\"Provided reward too high\\\");\\n\\n        nextRewards = nextReward_;\\n        nextRewardsDuration = nextDuration_;\\n\\n        emit NextRewardQueued(nextReward_, nextDuration_);\\n    }\\n\\n    /// @notice add new rewards and update reward duration AFTER a reward period has ended.\\n    function notifyRewardAmountWithDuration(\\n        uint256 reward_,\\n        uint40 newDuration_\\n    ) external onlyOwner updateReward(address(0)) {\\n        require(block.timestamp > _periodFinish, \\\"Previous duration not ended\\\");\\n        // @dev nextRewardsDuration == 0 should not be needed because if there are next rewards queued and block.timestamp > periodFinish,\\n        // then updateReward(address(0)) would automatically transition to the queued rewards and set nextRewardsDuration == 0.\\n        // Adding the check here anyway to be safe as gas optimization on an Admin Method is not necessary.\\n        require(nextRewardsDuration == 0, \\\"Already queued next rewards\\\");\\n        require(newDuration_ > 0, \\\"Invalid params\\\");\\n\\n        _rewardsDuration = newDuration_;\\n        notifyRewardAmount(reward_);\\n    }\\n\\n    /// @notice add new rewards or top-up adding to current rewards, adjusting rewardRate going forward for leftover + newReward\\n    /// until block.timestamp + duration\\n    function notifyRewardAmount(uint256 reward_) public onlyOwner updateReward(address(0)) {\\n        require(nextRewardsDuration == 0, \\\"Already queued next rewards\\\");\\n\\n        if (block.timestamp >= _periodFinish) {\\n            _rewardRate = uint136(reward_ / _rewardsDuration);\\n        } else {\\n            uint256 remaining_ = _periodFinish - block.timestamp;\\n            uint256 leftover_ = remaining_ * _rewardRate;\\n            _rewardRate = uint136((reward_ + leftover_) / _rewardsDuration);\\n        }\\n\\n        // Ensure the provided reward amount is not more than the balance in the contract.\\n        // This keeps the reward rate in the right range, preventing overflows due to\\n        // very high values of rewardRate in the earned and rewardsPerToken functions;\\n        // Reward + leftover must be less than 2^256 / 10^18 to avoid overflow.\\n        uint256 balance_ = rewardsToken.balanceOf(address(this));\\n        require(_rewardRate <= balance_ / _rewardsDuration, \\\"Provided reward too high\\\");\\n\\n        lastUpdateTime = uint40(block.timestamp);\\n        _periodFinish = uint40(block.timestamp + _rewardsDuration);\\n        emit RewardAdded(reward_);\\n    }\\n\\n    /// @notice         Spell allows owner aka governance to do any arbitrary call\\n    /// @param target_  Address to which the call needs to be delegated\\n    /// @param data_    Data to execute at the delegated address\\n    function spell(address target_, bytes memory data_) external onlyOwner returns (bytes memory response_) {\\n        assembly {\\n            let succeeded := delegatecall(gas(), target_, add(data_, 0x20), mload(data_), 0, 0)\\n            let size := returndatasize()\\n\\n            response_ := mload(0x40)\\n            mstore(0x40, add(response_, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n            mstore(response_, size)\\n            returndatacopy(add(response_, 0x20), 0, size)\\n\\n            switch iszero(succeeded)\\n            case 1 {\\n                // throw if delegatecall failed\\n                returndatacopy(0x00, 0x00, size)\\n                revert(0x00, size)\\n            }\\n        }\\n    }\\n\\n    /* ========== MODIFIERS ========== */\\n\\n    modifier updateReward(address account) {\\n        // get lastTimeRewardApplicable for storage vars (without next queued rewards as returned by view methods)\\n        uint256 lastTimeRewardApplicable_ = block.timestamp < _periodFinish ? block.timestamp : _periodFinish;\\n\\n        // get reward per Token for storage vars (without next queued rewards as returned by view methods)\\n        uint256 rewardPerToken_;\\n        if (_totalSupply > 0) {\\n            rewardPerToken_ =\\n                rewardPerTokenStored +\\n                (((lastTimeRewardApplicable_ - lastUpdateTime) * _rewardRate * 1e18) / _totalSupply);\\n        }\\n\\n        rewardPerTokenStored = uint128(rewardPerToken_);\\n        lastUpdateTime = uint40(lastTimeRewardApplicable_);\\n\\n        if (block.timestamp > _periodFinish && nextRewardsDuration > 0) {\\n            // previous rewards ended, and new rewards were queued -> start new rewards.\\n\\n            // previous rewards fully distributed until `periodFinish` by updating `rewardPerTokenStored`\\n            // according to `rewardRate` that was valid until period finish, with calls above.\\n\\n            // transition to new rewards\\n            _rewardRate = uint136(nextRewards / nextRewardsDuration);\\n            _rewardsDuration = nextRewardsDuration;\\n\\n            // new rewards started right at periodFinish\\n            _periodFinish = uint40(_periodFinish + _rewardsDuration);\\n\\n            emit RewardAdded(nextRewards);\\n\\n            // reset next rewards storage vars\\n            nextRewards = 0;\\n            nextRewardsDuration = 0;\\n\\n            // update rewardPerTokenStored again to go until current block.timestamp now\\n            // can use normal view methods here as next rewards storage vars have just been set to 0\\n            rewardPerTokenStored = uint128(rewardPerToken());\\n            lastUpdateTime = uint40(lastTimeRewardApplicable());\\n        }\\n\\n        if (account != address(0)) {\\n            rewards[account] = earned(account);\\n            userRewardPerTokenPaid[account] = rewardPerTokenStored;\\n        }\\n        _;\\n    }\\n\\n    /* ========== EVENTS ========== */\\n\\n    event RewardAdded(uint256 reward);\\n    event Staked(address indexed user, uint256 amount);\\n    event Withdrawn(address indexed user, uint256 amount);\\n    event RewardPaid(address indexed user, uint256 reward);\\n    event NextRewardQueued(uint256 reward, uint256 duration);\\n}\\n\",\"keccak256\":\"0x90a7d584544974fa7a6a6110b263a3c41ffa2263e560cd94b85bb0c455ccbcaa\",\"license\":\"MIT\"},\"solmate/src/auth/Owned.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\\nabstract contract Owned {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            OWNERSHIP STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address public owner;\\n\\n    modifier onlyOwner() virtual {\\n        require(msg.sender == owner, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             OWNERSHIP LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        owner = newOwner;\\n\\n        emit OwnershipTransferred(msg.sender, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xfedb27d14c508342c33eb067c9a02eabcdb0f9dcf93b04ded1001f580d12d0ea\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e45760003560e01c80637b0a47ee1161010f578063c8f33c91116100a2578063e9fad8ee11610071578063e9fad8ee146104e9578063ebe2b12b146104f1578063ecd9ba82146104f9578063f2fde38b1461050c57600080fd5b8063c8f33c9114610463578063cd3daf9d1461047d578063d1af0c7d14610485578063df136d65146104ac57600080fd5b8063a694fc3a116100de578063a694fc3a146103f6578063aa0d9c4c14610409578063c1b432551461041c578063c7acb01f1461044357600080fd5b80637b0a47ee146103a657806380faa57d146103ae5780638b876347146103b65780638da5cb5b146103d657600080fd5b80633ce36915116101875780634d5dce99116101565780634d5dce99146102c057806370a082311461031c578063715fda7b1461035257806372f702f31461035a57600080fd5b80633ce36915146102955780633d18b912146102a85780633e158b0c146102b05780633fc5e436146102b857600080fd5b80631c1f78eb116101c35780631c1f78eb1461025d5780632e1a7d4d14610265578063386a95251461027a5780633c6b16ab1461028257600080fd5b80628cc262146101e95780630700037d1461020f57806318160ddd1461022f575b600080fd5b6101fc6101f7366004613d33565b61051f565b6040519081526020015b60405180910390f35b6101fc61021d366004613d33565b60066020526000908152604090205481565b60035470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff166101fc565b6101fc6105b6565b610278610273366004613d55565b6105d7565b005b6101fc610b65565b610278610290366004613d55565b610bb6565b6102786102a3366004613d83565b611404565b610278611a22565b610278611ed2565b6101fc6122e1565b6004546102f0906501000000000090047affffffffffffffffffffffffffffffffffffffffffffffffffffff1681565b6040517affffffffffffffffffffffffffffffffffffffffffffffffffffff9091168152602001610206565b6101fc61032a366004613d33565b73ffffffffffffffffffffffffffffffffffffffff1660009081526007602052604090205490565b6101fc612320565b6103817f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610206565b6101fc6123b5565b6101fc612411565b6101fc6103c4366004613d33565b60056020526000908152604090205481565b6000546103819073ffffffffffffffffffffffffffffffffffffffff1681565b610278610404366004613d55565b612467565b610278610417366004613daf565b6129de565b60045461042d9064ffffffffff1681565b60405164ffffffffff9091168152602001610206565b610456610451366004613e2a565b612dfd565b6040516102069190613f78565b60025461042d9065010000000000900464ffffffffff1681565b6101fc612ecb565b6103817f000000000000000000000000000000000000000000000000000000000000000081565b6003546104c8906fffffffffffffffffffffffffffffffff1681565b6040516fffffffffffffffffffffffffffffffff9091168152602001610206565b61027861309e565b6101fc6130bf565b610278610507366004613f8b565b6130fc565b61027861051a366004613d33565b613753565b73ffffffffffffffffffffffffffffffffffffffff81166000908152600660209081526040808320546005909252822054670de0b6b3a764000090610562612ecb565b61056c9190614009565b73ffffffffffffffffffffffffffffffffffffffff851660009081526007602052604090205461059c919061401c565b6105a69190614062565b6105b09190614076565b92915050565b60006105c0610b65565b6105c86123b5565b6105d2919061401c565b905090565b6105df613844565b600254339060009064ffffffffff1642106106035760025464ffffffffff16610605565b425b60035490915060009070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16156106f0576003546002547001000000000000000000000000000000009091046fffffffffffffffffffffffffffffffff16906f01000000000000000000000000000000810470ffffffffffffffffffffffffffffffffff16906106a89065010000000000900464ffffffffff1685614009565b6106b2919061401c565b6106c490670de0b6b3a764000061401c565b6106ce9190614062565b6003546106ed91906fffffffffffffffffffffffffffffffff16614076565b90505b600380546fffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffffffffffff000000000000000000000000000000009091161790556002805464ffffffffff80851665010000000000027fffffffffffffffffffffffffffffffffffffffffffff0000000000ffffffffff8316811790935591821691161742118015610787575060045464ffffffffff1615155b15610967576004546107c79064ffffffffff8116906501000000000090047affffffffffffffffffffffffffffffffffffffffffffffffffffff16614089565b600280546004546a010000000000000000000064ffffffffff91821681027fffffffffffffffffffffffffffffffffff0000000000ffffffffffffffffffff70ffffffffffffffffffffffffffffffffff969096166f01000000000000000000000000000000029590951669ffffffffffffffffffff90931692909217939093179182905561085c92908204811691166140c3565b600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000001664ffffffffff92909216919091179055600454604051650100000000009091047affffffffffffffffffffffffffffffffffffffffffffffffffffff1681527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a160006004556108fb612ecb565b600380547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff92909216919091179055610944612411565b600260056101000a81548164ffffffffff021916908364ffffffffff1602179055505b73ffffffffffffffffffffffffffffffffffffffff8316156109da5761098c8361051f565b73ffffffffffffffffffffffffffffffffffffffff841660009081526006602090815260408083209390935560035460059091529190206fffffffffffffffffffffffffffffffff90911690555b60008411610a49576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f43616e6e6f74207769746864726177203000000000000000000000000000000060448201526064015b60405180910390fd5b600354610a7d90859070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff166140e8565b600380546fffffffffffffffffffffffffffffffff92831670010000000000000000000000000000000002921691909117905533600090815260076020526040902054610acb908590614009565b33600081815260076020526040902091909155610b20907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690866138b7565b60405184815233907f7084f5476618d8e60b11ef0d7d3f06914655adb8793e28ff7f018d4c76d505d5906020015b60405180910390a2505050610b6260018055565b50565b60025460009064ffffffffff1642111580610b87575060045464ffffffffff16155b15610ba857506002546a0100000000000000000000900464ffffffffff1690565b5060045464ffffffffff1690565b60005473ffffffffffffffffffffffffffffffffffffffff163314610c37576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610a40565b600254600090819064ffffffffff164210610c5b5760025464ffffffffff16610c5d565b425b60035490915060009070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1615610d48576003546002547001000000000000000000000000000000009091046fffffffffffffffffffffffffffffffff16906f01000000000000000000000000000000810470ffffffffffffffffffffffffffffffffff1690610d009065010000000000900464ffffffffff1685614009565b610d0a919061401c565b610d1c90670de0b6b3a764000061401c565b610d269190614062565b600354610d4591906fffffffffffffffffffffffffffffffff16614076565b90505b600380546fffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffffffffffff000000000000000000000000000000009091161790556002805464ffffffffff80851665010000000000027fffffffffffffffffffffffffffffffffffffffffffff0000000000ffffffffff8316811790935591821691161742118015610ddf575060045464ffffffffff1615155b15610fbf57600454610e1f9064ffffffffff8116906501000000000090047affffffffffffffffffffffffffffffffffffffffffffffffffffff16614089565b600280546004546a010000000000000000000064ffffffffff91821681027fffffffffffffffffffffffffffffffffff0000000000ffffffffffffffffffff70ffffffffffffffffffffffffffffffffff969096166f01000000000000000000000000000000029590951669ffffffffffffffffffff909316929092179390931791829055610eb492908204811691166140c3565b600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000001664ffffffffff92909216919091179055600454604051650100000000009091047affffffffffffffffffffffffffffffffffffffffffffffffffffff1681527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a16000600455610f53612ecb565b600380547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff92909216919091179055610f9c612411565b600260056101000a81548164ffffffffff021916908364ffffffffff1602179055505b73ffffffffffffffffffffffffffffffffffffffff83161561103257610fe48361051f565b73ffffffffffffffffffffffffffffffffffffffff841660009081526006602090815260408083209390935560035460059091529190206fffffffffffffffffffffffffffffffff90911690555b60045464ffffffffff16156110a3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f416c726561647920717565756564206e657874207265776172647300000000006044820152606401610a40565b60025464ffffffffff164210611114576002546110d5906a0100000000000000000000900464ffffffffff1685614062565b6002600f6101000a81548170ffffffffffffffffffffffffffffffffff021916908370ffffffffffffffffffffffffffffffffff1602179055506111d1565b60025460009061112c90429064ffffffffff16614009565b600254909150600090611165906f01000000000000000000000000000000900470ffffffffffffffffffffffffffffffffff168361401c565b6002549091506a0100000000000000000000900464ffffffffff1661118a8288614076565b6111949190614062565b6002600f6101000a81548170ffffffffffffffffffffffffffffffffff021916908370ffffffffffffffffffffffffffffffffff16021790555050505b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa15801561125e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112829190614111565b6002549091506112a7906a0100000000000000000000900464ffffffffff1682614062565b6002546f01000000000000000000000000000000900470ffffffffffffffffffffffffffffffffff161115611338576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f50726f76696465642072657761726420746f6f206869676800000000000000006044820152606401610a40565b6002805464ffffffffff4281811665010000000000027fffffffffffffffffffffffffffffffffffffffffffff0000000000ffffffffff9093169290921792839055611393926a010000000000000000000090041690614076565b600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000001664ffffffffff929092169190911790556040518581527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d906020015b60405180910390a15050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314611485576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610a40565b600254600090819064ffffffffff1642106114a95760025464ffffffffff166114ab565b425b60035490915060009070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1615611596576003546002547001000000000000000000000000000000009091046fffffffffffffffffffffffffffffffff16906f01000000000000000000000000000000810470ffffffffffffffffffffffffffffffffff169061154e9065010000000000900464ffffffffff1685614009565b611558919061401c565b61156a90670de0b6b3a764000061401c565b6115749190614062565b60035461159391906fffffffffffffffffffffffffffffffff16614076565b90505b600380546fffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffffffffffff000000000000000000000000000000009091161790556002805464ffffffffff80851665010000000000027fffffffffffffffffffffffffffffffffffffffffffff0000000000ffffffffff831681179093559182169116174211801561162d575060045464ffffffffff1615155b1561180d5760045461166d9064ffffffffff8116906501000000000090047affffffffffffffffffffffffffffffffffffffffffffffffffffff16614089565b600280546004546a010000000000000000000064ffffffffff91821681027fffffffffffffffffffffffffffffffffff0000000000ffffffffffffffffffff70ffffffffffffffffffffffffffffffffff969096166f01000000000000000000000000000000029590951669ffffffffffffffffffff90931692909217939093179182905561170292908204811691166140c3565b600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000001664ffffffffff92909216919091179055600454604051650100000000009091047affffffffffffffffffffffffffffffffffffffffffffffffffffff1681527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a160006004556117a1612ecb565b600380547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff929092169190911790556117ea612411565b600260056101000a81548164ffffffffff021916908364ffffffffff1602179055505b73ffffffffffffffffffffffffffffffffffffffff831615611880576118328361051f565b73ffffffffffffffffffffffffffffffffffffffff841660009081526006602090815260408083209390935560035460059091529190206fffffffffffffffffffffffffffffffff90911690555b60025464ffffffffff1642116118f2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f50726576696f7573206475726174696f6e206e6f7420656e64656400000000006044820152606401610a40565b60045464ffffffffff1615611963576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f416c726561647920717565756564206e657874207265776172647300000000006044820152606401610a40565b60008464ffffffffff16116119d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c696420706172616d730000000000000000000000000000000000006044820152606401610a40565b600280547fffffffffffffffffffffffffffffffffff0000000000ffffffffffffffffffff166a010000000000000000000064ffffffffff871602179055611a1b85610bb6565b5050505050565b611a2a613844565b600254339060009064ffffffffff164210611a4e5760025464ffffffffff16611a50565b425b60035490915060009070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1615611b3b576003546002547001000000000000000000000000000000009091046fffffffffffffffffffffffffffffffff16906f01000000000000000000000000000000810470ffffffffffffffffffffffffffffffffff1690611af39065010000000000900464ffffffffff1685614009565b611afd919061401c565b611b0f90670de0b6b3a764000061401c565b611b199190614062565b600354611b3891906fffffffffffffffffffffffffffffffff16614076565b90505b600380546fffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffffffffffff000000000000000000000000000000009091161790556002805464ffffffffff80851665010000000000027fffffffffffffffffffffffffffffffffffffffffffff0000000000ffffffffff8316811790935591821691161742118015611bd2575060045464ffffffffff1615155b15611db257600454611c129064ffffffffff8116906501000000000090047affffffffffffffffffffffffffffffffffffffffffffffffffffff16614089565b600280546004546a010000000000000000000064ffffffffff91821681027fffffffffffffffffffffffffffffffffff0000000000ffffffffffffffffffff70ffffffffffffffffffffffffffffffffff969096166f01000000000000000000000000000000029590951669ffffffffffffffffffff909316929092179390931791829055611ca792908204811691166140c3565b600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000001664ffffffffff92909216919091179055600454604051650100000000009091047affffffffffffffffffffffffffffffffffffffffffffffffffffff1681527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a16000600455611d46612ecb565b600380547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff92909216919091179055611d8f612411565b600260056101000a81548164ffffffffff021916908364ffffffffff1602179055505b73ffffffffffffffffffffffffffffffffffffffff831615611e2557611dd78361051f565b73ffffffffffffffffffffffffffffffffffffffff841660009081526006602090815260408083209390935560035460059091529190206fffffffffffffffffffffffffffffffff90911690555b336000908152600660205260409020548015611ec35733600081815260066020526040812055611e8d907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1690836138b7565b60405181815233907fe2403640ba68fed3a2f88b7557551d1993f84b99bb10ff833f0cf8db0c5e04869060200160405180910390a25b50505050611ed060018055565b565b611eda613844565b600254600090819064ffffffffff164210611efe5760025464ffffffffff16611f00565b425b60035490915060009070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1615611feb576003546002547001000000000000000000000000000000009091046fffffffffffffffffffffffffffffffff16906f01000000000000000000000000000000810470ffffffffffffffffffffffffffffffffff1690611fa39065010000000000900464ffffffffff1685614009565b611fad919061401c565b611fbf90670de0b6b3a764000061401c565b611fc99190614062565b600354611fe891906fffffffffffffffffffffffffffffffff16614076565b90505b600380546fffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffffffffffff000000000000000000000000000000009091161790556002805464ffffffffff80851665010000000000027fffffffffffffffffffffffffffffffffffffffffffff0000000000ffffffffff8316811790935591821691161742118015612082575060045464ffffffffff1615155b15612262576004546120c29064ffffffffff8116906501000000000090047affffffffffffffffffffffffffffffffffffffffffffffffffffff16614089565b600280546004546a010000000000000000000064ffffffffff91821681027fffffffffffffffffffffffffffffffffff0000000000ffffffffffffffffffff70ffffffffffffffffffffffffffffffffff969096166f01000000000000000000000000000000029590951669ffffffffffffffffffff90931692909217939093179182905561215792908204811691166140c3565b600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000001664ffffffffff92909216919091179055600454604051650100000000009091047affffffffffffffffffffffffffffffffffffffffffffffffffffff1681527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a160006004556121f6612ecb565b600380547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff9290921691909117905561223f612411565b600260056101000a81548164ffffffffff021916908364ffffffffff1602179055505b73ffffffffffffffffffffffffffffffffffffffff8316156122d5576122878361051f565b73ffffffffffffffffffffffffffffffffffffffff841660009081526006602090815260408083209390935560035460059091529190206fffffffffffffffffffffffffffffffff90911690555b505050611ed060018055565b60045460009064ffffffffff1681036122fa5750600090565b6004546002546123149164ffffffffff90811691166140c3565b64ffffffffff16905090565b6004546000906501000000000090047affffffffffffffffffffffffffffffffffffffffffffffffffffff1681036123585750600090565b6004546123939064ffffffffff8116906501000000000090047affffffffffffffffffffffffffffffffffffffffffffffffffffff16614089565b7affffffffffffffffffffffffffffffffffffffffffffffffffffff16905090565b60025460009064ffffffffff16421115806123d7575060045464ffffffffff16155b1561240957506002546f01000000000000000000000000000000900470ffffffffffffffffffffffffffffffffff1690565b6105d2612320565b60025460009064ffffffffff16421161242957504290565b60045464ffffffffff16600003612448575060025464ffffffffff1690565b60006124526122e1565b9050804211612462574291505090565b919050565b61246f613844565b600254339060009064ffffffffff1642106124935760025464ffffffffff16612495565b425b60035490915060009070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1615612580576003546002547001000000000000000000000000000000009091046fffffffffffffffffffffffffffffffff16906f01000000000000000000000000000000810470ffffffffffffffffffffffffffffffffff16906125389065010000000000900464ffffffffff1685614009565b612542919061401c565b61255490670de0b6b3a764000061401c565b61255e9190614062565b60035461257d91906fffffffffffffffffffffffffffffffff16614076565b90505b600380546fffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffffffffffff000000000000000000000000000000009091161790556002805464ffffffffff80851665010000000000027fffffffffffffffffffffffffffffffffffffffffffff0000000000ffffffffff8316811790935591821691161742118015612617575060045464ffffffffff1615155b156127f7576004546126579064ffffffffff8116906501000000000090047affffffffffffffffffffffffffffffffffffffffffffffffffffff16614089565b600280546004546a010000000000000000000064ffffffffff91821681027fffffffffffffffffffffffffffffffffff0000000000ffffffffffffffffffff70ffffffffffffffffffffffffffffffffff969096166f01000000000000000000000000000000029590951669ffffffffffffffffffff9093169290921793909317918290556126ec92908204811691166140c3565b600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000001664ffffffffff92909216919091179055600454604051650100000000009091047affffffffffffffffffffffffffffffffffffffffffffffffffffff1681527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a1600060045561278b612ecb565b600380547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff929092169190911790556127d4612411565b600260056101000a81548164ffffffffff021916908364ffffffffff1602179055505b73ffffffffffffffffffffffffffffffffffffffff83161561286a5761281c8361051f565b73ffffffffffffffffffffffffffffffffffffffff841660009081526006602090815260408083209390935560035460059091529190206fffffffffffffffffffffffffffffffff90911690555b600084116128d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f43616e6e6f74207374616b6520300000000000000000000000000000000000006044820152606401610a40565b61291673ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016333087613990565b60035461294a90859070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1661412a565b600380546fffffffffffffffffffffffffffffffff92831670010000000000000000000000000000000002921691909117905533600090815260076020526040902054612998908590614076565b33600081815260076020526040908190209290925590517f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d90610b4e9087815260200190565b60005473ffffffffffffffffffffffffffffffffffffffff163314612a5f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610a40565b60025464ffffffffff164210612ad1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f50726576696f7573206475726174696f6e20616c726561647920656e646564006044820152606401610a40565b60008164ffffffffff16118015612b0557506000827affffffffffffffffffffffffffffffffffffffffffffffffffffff16115b612b6b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f496e76616c696420706172616d730000000000000000000000000000000000006044820152606401610a40565b60045464ffffffffff1615612bdc576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601b60248201527f416c726561647920717565756564206e657874207265776172647300000000006044820152606401610a40565b6040517f70a082310000000000000000000000000000000000000000000000000000000081523060048201526000907f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16906370a0823190602401602060405180830381865afa158015612c69573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190612c8d9190614111565b60025490915060009070ffffffffffffffffffffffffffffffffff6f0100000000000000000000000000000082041690612ccf90429064ffffffffff16614009565b612cd9919061401c565b90506000612d047affffffffffffffffffffffffffffffffffffffffffffffffffffff861683614076565b905082811115612d70576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601860248201527f50726f76696465642072657761726420746f6f206869676800000000000000006044820152606401610a40565b64ffffffffff84167affffffffffffffffffffffffffffffffffffffffffffffffffffff86166501000000000081027fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000001682176004556040805191825260208201929092527f1f6864585aff6172b9e61fd517190576e478963013921dff17824a9b8ff101d891016113f5565b60005460609073ffffffffffffffffffffffffffffffffffffffff163314612e81576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610a40565b600080835160208501865af43d6040519250601f19601f6020830101168301604052808352806000602085013e811560018103612ec257816000803e816000fd5b50505092915050565b60035460009070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff168103612f1657506003546fffffffffffffffffffffffffffffffff1690565b60025460009064ffffffffff164210612f385760025464ffffffffff16612f3a565b425b60035460025491925070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff16906f01000000000000000000000000000000810470ffffffffffffffffffffffffffffffffff1690612fab9065010000000000900464ffffffffff1684614009565b612fb5919061401c565b612fc790670de0b6b3a764000061401c565b612fd19190614062565b60025490925064ffffffffff1642118015612ff4575060045464ffffffffff1615155b156130795760035470010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1661302a612320565b60025464ffffffffff1661303c612411565b6130469190614009565b613050919061401c565b61306290670de0b6b3a764000061401c565b61306c9190614062565b6130769083614076565b91505b600354613098906fffffffffffffffffffffffffffffffff1683614076565b91505090565b336000908152600760205260409020546130b7906105d7565b611ed0611a22565b60025460009064ffffffffff16421115806130e1575060045464ffffffffff16155b156130f4575060025464ffffffffff1690565b6105d26122e1565b613104613844565b600254339060009064ffffffffff1642106131285760025464ffffffffff1661312a565b425b60035490915060009070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1615613215576003546002547001000000000000000000000000000000009091046fffffffffffffffffffffffffffffffff16906f01000000000000000000000000000000810470ffffffffffffffffffffffffffffffffff16906131cd9065010000000000900464ffffffffff1685614009565b6131d7919061401c565b6131e990670de0b6b3a764000061401c565b6131f39190614062565b60035461321291906fffffffffffffffffffffffffffffffff16614076565b90505b600380546fffffffffffffffffffffffffffffffff83167fffffffffffffffffffffffffffffffff000000000000000000000000000000009091161790556002805464ffffffffff80851665010000000000027fffffffffffffffffffffffffffffffffffffffffffff0000000000ffffffffff83168117909355918216911617421180156132ac575060045464ffffffffff1615155b1561348c576004546132ec9064ffffffffff8116906501000000000090047affffffffffffffffffffffffffffffffffffffffffffffffffffff16614089565b600280546004546a010000000000000000000064ffffffffff91821681027fffffffffffffffffffffffffffffffffff0000000000ffffffffffffffffffff70ffffffffffffffffffffffffffffffffff969096166f01000000000000000000000000000000029590951669ffffffffffffffffffff90931692909217939093179182905561338192908204811691166140c3565b600280547fffffffffffffffffffffffffffffffffffffffffffffffffffffff00000000001664ffffffffff92909216919091179055600454604051650100000000009091047affffffffffffffffffffffffffffffffffffffffffffffffffffff1681527fde88a922e0d3b88b24e9623efeb464919c6bf9f66857a65e2bfcf2ce87a9433d9060200160405180910390a16000600455613420612ecb565b600380547fffffffffffffffffffffffffffffffff00000000000000000000000000000000166fffffffffffffffffffffffffffffffff92909216919091179055613469612411565b600260056101000a81548164ffffffffff021916908364ffffffffff1602179055505b73ffffffffffffffffffffffffffffffffffffffff8316156134ff576134b18361051f565b73ffffffffffffffffffffffffffffffffffffffff841660009081526006602090815260408083209390935560035460059091529190206fffffffffffffffffffffffffffffffff90911690555b60008811613569576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600e60248201527f43616e6e6f74207374616b6520300000000000000000000000000000000000006044820152606401610a40565b6040517fd505accf000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018990526064810188905260ff8716608482015260a4810186905260c481018590527f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff169063d505accf9060e401600060405180830381600087803b15801561361b57600080fd5b505af115801561362f573d6000803e3d6000fd5b5061367792505073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016905033308b613990565b6003546136ab90899070010000000000000000000000000000000090046fffffffffffffffffffffffffffffffff1661412a565b600380546fffffffffffffffffffffffffffffffff928316700100000000000000000000000000000000029216919091179055336000908152600760205260409020546136f9908990614076565b33600081815260076020526040908190209290925590517f9e71bc8eea02a63969f509818f2dafb9254532904319f9dbda79b67bd34a5f3d9061373f908b815260200190565b60405180910390a2505050611a1b60018055565b60005473ffffffffffffffffffffffffffffffffffffffff1633146137d4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610a40565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081178255604051909133917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b6002600154036138b0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601f60248201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c006044820152606401610a40565b6002600155565b60405173ffffffffffffffffffffffffffffffffffffffff831660248201526044810182905261398b9084907fa9059cbb00000000000000000000000000000000000000000000000000000000906064015b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe08184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff00000000000000000000000000000000000000000000000000000000909316929092179091526139f4565b505050565b60405173ffffffffffffffffffffffffffffffffffffffff808516602483015283166044820152606481018290526139ee9085907f23b872dd0000000000000000000000000000000000000000000000000000000090608401613909565b50505050565b6000613a56826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16613b009092919063ffffffff16565b80519091501561398b5780806020019051810190613a749190614153565b61398b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610a40565b6060613b0f8484600085613b17565b949350505050565b606082471015613ba9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610a40565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051613bd29190614175565b60006040518083038185875af1925050503d8060008114613c0f576040519150601f19603f3d011682016040523d82523d6000602084013e613c14565b606091505b5091509150613c2587838387613c30565b979650505050505050565b60608315613cc6578251600003613cbf5773ffffffffffffffffffffffffffffffffffffffff85163b613cbf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610a40565b5081613b0f565b613b0f8383815115613cdb5781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401610a409190613f78565b803573ffffffffffffffffffffffffffffffffffffffff8116811461246257600080fd5b600060208284031215613d4557600080fd5b613d4e82613d0f565b9392505050565b600060208284031215613d6757600080fd5b5035919050565b803564ffffffffff8116811461246257600080fd5b60008060408385031215613d9657600080fd5b82359150613da660208401613d6e565b90509250929050565b60008060408385031215613dc257600080fd5b82357affffffffffffffffffffffffffffffffffffffffffffffffffffff81168114613ded57600080fd5b9150613da660208401613d6e565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008060408385031215613e3d57600080fd5b613e4683613d0f565b9150602083013567ffffffffffffffff80821115613e6357600080fd5b818501915085601f830112613e7757600080fd5b813581811115613e8957613e89613dfb565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f01168101908382118183101715613ecf57613ecf613dfb565b81604052828152886020848701011115613ee857600080fd5b8260208601602083013760006020848301015280955050505050509250929050565b60005b83811015613f25578181015183820152602001613f0d565b50506000910152565b60008151808452613f46816020860160208601613f0a565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b602081526000613d4e6020830184613f2e565b600080600080600060a08688031215613fa357600080fd5b8535945060208601359350604086013560ff81168114613fc257600080fd5b94979396509394606081013594506080013592915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b818103818111156105b0576105b0613fda565b80820281158282048414176105b0576105b0613fda565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60008261407157614071614033565b500490565b808201808211156105b0576105b0613fda565b60007affffffffffffffffffffffffffffffffffffffffffffffffffffff808416806140b7576140b7614033565b92169190910492915050565b64ffffffffff8181168382160190808211156140e1576140e1613fda565b5092915050565b6fffffffffffffffffffffffffffffffff8281168282160390808211156140e1576140e1613fda565b60006020828403121561412357600080fd5b5051919050565b6fffffffffffffffffffffffffffffffff8181168382160190808211156140e1576140e1613fda565b60006020828403121561416557600080fd5b81518015158114613d4e57600080fd5b60008251614187818460208701613f0a565b919091019291505056fea26469706673582212207ad43e67d21c608c02caa7156bc21103d8ef4606ca7877eb968eb11ec5fdcf3b64736f6c63430008150033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "spell(address,bytes)": {
        "params": {
          "data_": "Data to execute at the delegated address",
          "target_": "Address to which the call needs to be delegated"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "earned(address)": {
        "notice": "gets earned reward amount for an `account`, also considering automatic transition to queued next rewards"
      },
      "getRewardForDuration()": {
        "notice": "gets reward amount for current duration, also considering automatic transition to queued next rewards"
      },
      "lastTimeRewardApplicable()": {
        "notice": "gets last time where rewards accrue, also considering already queued next rewards"
      },
      "notifyRewardAmount(uint256)": {
        "notice": "add new rewards or top-up adding to current rewards, adjusting rewardRate going forward for leftover + newReward until block.timestamp + duration"
      },
      "notifyRewardAmountWithDuration(uint256,uint40)": {
        "notice": "add new rewards and update reward duration AFTER a reward period has ended."
      },
      "queueNextRewardAmount(uint216,uint40)": {
        "notice": "queues next rewards that will be transitioned to automatically after current rewards reach `periodFinish`."
      },
      "rewardPerToken()": {
        "notice": "gets reward amount per token, also considering automatic transition to queued next rewards"
      },
      "spell(address,bytes)": {
        "notice": "Spell allows owner aka governance to do any arbitrary call"
      },
      "updateRewards()": {
        "notice": "updates rewards until current block.timestamp or `periodFinish`. Transitions to next rewards if previous rewards ended and next ones were queued."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6767,
        "contract": "contracts/protocols/lending/stakingRewards/main.sol:FluidLendingStakingRewards",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 10,
        "contract": "contracts/protocols/lending/stakingRewards/main.sol:FluidLendingStakingRewards",
        "label": "_status",
        "offset": 0,
        "slot": "1",
        "type": "t_uint256"
      },
      {
        "astId": 5708,
        "contract": "contracts/protocols/lending/stakingRewards/main.sol:FluidLendingStakingRewards",
        "label": "_periodFinish",
        "offset": 0,
        "slot": "2",
        "type": "t_uint40"
      },
      {
        "astId": 5710,
        "contract": "contracts/protocols/lending/stakingRewards/main.sol:FluidLendingStakingRewards",
        "label": "lastUpdateTime",
        "offset": 5,
        "slot": "2",
        "type": "t_uint40"
      },
      {
        "astId": 5712,
        "contract": "contracts/protocols/lending/stakingRewards/main.sol:FluidLendingStakingRewards",
        "label": "_rewardsDuration",
        "offset": 10,
        "slot": "2",
        "type": "t_uint40"
      },
      {
        "astId": 5714,
        "contract": "contracts/protocols/lending/stakingRewards/main.sol:FluidLendingStakingRewards",
        "label": "_rewardRate",
        "offset": 15,
        "slot": "2",
        "type": "t_uint136"
      },
      {
        "astId": 5716,
        "contract": "contracts/protocols/lending/stakingRewards/main.sol:FluidLendingStakingRewards",
        "label": "rewardPerTokenStored",
        "offset": 0,
        "slot": "3",
        "type": "t_uint128"
      },
      {
        "astId": 5718,
        "contract": "contracts/protocols/lending/stakingRewards/main.sol:FluidLendingStakingRewards",
        "label": "_totalSupply",
        "offset": 16,
        "slot": "3",
        "type": "t_uint128"
      },
      {
        "astId": 5720,
        "contract": "contracts/protocols/lending/stakingRewards/main.sol:FluidLendingStakingRewards",
        "label": "nextRewardsDuration",
        "offset": 0,
        "slot": "4",
        "type": "t_uint40"
      },
      {
        "astId": 5722,
        "contract": "contracts/protocols/lending/stakingRewards/main.sol:FluidLendingStakingRewards",
        "label": "nextRewards",
        "offset": 5,
        "slot": "4",
        "type": "t_uint216"
      },
      {
        "astId": 5726,
        "contract": "contracts/protocols/lending/stakingRewards/main.sol:FluidLendingStakingRewards",
        "label": "userRewardPerTokenPaid",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5730,
        "contract": "contracts/protocols/lending/stakingRewards/main.sol:FluidLendingStakingRewards",
        "label": "rewards",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 5734,
        "contract": "contracts/protocols/lending/stakingRewards/main.sol:FluidLendingStakingRewards",
        "label": "_balances",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint128": {
        "encoding": "inplace",
        "label": "uint128",
        "numberOfBytes": "16"
      },
      "t_uint136": {
        "encoding": "inplace",
        "label": "uint136",
        "numberOfBytes": "17"
      },
      "t_uint216": {
        "encoding": "inplace",
        "label": "uint216",
        "numberOfBytes": "27"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      }
    }
  }
}