{
  "address": "0x497B67EFc0ACaF46F3A8B4B1939c6206112ee566",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "rebalancers_",
          "type": "address[]"
        },
        {
          "internalType": "address[]",
          "name": "implementations_",
          "type": "address[]"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "errorId_",
          "type": "uint256"
        }
      ],
      "name": "FluidSafeTransferError",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FluidVaultT1Liquidator__InvalidFallback",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FluidVaultT1Liquidator__InvalidImplementation",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FluidVaultT1Liquidator__InvalidOperation",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "implementation",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "ToggleImplementation",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "rebalancer",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "bool",
          "name": "status",
          "type": "bool"
        }
      ],
      "name": "ToggleRebalancer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "DEAD_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ETH_ADDRESS",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation_",
          "type": "address"
        },
        {
          "internalType": "bytes",
          "name": "data_",
          "type": "bytes"
        }
      ],
      "name": "execute",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "implementation",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "rebalancer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets_",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas_",
          "type": "bytes[]"
        }
      ],
      "name": "spell",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "implementation_",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status_",
          "type": "bool"
        }
      ],
      "name": "toggleImplementation",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "rebalancer_",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "status_",
          "type": "bool"
        }
      ],
      "name": "toggleRebalancer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to_",
          "type": "address"
        },
        {
          "internalType": "address[]",
          "name": "tokens_",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts_",
          "type": "uint256[]"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xdefe3ecd3ad06c57f09890930a7a62614e2d123528c99a834719d4ce251a875b",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x0Ed35B1609Ec45c7079E80d11149a52717e4859A",
    "contractAddress": null,
    "transactionIndex": 78,
    "gasUsed": "1133503",
    "logsBloom": "0x00000000000000000000800000000000000000000008004000800000000000000400000000000000000000000000010000008000000000000000000040040000000000000000200010000000000000800001000000040080000100000000000000000000020000000000000000400c00000040000000000080000800000080408000000000000000000010040000000000000000008500000000000000000000200000000000000000000000000001000000000000000020000000000020004000800000000000040001000000008000000000000000000000100000000060000000020000000000000000000000000100000000000800000000000080100000",
    "blockHash": "0x8bbe86bf51a93fbd5585a050b2c9826167b0c811bda463852490c1cbffa2f759",
    "transactionHash": "0xdefe3ecd3ad06c57f09890930a7a62614e2d123528c99a834719d4ce251a875b",
    "logs": [
      {
        "transactionIndex": 78,
        "blockNumber": 68605633,
        "transactionHash": "0xdefe3ecd3ad06c57f09890930a7a62614e2d123528c99a834719d4ce251a875b",
        "address": "0x497B67EFc0ACaF46F3A8B4B1939c6206112ee566",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009800020b610194dba52cf606e8aa142f9f256166"
        ],
        "data": "0x",
        "logIndex": 545,
        "blockHash": "0x8bbe86bf51a93fbd5585a050b2c9826167b0c811bda463852490c1cbffa2f759"
      },
      {
        "transactionIndex": 78,
        "blockNumber": 68605633,
        "transactionHash": "0xdefe3ecd3ad06c57f09890930a7a62614e2d123528c99a834719d4ce251a875b",
        "address": "0x497B67EFc0ACaF46F3A8B4B1939c6206112ee566",
        "topics": [
          "0xd74bdcde9b66b7d08a366a43b11a78f3c8307dfeeb0a7741005200bfedfe933f",
          "0x0000000000000000000000003be5c671b20649dca5d916b5698328d54bdaaf88",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 546,
        "blockHash": "0x8bbe86bf51a93fbd5585a050b2c9826167b0c811bda463852490c1cbffa2f759"
      },
      {
        "transactionIndex": 78,
        "blockNumber": 68605633,
        "transactionHash": "0xdefe3ecd3ad06c57f09890930a7a62614e2d123528c99a834719d4ce251a875b",
        "address": "0x497B67EFc0ACaF46F3A8B4B1939c6206112ee566",
        "topics": [
          "0xd74bdcde9b66b7d08a366a43b11a78f3c8307dfeeb0a7741005200bfedfe933f",
          "0x000000000000000000000000b287f8a01a9538656c72fa6ae1ee0117a187be0c",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 547,
        "blockHash": "0x8bbe86bf51a93fbd5585a050b2c9826167b0c811bda463852490c1cbffa2f759"
      },
      {
        "transactionIndex": 78,
        "blockNumber": 68605633,
        "transactionHash": "0xdefe3ecd3ad06c57f09890930a7a62614e2d123528c99a834719d4ce251a875b",
        "address": "0x497B67EFc0ACaF46F3A8B4B1939c6206112ee566",
        "topics": [
          "0xd74bdcde9b66b7d08a366a43b11a78f3c8307dfeeb0a7741005200bfedfe933f",
          "0x000000000000000000000000ab957b471b22d307ac5fbb3fccd4191433b2aa62",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 548,
        "blockHash": "0x8bbe86bf51a93fbd5585a050b2c9826167b0c811bda463852490c1cbffa2f759"
      },
      {
        "transactionIndex": 78,
        "blockNumber": 68605633,
        "transactionHash": "0xdefe3ecd3ad06c57f09890930a7a62614e2d123528c99a834719d4ce251a875b",
        "address": "0x497B67EFc0ACaF46F3A8B4B1939c6206112ee566",
        "topics": [
          "0xf8b5205933f2a0c22ab598fc1570a8405c8aec362af89ed1f8d4500d0e6b8f6c",
          "0x0000000000000000000000002bf86adcb3b3f341615bad61eb9f9a7770b54ede",
          "0x0000000000000000000000000000000000000000000000000000000000000001"
        ],
        "data": "0x",
        "logIndex": 549,
        "blockHash": "0x8bbe86bf51a93fbd5585a050b2c9826167b0c811bda463852490c1cbffa2f759"
      },
      {
        "transactionIndex": 78,
        "blockNumber": 68605633,
        "transactionHash": "0xdefe3ecd3ad06c57f09890930a7a62614e2d123528c99a834719d4ce251a875b",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000000ed35b1609ec45c7079e80d11149a52717e4859a",
          "0x00000000000000000000000067b94473d81d0cd00849d563c94d0432ac988b49"
        ],
        "data": "0x000000000000000000000000000000000000000000000000006a17010a51a481000000000000000000000000000000000000000000000000aa47a56c67bd72a4000000000000000000000000000000000000000000000672a267f9978f39b87b000000000000000000000000000000000000000000000000a9dd8e6b5d6bce23000000000000000000000000000000000000000000000672a2d21098998b5cfc",
        "logIndex": 550,
        "blockHash": "0x8bbe86bf51a93fbd5585a050b2c9826167b0c811bda463852490c1cbffa2f759"
      }
    ],
    "blockNumber": 68605633,
    "cumulativeGasUsed": "14239979",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x9800020b610194dBa52CF606E8Aa142F9F256166",
    [
      "0x3BE5C671b20649DCA5D916b5698328D54BdAAf88",
      "0xb287f8A01a9538656c72Fa6aE1EE0117A187Be0C",
      "0xAb957B471b22d307AC5fbB3FCcD4191433B2AA62"
    ],
    [
      "0x2BF86AdcB3B3f341615bAD61eb9F9a7770B54EdE"
    ]
  ],
  "numDeployments": 1,
  "solcInputHash": "4f63da12d66a256eeca1b26617ce10fe",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"rebalancers_\",\"type\":\"address[]\"},{\"internalType\":\"address[]\",\"name\":\"implementations_\",\"type\":\"address[]\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"errorId_\",\"type\":\"uint256\"}],\"name\":\"FluidSafeTransferError\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FluidVaultT1Liquidator__InvalidFallback\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FluidVaultT1Liquidator__InvalidImplementation\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FluidVaultT1Liquidator__InvalidOperation\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"implementation\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"ToggleImplementation\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"rebalancer\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"bool\",\"name\":\"status\",\"type\":\"bool\"}],\"name\":\"ToggleRebalancer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEAD_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ETH_ADDRESS\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data_\",\"type\":\"bytes\"}],\"name\":\"execute\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"implementation\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"rebalancer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets_\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas_\",\"type\":\"bytes[]\"}],\"name\":\"spell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"implementation_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status_\",\"type\":\"bool\"}],\"name\":\"toggleImplementation\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"rebalancer_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"status_\",\"type\":\"bool\"}],\"name\":\"toggleRebalancer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to_\",\"type\":\"address\"},{\"internalType\":\"address[]\",\"name\":\"tokens_\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts_\",\"type\":\"uint256[]\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/periphery/liquidation/proxy.sol\":\"VaultLiquidator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000000},\"remappings\":[]},\"sources\":{\"contracts/libraries/errorTypes.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nlibrary LibsErrorTypes {\\n    /***********************************|\\n    |         LiquidityCalcs            | \\n    |__________________________________*/\\n\\n    /// @notice thrown when supply or borrow exchange price is zero at calc token data (token not configured yet)\\n    uint256 internal constant LiquidityCalcs__ExchangePriceZero = 70001;\\n\\n    /// @notice thrown when rate data is set to a version that is not implemented\\n    uint256 internal constant LiquidityCalcs__UnsupportedRateVersion = 70002;\\n\\n    /// @notice thrown when the calculated borrow rate turns negative. This should never happen.\\n    uint256 internal constant LiquidityCalcs__BorrowRateNegative = 70003;\\n\\n    /***********************************|\\n    |           SafeTransfer            | \\n    |__________________________________*/\\n\\n    /// @notice thrown when safe transfer from for an ERC20 fails\\n    uint256 internal constant SafeTransfer__TransferFromFailed = 71001;\\n\\n    /// @notice thrown when safe transfer for an ERC20 fails\\n    uint256 internal constant SafeTransfer__TransferFailed = 71002;\\n\\n    /***********************************|\\n    |           SafeApprove             | \\n    |__________________________________*/\\n\\n    /// @notice thrown when safe approve from for an ERC20 fails\\n    uint256 internal constant SafeApprove__ApproveFailed = 81001;\\n}\\n\",\"keccak256\":\"0x4057f500fd44ce9e89049512d06d5f72c46f91938ed37312fb044c204451009b\",\"license\":\"BUSL-1.1\"},\"contracts/libraries/safeTransfer.sol\":{\"content\":\"// SPDX-License-Identifier: MIT OR Apache-2.0\\npragma solidity 0.8.21;\\n\\nimport { LibsErrorTypes as ErrorTypes } from \\\"./errorTypes.sol\\\";\\n\\n/// @notice provides minimalistic methods for safe transfers, e.g. ERC20 safeTransferFrom\\nlibrary SafeTransfer {\\n    uint256 internal constant MAX_NATIVE_TRANSFER_GAS = 20000; // pass max. 20k gas for native transfers\\n\\n    error FluidSafeTransferError(uint256 errorId_);\\n\\n    /// @dev Transfer `amount_` of `token_` from `from_` to `to_`, spending the approval given by `from_` to the\\n    /// calling contract. If `token_` returns no value, non-reverting calls are assumed to be successful.\\n    /// Minimally modified from Solmate SafeTransferLib (address as input param for token, Custom Error):\\n    /// https://github.com/transmissions11/solmate/blob/50e15bb566f98b7174da9b0066126a4c3e75e0fd/src/utils/SafeTransferLib.sol#L31-L63\\n    function safeTransferFrom(address token_, address from_, address to_, uint256 amount_) internal {\\n        bool success_;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0x23b872dd00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(from_, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"from_\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), and(to_, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to_\\\" argument.\\n            mstore(add(freeMemoryPointer, 68), amount_) // Append the \\\"amount_\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            success_ := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 100 because the length of our calldata totals up like so: 4 + 32 * 3.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token_, 0, freeMemoryPointer, 100, 0, 32)\\n            )\\n        }\\n\\n        if (!success_) {\\n            revert FluidSafeTransferError(ErrorTypes.SafeTransfer__TransferFromFailed);\\n        }\\n    }\\n\\n    /// @dev Transfer `amount_` of `token_` to `to_`.\\n    /// If `token_` returns no value, non-reverting calls are assumed to be successful.\\n    /// Minimally modified from Solmate SafeTransferLib (address as input param for token, Custom Error):\\n    /// https://github.com/transmissions11/solmate/blob/50e15bb566f98b7174da9b0066126a4c3e75e0fd/src/utils/SafeTransferLib.sol#L65-L95\\n    function safeTransfer(address token_, address to_, uint256 amount_) internal {\\n        bool success_;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Get a pointer to some free memory.\\n            let freeMemoryPointer := mload(0x40)\\n\\n            // Write the abi-encoded calldata into memory, beginning with the function selector.\\n            mstore(freeMemoryPointer, 0xa9059cbb00000000000000000000000000000000000000000000000000000000)\\n            mstore(add(freeMemoryPointer, 4), and(to_, 0xffffffffffffffffffffffffffffffffffffffff)) // Append and mask the \\\"to_\\\" argument.\\n            mstore(add(freeMemoryPointer, 36), amount_) // Append the \\\"amount_\\\" argument. Masking not required as it's a full 32 byte type.\\n\\n            success_ := and(\\n                // Set success to whether the call reverted, if not we check it either\\n                // returned exactly 1 (can't just be non-zero data), or had no return data.\\n                or(and(eq(mload(0), 1), gt(returndatasize(), 31)), iszero(returndatasize())),\\n                // We use 68 because the length of our calldata totals up like so: 4 + 32 * 2.\\n                // We use 0 and 32 to copy up to 32 bytes of return data into the scratch space.\\n                // Counterintuitively, this call must be positioned second to the or() call in the\\n                // surrounding and() call or else returndatasize() will be zero during the computation.\\n                call(gas(), token_, 0, freeMemoryPointer, 68, 0, 32)\\n            )\\n        }\\n\\n        if (!success_) {\\n            revert FluidSafeTransferError(ErrorTypes.SafeTransfer__TransferFailed);\\n        }\\n    }\\n\\n    /// @dev Transfer `amount_` of ` native token to `to_`.\\n    /// Minimally modified from Solmate SafeTransferLib (Custom Error):\\n    /// https://github.com/transmissions11/solmate/blob/50e15bb566f98b7174da9b0066126a4c3e75e0fd/src/utils/SafeTransferLib.sol#L15-L25\\n    function safeTransferNative(address to_, uint256 amount_) internal {\\n        bool success_;\\n\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            // Transfer the ETH and store if it succeeded or not. Pass limited gas\\n            success_ := call(MAX_NATIVE_TRANSFER_GAS, to_, amount_, 0, 0, 0, 0)\\n        }\\n\\n        if (!success_) {\\n            revert FluidSafeTransferError(ErrorTypes.SafeTransfer__TransferFailed);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x7f7d3a39d984c62e41c669a3d11deb899b3512ace9313263592575bf48a6e079\",\"license\":\"MIT OR Apache-2.0\"},\"contracts/periphery/liquidation/proxy.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { Owned } from \\\"solmate/src/auth/Owned.sol\\\";\\n\\nimport { SafeTransfer } from \\\"../../libraries/safeTransfer.sol\\\";\\n\\ncontract VaultLiquidator is Owned {\\n    address constant public ETH_ADDRESS = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n    address constant public DEAD_ADDRESS = 0x000000000000000000000000000000000000dEaD;\\n\\n    // @notice temporary implementation address set for fallback\\n    address private _implementation;\\n\\n    // @notice whitelisted rebalancers\\n    mapping (address => bool) public rebalancer; \\n    // @notice whitelisted implementations\\n    mapping (address => bool) public implementation;\\n    \\n    error FluidVaultT1Liquidator__InvalidOperation();\\n    error FluidVaultT1Liquidator__InvalidImplementation();\\n    error FluidVaultT1Liquidator__InvalidFallback();\\n\\n    event ToggleRebalancer(\\n        address indexed rebalancer,\\n        bool indexed status\\n    );\\n\\n    event ToggleImplementation(\\n        address indexed implementation,\\n        bool indexed status\\n    );\\n\\n    event Withdraw(\\n        address indexed to,\\n        address indexed token,\\n        uint256 amount\\n    );\\n\\n    constructor (\\n        address owner_,\\n        address[] memory rebalancers_,\\n        address[] memory implementations_\\n    ) Owned(owner_) {\\n        require(owner_ != address(0), \\\"Owner cannot be the zero address\\\");\\n\\n        for (uint256 i = 0; i < rebalancers_.length; i++) {\\n            rebalancer[rebalancers_[i]] = true;\\n            emit ToggleRebalancer(rebalancers_[i], true);\\n        }\\n\\n        for (uint256 i = 0; i < implementations_.length; i++) {\\n            implementation[implementations_[i]] = true;\\n            emit ToggleImplementation(implementations_[i], true);\\n        }\\n\\n        _implementation = DEAD_ADDRESS;\\n    }\\n\\n    modifier isRebalancer() {\\n        if (!rebalancer[msg.sender] && msg.sender != owner) {\\n            revert FluidVaultT1Liquidator__InvalidOperation();\\n        }\\n        _;\\n    }\\n\\n    modifier isImplementation(address implementation_) {\\n        if (!implementation[implementation_] || _implementation != DEAD_ADDRESS) {\\n            revert FluidVaultT1Liquidator__InvalidImplementation();\\n        }\\n        _implementation = implementation_;\\n        _;\\n        _implementation = address(DEAD_ADDRESS);\\n    }\\n\\n    function _spell(address target_, bytes memory data_) internal returns (bytes memory response_) {\\n        assembly {\\n            let succeeded := delegatecall(gas(), target_, add(data_, 0x20), mload(data_), 0, 0)\\n            let size := returndatasize()\\n\\n            response_ := mload(0x40)\\n            mstore(0x40, add(response_, and(add(add(size, 0x20), 0x1f), not(0x1f))))\\n            mstore(response_, size)\\n            returndatacopy(add(response_, 0x20), 0, size)\\n\\n            if iszero(succeeded) {\\n                // throw if delegatecall failed\\n                returndatacopy(0x00, 0x00, size)\\n                revert(0x00, size)\\n            }\\n        }\\n    }\\n\\n    function toggleRebalancer(address rebalancer_, bool status_) public onlyOwner {\\n        rebalancer[rebalancer_] = status_;\\n        emit ToggleRebalancer(rebalancer_, status_);\\n    }\\n\\n    function toggleImplementation(address implementation_, bool status_) public onlyOwner {\\n        implementation[implementation_] = status_;\\n        emit ToggleImplementation(implementation_, status_);\\n    }\\n\\n    function spell(address[] memory targets_, bytes[] memory calldatas_) public onlyOwner {\\n        for (uint256 i = 0; i < targets_.length; i++) {\\n            _spell(targets_[i], calldatas_[i]);\\n        }\\n    }\\n\\n    function withdraw(address to_, address[] memory tokens_, uint256[] memory amounts_) public onlyOwner {\\n        for (uint i = 0; i < tokens_.length; i++) {\\n            if (tokens_[i] == ETH_ADDRESS) {\\n                SafeTransfer.safeTransferNative(payable(to_), amounts_[i]);\\n            } else {\\n                SafeTransfer.safeTransfer(tokens_[i], to_, amounts_[i]);\\n            }\\n            emit Withdraw(to_, tokens_[i], amounts_[i]);\\n        }\\n    }\\n\\n    receive() payable external {}\\n\\n    function execute(address implementation_, bytes memory data_) public isRebalancer() isImplementation(implementation_) {\\n        _spell(implementation_, data_);\\n    }\\n\\n    fallback() external payable {\\n        if (_implementation != DEAD_ADDRESS) {\\n            bytes memory response_ = _spell(_implementation, msg.data);\\n            assembly {\\n                return(add(response_, 32), mload(response_))\\n            }\\n        } else {\\n            revert FluidVaultT1Liquidator__InvalidFallback();\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd10cb81c9f826a533bdd9073f54238cc6f6745667b64d94120f8075e3da29f40\",\"license\":\"BUSL-1.1\"},\"solmate/src/auth/Owned.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\\nabstract contract Owned {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            OWNERSHIP STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address public owner;\\n\\n    modifier onlyOwner() virtual {\\n        require(msg.sender == owner, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             OWNERSHIP LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        owner = newOwner;\\n\\n        emit OwnershipTransferred(msg.sender, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xfedb27d14c508342c33eb067c9a02eabcdb0f9dcf93b04ded1001f580d12d0ea\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b50604051620014f4380380620014f483398101604081905262000034916200037c565b600080546001600160a01b0319166001600160a01b03851690811782556040518592907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506001600160a01b038316620000d85760405162461bcd60e51b815260206004820181905260248201527f4f776e65722063616e6e6f7420626520746865207a65726f2061646472657373604482015260640160405180910390fd5b60005b8251811015620001aa57600160026000858481518110620001005762000100620003f9565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff02191690831515021790555060011515838281518110620001585762000158620003f9565b60200260200101516001600160a01b03167fd74bdcde9b66b7d08a366a43b11a78f3c8307dfeeb0a7741005200bfedfe933f60405160405180910390a380620001a1816200040f565b915050620000db565b5060005b81518110156200027d57600160036000848481518110620001d357620001d3620003f9565b60200260200101516001600160a01b03166001600160a01b0316815260200190815260200160002060006101000a81548160ff021916908315150217905550600115158282815181106200022b576200022b620003f9565b60200260200101516001600160a01b03167ff8b5205933f2a0c22ab598fc1570a8405c8aec362af89ed1f8d4500d0e6b8f6c60405160405180910390a38062000274816200040f565b915050620001ae565b5050600180546001600160a01b03191661dead17905550620004379050565b80516001600160a01b0381168114620002b457600080fd5b919050565b634e487b7160e01b600052604160045260246000fd5b600082601f830112620002e157600080fd5b815160206001600160401b0380831115620003005762000300620002b9565b8260051b604051601f19603f83011681018181108482111715620003285762000328620002b9565b6040529384528581018301938381019250878511156200034757600080fd5b83870191505b84821015620003715762000361826200029c565b835291830191908301906200034d565b979650505050505050565b6000806000606084860312156200039257600080fd5b6200039d846200029c565b60208501519093506001600160401b0380821115620003bb57600080fd5b620003c987838801620002cf565b93506040860151915080821115620003e057600080fd5b50620003ef86828701620002cf565b9150509250925092565b634e487b7160e01b600052603260045260246000fd5b6000600182016200043057634e487b7160e01b600052601160045260246000fd5b5060010190565b6110ad80620004476000396000f3fe6080604052600436106100c05760003560e01c806382bc4aaf11610074578063d9e10f451161004e578063d9e10f45146102f0578063edbd766814610310578063f2fde38b14610330576100c7565b806382bc4aaf1461027b5780638da5cb5b1461029b578063a734f06e146102c8576100c7565b80633f221521116100a55780633f221521146101cb5780634e6fd6c4146102105780636b8807181461024b576100c7565b80631cff79cd1461018b57806329e31bdd146101ab576100c7565b366100c757005b60015473ffffffffffffffffffffffffffffffffffffffff1661dead1461015757600061014d600160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff166000368080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061035092505050565b9050805160208201f35b6040517f8d0f4ce900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b005b34801561019757600080fd5b506101896101a6366004610d08565b610396565b3480156101b757600080fd5b506101896101c6366004610d56565b610509565b3480156101d757600080fd5b506101fb6101e6366004610d92565b60026020526000908152604090205460ff1681565b60405190151581526020015b60405180910390f35b34801561021c57600080fd5b5061022661dead81565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610207565b34801561025757600080fd5b506101fb610266366004610d92565b60036020526000908152604090205460ff1681565b34801561028757600080fd5b50610189610296366004610e4a565b61060e565b3480156102a757600080fd5b506000546102269073ffffffffffffffffffffffffffffffffffffffff1681565b3480156102d457600080fd5b5061022673eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee81565b3480156102fc57600080fd5b5061018961030b366004610d56565b6106ef565b34801561031c57600080fd5b5061018961032b366004610f1f565b6107ef565b34801561033c57600080fd5b5061018961034b366004610d92565b6109f2565b6060600080835160208501865af43d6040519250601f19601f6020830101168301604052808352806000602085013e8161038e57806000803e806000fd5b505092915050565b3360009081526002602052604090205460ff161580156103ce575060005473ffffffffffffffffffffffffffffffffffffffff163314155b15610405576040517f74bf188c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8216600090815260036020526040902054829060ff161580610456575060015473ffffffffffffffffffffffffffffffffffffffff1661dead14155b1561048d576040517fc797928700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83161790556104d78383610350565b5050600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001661dead1790555050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461058f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a4544000000000000000000000000000000000000000060448201526064015b60405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff821660008181526002602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915590519092917fd74bdcde9b66b7d08a366a43b11a78f3c8307dfeeb0a7741005200bfedfe933f91a35050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461068f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610586565b60005b82518110156106ea576106d78382815181106106b0576106b0610fe9565b60200260200101518383815181106106ca576106ca610fe9565b6020026020010151610350565b50806106e281611018565b915050610692565b505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610770576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610586565b73ffffffffffffffffffffffffffffffffffffffff821660008181526003602052604080822080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001685151590811790915590519092917ff8b5205933f2a0c22ab598fc1570a8405c8aec362af89ed1f8d4500d0e6b8f6c91a35050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610870576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610586565b60005b82518110156109ec5773eeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeeee73ffffffffffffffffffffffffffffffffffffffff168382815181106108b9576108b9610fe9565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1603610904576108ff848383815181106108f2576108f2610fe9565b6020026020010151610ae3565b610941565b61094183828151811061091957610919610fe9565b60200260200101518584848151811061093457610934610fe9565b6020026020010151610b2f565b82818151811061095357610953610fe9565b602002602001015173ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff167f9b1bfa7fa9ee420a16e124f794c35ac9f90472acc99140eb2f6447c714cad8eb8484815181106109bb576109bb610fe9565b60200260200101516040516109d291815260200190565b60405180910390a3806109e481611018565b915050610873565b50505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610a73576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610586565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081178255604051909133917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b60008060008060008587614e20f19050806106ea576040517fdee51a8a0000000000000000000000000000000000000000000000000000000081526201155a6004820152602401610586565b60006040517fa9059cbb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff84166004820152826024820152602060006044836000895af13d15601f3d11600160005114161716915050806109ec576040517fdee51a8a0000000000000000000000000000000000000000000000000000000081526201155a6004820152602401610586565b803573ffffffffffffffffffffffffffffffffffffffff81168114610bf757600080fd5b919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715610c7257610c72610bfc565b604052919050565b600082601f830112610c8b57600080fd5b813567ffffffffffffffff811115610ca557610ca5610bfc565b610cd660207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601610c2b565b818152846020838601011115610ceb57600080fd5b816020850160208301376000918101602001919091529392505050565b60008060408385031215610d1b57600080fd5b610d2483610bd3565b9150602083013567ffffffffffffffff811115610d4057600080fd5b610d4c85828601610c7a565b9150509250929050565b60008060408385031215610d6957600080fd5b610d7283610bd3565b915060208301358015158114610d8757600080fd5b809150509250929050565b600060208284031215610da457600080fd5b610dad82610bd3565b9392505050565b600067ffffffffffffffff821115610dce57610dce610bfc565b5060051b60200190565b600082601f830112610de957600080fd5b81356020610dfe610df983610db4565b610c2b565b82815260059290921b84018101918181019086841115610e1d57600080fd5b8286015b84811015610e3f57610e3281610bd3565b8352918301918301610e21565b509695505050505050565b60008060408385031215610e5d57600080fd5b823567ffffffffffffffff80821115610e7557600080fd5b610e8186838701610dd8565b9350602091508185013581811115610e9857600080fd5b8501601f81018713610ea957600080fd5b8035610eb7610df982610db4565b81815260059190911b82018401908481019089831115610ed657600080fd5b8584015b83811015610f0e57803586811115610ef25760008081fd5b610f008c8983890101610c7a565b845250918601918601610eda565b508096505050505050509250929050565b600080600060608486031215610f3457600080fd5b610f3d84610bd3565b925060208085013567ffffffffffffffff80821115610f5b57600080fd5b610f6788838901610dd8565b94506040870135915080821115610f7d57600080fd5b508501601f81018713610f8f57600080fd5b8035610f9d610df982610db4565b81815260059190911b82018301908381019089831115610fbc57600080fd5b928401925b82841015610fda57833582529284019290840190610fc1565b80955050505050509250925092565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203611070577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea26469706673582212204a334bb73afa7fe1dcc66c7b1765fb124793c3c5b654213d15d483fc45f5737164736f6c63430008150033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 134663,
        "contract": "contracts/periphery/liquidation/proxy.sol:VaultLiquidator",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 43126,
        "contract": "contracts/periphery/liquidation/proxy.sol:VaultLiquidator",
        "label": "_implementation",
        "offset": 0,
        "slot": "1",
        "type": "t_address"
      },
      {
        "astId": 43130,
        "contract": "contracts/periphery/liquidation/proxy.sol:VaultLiquidator",
        "label": "rebalancer",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 43134,
        "contract": "contracts/periphery/liquidation/proxy.sol:VaultLiquidator",
        "label": "implementation",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      }
    }
  }
}