{
  "address": "0xF90D6eA5d0B4CAD69530543CA00eE6cab94B09f4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name_",
          "type": "string"
        },
        {
          "internalType": "address",
          "name": "owner_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "proposer_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "approver_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "rewardToken_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InvalidCycle",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidParams",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidProof",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MsgSenderNotRecipient",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NothingToClaim",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "Unauthorized",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cycle",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "positionType",
          "type": "uint8"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "positionId",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "LogClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cycle",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "contentHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "LogRootProposed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "cycle",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "contentHash",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "timestamp",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "LogRootUpdated",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "approver",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isApprover",
          "type": "bool"
        }
      ],
      "name": "LogUpdateApprover",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "proposer",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "isProposer",
          "type": "bool"
        }
      ],
      "name": "LogUpdateProposer",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Paused",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "Unpaused",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "TOKEN",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "root_",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "contentHash_",
          "type": "bytes32"
        },
        {
          "internalType": "uint40",
          "name": "cycle_",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "startBlock_",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "endBlock_",
          "type": "uint40"
        }
      ],
      "name": "approveRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "cumulativeAmount",
              "type": "uint256"
            },
            {
              "internalType": "uint8",
              "name": "positionType",
              "type": "uint8"
            },
            {
              "internalType": "bytes32",
              "name": "positionId",
              "type": "bytes32"
            },
            {
              "internalType": "uint256",
              "name": "cycle",
              "type": "uint256"
            },
            {
              "internalType": "bytes32[]",
              "name": "merkleProof",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes",
              "name": "metadata",
              "type": "bytes"
            }
          ],
          "internalType": "struct FluidMerkleDistributor.Claim[]",
          "name": "claims_",
          "type": "tuple[]"
        }
      ],
      "name": "bulkClaim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cumulativeAmount_",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "positionType_",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "positionId_",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "cycle_",
          "type": "uint256"
        },
        {
          "internalType": "bytes32[]",
          "name": "merkleProof_",
          "type": "bytes32[]"
        },
        {
          "internalType": "bytes",
          "name": "metadata_",
          "type": "bytes"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "claimed",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentMerkleCycle",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "merkleContentHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint40",
              "name": "cycle",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "timestamp",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "publishBlock",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "startBlock",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "endBlock",
              "type": "uint40"
            }
          ],
          "internalType": "struct Structs.MerkleCycle",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient_",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "cumulativeAmount_",
          "type": "uint256"
        },
        {
          "internalType": "uint8",
          "name": "positionType_",
          "type": "uint8"
        },
        {
          "internalType": "bytes32",
          "name": "positionId_",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "cycle_",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "metadata_",
          "type": "bytes"
        }
      ],
      "name": "encodeClaim",
      "outputs": [
        {
          "internalType": "bytes",
          "name": "encoded_",
          "type": "bytes"
        },
        {
          "internalType": "bytes32",
          "name": "hash_",
          "type": "bytes32"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasPendingRoot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver_",
          "type": "address"
        }
      ],
      "name": "isApprover",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "proposer_",
          "type": "address"
        }
      ],
      "name": "isProposer",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "paused",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingMerkleCycle",
      "outputs": [
        {
          "components": [
            {
              "internalType": "bytes32",
              "name": "merkleRoot",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32",
              "name": "merkleContentHash",
              "type": "bytes32"
            },
            {
              "internalType": "uint40",
              "name": "cycle",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "timestamp",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "publishBlock",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "startBlock",
              "type": "uint40"
            },
            {
              "internalType": "uint40",
              "name": "endBlock",
              "type": "uint40"
            }
          ],
          "internalType": "struct Structs.MerkleCycle",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "previousMerkleRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "root_",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "contentHash_",
          "type": "bytes32"
        },
        {
          "internalType": "uint40",
          "name": "cycle_",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "startBlock_",
          "type": "uint40"
        },
        {
          "internalType": "uint40",
          "name": "endBlock_",
          "type": "uint40"
        }
      ],
      "name": "proposeRoot",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "targets_",
          "type": "address[]"
        },
        {
          "internalType": "bytes[]",
          "name": "calldatas_",
          "type": "bytes[]"
        }
      ],
      "name": "spell",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "unpause",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "approver_",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isApprover_",
          "type": "bool"
        }
      ],
      "name": "updateApprover",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "proposer_",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "isProposer_",
          "type": "bool"
        }
      ],
      "name": "updateProposer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xeea504d30c31f2694de401670e89475e37998e11be07cbc8856267afaf4abaa8",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x910E413DBF3F6276Fe8213fF656726bDc142E08E",
    "contractAddress": null,
    "transactionIndex": 7,
    "gasUsed": "2362997",
    "logsBloom": "0x0000000000000000000000000000000000004000008000000080000000000000000000000000000040000040000200000000800000000000000000000000000000000000000000000000000000000080000100200000000000010012000000000080000002000000000000000000080200004000000000008000080000000040000000000000000000000000000000000000000000000004000000000000000020000000000000c000000000000000000000000000000000000000000000004000000000000000000001000000000000000000040000000000100000000020000000000000000000000000000000000100000000000000400000000000100000",
    "blockHash": "0x04712d01455422ef3b950689d55f9fbbe7f852b0df7249afd9ca46f6339e9a1f",
    "transactionHash": "0xeea504d30c31f2694de401670e89475e37998e11be07cbc8856267afaf4abaa8",
    "logs": [
      {
        "transactionIndex": 7,
        "blockNumber": 69248239,
        "transactionHash": "0xeea504d30c31f2694de401670e89475e37998e11be07cbc8856267afaf4abaa8",
        "address": "0xF90D6eA5d0B4CAD69530543CA00eE6cab94B09f4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000009800020b610194dba52cf606e8aa142f9f256166"
        ],
        "data": "0x",
        "logIndex": 54,
        "blockHash": "0x04712d01455422ef3b950689d55f9fbbe7f852b0df7249afd9ca46f6339e9a1f"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 69248239,
        "transactionHash": "0xeea504d30c31f2694de401670e89475e37998e11be07cbc8856267afaf4abaa8",
        "address": "0xF90D6eA5d0B4CAD69530543CA00eE6cab94B09f4",
        "topics": [
          "0x780d738f356a91be5dfe8ffb87990c655a36b3430a233c71a209eb1e9a1a1a75"
        ],
        "data": "0x0000000000000000000000004f104710f8d9f6efb28c4b2f057554928daa3a830000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 55,
        "blockHash": "0x04712d01455422ef3b950689d55f9fbbe7f852b0df7249afd9ca46f6339e9a1f"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 69248239,
        "transactionHash": "0xeea504d30c31f2694de401670e89475e37998e11be07cbc8856267afaf4abaa8",
        "address": "0xF90D6eA5d0B4CAD69530543CA00eE6cab94B09f4",
        "topics": [
          "0xeeeb06b5605b72367788db09c5284b141487cdc2ab0925fcf8880d30ea584376"
        ],
        "data": "0x00000000000000000000000085dc44e0c3afdfedca52678bd4c000917c6597b20000000000000000000000000000000000000000000000000000000000000001",
        "logIndex": 56,
        "blockHash": "0x04712d01455422ef3b950689d55f9fbbe7f852b0df7249afd9ca46f6339e9a1f"
      },
      {
        "transactionIndex": 7,
        "blockNumber": 69248239,
        "transactionHash": "0xeea504d30c31f2694de401670e89475e37998e11be07cbc8856267afaf4abaa8",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000910e413dbf3f6276fe8213ff656726bdc142e08e",
          "0x000000000000000000000000a8b52f02108aa5f4b675bdcc973760022d7c6020"
        ],
        "data": "0x00000000000000000000000000000000000000000000000003e25e0c6b4e46590000000000000000000000000000000000000000000000003187eaaf9ddba81a00000000000000000000000000000000000000000000004dc20ca92ab2ba72970000000000000000000000000000000000000000000000002da58ca3328d61c100000000000000000000000000000000000000000000004dc5ef07371e08b8f0",
        "logIndex": 57,
        "blockHash": "0x04712d01455422ef3b950689d55f9fbbe7f852b0df7249afd9ca46f6339e9a1f"
      }
    ],
    "blockNumber": 69248239,
    "cumulativeGasUsed": "3341679",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "Polygon: fTokens $POL Rewards - March 2025",
    "0x9800020b610194dBa52CF606E8Aa142F9F256166",
    "0x4f104710f8d9F6EFB28c4b2f057554928Daa3a83",
    "0x85dC44E0c3AfdFedCa52678bD4C000917C6597B2",
    "0x0d500b1d8e8ef31e21c99d1db9a6444d3adf1270"
  ],
  "numDeployments": 1,
  "solcInputHash": "10a0a710222590786aaa1a6910423142",
  "metadata": "{\"compiler\":{\"version\":\"0.8.21+commit.d9974bed\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name_\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"owner_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"proposer_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"approver_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"rewardToken_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InvalidCycle\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidParams\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MsgSenderNotRecipient\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NothingToClaim\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"Unauthorized\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"positionType\",\"type\":\"uint8\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"positionId\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"LogClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"LogRootProposed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"contentHash\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"LogRootUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"approver\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isApprover\",\"type\":\"bool\"}],\"name\":\"LogUpdateApprover\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"isProposer\",\"type\":\"bool\"}],\"name\":\"LogUpdateProposer\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Paused\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"Unpaused\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"TOKEN\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash_\",\"type\":\"bytes32\"},{\"internalType\":\"uint40\",\"name\":\"cycle_\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"startBlock_\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"endBlock_\",\"type\":\"uint40\"}],\"name\":\"approveRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cumulativeAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"positionType\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"positionId\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cycle\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"metadata\",\"type\":\"bytes\"}],\"internalType\":\"struct FluidMerkleDistributor.Claim[]\",\"name\":\"claims_\",\"type\":\"tuple[]\"}],\"name\":\"bulkClaim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cumulativeAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"positionType_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"positionId_\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cycle_\",\"type\":\"uint256\"},{\"internalType\":\"bytes32[]\",\"name\":\"merkleProof_\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes\",\"name\":\"metadata_\",\"type\":\"bytes\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"claimed\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentMerkleCycle\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"merkleContentHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint40\",\"name\":\"cycle\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"timestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"publishBlock\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"startBlock\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"endBlock\",\"type\":\"uint40\"}],\"internalType\":\"struct Structs.MerkleCycle\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient_\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"cumulativeAmount_\",\"type\":\"uint256\"},{\"internalType\":\"uint8\",\"name\":\"positionType_\",\"type\":\"uint8\"},{\"internalType\":\"bytes32\",\"name\":\"positionId_\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"cycle_\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"metadata_\",\"type\":\"bytes\"}],\"name\":\"encodeClaim\",\"outputs\":[{\"internalType\":\"bytes\",\"name\":\"encoded_\",\"type\":\"bytes\"},{\"internalType\":\"bytes32\",\"name\":\"hash_\",\"type\":\"bytes32\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasPendingRoot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver_\",\"type\":\"address\"}],\"name\":\"isApprover\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposer_\",\"type\":\"address\"}],\"name\":\"isProposer\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"paused\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingMerkleCycle\",\"outputs\":[{\"components\":[{\"internalType\":\"bytes32\",\"name\":\"merkleRoot\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"merkleContentHash\",\"type\":\"bytes32\"},{\"internalType\":\"uint40\",\"name\":\"cycle\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"timestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"publishBlock\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"startBlock\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"endBlock\",\"type\":\"uint40\"}],\"internalType\":\"struct Structs.MerkleCycle\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"previousMerkleRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root_\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"contentHash_\",\"type\":\"bytes32\"},{\"internalType\":\"uint40\",\"name\":\"cycle_\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"startBlock_\",\"type\":\"uint40\"},{\"internalType\":\"uint40\",\"name\":\"endBlock_\",\"type\":\"uint40\"}],\"name\":\"proposeRoot\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"targets_\",\"type\":\"address[]\"},{\"internalType\":\"bytes[]\",\"name\":\"calldatas_\",\"type\":\"bytes[]\"}],\"name\":\"spell\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"unpause\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"approver_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isApprover_\",\"type\":\"bool\"}],\"name\":\"updateApprover\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"proposer_\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"isProposer_\",\"type\":\"bool\"}],\"name\":\"updateProposer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"events\":{\"Paused(address)\":{\"details\":\"Emitted when the pause is triggered by `account`.\"},\"Unpaused(address)\":{\"details\":\"Emitted when the pause is lifted by `account`.\"}},\"kind\":\"dev\",\"methods\":{\"paused()\":{\"details\":\"Returns true if the contract is paused, and false otherwise.\"},\"spell(address[],bytes[])\":{\"details\":\"open payload method for admin to resolve emergency cases\"},\"updateApprover(address,bool)\":{\"params\":{\"approver_\":\"The address to update\",\"isApprover_\":\"Whether or not the address should be an allowed approver\"}},\"updateProposer(address,bool)\":{\"params\":{\"isProposer_\":\"Whether or not the address should be an allowed proposer\",\"proposer_\":\"The address to update\"}}},\"version\":1},\"userdoc\":{\"events\":{\"LogClaimed(address,uint256,uint256,uint8,bytes32,uint256,uint256)\":{\"notice\":\"Emitted when a `user` claims `amount` via a valid merkle proof\"},\"LogRootProposed(uint256,bytes32,bytes32,uint256,uint256)\":{\"notice\":\"Emitted when a new cycle root hash is proposed\"},\"LogRootUpdated(uint256,bytes32,bytes32,uint256,uint256)\":{\"notice\":\"Emitted when a new cycle root hash is approved by the owner and becomes the new active root\"},\"LogUpdateApprover(address,bool)\":{\"notice\":\"Emitted when an address is added or removed from the allowed approvers\"},\"LogUpdateProposer(address,bool)\":{\"notice\":\"Emitted when an address is added or removed from the allowed proposers\"}},\"kind\":\"user\",\"methods\":{\"approveRoot(bytes32,bytes32,uint40,uint40,uint40)\":{\"notice\":\"Approve the current pending root and content hash\"},\"claimed(address,bytes32)\":{\"notice\":\"total claimed amount per user address and fToken. user => positionId => claimed amount\"},\"currentMerkleCycle()\":{\"notice\":\"merkle root data related to current cycle (proposed and approved).\"},\"hasPendingRoot()\":{\"notice\":\"checks if there is a proposed root waiting to be approved\"},\"isApprover(address)\":{\"notice\":\"checks if the `approver_` is an allowed root approver\"},\"isProposer(address)\":{\"notice\":\"checks if the `proposer_` is an allowed root proposer\"},\"pause()\":{\"notice\":\"Pause contract functionality of new roots and claiming\"},\"pendingMerkleCycle()\":{\"notice\":\"merkle root data related to pending cycle (proposed but not yet approved).\"},\"previousMerkleRoot()\":{\"notice\":\"merkle root of the previous cycle\"},\"proposeRoot(bytes32,bytes32,uint40,uint40,uint40)\":{\"notice\":\"Propose a new root and content hash, which will be stored as pending until approved\"},\"unpause()\":{\"notice\":\"Unpause contract functionality of new roots and claiming\"},\"updateApprover(address,bool)\":{\"notice\":\"Updates an address status as a root approver\"},\"updateProposer(address,bool)\":{\"notice\":\"Updates an address status as a root proposer\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/protocols/lending/merkleDistributor/main.sol\":\"FluidMerkleDistributor\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":10000000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/Pausable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.7.0) (security/Pausable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which allows children to implement an emergency stop\\n * mechanism that can be triggered by an authorized account.\\n *\\n * This module is used through inheritance. It will make available the\\n * modifiers `whenNotPaused` and `whenPaused`, which can be applied to\\n * the functions of your contract. Note that they will not be pausable by\\n * simply including this module, only once the modifiers are put in place.\\n */\\nabstract contract Pausable is Context {\\n    /**\\n     * @dev Emitted when the pause is triggered by `account`.\\n     */\\n    event Paused(address account);\\n\\n    /**\\n     * @dev Emitted when the pause is lifted by `account`.\\n     */\\n    event Unpaused(address account);\\n\\n    bool private _paused;\\n\\n    /**\\n     * @dev Initializes the contract in unpaused state.\\n     */\\n    constructor() {\\n        _paused = false;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is not paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    modifier whenNotPaused() {\\n        _requireNotPaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Modifier to make a function callable only when the contract is paused.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    modifier whenPaused() {\\n        _requirePaused();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns true if the contract is paused, and false otherwise.\\n     */\\n    function paused() public view virtual returns (bool) {\\n        return _paused;\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is paused.\\n     */\\n    function _requireNotPaused() internal view virtual {\\n        require(!paused(), \\\"Pausable: paused\\\");\\n    }\\n\\n    /**\\n     * @dev Throws if the contract is not paused.\\n     */\\n    function _requirePaused() internal view virtual {\\n        require(paused(), \\\"Pausable: not paused\\\");\\n    }\\n\\n    /**\\n     * @dev Triggers stopped state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must not be paused.\\n     */\\n    function _pause() internal virtual whenNotPaused {\\n        _paused = true;\\n        emit Paused(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns to normal state.\\n     *\\n     * Requirements:\\n     *\\n     * - The contract must be paused.\\n     */\\n    function _unpause() internal virtual whenPaused {\\n        _paused = false;\\n        emit Unpaused(_msgSender());\\n    }\\n}\\n\",\"keccak256\":\"0x0849d93b16c9940beb286a7864ed02724b248b93e0d80ef6355af5ef15c64773\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0xe2e337e6dde9ef6b680e07338c493ebea1b5fd09b43424112868e9cc1706bca7\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/cryptography/MerkleProof.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev These functions deal with verification of Merkle Tree proofs.\\n *\\n * The tree and the proofs can be generated using our\\n * https://github.com/OpenZeppelin/merkle-tree[JavaScript library].\\n * You will find a quickstart guide in the readme.\\n *\\n * WARNING: You should avoid using leaf values that are 64 bytes long prior to\\n * hashing, or use a hash function other than keccak256 for hashing leaves.\\n * This is because the concatenation of a sorted pair of internal nodes in\\n * the merkle tree could be reinterpreted as a leaf value.\\n * OpenZeppelin's JavaScript library generates merkle trees that are safe\\n * against this attack out of the box.\\n */\\nlibrary MerkleProof {\\n    /**\\n     * @dev Returns true if a `leaf` can be proved to be a part of a Merkle tree\\n     * defined by `root`. For this, a `proof` must be provided, containing\\n     * sibling hashes on the branch from the leaf to the root of the tree. Each\\n     * pair of leaves and each pair of pre-images are assumed to be sorted.\\n     */\\n    function verify(\\n        bytes32[] memory proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProof(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {verify}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function verifyCalldata(\\n        bytes32[] calldata proof,\\n        bytes32 root,\\n        bytes32 leaf\\n    ) internal pure returns (bool) {\\n        return processProofCalldata(proof, leaf) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the rebuilt hash obtained by traversing a Merkle tree up\\n     * from `leaf` using `proof`. A `proof` is valid if and only if the rebuilt\\n     * hash matches the root of the tree. When processing the proof, the pairs\\n     * of leafs & pre-images are assumed to be sorted.\\n     *\\n     * _Available since v4.4._\\n     */\\n    function processProof(bytes32[] memory proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processProof}\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processProofCalldata(bytes32[] calldata proof, bytes32 leaf) internal pure returns (bytes32) {\\n        bytes32 computedHash = leaf;\\n        for (uint256 i = 0; i < proof.length; i++) {\\n            computedHash = _hashPair(computedHash, proof[i]);\\n        }\\n        return computedHash;\\n    }\\n\\n    /**\\n     * @dev Returns true if the `leaves` can be simultaneously proven to be a part of a merkle tree defined by\\n     * `root`, according to `proof` and `proofFlags` as described in {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerify(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProof(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Calldata version of {multiProofVerify}\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function multiProofVerifyCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32 root,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bool) {\\n        return processMultiProofCalldata(proof, proofFlags, leaves) == root;\\n    }\\n\\n    /**\\n     * @dev Returns the root of a tree reconstructed from `leaves` and sibling nodes in `proof`. The reconstruction\\n     * proceeds by incrementally reconstructing all inner nodes by combining a leaf/inner node with either another\\n     * leaf/inner node or a proof sibling node, depending on whether each `proofFlags` item is true or false\\n     * respectively.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. To use multiproofs, it is sufficient to ensure that: 1) the tree\\n     * is complete (but not necessarily perfect), 2) the leaves to be proven are in the opposite order they are in the\\n     * tree (i.e., as seen from right to left starting at the deepest layer and continuing at the next layer).\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProof(\\n        bytes32[] memory proof,\\n        bool[] memory proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    /**\\n     * @dev Calldata version of {processMultiProof}.\\n     *\\n     * CAUTION: Not all merkle trees admit multiproofs. See {processMultiProof} for details.\\n     *\\n     * _Available since v4.7._\\n     */\\n    function processMultiProofCalldata(\\n        bytes32[] calldata proof,\\n        bool[] calldata proofFlags,\\n        bytes32[] memory leaves\\n    ) internal pure returns (bytes32 merkleRoot) {\\n        // This function rebuild the root hash by traversing the tree up from the leaves. The root is rebuilt by\\n        // consuming and producing values on a queue. The queue starts with the `leaves` array, then goes onto the\\n        // `hashes` array. At the end of the process, the last hash in the `hashes` array should contain the root of\\n        // the merkle tree.\\n        uint256 leavesLen = leaves.length;\\n        uint256 totalHashes = proofFlags.length;\\n\\n        // Check proof validity.\\n        require(leavesLen + proof.length - 1 == totalHashes, \\\"MerkleProof: invalid multiproof\\\");\\n\\n        // The xxxPos values are \\\"pointers\\\" to the next value to consume in each array. All accesses are done using\\n        // `xxx[xxxPos++]`, which return the current value and increment the pointer, thus mimicking a queue's \\\"pop\\\".\\n        bytes32[] memory hashes = new bytes32[](totalHashes);\\n        uint256 leafPos = 0;\\n        uint256 hashPos = 0;\\n        uint256 proofPos = 0;\\n        // At each step, we compute the next hash using two values:\\n        // - a value from the \\\"main queue\\\". If not all leaves have been consumed, we get the next leaf, otherwise we\\n        //   get the next hash.\\n        // - depending on the flag, either another value for the \\\"main queue\\\" (merging branches) or an element from the\\n        //   `proof` array.\\n        for (uint256 i = 0; i < totalHashes; i++) {\\n            bytes32 a = leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++];\\n            bytes32 b = proofFlags[i] ? leafPos < leavesLen ? leaves[leafPos++] : hashes[hashPos++] : proof[proofPos++];\\n            hashes[i] = _hashPair(a, b);\\n        }\\n\\n        if (totalHashes > 0) {\\n            return hashes[totalHashes - 1];\\n        } else if (leavesLen > 0) {\\n            return leaves[0];\\n        } else {\\n            return proof[0];\\n        }\\n    }\\n\\n    function _hashPair(bytes32 a, bytes32 b) private pure returns (bytes32) {\\n        return a < b ? _efficientHash(a, b) : _efficientHash(b, a);\\n    }\\n\\n    function _efficientHash(bytes32 a, bytes32 b) private pure returns (bytes32 value) {\\n        /// @solidity memory-safe-assembly\\n        assembly {\\n            mstore(0x00, a)\\n            mstore(0x20, b)\\n            value := keccak256(0x00, 0x40)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xd466e8b07f4c6220eac16da5127f3ff142e65f0c15c03c7d38f257b02c8585e1\",\"license\":\"MIT\"},\"contracts/protocols/lending/merkleDistributor/errors.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nabstract contract Errors {\\n    error Unauthorized();\\n    error InvalidParams();\\n\\n    // claim related errors:\\n    error InvalidCycle();\\n    error InvalidProof();\\n    error NothingToClaim();\\n    error MsgSenderNotRecipient();\\n}\\n\",\"keccak256\":\"0xe1fb6bea20d76327b9cf9f77694527a9c2ac4dbd346ba865789c21e73a779a3f\",\"license\":\"BUSL-1.1\"},\"contracts/protocols/lending/merkleDistributor/events.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nabstract contract Events {\\n    /// @notice Emitted when an address is added or removed from the allowed proposers\\n    event LogUpdateProposer(address proposer, bool isProposer);\\n\\n    /// @notice Emitted when an address is added or removed from the allowed approvers\\n    event LogUpdateApprover(address approver, bool isApprover);\\n\\n    /// @notice Emitted when a new cycle root hash is proposed\\n    event LogRootProposed(uint256 cycle, bytes32 root, bytes32 contentHash, uint256 timestamp, uint256 blockNumber);\\n\\n    /// @notice Emitted when a new cycle root hash is approved by the owner and becomes the new active root\\n    event LogRootUpdated(uint256 cycle, bytes32 root, bytes32 contentHash, uint256 timestamp, uint256 blockNumber);\\n\\n    /// @notice Emitted when a `user` claims `amount` via a valid merkle proof\\n    event LogClaimed(\\n        address user,\\n        uint256 amount,\\n        uint256 cycle,\\n        uint8 positionType,\\n        bytes32 positionId,\\n        uint256 timestamp,\\n        uint256 blockNumber\\n    );\\n}\\n\",\"keccak256\":\"0xa08b09762e80233085570817dc5717bae3de6e09a3b5667ca957dc06ddf1a942\",\"license\":\"BUSL-1.1\"},\"contracts/protocols/lending/merkleDistributor/main.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { SafeERC20 } from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport { MerkleProof } from \\\"@openzeppelin/contracts/utils/cryptography/MerkleProof.sol\\\";\\nimport { Address } from \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\n\\nimport { Structs } from \\\"./structs.sol\\\";\\nimport { Variables } from \\\"./variables.sol\\\";\\nimport { Events } from \\\"./events.sol\\\";\\nimport { Errors } from \\\"./errors.sol\\\";\\n\\n// ---------------------------------------------------------------------------------------------\\n//\\n// @dev WARNING: DO NOT USE `multiProof` related methods of `MerkleProof`.\\n// This repo uses OpenZeppelin 4.8.2 which has a vulnerability for multi proofs. See:\\n// https://github.com/OpenZeppelin/openzeppelin-contracts/security/advisories/GHSA-wprv-93r4-jj2p\\n//\\n// ---------------------------------------------------------------------------------------------\\n\\nabstract contract FluidMerkleDistributorCore is Structs, Variables, Events, Errors {\\n    /// @dev validates that an address is not the zero address\\n    modifier validAddress(address value_) {\\n        if (value_ == address(0)) {\\n            revert InvalidParams();\\n        }\\n        _;\\n    }\\n}\\n\\nabstract contract FluidMerkleDistributorAdmin is FluidMerkleDistributorCore {\\n    /// @notice                  Updates an address status as a root proposer\\n    /// @param proposer_         The address to update\\n    /// @param isProposer_       Whether or not the address should be an allowed proposer\\n    function updateProposer(address proposer_, bool isProposer_) public onlyOwner validAddress(proposer_) {\\n        _proposers[proposer_] = isProposer_;\\n        emit LogUpdateProposer(proposer_, isProposer_);\\n    }\\n\\n    /// @notice                  Updates an address status as a root approver\\n    /// @param approver_         The address to update\\n    /// @param isApprover_       Whether or not the address should be an allowed approver\\n    function updateApprover(address approver_, bool isApprover_) public onlyOwner validAddress(approver_) {\\n        _approvers[approver_] = isApprover_;\\n        emit LogUpdateApprover(approver_, isApprover_);\\n    }\\n\\n    /// @dev open payload method for admin to resolve emergency cases\\n    function spell(address[] memory targets_, bytes[] memory calldatas_) public onlyOwner {\\n        for (uint256 i = 0; i < targets_.length; i++) {\\n            Address.functionDelegateCall(targets_[i], calldatas_[i]);\\n        }\\n    }\\n\\n    /// @notice Pause contract functionality of new roots and claiming\\n    function pause() external onlyOwner {\\n        _pause();\\n    }\\n\\n    /// @notice Unpause contract functionality of new roots and claiming\\n    function unpause() external onlyOwner {\\n        _unpause();\\n    }\\n}\\n\\nabstract contract FluidMerkleDistributorApprover is FluidMerkleDistributorCore {\\n    /// @dev Checks that the sender is an approver\\n    modifier onlyApprover() {\\n        if (!isApprover(msg.sender)) {\\n            revert Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    /// @notice checks if the `approver_` is an allowed root approver\\n    function isApprover(address approver_) public view returns (bool) {\\n        return (_approvers[approver_] || owner == approver_);\\n    }\\n\\n    /// @notice Approve the current pending root and content hash\\n    function approveRoot(\\n        bytes32 root_,\\n        bytes32 contentHash_,\\n        uint40 cycle_,\\n        uint40 startBlock_,\\n        uint40 endBlock_\\n    ) external onlyApprover {\\n        MerkleCycle memory merkleCycle_ = _pendingMerkleCycle;\\n\\n        if (\\n            root_ != merkleCycle_.merkleRoot ||\\n            contentHash_ != merkleCycle_.merkleContentHash ||\\n            cycle_ != merkleCycle_.cycle ||\\n            startBlock_ != merkleCycle_.startBlock ||\\n            endBlock_ != merkleCycle_.endBlock\\n        ) {\\n            revert InvalidParams();\\n        }\\n\\n        previousMerkleRoot = _currentMerkleCycle.merkleRoot;\\n\\n        merkleCycle_.timestamp = uint40(block.timestamp);\\n        merkleCycle_.publishBlock = uint40(block.number);\\n\\n        _currentMerkleCycle = merkleCycle_;\\n\\n        emit LogRootUpdated(cycle_, root_, contentHash_, block.timestamp, block.number);\\n    }\\n}\\n\\nabstract contract FluidMerkleDistributorProposer is FluidMerkleDistributorCore {\\n    /// @dev Checks that the sender is a proposer\\n    modifier onlyProposer() {\\n        if (!isProposer(msg.sender)) {\\n            revert Unauthorized();\\n        }\\n        _;\\n    }\\n\\n    /// @notice checks if the `proposer_` is an allowed root proposer\\n    function isProposer(address proposer_) public view returns (bool) {\\n        return (_proposers[proposer_] || owner == proposer_);\\n    }\\n\\n    /// @notice Propose a new root and content hash, which will be stored as pending until approved\\n    function proposeRoot(\\n        bytes32 root_,\\n        bytes32 contentHash_,\\n        uint40 cycle_,\\n        uint40 startBlock_,\\n        uint40 endBlock_\\n    ) external whenNotPaused onlyProposer {\\n        if (cycle_ != _currentMerkleCycle.cycle + 1 || startBlock_ > endBlock_) {\\n            revert InvalidParams();\\n        }\\n\\n        _pendingMerkleCycle = MerkleCycle({\\n            merkleRoot: root_,\\n            merkleContentHash: contentHash_,\\n            cycle: cycle_,\\n            startBlock: startBlock_,\\n            endBlock: endBlock_,\\n            timestamp: uint40(block.timestamp),\\n            publishBlock: uint40(block.number)\\n        });\\n\\n        emit LogRootProposed(cycle_, root_, contentHash_, block.timestamp, block.number);\\n    }\\n}\\n\\ncontract FluidMerkleDistributor is\\n    FluidMerkleDistributorCore,\\n    FluidMerkleDistributorAdmin,\\n    FluidMerkleDistributorApprover,\\n    FluidMerkleDistributorProposer\\n{\\n    constructor(\\n        string memory name_,\\n        address owner_,\\n        address proposer_,\\n        address approver_,\\n        address rewardToken_\\n    )\\n        validAddress(owner_)\\n        validAddress(proposer_)\\n        validAddress(approver_)\\n        validAddress(rewardToken_)\\n        Variables(owner_, rewardToken_)\\n    {   \\n        name = name_;\\n        \\n        _proposers[proposer_] = true;\\n        emit LogUpdateProposer(proposer_, true);\\n\\n        _approvers[approver_] = true;\\n        emit LogUpdateApprover(approver_, true);\\n    }\\n\\n    /// @notice checks if there is a proposed root waiting to be approved\\n    function hasPendingRoot() external view returns (bool) {\\n        return _pendingMerkleCycle.cycle == _currentMerkleCycle.cycle + 1;\\n    }\\n\\n    /// @notice merkle root data related to current cycle (proposed and approved).\\n    function currentMerkleCycle() public view returns (MerkleCycle memory) {\\n        return _currentMerkleCycle;\\n    }\\n\\n    /// @notice merkle root data related to pending cycle (proposed but not yet approved).\\n    function pendingMerkleCycle() public view returns (MerkleCycle memory) {\\n        return _pendingMerkleCycle;\\n    }\\n\\n    function encodeClaim(\\n        address recipient_,\\n        uint256 cumulativeAmount_,\\n        uint8 positionType_,\\n        bytes32 positionId_,\\n        uint256 cycle_,\\n        bytes memory metadata_\\n    ) public pure returns (bytes memory encoded_, bytes32 hash_) {\\n        encoded_ = abi.encode(positionType_, positionId_, recipient_, cycle_, cumulativeAmount_, metadata_);\\n        hash_ = keccak256(bytes.concat(keccak256(encoded_)));\\n    }\\n\\n    function claim(\\n        address recipient_,\\n        uint256 cumulativeAmount_,\\n        uint8 positionType_,\\n        bytes32 positionId_,\\n        uint256 cycle_,\\n        bytes32[] calldata merkleProof_,\\n        bytes memory metadata_\\n    ) public whenNotPaused {\\n        if(msg.sender != recipient_) revert MsgSenderNotRecipient();\\n        uint256 currentCycle_ = uint256(_currentMerkleCycle.cycle);\\n\\n        if (!(cycle_ == currentCycle_ || (currentCycle_ > 0 && cycle_ == currentCycle_ - 1))) {\\n            revert InvalidCycle();\\n        }\\n\\n        // Verify the merkle proof.\\n        bytes32 node_ = keccak256(\\n            bytes.concat(keccak256(abi.encode(positionType_, positionId_, recipient_, cycle_, cumulativeAmount_, metadata_)))\\n        );\\n        if (\\n            !MerkleProof.verify(\\n                merkleProof_,\\n                cycle_ == currentCycle_ ? _currentMerkleCycle.merkleRoot : previousMerkleRoot,\\n                node_\\n            )\\n        ) {\\n            revert InvalidProof();\\n        }\\n\\n        uint256 claimable_ = cumulativeAmount_ - claimed[recipient_][positionId_];\\n        if (claimable_ == 0) {\\n            revert NothingToClaim();\\n        }\\n\\n        claimed[recipient_][positionId_] = cumulativeAmount_;\\n\\n        SafeERC20.safeTransfer(TOKEN, recipient_, claimable_);\\n\\n        emit LogClaimed(recipient_, claimable_, cycle_, positionType_, positionId_, block.timestamp, block.number);\\n    }\\n\\n    struct Claim {\\n        address recipient;\\n        uint256 cumulativeAmount;\\n        uint8 positionType;\\n        bytes32 positionId;\\n        uint256 cycle;\\n        bytes32[] merkleProof;\\n        bytes metadata;\\n    }\\n\\n    function bulkClaim(Claim[] calldata claims_) external {\\n        for (uint i = 0; i < claims_.length; i++) {\\n            claim(\\n                claims_[i].recipient,\\n                claims_[i].cumulativeAmount,\\n                claims_[i].positionType,\\n                claims_[i].positionId,\\n                claims_[i].cycle,\\n                claims_[i].merkleProof,\\n                claims_[i].metadata\\n            );\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x239c1cda3812af1a6f40b780eba884ff8ac8f96c3f7ee9c7f17196e27dd2c5ff\",\"license\":\"BUSL-1.1\"},\"contracts/protocols/lending/merkleDistributor/structs.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nabstract contract Structs {\\n    struct MerkleCycle {\\n        // slot 1\\n        bytes32 merkleRoot;\\n        // slot 2\\n        bytes32 merkleContentHash;\\n        // slot 3\\n        uint40 cycle;\\n        uint40 timestamp;\\n        uint40 publishBlock;\\n        uint40 startBlock;\\n        uint40 endBlock;\\n    }\\n}\\n\",\"keccak256\":\"0x9ed382270f42a24600c855837457117e8795d6dcb3bc0fbfde62e2254ee9af1d\",\"license\":\"BUSL-1.1\"},\"contracts/protocols/lending/merkleDistributor/variables.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.21;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { Owned } from \\\"solmate/src/auth/Owned.sol\\\";\\nimport { Pausable } from \\\"@openzeppelin/contracts/security/Pausable.sol\\\";\\n\\nimport { Structs } from \\\"./structs.sol\\\";\\n\\nabstract contract Constants {\\n    IERC20 public immutable TOKEN;\\n\\n    constructor(address rewardToken_) {\\n        TOKEN = IERC20(rewardToken_);\\n    }\\n}\\n\\nabstract contract Variables is Owned, Pausable, Constants, Structs {\\n    // ------------ storage variables from inherited contracts (Owned, Pausable) come before vars here --------\\n\\n    // ----------------------- slot 0 ---------------------------\\n    // address public owner; -> from Owned\\n\\n    // bool private _paused; -> from Pausable\\n\\n    // 11 bytes empty\\n\\n    // ----------------------- slot 1 ---------------------------\\n\\n    /// @dev Name of the Merkle Distributor\\n    string public name;\\n\\n    // ----------------------- slot 2 ---------------------------\\n\\n    /// @dev allow list for allowed root proposer addresses\\n    mapping(address => bool) internal _proposers;\\n\\n    // ----------------------- slot 3 ---------------------------\\n\\n    /// @dev allow list for allowed root proposer addresses\\n    mapping(address => bool) internal _approvers;\\n\\n    // ----------------------- slot 4-6 ---------------------------\\n\\n    /// @dev merkle root data related to current cycle (proposed and approved).\\n    /// @dev timestamp & publishBlock = data from last publish.\\n    // with custom getter to return whole struct at once instead of default solidity getter splitting it into tuple\\n    MerkleCycle internal _currentMerkleCycle;\\n\\n    // ----------------------- slot 7-9 ---------------------------\\n\\n    /// @dev merkle root data related to pending cycle (proposed but not yet approved).\\n    /// @dev timestamp & publishBlock = data from last propose.\\n    // with custom getter to return whole struct at once instead of default solidity getter splitting it into tuple\\n    MerkleCycle internal _pendingMerkleCycle;\\n\\n    // ----------------------- slot 10 ---------------------------\\n\\n    /// @notice merkle root of the previous cycle\\n    bytes32 public previousMerkleRoot;\\n\\n    // ----------------------- slot 11 ---------------------------\\n\\n    /// @notice total claimed amount per user address and fToken. user => positionId => claimed amount\\n    mapping(address => mapping(bytes32 => uint256)) public claimed;\\n\\n    constructor(address owner_, address rewardToken_) Constants(rewardToken_) Owned(owner_) {}\\n}\\n\",\"keccak256\":\"0x9473c23510cd3bb5d7b9079348fd83af38f8296e1c98f88c9f9c1f4c37d6ce66\",\"license\":\"BUSL-1.1\"},\"solmate/src/auth/Owned.sol\":{\"content\":\"// SPDX-License-Identifier: AGPL-3.0-only\\npragma solidity >=0.8.0;\\n\\n/// @notice Simple single owner authorization mixin.\\n/// @author Solmate (https://github.com/transmissions11/solmate/blob/main/src/auth/Owned.sol)\\nabstract contract Owned {\\n    /*//////////////////////////////////////////////////////////////\\n                                 EVENTS\\n    //////////////////////////////////////////////////////////////*/\\n\\n    event OwnershipTransferred(address indexed user, address indexed newOwner);\\n\\n    /*//////////////////////////////////////////////////////////////\\n                            OWNERSHIP STORAGE\\n    //////////////////////////////////////////////////////////////*/\\n\\n    address public owner;\\n\\n    modifier onlyOwner() virtual {\\n        require(msg.sender == owner, \\\"UNAUTHORIZED\\\");\\n\\n        _;\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                               CONSTRUCTOR\\n    //////////////////////////////////////////////////////////////*/\\n\\n    constructor(address _owner) {\\n        owner = _owner;\\n\\n        emit OwnershipTransferred(address(0), _owner);\\n    }\\n\\n    /*//////////////////////////////////////////////////////////////\\n                             OWNERSHIP LOGIC\\n    //////////////////////////////////////////////////////////////*/\\n\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        owner = newOwner;\\n\\n        emit OwnershipTransferred(msg.sender, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xfedb27d14c508342c33eb067c9a02eabcdb0f9dcf93b04ded1001f580d12d0ea\",\"license\":\"AGPL-3.0-only\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b5060405162002bfc38038062002bfc83398101604081905262000034916200024b565b600080546001600160a01b0319166001600160a01b03861690811782556040518692849283928592907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0908290a3506000805460ff60a01b191690556001600160a01b0390811660805286925082169050620000c357604051635435b28960e11b815260040160405180910390fd5b836001600160a01b038116620000ec57604051635435b28960e11b815260040160405180910390fd5b836001600160a01b0381166200011557604051635435b28960e11b815260040160405180910390fd5b836001600160a01b0381166200013e57604051635435b28960e11b815260040160405180910390fd5b60016200014c8a82620003fa565b506001600160a01b038716600081815260026020908152604091829020805460ff191660019081179091558251938452908301527f780d738f356a91be5dfe8ffb87990c655a36b3430a233c71a209eb1e9a1a1a75910160405180910390a16001600160a01b038616600081815260036020908152604091829020805460ff191660019081179091558251938452908301527feeeb06b5605b72367788db09c5284b141487cdc2ab0925fcf8880d30ea584376910160405180910390a1505050505050505050620004c6565b634e487b7160e01b600052604160045260246000fd5b80516001600160a01b03811681146200024657600080fd5b919050565b600080600080600060a086880312156200026457600080fd5b85516001600160401b03808211156200027c57600080fd5b818801915088601f8301126200029157600080fd5b815181811115620002a657620002a662000218565b604051601f8201601f19908116603f01168101908382118183101715620002d157620002d162000218565b81604052828152602093508b84848701011115620002ee57600080fd5b600091505b82821015620003125784820184015181830185015290830190620002f3565b60008484830101528099505050506200032d8189016200022e565b955050506200033f604087016200022e565b92506200034f606087016200022e565b91506200035f608087016200022e565b90509295509295909350565b600181811c908216806200038057607f821691505b602082108103620003a157634e487b7160e01b600052602260045260246000fd5b50919050565b601f821115620003f557600081815260208120601f850160051c81016020861015620003d05750805b601f850160051c820191505b81811015620003f157828155600101620003dc565b5050505b505050565b81516001600160401b0381111562000416576200041662000218565b6200042e816200042784546200036b565b84620003a7565b602080601f8311600181146200046657600084156200044d5750858301515b600019600386901b1c1916600185901b178555620003f1565b600085815260208120601f198616915b82811015620004975788860151825594840194600190910190840162000476565b5085821015620004b65787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b608051612713620004e9600039600081816103cc01526114e701526127136000f3fe608060405234801561001057600080fd5b50600436106101825760003560e01c806382bc4aaf116100d85780639d01a27d1161008c578063caf3791e11610066578063caf3791e1461053d578063f2fde38b14610546578063f3bd53bf1461055957600080fd5b80639d01a27d1461044e578063be5013dc14610461578063c81eec661461047457600080fd5b80638456cb59116100bd5780638456cb59146104135780638a1e6bba1461041b5780638da5cb5b1461042e57600080fd5b806382bc4aaf146103b457806382bfefc8146103c757600080fd5b806335c1dd991161013a5780635c975abb116101145780635c975abb1461036b5780636d218e481461038e57806374ec29a0146103a157600080fd5b806335c1dd991461033d5780633f4ba83a146103505780634617c06a1461035857600080fd5b80631563461b1161016b5780631563461b146101de5780632274c5cd146101f35780632f37a7741461032557600080fd5b806306fdde03146101875780630f2d940b146101a5575b600080fd5b61018f61057a565b60405161019c9190611e53565b60405180910390f35b6101d06101b3366004611e8f565b600b60209081526000928352604080842090915290825290205481565b60405190815260200161019c565b6101f16101ec366004611eca565b610608565b005b6102bc6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810191909152506040805160e0810182526007548152600854602082015260095464ffffffffff80821693830193909352650100000000008104831660608301526a01000000000000000000008104831660808301526f010000000000000000000000000000008104831660a083015274010000000000000000000000000000000000000000900490911660c082015290565b60405161019c9190600060e0820190508251825260208301516020830152604083015164ffffffffff80821660408501528060608601511660608501528060808601511660808501528060a08601511660a08501528060c08601511660c0850152505092915050565b61032d61076c565b604051901515815260200161019c565b6101f161034b366004611f16565b610798565b6101f1610a8b565b6101f1610366366004611f16565b610b16565b60005474010000000000000000000000000000000000000000900460ff1661032d565b61032d61039c366004611f6d565b610d87565b61032d6103af366004611f6d565b610ddb565b6101f16103c2366004612148565b610e2c565b6103ee7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161019c565b6101f1610f0d565b6101f1610429366004612254565b610f96565b6000546103ee9073ffffffffffffffffffffffffffffffffffffffff1681565b6101f161045c366004611eca565b611133565b6101f161046f3660046122a7565b611289565b6102bc6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810191909152506040805160e0810182526004548152600554602082015260065464ffffffffff80821693830193909352650100000000008104831660608301526a01000000000000000000008104831660808301526f010000000000000000000000000000008104831660a083015274010000000000000000000000000000000000000000900490911660c082015290565b6101d0600a5481565b6101f1610554366004611f6d565b61158d565b61056c61056736600461234e565b61167e565b60405161019c9291906123c8565b60018054610587906123ea565b80601f01602080910402602001604051908101604052809291908181526020018280546105b3906123ea565b80156106005780601f106105d557610100808354040283529160200191610600565b820191906000526020600020905b8154815290600101906020018083116105e357829003601f168201915b505050505081565b60005473ffffffffffffffffffffffffffffffffffffffff16331461068e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a4544000000000000000000000000000000000000000060448201526064015b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff81166106dc576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff831660008181526003602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168615159081179091558251938452908301527feeeb06b5605b72367788db09c5284b141487cdc2ab0925fcf8880d30ea58437691015b60405180910390a1505050565b6006546000906107849064ffffffffff16600161246c565b60095464ffffffffff908116911614919050565b6107a133610d87565b6107d7576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160e081018252600754808252600854602083015260095464ffffffffff80821694840194909452650100000000008104841660608401526a01000000000000000000008104841660808401526f010000000000000000000000000000008104841660a084015274010000000000000000000000000000000000000000900490921660c08201529086141580610874575080602001518514155b806108915750806040015164ffffffffff168464ffffffffff1614155b806108ae57508060a0015164ffffffffff168364ffffffffff1614155b806108cb57508060c0015164ffffffffff168264ffffffffff1614155b15610902576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60048054600a554264ffffffffff818116606085810182905243808416608080890182905288519097556020808901516005556040808a01516006805460a0808e015160c08f0151948c167fffffffffffffffffffffffffffffffffffffffffffff000000000000000000009093169290921765010000000000909a02999099177fffffffffffffffffffffffff00000000000000000000ffffffffffffffffffff166a01000000000000000000009096027fffffffffffffffffffffffff0000000000ffffffffffffffffffffffffffffff16959095176f01000000000000000000000000000000958a1695909502949094177fffffffffffffff0000000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000091891691909102179092558151958c16865285018d905284018b905290830193909352928101919091527fcc3c3071340d91a4fd687f9ad48d1ee5689f8083136feb3594807d0f7481f7cf910160405180910390a1505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b0c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610685565b610b14611700565b565b610b1e61177d565b610b2733610ddb565b610b5d576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600654610b729064ffffffffff16600161246c565b64ffffffffff168364ffffffffff16141580610b9b57508064ffffffffff168264ffffffffff16115b15610bd2576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160e0810182528681526020810186905264ffffffffff8086168284018190524280831660608501819052438085166080870181905289861660a0880181905295891660c090970187905260078d905560088c905560098054740100000000000000000000000000000000000000009098027fffffffffffffff0000000000ffffffffffffffffffffffffffffffffffffffff6f010000000000000000000000000000009098027fffffffffffffffffffffffff0000000000ffffffffffffffffffffffffffffff6a0100000000000000000000909402939093167fffffffffffffffffffffffff00000000000000000000ffffffffffffffffffff650100000000009096027fffffffffffffffffffffffffffffffffffffffffffff00000000000000000000909a1690971798909817939093169490941793909317939093169390931790915591517fb38026cc978f6c2642a5108ee558571a1b01a939b056abcc065b7eabacaf2d9d92610d789287928a928a929164ffffffffff959095168552602085019390935260408401919091526060830152608082015260a00190565b60405180910390a15050505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526003602052604081205460ff1680610dd5575060005473ffffffffffffffffffffffffffffffffffffffff8381169116145b92915050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602052604081205460ff1680610dd557505060005473ffffffffffffffffffffffffffffffffffffffff91821691161490565b60005473ffffffffffffffffffffffffffffffffffffffff163314610ead576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610685565b60005b8251811015610f0857610ef5838281518110610ece57610ece612491565b6020026020010151838381518110610ee857610ee8612491565b6020026020010151611802565b5080610f00816124c0565b915050610eb0565b505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610f8e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610685565b610b1461182e565b60005b81811015610f0857611121838383818110610fb657610fb6612491565b9050602002810190610fc891906124f8565b610fd6906020810190611f6d565b848484818110610fe857610fe8612491565b9050602002810190610ffa91906124f8565b6020013585858581811061101057611010612491565b905060200281019061102291906124f8565b611033906060810190604001612536565b86868681811061104557611045612491565b905060200281019061105791906124f8565b6060013587878781811061106d5761106d612491565b905060200281019061107f91906124f8565b6080013588888881811061109557611095612491565b90506020028101906110a791906124f8565b6110b59060a0810190612551565b8a8a8a8181106110c7576110c7612491565b90506020028101906110d991906124f8565b6110e79060c08101906125b9565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061128992505050565b8061112b816124c0565b915050610f99565b60005473ffffffffffffffffffffffffffffffffffffffff1633146111b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610685565b8173ffffffffffffffffffffffffffffffffffffffff8116611202576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff831660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168615159081179091558251938452908301527f780d738f356a91be5dfe8ffb87990c655a36b3430a233c71a209eb1e9a1a1a75910161075f565b61129161177d565b3373ffffffffffffffffffffffffffffffffffffffff8916146112e0576040517fbd79de5800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60065464ffffffffff168481148061130c575060008111801561130c575061130960018261261e565b85145b611342576040517f9b8febfe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600087878b888c8760405160200161135f96959493929190612631565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815282825280516020918201209083015201604051602081830303815290604052805190602001209050611402858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250505088851490506113f857600a546113fc565b6004545b8361189d565b611438576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8a166000908152600b602090815260408083208a8452909152812054611473908b61261e565b9050806000036114af576040517f969bf72800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8b166000908152600b602090815260408083208b845290915290208a905561150d7f00000000000000000000000000000000000000000000000000000000000000008c836118b3565b6040805173ffffffffffffffffffffffffffffffffffffffff8d1681526020810183905290810188905260ff8a166060820152608081018990524260a08201524360c08201527f309cb1c0dc6ce0f02c0c35cc1f46bbe61ec9deb311d101b87e7d25bd0b647fd79060e00160405180910390a15050505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461160e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610685565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081178255604051909133917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b60606000858589868a8760405160200161169d96959493929190612631565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152828252805160208083019190912090840152935001604051602081830303815290604052805190602001209050965096945050505050565b611708611940565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b60005474010000000000000000000000000000000000000000900460ff1615610b14576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610685565b606061182783836040518060600160405280602781526020016126b7602791396119c4565b9392505050565b61183661177d565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586117533390565b6000826118aa8584611a49565b14949350505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610f08908490611a96565b60005474010000000000000000000000000000000000000000900460ff16610b14576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610685565b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516119ee9190612687565b600060405180830381855af49150503d8060008114611a29576040519150601f19603f3d011682016040523d82523d6000602084013e611a2e565b606091505b5091509150611a3f86838387611ba2565b9695505050505050565b600081815b8451811015611a8e57611a7a82868381518110611a6d57611a6d612491565b6020026020010151611c4a565b915080611a86816124c0565b915050611a4e565b509392505050565b6000611af8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611c799092919063ffffffff16565b805190915015610f085780806020019051810190611b169190612699565b610f08576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610685565b60608315611c38578251600003611c315773ffffffffffffffffffffffffffffffffffffffff85163b611c31576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610685565b5081611c42565b611c428383611c88565b949350505050565b6000818310611c66576000828152602084905260409020611827565b6000838152602083905260409020611827565b6060611c428484600085611ccc565b815115611c985781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106859190611e53565b606082471015611d5e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610685565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611d879190612687565b60006040518083038185875af1925050503d8060008114611dc4576040519150601f19603f3d011682016040523d82523d6000602084013e611dc9565b606091505b5091509150611dda87838387611ba2565b979650505050505050565b60005b83811015611e00578181015183820152602001611de8565b50506000910152565b60008151808452611e21816020860160208601611de5565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006118276020830184611e09565b803573ffffffffffffffffffffffffffffffffffffffff81168114611e8a57600080fd5b919050565b60008060408385031215611ea257600080fd5b611eab83611e66565b946020939093013593505050565b8015158114611ec757600080fd5b50565b60008060408385031215611edd57600080fd5b611ee683611e66565b91506020830135611ef681611eb9565b809150509250929050565b803564ffffffffff81168114611e8a57600080fd5b600080600080600060a08688031215611f2e57600080fd5b8535945060208601359350611f4560408701611f01565b9250611f5360608701611f01565b9150611f6160808701611f01565b90509295509295909350565b600060208284031215611f7f57600080fd5b61182782611e66565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611ffe57611ffe611f88565b604052919050565b600067ffffffffffffffff82111561202057612020611f88565b5060051b60200190565b600082601f83011261203b57600080fd5b813567ffffffffffffffff81111561205557612055611f88565b61208660207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601611fb7565b81815284602083860101111561209b57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f8301126120c957600080fd5b813560206120de6120d983612006565b611fb7565b82815260059290921b840181019181810190868411156120fd57600080fd5b8286015b8481101561213d57803567ffffffffffffffff8111156121215760008081fd5b61212f8986838b010161202a565b845250918301918301612101565b509695505050505050565b6000806040838503121561215b57600080fd5b823567ffffffffffffffff8082111561217357600080fd5b818501915085601f83011261218757600080fd5b813560206121976120d983612006565b82815260059290921b840181019181810190898411156121b657600080fd5b948201945b838610156121db576121cc86611e66565b825294820194908201906121bb565b965050860135925050808211156121f157600080fd5b506121fe858286016120b8565b9150509250929050565b60008083601f84011261221a57600080fd5b50813567ffffffffffffffff81111561223257600080fd5b6020830191508360208260051b850101111561224d57600080fd5b9250929050565b6000806020838503121561226757600080fd5b823567ffffffffffffffff81111561227e57600080fd5b61228a85828601612208565b90969095509350505050565b803560ff81168114611e8a57600080fd5b60008060008060008060008060e0898b0312156122c357600080fd5b6122cc89611e66565b9750602089013596506122e160408a01612296565b9550606089013594506080890135935060a089013567ffffffffffffffff8082111561230c57600080fd5b6123188c838d01612208565b909550935060c08b013591508082111561233157600080fd5b5061233e8b828c0161202a565b9150509295985092959890939650565b60008060008060008060c0878903121561236757600080fd5b61237087611e66565b95506020870135945061238560408801612296565b9350606087013592506080870135915060a087013567ffffffffffffffff8111156123af57600080fd5b6123bb89828a0161202a565b9150509295509295509295565b6040815260006123db6040830185611e09565b90508260208301529392505050565b600181811c908216806123fe57607f821691505b602082108103612437577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b64ffffffffff81811683821601908082111561248a5761248a61243d565b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036124f1576124f161243d565b5060010190565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2183360301811261252c57600080fd5b9190910192915050565b60006020828403121561254857600080fd5b61182782612296565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261258657600080fd5b83018035915067ffffffffffffffff8211156125a157600080fd5b6020019150600581901b360382131561224d57600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126125ee57600080fd5b83018035915067ffffffffffffffff82111561260957600080fd5b60200191503681900382131561224d57600080fd5b81810381811115610dd557610dd561243d565b60ff8716815285602082015273ffffffffffffffffffffffffffffffffffffffff8516604082015283606082015282608082015260c060a0820152600061267b60c0830184611e09565b98975050505050505050565b6000825161252c818460208701611de5565b6000602082840312156126ab57600080fd5b815161182781611eb956fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212201309a677baa1fb4a73d0e0d224b5c9a119b96b191ad89e8354f6ba3f4fc6eada64736f6c63430008150033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101825760003560e01c806382bc4aaf116100d85780639d01a27d1161008c578063caf3791e11610066578063caf3791e1461053d578063f2fde38b14610546578063f3bd53bf1461055957600080fd5b80639d01a27d1461044e578063be5013dc14610461578063c81eec661461047457600080fd5b80638456cb59116100bd5780638456cb59146104135780638a1e6bba1461041b5780638da5cb5b1461042e57600080fd5b806382bc4aaf146103b457806382bfefc8146103c757600080fd5b806335c1dd991161013a5780635c975abb116101145780635c975abb1461036b5780636d218e481461038e57806374ec29a0146103a157600080fd5b806335c1dd991461033d5780633f4ba83a146103505780634617c06a1461035857600080fd5b80631563461b1161016b5780631563461b146101de5780632274c5cd146101f35780632f37a7741461032557600080fd5b806306fdde03146101875780630f2d940b146101a5575b600080fd5b61018f61057a565b60405161019c9190611e53565b60405180910390f35b6101d06101b3366004611e8f565b600b60209081526000928352604080842090915290825290205481565b60405190815260200161019c565b6101f16101ec366004611eca565b610608565b005b6102bc6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810191909152506040805160e0810182526007548152600854602082015260095464ffffffffff80821693830193909352650100000000008104831660608301526a01000000000000000000008104831660808301526f010000000000000000000000000000008104831660a083015274010000000000000000000000000000000000000000900490911660c082015290565b60405161019c9190600060e0820190508251825260208301516020830152604083015164ffffffffff80821660408501528060608601511660608501528060808601511660808501528060a08601511660a08501528060c08601511660c0850152505092915050565b61032d61076c565b604051901515815260200161019c565b6101f161034b366004611f16565b610798565b6101f1610a8b565b6101f1610366366004611f16565b610b16565b60005474010000000000000000000000000000000000000000900460ff1661032d565b61032d61039c366004611f6d565b610d87565b61032d6103af366004611f6d565b610ddb565b6101f16103c2366004612148565b610e2c565b6103ee7f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161019c565b6101f1610f0d565b6101f1610429366004612254565b610f96565b6000546103ee9073ffffffffffffffffffffffffffffffffffffffff1681565b6101f161045c366004611eca565b611133565b6101f161046f3660046122a7565b611289565b6102bc6040805160e081018252600080825260208201819052918101829052606081018290526080810182905260a0810182905260c0810191909152506040805160e0810182526004548152600554602082015260065464ffffffffff80821693830193909352650100000000008104831660608301526a01000000000000000000008104831660808301526f010000000000000000000000000000008104831660a083015274010000000000000000000000000000000000000000900490911660c082015290565b6101d0600a5481565b6101f1610554366004611f6d565b61158d565b61056c61056736600461234e565b61167e565b60405161019c9291906123c8565b60018054610587906123ea565b80601f01602080910402602001604051908101604052809291908181526020018280546105b3906123ea565b80156106005780601f106105d557610100808354040283529160200191610600565b820191906000526020600020905b8154815290600101906020018083116105e357829003601f168201915b505050505081565b60005473ffffffffffffffffffffffffffffffffffffffff16331461068e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a4544000000000000000000000000000000000000000060448201526064015b60405180910390fd5b8173ffffffffffffffffffffffffffffffffffffffff81166106dc576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff831660008181526003602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168615159081179091558251938452908301527feeeb06b5605b72367788db09c5284b141487cdc2ab0925fcf8880d30ea58437691015b60405180910390a1505050565b6006546000906107849064ffffffffff16600161246c565b60095464ffffffffff908116911614919050565b6107a133610d87565b6107d7576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160e081018252600754808252600854602083015260095464ffffffffff80821694840194909452650100000000008104841660608401526a01000000000000000000008104841660808401526f010000000000000000000000000000008104841660a084015274010000000000000000000000000000000000000000900490921660c08201529086141580610874575080602001518514155b806108915750806040015164ffffffffff168464ffffffffff1614155b806108ae57508060a0015164ffffffffff168364ffffffffff1614155b806108cb57508060c0015164ffffffffff168264ffffffffff1614155b15610902576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60048054600a554264ffffffffff818116606085810182905243808416608080890182905288519097556020808901516005556040808a01516006805460a0808e015160c08f0151948c167fffffffffffffffffffffffffffffffffffffffffffff000000000000000000009093169290921765010000000000909a02999099177fffffffffffffffffffffffff00000000000000000000ffffffffffffffffffff166a01000000000000000000009096027fffffffffffffffffffffffff0000000000ffffffffffffffffffffffffffffff16959095176f01000000000000000000000000000000958a1695909502949094177fffffffffffffff0000000000ffffffffffffffffffffffffffffffffffffffff167401000000000000000000000000000000000000000091891691909102179092558151958c16865285018d905284018b905290830193909352928101919091527fcc3c3071340d91a4fd687f9ad48d1ee5689f8083136feb3594807d0f7481f7cf910160405180910390a1505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610b0c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610685565b610b14611700565b565b610b1e61177d565b610b2733610ddb565b610b5d576040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600654610b729064ffffffffff16600161246c565b64ffffffffff168364ffffffffff16141580610b9b57508064ffffffffff168264ffffffffff16115b15610bd2576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6040805160e0810182528681526020810186905264ffffffffff8086168284018190524280831660608501819052438085166080870181905289861660a0880181905295891660c090970187905260078d905560088c905560098054740100000000000000000000000000000000000000009098027fffffffffffffff0000000000ffffffffffffffffffffffffffffffffffffffff6f010000000000000000000000000000009098027fffffffffffffffffffffffff0000000000ffffffffffffffffffffffffffffff6a0100000000000000000000909402939093167fffffffffffffffffffffffff00000000000000000000ffffffffffffffffffff650100000000009096027fffffffffffffffffffffffffffffffffffffffffffff00000000000000000000909a1690971798909817939093169490941793909317939093169390931790915591517fb38026cc978f6c2642a5108ee558571a1b01a939b056abcc065b7eabacaf2d9d92610d789287928a928a929164ffffffffff959095168552602085019390935260408401919091526060830152608082015260a00190565b60405180910390a15050505050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526003602052604081205460ff1680610dd5575060005473ffffffffffffffffffffffffffffffffffffffff8381169116145b92915050565b73ffffffffffffffffffffffffffffffffffffffff811660009081526002602052604081205460ff1680610dd557505060005473ffffffffffffffffffffffffffffffffffffffff91821691161490565b60005473ffffffffffffffffffffffffffffffffffffffff163314610ead576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610685565b60005b8251811015610f0857610ef5838281518110610ece57610ece612491565b6020026020010151838381518110610ee857610ee8612491565b6020026020010151611802565b5080610f00816124c0565b915050610eb0565b505050565b60005473ffffffffffffffffffffffffffffffffffffffff163314610f8e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610685565b610b1461182e565b60005b81811015610f0857611121838383818110610fb657610fb6612491565b9050602002810190610fc891906124f8565b610fd6906020810190611f6d565b848484818110610fe857610fe8612491565b9050602002810190610ffa91906124f8565b6020013585858581811061101057611010612491565b905060200281019061102291906124f8565b611033906060810190604001612536565b86868681811061104557611045612491565b905060200281019061105791906124f8565b6060013587878781811061106d5761106d612491565b905060200281019061107f91906124f8565b6080013588888881811061109557611095612491565b90506020028101906110a791906124f8565b6110b59060a0810190612551565b8a8a8a8181106110c7576110c7612491565b90506020028101906110d991906124f8565b6110e79060c08101906125b9565b8080601f01602080910402602001604051908101604052809392919081815260200183838082843760009201919091525061128992505050565b8061112b816124c0565b915050610f99565b60005473ffffffffffffffffffffffffffffffffffffffff1633146111b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610685565b8173ffffffffffffffffffffffffffffffffffffffff8116611202576040517fa86b651200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff831660008181526002602090815260409182902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00168615159081179091558251938452908301527f780d738f356a91be5dfe8ffb87990c655a36b3430a233c71a209eb1e9a1a1a75910161075f565b61129161177d565b3373ffffffffffffffffffffffffffffffffffffffff8916146112e0576040517fbd79de5800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60065464ffffffffff168481148061130c575060008111801561130c575061130960018261261e565b85145b611342576040517f9b8febfe00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600087878b888c8760405160200161135f96959493929190612631565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815282825280516020918201209083015201604051602081830303815290604052805190602001209050611402858580806020026020016040519081016040528093929190818152602001838360200280828437600092019190915250505088851490506113f857600a546113fc565b6004545b8361189d565b611438576040517f09bde33900000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8a166000908152600b602090815260408083208a8452909152812054611473908b61261e565b9050806000036114af576040517f969bf72800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff8b166000908152600b602090815260408083208b845290915290208a905561150d7f00000000000000000000000000000000000000000000000000000000000000008c836118b3565b6040805173ffffffffffffffffffffffffffffffffffffffff8d1681526020810183905290810188905260ff8a166060820152608081018990524260a08201524360c08201527f309cb1c0dc6ce0f02c0c35cc1f46bbe61ec9deb311d101b87e7d25bd0b647fd79060e00160405180910390a15050505050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff16331461160e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600c60248201527f554e415554484f52495a454400000000000000000000000000000000000000006044820152606401610685565b600080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff83169081178255604051909133917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a350565b60606000858589868a8760405160200161169d96959493929190612631565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0818403018152828252805160208083019190912090840152935001604051602081830303815290604052805190602001209050965096945050505050565b611708611940565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff1690557f5db9ee0a495bf2e6ff9c91a7834c1ba4fdd244a5e8aa4e537bd38aeae4b073aa335b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390a1565b60005474010000000000000000000000000000000000000000900460ff1615610b14576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601060248201527f5061757361626c653a20706175736564000000000000000000000000000000006044820152606401610685565b606061182783836040518060600160405280602781526020016126b7602791396119c4565b9392505050565b61183661177d565b600080547fffffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffff16740100000000000000000000000000000000000000001790557f62e78cea01bee320cd4e420270b5ea74000d11b0c9f74754ebdbfc544b05a2586117533390565b6000826118aa8584611a49565b14949350505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb00000000000000000000000000000000000000000000000000000000179052610f08908490611a96565b60005474010000000000000000000000000000000000000000900460ff16610b14576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f5061757361626c653a206e6f74207061757365640000000000000000000000006044820152606401610685565b60606000808573ffffffffffffffffffffffffffffffffffffffff16856040516119ee9190612687565b600060405180830381855af49150503d8060008114611a29576040519150601f19603f3d011682016040523d82523d6000602084013e611a2e565b606091505b5091509150611a3f86838387611ba2565b9695505050505050565b600081815b8451811015611a8e57611a7a82868381518110611a6d57611a6d612491565b6020026020010151611c4a565b915080611a86816124c0565b915050611a4e565b509392505050565b6000611af8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16611c799092919063ffffffff16565b805190915015610f085780806020019051810190611b169190612699565b610f08576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610685565b60608315611c38578251600003611c315773ffffffffffffffffffffffffffffffffffffffff85163b611c31576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610685565b5081611c42565b611c428383611c88565b949350505050565b6000818310611c66576000828152602084905260409020611827565b6000838152602083905260409020611827565b6060611c428484600085611ccc565b815115611c985781518083602001fd5b806040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106859190611e53565b606082471015611d5e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610685565b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051611d879190612687565b60006040518083038185875af1925050503d8060008114611dc4576040519150601f19603f3d011682016040523d82523d6000602084013e611dc9565b606091505b5091509150611dda87838387611ba2565b979650505050505050565b60005b83811015611e00578181015183820152602001611de8565b50506000910152565b60008151808452611e21816020860160208601611de5565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815260006118276020830184611e09565b803573ffffffffffffffffffffffffffffffffffffffff81168114611e8a57600080fd5b919050565b60008060408385031215611ea257600080fd5b611eab83611e66565b946020939093013593505050565b8015158114611ec757600080fd5b50565b60008060408385031215611edd57600080fd5b611ee683611e66565b91506020830135611ef681611eb9565b809150509250929050565b803564ffffffffff81168114611e8a57600080fd5b600080600080600060a08688031215611f2e57600080fd5b8535945060208601359350611f4560408701611f01565b9250611f5360608701611f01565b9150611f6160808701611f01565b90509295509295909350565b600060208284031215611f7f57600080fd5b61182782611e66565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611ffe57611ffe611f88565b604052919050565b600067ffffffffffffffff82111561202057612020611f88565b5060051b60200190565b600082601f83011261203b57600080fd5b813567ffffffffffffffff81111561205557612055611f88565b61208660207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f84011601611fb7565b81815284602083860101111561209b57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f8301126120c957600080fd5b813560206120de6120d983612006565b611fb7565b82815260059290921b840181019181810190868411156120fd57600080fd5b8286015b8481101561213d57803567ffffffffffffffff8111156121215760008081fd5b61212f8986838b010161202a565b845250918301918301612101565b509695505050505050565b6000806040838503121561215b57600080fd5b823567ffffffffffffffff8082111561217357600080fd5b818501915085601f83011261218757600080fd5b813560206121976120d983612006565b82815260059290921b840181019181810190898411156121b657600080fd5b948201945b838610156121db576121cc86611e66565b825294820194908201906121bb565b965050860135925050808211156121f157600080fd5b506121fe858286016120b8565b9150509250929050565b60008083601f84011261221a57600080fd5b50813567ffffffffffffffff81111561223257600080fd5b6020830191508360208260051b850101111561224d57600080fd5b9250929050565b6000806020838503121561226757600080fd5b823567ffffffffffffffff81111561227e57600080fd5b61228a85828601612208565b90969095509350505050565b803560ff81168114611e8a57600080fd5b60008060008060008060008060e0898b0312156122c357600080fd5b6122cc89611e66565b9750602089013596506122e160408a01612296565b9550606089013594506080890135935060a089013567ffffffffffffffff8082111561230c57600080fd5b6123188c838d01612208565b909550935060c08b013591508082111561233157600080fd5b5061233e8b828c0161202a565b9150509295985092959890939650565b60008060008060008060c0878903121561236757600080fd5b61237087611e66565b95506020870135945061238560408801612296565b9350606087013592506080870135915060a087013567ffffffffffffffff8111156123af57600080fd5b6123bb89828a0161202a565b9150509295509295509295565b6040815260006123db6040830185611e09565b90508260208301529392505050565b600181811c908216806123fe57607f821691505b602082108103612437577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b64ffffffffff81811683821601908082111561248a5761248a61243d565b5092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036124f1576124f161243d565b5060010190565b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff2183360301811261252c57600080fd5b9190910192915050565b60006020828403121561254857600080fd5b61182782612296565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe184360301811261258657600080fd5b83018035915067ffffffffffffffff8211156125a157600080fd5b6020019150600581901b360382131561224d57600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126125ee57600080fd5b83018035915067ffffffffffffffff82111561260957600080fd5b60200191503681900382131561224d57600080fd5b81810381811115610dd557610dd561243d565b60ff8716815285602082015273ffffffffffffffffffffffffffffffffffffffff8516604082015283606082015282608082015260c060a0820152600061267b60c0830184611e09565b98975050505050505050565b6000825161252c818460208701611de5565b6000602082840312156126ab57600080fd5b815161182781611eb956fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a26469706673582212201309a677baa1fb4a73d0e0d224b5c9a119b96b191ad89e8354f6ba3f4fc6eada64736f6c63430008150033",
  "devdoc": {
    "events": {
      "Paused(address)": {
        "details": "Emitted when the pause is triggered by `account`."
      },
      "Unpaused(address)": {
        "details": "Emitted when the pause is lifted by `account`."
      }
    },
    "kind": "dev",
    "methods": {
      "paused()": {
        "details": "Returns true if the contract is paused, and false otherwise."
      },
      "spell(address[],bytes[])": {
        "details": "open payload method for admin to resolve emergency cases"
      },
      "updateApprover(address,bool)": {
        "params": {
          "approver_": "The address to update",
          "isApprover_": "Whether or not the address should be an allowed approver"
        }
      },
      "updateProposer(address,bool)": {
        "params": {
          "isProposer_": "Whether or not the address should be an allowed proposer",
          "proposer_": "The address to update"
        }
      }
    },
    "version": 1
  },
  "userdoc": {
    "events": {
      "LogClaimed(address,uint256,uint256,uint8,bytes32,uint256,uint256)": {
        "notice": "Emitted when a `user` claims `amount` via a valid merkle proof"
      },
      "LogRootProposed(uint256,bytes32,bytes32,uint256,uint256)": {
        "notice": "Emitted when a new cycle root hash is proposed"
      },
      "LogRootUpdated(uint256,bytes32,bytes32,uint256,uint256)": {
        "notice": "Emitted when a new cycle root hash is approved by the owner and becomes the new active root"
      },
      "LogUpdateApprover(address,bool)": {
        "notice": "Emitted when an address is added or removed from the allowed approvers"
      },
      "LogUpdateProposer(address,bool)": {
        "notice": "Emitted when an address is added or removed from the allowed proposers"
      }
    },
    "kind": "user",
    "methods": {
      "approveRoot(bytes32,bytes32,uint40,uint40,uint40)": {
        "notice": "Approve the current pending root and content hash"
      },
      "claimed(address,bytes32)": {
        "notice": "total claimed amount per user address and fToken. user => positionId => claimed amount"
      },
      "currentMerkleCycle()": {
        "notice": "merkle root data related to current cycle (proposed and approved)."
      },
      "hasPendingRoot()": {
        "notice": "checks if there is a proposed root waiting to be approved"
      },
      "isApprover(address)": {
        "notice": "checks if the `approver_` is an allowed root approver"
      },
      "isProposer(address)": {
        "notice": "checks if the `proposer_` is an allowed root proposer"
      },
      "pause()": {
        "notice": "Pause contract functionality of new roots and claiming"
      },
      "pendingMerkleCycle()": {
        "notice": "merkle root data related to pending cycle (proposed but not yet approved)."
      },
      "previousMerkleRoot()": {
        "notice": "merkle root of the previous cycle"
      },
      "proposeRoot(bytes32,bytes32,uint40,uint40,uint40)": {
        "notice": "Propose a new root and content hash, which will be stored as pending until approved"
      },
      "unpause()": {
        "notice": "Unpause contract functionality of new roots and claiming"
      },
      "updateApprover(address,bool)": {
        "notice": "Updates an address status as a root approver"
      },
      "updateProposer(address,bool)": {
        "notice": "Updates an address status as a root proposer"
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 59460,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 185,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "_paused",
        "offset": 20,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 36604,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "name",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 36609,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "_proposers",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 36614,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "_approvers",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_bool)"
      },
      {
        "astId": 36618,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "_currentMerkleCycle",
        "offset": 0,
        "slot": "4",
        "type": "t_struct(MerkleCycle)36566_storage"
      },
      {
        "astId": 36622,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "_pendingMerkleCycle",
        "offset": 0,
        "slot": "7",
        "type": "t_struct(MerkleCycle)36566_storage"
      },
      {
        "astId": 36625,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "previousMerkleRoot",
        "offset": 0,
        "slot": "10",
        "type": "t_bytes32"
      },
      {
        "astId": 36632,
        "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
        "label": "claimed",
        "offset": 0,
        "slot": "11",
        "type": "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_bytes32,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(bytes32 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_bytes32,t_uint256)"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(MerkleCycle)36566_storage": {
        "encoding": "inplace",
        "label": "struct Structs.MerkleCycle",
        "members": [
          {
            "astId": 36553,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "merkleRoot",
            "offset": 0,
            "slot": "0",
            "type": "t_bytes32"
          },
          {
            "astId": 36555,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "merkleContentHash",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          },
          {
            "astId": 36557,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "cycle",
            "offset": 0,
            "slot": "2",
            "type": "t_uint40"
          },
          {
            "astId": 36559,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "timestamp",
            "offset": 5,
            "slot": "2",
            "type": "t_uint40"
          },
          {
            "astId": 36561,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "publishBlock",
            "offset": 10,
            "slot": "2",
            "type": "t_uint40"
          },
          {
            "astId": 36563,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "startBlock",
            "offset": 15,
            "slot": "2",
            "type": "t_uint40"
          },
          {
            "astId": 36565,
            "contract": "contracts/protocols/lending/merkleDistributor/main.sol:FluidMerkleDistributor",
            "label": "endBlock",
            "offset": 20,
            "slot": "2",
            "type": "t_uint40"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint40": {
        "encoding": "inplace",
        "label": "uint40",
        "numberOfBytes": "5"
      }
    }
  }
}